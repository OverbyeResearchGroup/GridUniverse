/* Generated code for Python module 'aiohttp.web_exceptions'
 * created by Nuitka version 0.7.3
 *
 * This code is in part copyright 2021 Kay Hayen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nuitka/prelude.h"

#include "nuitka/unfreezing.h"

#include "__helpers.h"

/* The "module_aiohttp$web_exceptions" is a Python object pointer of module type.
 *
 * Note: For full compatibility with CPython, every module variable access
 * needs to go through it except for cases where the module cannot possibly
 * have changed in the mean time.
 */

PyObject *module_aiohttp$web_exceptions;
PyDictObject *moduledict_aiohttp$web_exceptions;

/* The declarations of module constants used, if any. */
static PyObject *mod_consts[206];
#ifndef __NUITKA_NO_ASSERT__
static Py_hash_t mod_consts_hash[206];
#endif

static PyObject *module_filename_obj = NULL;

/* Indicator if this modules private constants were created yet. */
static bool constants_created = false;

/* Function to create module private constants. */
static void createModuleConstants(void) {
    if (constants_created == false) {
        loadConstantsBlob(&mod_consts[0], UNTRANSLATE("aiohttp.web_exceptions"));
        constants_created = true;

#ifndef __NUITKA_NO_ASSERT__
        for(int i = 0; i < 206; i++) {
            mod_consts_hash[i] = DEEP_HASH(mod_consts[i]);
        }
#endif
    }
}

// We want to be able to initialize the "__main__" constants in any case.
#if 0
void createMainModuleConstants(void) {
    createModuleConstants();
}
#endif

/* Function to verify module private constants for non-corruption. */
#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_aiohttp$web_exceptions(void) {
    // The module may not have been used at all, then ignore this.
    if (constants_created == false) return;

    for(int i = 0; i < 206; i++) {
        assert(mod_consts_hash[i] == DEEP_HASH(mod_consts[i]));
        CHECK_OBJECT_DEEP(mod_consts[i]);
    }
}
#endif

// The module code objects.
static PyCodeObject *codeobj_4cc4ce6283075c7e22e7df36f495c03e;
static PyCodeObject *codeobj_10553aca1b0baa9d6fe22af4cd7eda67;
static PyCodeObject *codeobj_ca6df3e14563b007807148668134a6e3;
static PyCodeObject *codeobj_b808cbf6ef3af6bdee26d60d49d98fe9;
static PyCodeObject *codeobj_b3e20ebc481aefb7887320a4b7e86857;
static PyCodeObject *codeobj_272e0c92cba6f37a767cf6fb362468c0;
static PyCodeObject *codeobj_80217f53360cd5c56c7f38707ef87428;
static PyCodeObject *codeobj_c4a26f5fe9959d9818187a46bdfb5bad;
static PyCodeObject *codeobj_b9359806fd69eb34ab65f4475b632b3b;
static PyCodeObject *codeobj_b8b1950400aaf4510ee2d2ee8e8ca436;
static PyCodeObject *codeobj_181f49a2cef869dc2fa564051fc94c90;
static PyCodeObject *codeobj_fad791a764dc605ee6ecfa957aacc083;
static PyCodeObject *codeobj_225ebbd64dcf77cc25245db7a78a0798;
static PyCodeObject *codeobj_3d7b12a82ae59edea9bc637972ca445a;
static PyCodeObject *codeobj_43334e89c6d959f581e7f84ba15d7213;
static PyCodeObject *codeobj_de2bddd7e35a811b3091eb861bb3130e;
static PyCodeObject *codeobj_2e3ec85c770b6095e5b520d4af534846;
static PyCodeObject *codeobj_01fcbdf2f4502716019041a2a602baba;
static PyCodeObject *codeobj_c65f0b71934d64e244a59bc45ea34528;
static PyCodeObject *codeobj_e0612cdca98a9eeb4c5daf89b6b9d70a;
static PyCodeObject *codeobj_40a2aafd85dbb744639560e9d429f0b3;
static PyCodeObject *codeobj_3333be612be9b91290a6820617d3aff9;
static PyCodeObject *codeobj_4cb3b9a2c3afe1b42b3f310e2b86ac47;
static PyCodeObject *codeobj_0793e14ad2280948d27cc37307622bef;
static PyCodeObject *codeobj_9aa37884b5c621e87e0f0ba3fd314cbc;
static PyCodeObject *codeobj_bddc09fead8ce6f71a6830ba5da102b2;
static PyCodeObject *codeobj_c9a228b4216d2a6a7d61ecb3f7098702;
static PyCodeObject *codeobj_af43bceb6f688d49590950019f7fbcda;
static PyCodeObject *codeobj_74b4e629fc5f2c812af1ae5f6716af8e;
static PyCodeObject *codeobj_ffb3a9d961fd2f41fbb1a5f6b70ad010;
static PyCodeObject *codeobj_505fdc7799db46a65af4a0df2e063cea;
static PyCodeObject *codeobj_d9d75d15b1dec25cbf3f516a4adba3a7;
static PyCodeObject *codeobj_e51cc26c7b2ac1910ca557fda89970b0;
static PyCodeObject *codeobj_6012f98e075057dbf8f05f7da0e41c76;
static PyCodeObject *codeobj_5c97ef15107b228a5dc1a4e78aa80612;
static PyCodeObject *codeobj_15a6f6e6299c3b077a96876bf02a4c05;
static PyCodeObject *codeobj_fe9477504f315378ef668bd520edff9f;
static PyCodeObject *codeobj_a9c95723eb0c85289c3d8f02ca34f1a9;
static PyCodeObject *codeobj_865ef81c8777678d1d66964a3cdf063c;
static PyCodeObject *codeobj_01261c52d8188d40d0a4e5d8b40ac498;
static PyCodeObject *codeobj_75d3281b65ea0c378ef76e6ee9f1344e;
static PyCodeObject *codeobj_c9eeeb2528898d4f0d2226f2150e7100;
static PyCodeObject *codeobj_a1c4d66701877ec2f64023dbbfae569e;
static PyCodeObject *codeobj_30d1733a30c16574e3f49de3c14624a1;
static PyCodeObject *codeobj_08772f8718f00154fa2a03650fa59b0f;
static PyCodeObject *codeobj_896f721b3cdd968a04613eb95bac246a;
static PyCodeObject *codeobj_5aef0c65e990ae5a2e475e7167364ce1;
static PyCodeObject *codeobj_42436eb2d657bbc44709221a8551bf5b;
static PyCodeObject *codeobj_2af87b89d09c5805b18af331cdb15cbf;
static PyCodeObject *codeobj_bef66d9d272a1b169590545e494b1c63;
static PyCodeObject *codeobj_59c8aa990f11ff133b6bd6c60f3d66ff;
static PyCodeObject *codeobj_7feecd1d433f004b2b75d7760af86b01;
static PyCodeObject *codeobj_e5b444f618430b69c6774bc55db0cf9a;
static PyCodeObject *codeobj_d722b1eaa4a23b797a931284584d8257;
static PyCodeObject *codeobj_3012dc4e4b6ab93cc05f0db6757c4eb1;
static PyCodeObject *codeobj_57711ddcfe31d729de1164a5616054be;
static PyCodeObject *codeobj_1a6f4f0c9fa04b4935c1209cc1d7e7b0;
static PyCodeObject *codeobj_7f1d7313dfb49e18519020daa8c06608;
static PyCodeObject *codeobj_5041c2cd922023130a954d422a678536;
static PyCodeObject *codeobj_b80d7e69594275f3dadf950b93d812a2;

static void createModuleCodeObjects(void) {
    module_filename_obj = MAKE_RELATIVE_PATH(mod_consts[197]); CHECK_OBJECT(module_filename_obj);
    codeobj_4cc4ce6283075c7e22e7df36f495c03e = MAKE_CODEOBJECT(module_filename_obj, 1, CO_NOFREE, mod_consts[198], NULL, NULL, 0, 0, 0);
    codeobj_10553aca1b0baa9d6fe22af4cd7eda67 = MAKE_CODEOBJECT(module_filename_obj, 136, CO_NOFREE, mod_consts[88], mod_consts[199], NULL, 0, 0, 0);
    codeobj_ca6df3e14563b007807148668134a6e3 = MAKE_CODEOBJECT(module_filename_obj, 412, CO_NOFREE, mod_consts[181], mod_consts[199], NULL, 0, 0, 0);
    codeobj_b808cbf6ef3af6bdee26d60d49d98fe9 = MAKE_CODEOBJECT(module_filename_obj, 233, CO_NOFREE, mod_consts[117], mod_consts[199], NULL, 0, 0, 0);
    codeobj_b3e20ebc481aefb7887320a4b7e86857 = MAKE_CODEOBJECT(module_filename_obj, 292, CO_NOFREE, mod_consts[136], mod_consts[199], NULL, 0, 0, 0);
    codeobj_272e0c92cba6f37a767cf6fb362468c0 = MAKE_CODEOBJECT(module_filename_obj, 132, CO_NOFREE, mod_consts[86], mod_consts[199], NULL, 0, 0, 0);
    codeobj_80217f53360cd5c56c7f38707ef87428 = MAKE_CODEOBJECT(module_filename_obj, 75, CO_NOFREE, mod_consts[59], mod_consts[199], NULL, 0, 0, 0);
    codeobj_c4a26f5fe9959d9818187a46bdfb5bad = MAKE_CODEOBJECT(module_filename_obj, 332, CO_NOFREE, mod_consts[157], mod_consts[199], NULL, 0, 0, 0);
    codeobj_b9359806fd69eb34ab65f4475b632b3b = MAKE_CODEOBJECT(module_filename_obj, 344, CO_NOFREE, mod_consts[163], mod_consts[199], NULL, 0, 0, 0);
    codeobj_b8b1950400aaf4510ee2d2ee8e8ca436 = MAKE_CODEOBJECT(module_filename_obj, 245, CO_NOFREE, mod_consts[123], mod_consts[199], NULL, 0, 0, 0);
    codeobj_181f49a2cef869dc2fa564051fc94c90 = MAKE_CODEOBJECT(module_filename_obj, 195, CO_NOFREE, mod_consts[104], mod_consts[199], NULL, 0, 0, 0);
    codeobj_fad791a764dc605ee6ecfa957aacc083 = MAKE_CODEOBJECT(module_filename_obj, 420, CO_NOFREE, mod_consts[185], mod_consts[199], NULL, 0, 0, 0);
    codeobj_225ebbd64dcf77cc25245db7a78a0798 = MAKE_CODEOBJECT(module_filename_obj, 296, CO_NOFREE, mod_consts[138], mod_consts[199], NULL, 0, 0, 0);
    codeobj_3d7b12a82ae59edea9bc637972ca445a = MAKE_CODEOBJECT(module_filename_obj, 432, CO_NOFREE, mod_consts[191], mod_consts[199], NULL, 0, 0, 0);
    codeobj_43334e89c6d959f581e7f84ba15d7213 = MAKE_CODEOBJECT(module_filename_obj, 404, CO_NOFREE, mod_consts[177], mod_consts[199], NULL, 0, 0, 0);
    codeobj_de2bddd7e35a811b3091eb861bb3130e = MAKE_CODEOBJECT(module_filename_obj, 300, CO_NOFREE, mod_consts[140], mod_consts[199], NULL, 0, 0, 0);
    codeobj_2e3ec85c770b6095e5b520d4af534846 = MAKE_CODEOBJECT(module_filename_obj, 253, CO_NOFREE, mod_consts[127], mod_consts[199], NULL, 0, 0, 0);
    codeobj_01fcbdf2f4502716019041a2a602baba = MAKE_CODEOBJECT(module_filename_obj, 336, CO_NOFREE, mod_consts[159], mod_consts[199], NULL, 0, 0, 0);
    codeobj_c65f0b71934d64e244a59bc45ea34528 = MAKE_CODEOBJECT(module_filename_obj, 191, CO_NOFREE, mod_consts[102], mod_consts[199], NULL, 0, 0, 0);
    codeobj_e0612cdca98a9eeb4c5daf89b6b9d70a = MAKE_CODEOBJECT(module_filename_obj, 187, CO_NOFREE, mod_consts[100], mod_consts[199], NULL, 0, 0, 0);
    codeobj_40a2aafd85dbb744639560e9d429f0b3 = MAKE_CODEOBJECT(module_filename_obj, 440, CO_NOFREE, mod_consts[195], mod_consts[199], NULL, 0, 0, 0);
    codeobj_3333be612be9b91290a6820617d3aff9 = MAKE_CODEOBJECT(module_filename_obj, 144, CO_NOFREE, mod_consts[92], mod_consts[199], NULL, 0, 0, 0);
    codeobj_4cb3b9a2c3afe1b42b3f310e2b86ac47 = MAKE_CODEOBJECT(module_filename_obj, 140, CO_NOFREE, mod_consts[90], mod_consts[199], NULL, 0, 0, 0);
    codeobj_0793e14ad2280948d27cc37307622bef = MAKE_CODEOBJECT(module_filename_obj, 280, CO_NOFREE, mod_consts[130], mod_consts[199], NULL, 0, 0, 0);
    codeobj_9aa37884b5c621e87e0f0ba3fd314cbc = MAKE_CODEOBJECT(module_filename_obj, 436, CO_NOFREE, mod_consts[193], mod_consts[199], NULL, 0, 0, 0);
    codeobj_bddc09fead8ce6f71a6830ba5da102b2 = MAKE_CODEOBJECT(module_filename_obj, 249, CO_NOFREE, mod_consts[125], mod_consts[199], NULL, 0, 0, 0);
    codeobj_c9a228b4216d2a6a7d61ecb3f7098702 = MAKE_CODEOBJECT(module_filename_obj, 408, CO_NOFREE, mod_consts[179], mod_consts[199], NULL, 0, 0, 0);
    codeobj_af43bceb6f688d49590950019f7fbcda = MAKE_CODEOBJECT(module_filename_obj, 205, CO_NOFREE, mod_consts[108], mod_consts[199], NULL, 0, 0, 0);
    codeobj_74b4e629fc5f2c812af1ae5f6716af8e = MAKE_CODEOBJECT(module_filename_obj, 128, CO_NOFREE, mod_consts[84], mod_consts[199], NULL, 0, 0, 0);
    codeobj_ffb3a9d961fd2f41fbb1a5f6b70ad010 = MAKE_CODEOBJECT(module_filename_obj, 154, CO_NOFREE, mod_consts[96], mod_consts[199], NULL, 0, 0, 0);
    codeobj_505fdc7799db46a65af4a0df2e063cea = MAKE_CODEOBJECT(module_filename_obj, 241, CO_NOFREE, mod_consts[121], mod_consts[199], NULL, 0, 0, 0);
    codeobj_d9d75d15b1dec25cbf3f516a4adba3a7 = MAKE_CODEOBJECT(module_filename_obj, 220, CO_NOFREE, mod_consts[114], mod_consts[199], NULL, 0, 0, 0);
    codeobj_e51cc26c7b2ac1910ca557fda89970b0 = MAKE_CODEOBJECT(module_filename_obj, 304, CO_NOFREE, mod_consts[142], mod_consts[199], NULL, 0, 0, 0);
    codeobj_6012f98e075057dbf8f05f7da0e41c76 = MAKE_CODEOBJECT(module_filename_obj, 352, CO_NOFREE, mod_consts[167], mod_consts[199], NULL, 0, 0, 0);
    codeobj_5c97ef15107b228a5dc1a4e78aa80612 = MAKE_CODEOBJECT(module_filename_obj, 284, CO_NOFREE, mod_consts[132], mod_consts[199], NULL, 0, 0, 0);
    codeobj_15a6f6e6299c3b077a96876bf02a4c05 = MAKE_CODEOBJECT(module_filename_obj, 308, CO_NOFREE, mod_consts[144], mod_consts[199], NULL, 0, 0, 0);
    codeobj_fe9477504f315378ef668bd520edff9f = MAKE_CODEOBJECT(module_filename_obj, 360, CO_NOFREE, mod_consts[171], mod_consts[199], NULL, 0, 0, 0);
    codeobj_a9c95723eb0c85289c3d8f02ca34f1a9 = MAKE_CODEOBJECT(module_filename_obj, 328, CO_NOFREE, mod_consts[155], mod_consts[199], NULL, 0, 0, 0);
    codeobj_865ef81c8777678d1d66964a3cdf063c = MAKE_CODEOBJECT(module_filename_obj, 288, CO_NOFREE, mod_consts[134], mod_consts[199], NULL, 0, 0, 0);
    codeobj_01261c52d8188d40d0a4e5d8b40ac498 = MAKE_CODEOBJECT(module_filename_obj, 320, CO_NOFREE, mod_consts[151], mod_consts[199], NULL, 0, 0, 0);
    codeobj_75d3281b65ea0c378ef76e6ee9f1344e = MAKE_CODEOBJECT(module_filename_obj, 149, CO_NOFREE, mod_consts[94], mod_consts[199], NULL, 0, 0, 0);
    codeobj_c9eeeb2528898d4f0d2226f2150e7100 = MAKE_CODEOBJECT(module_filename_obj, 201, CO_NOFREE, mod_consts[106], mod_consts[199], NULL, 0, 0, 0);
    codeobj_a1c4d66701877ec2f64023dbbfae569e = MAKE_CODEOBJECT(module_filename_obj, 416, CO_NOFREE, mod_consts[183], mod_consts[199], NULL, 0, 0, 0);
    codeobj_30d1733a30c16574e3f49de3c14624a1 = MAKE_CODEOBJECT(module_filename_obj, 216, CO_NOFREE, mod_consts[112], mod_consts[199], NULL, 0, 0, 0);
    codeobj_08772f8718f00154fa2a03650fa59b0f = MAKE_CODEOBJECT(module_filename_obj, 356, CO_NOFREE, mod_consts[169], mod_consts[199], NULL, 0, 0, 0);
    codeobj_896f721b3cdd968a04613eb95bac246a = MAKE_CODEOBJECT(module_filename_obj, 237, CO_NOFREE, mod_consts[119], mod_consts[199], NULL, 0, 0, 0);
    codeobj_5aef0c65e990ae5a2e475e7167364ce1 = MAKE_CODEOBJECT(module_filename_obj, 364, CO_NOFREE, mod_consts[173], mod_consts[199], NULL, 0, 0, 0);
    codeobj_42436eb2d657bbc44709221a8551bf5b = MAKE_CODEOBJECT(module_filename_obj, 340, CO_NOFREE, mod_consts[161], mod_consts[199], NULL, 0, 0, 0);
    codeobj_2af87b89d09c5805b18af331cdb15cbf = MAKE_CODEOBJECT(module_filename_obj, 324, CO_NOFREE, mod_consts[153], mod_consts[199], NULL, 0, 0, 0);
    codeobj_bef66d9d272a1b169590545e494b1c63 = MAKE_CODEOBJECT(module_filename_obj, 348, CO_NOFREE, mod_consts[165], mod_consts[199], NULL, 0, 0, 0);
    codeobj_59c8aa990f11ff133b6bd6c60f3d66ff = MAKE_CODEOBJECT(module_filename_obj, 211, CO_NOFREE, mod_consts[110], mod_consts[199], NULL, 0, 0, 0);
    codeobj_7feecd1d433f004b2b75d7760af86b01 = MAKE_CODEOBJECT(module_filename_obj, 428, CO_NOFREE, mod_consts[189], mod_consts[199], NULL, 0, 0, 0);
    codeobj_e5b444f618430b69c6774bc55db0cf9a = MAKE_CODEOBJECT(module_filename_obj, 424, CO_NOFREE, mod_consts[187], mod_consts[199], NULL, 0, 0, 0);
    codeobj_d722b1eaa4a23b797a931284584d8257 = MAKE_CODEOBJECT(module_filename_obj, 163, CO_NOFREE, mod_consts[98], mod_consts[199], NULL, 0, 0, 0);
    codeobj_3012dc4e4b6ab93cc05f0db6757c4eb1 = MAKE_CODEOBJECT(module_filename_obj, 112, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[75], mod_consts[200], NULL, 1, 0, 0);
    codeobj_57711ddcfe31d729de1164a5616054be = MAKE_CODEOBJECT(module_filename_obj, 85, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[5], mod_consts[201], NULL, 1, 5, 0);
    codeobj_1a6f4f0c9fa04b4935c1209cc1d7e7b0 = MAKE_CODEOBJECT(module_filename_obj, 367, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[5], mod_consts[202], mod_consts[199], 2, 5, 0);
    codeobj_7f1d7313dfb49e18519020daa8c06608 = MAKE_CODEOBJECT(module_filename_obj, 164, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[5], mod_consts[203], mod_consts[199], 2, 5, 0);
    codeobj_5041c2cd922023130a954d422a678536 = MAKE_CODEOBJECT(module_filename_obj, 311, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS, mod_consts[5], mod_consts[204], mod_consts[199], 3, 0, 0);
    codeobj_b80d7e69594275f3dadf950b93d812a2 = MAKE_CODEOBJECT(module_filename_obj, 256, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[5], mod_consts[205], mod_consts[199], 3, 5, 0);
}

// The module function declarations.
NUITKA_CROSS_MODULE PyObject *impl___main__$$$function__1__mro_entries_conversion(PyObject **python_pars);


NUITKA_CROSS_MODULE PyObject *impl___main__$$$function__6_complex_call_helper_star_dict(PyObject **python_pars);


static PyObject *MAKE_FUNCTION_aiohttp$web_exceptions$$$function__1___init__(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_aiohttp$web_exceptions$$$function__2___bool__(PyObject *annotations);


static PyObject *MAKE_FUNCTION_aiohttp$web_exceptions$$$function__3___init__(PyObject *kw_defaults, PyObject *annotations, struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_aiohttp$web_exceptions$$$function__4___init__(PyObject *kw_defaults, PyObject *annotations, struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_aiohttp$web_exceptions$$$function__5___init__(PyObject *annotations, struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_aiohttp$web_exceptions$$$function__6___init__(PyObject *kw_defaults, PyObject *annotations, struct Nuitka_CellObject **closure);


// The module function definitions.
static PyObject *impl_aiohttp$web_exceptions$$$function__1___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_headers = python_pars[1];
    PyObject *par_reason = python_pars[2];
    PyObject *par_body = python_pars[3];
    PyObject *par_text = python_pars[4];
    PyObject *par_content_type = python_pars[5];
    struct Nuitka_FrameObject *frame_57711ddcfe31d729de1164a5616054be;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_57711ddcfe31d729de1164a5616054be = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_57711ddcfe31d729de1164a5616054be)) {
        Py_XDECREF(cache_frame_57711ddcfe31d729de1164a5616054be);

#if _DEBUG_REFCOUNTS
        if (cache_frame_57711ddcfe31d729de1164a5616054be == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_57711ddcfe31d729de1164a5616054be = MAKE_FUNCTION_FRAME(codeobj_57711ddcfe31d729de1164a5616054be, module_aiohttp$web_exceptions, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_57711ddcfe31d729de1164a5616054be->m_type_description == NULL);
    frame_57711ddcfe31d729de1164a5616054be = cache_frame_57711ddcfe31d729de1164a5616054be;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_57711ddcfe31d729de1164a5616054be);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_57711ddcfe31d729de1164a5616054be) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_body);
        tmp_cmp_expr_left_1 = par_body;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[0]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[1]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[2];
        tmp_args_element_value_2 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[3]);

        if (unlikely(tmp_args_element_value_2 == NULL)) {
            tmp_args_element_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[3]);
        }

        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 97;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_57711ddcfe31d729de1164a5616054be->m_frame.f_lineno = 95;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    branch_no_1:;
    {
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_call_result_2;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_kw_call_dict_value_0_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_kw_call_dict_value_1_1;
        PyObject *tmp_kw_call_dict_value_2_1;
        PyObject *tmp_kw_call_dict_value_3_1;
        PyObject *tmp_kw_call_dict_value_4_1;
        PyObject *tmp_kw_call_dict_value_5_1;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[4]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[4]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[5]);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_kw_call_arg_value_0_1 = par_self;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_kw_call_dict_value_0_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[6]);
        if (tmp_kw_call_dict_value_0_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 101;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_headers);
        tmp_kw_call_dict_value_1_1 = par_headers;
        CHECK_OBJECT(par_reason);
        tmp_kw_call_dict_value_2_1 = par_reason;
        CHECK_OBJECT(par_body);
        tmp_kw_call_dict_value_3_1 = par_body;
        CHECK_OBJECT(par_text);
        tmp_kw_call_dict_value_4_1 = par_text;
        CHECK_OBJECT(par_content_type);
        tmp_kw_call_dict_value_5_1 = par_content_type;
        frame_57711ddcfe31d729de1164a5616054be->m_frame.f_lineno = 99;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1};
            PyObject *kw_values[6] = {tmp_kw_call_dict_value_0_1, tmp_kw_call_dict_value_1_1, tmp_kw_call_dict_value_2_1, tmp_kw_call_dict_value_3_1, tmp_kw_call_dict_value_4_1, tmp_kw_call_dict_value_5_1};
            tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_value_2, args, kw_values, mod_consts[7]);
        }

        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_kw_call_dict_value_0_1);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    {
        PyObject *tmp_called_value_3;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_expression_value_5;
        tmp_expression_value_4 = PyExc_Exception;
        tmp_called_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[5]);
        assert(!(tmp_called_value_3 == NULL));
        CHECK_OBJECT(par_self);
        tmp_args_element_value_3 = par_self;
        CHECK_OBJECT(par_self);
        tmp_expression_value_5 = par_self;
        tmp_args_element_value_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[8]);
        if (tmp_args_element_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_3);

            exception_lineno = 108;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_57711ddcfe31d729de1164a5616054be->m_frame.f_lineno = 108;
        {
            PyObject *call_args[] = {tmp_args_element_value_3, tmp_args_element_value_4};
            tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_3, call_args);
        }

        Py_DECREF(tmp_called_value_3);
        Py_DECREF(tmp_args_element_value_4);
        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 108;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_3);
    }
    {
        bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        bool tmp_and_left_value_1;
        bool tmp_and_right_value_1;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_expression_value_7;
        CHECK_OBJECT(par_self);
        tmp_expression_value_6 = par_self;
        tmp_cmp_expr_left_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[9]);
        if (tmp_cmp_expr_left_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 109;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_2 = Py_None;
        tmp_and_left_value_1 = (tmp_cmp_expr_left_2 == tmp_cmp_expr_right_2) ? true : false;
        Py_DECREF(tmp_cmp_expr_left_2);
        tmp_and_left_truth_1 = tmp_and_left_value_1 != false ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(par_self);
        tmp_expression_value_7 = par_self;
        tmp_operand_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[10]);
        if (tmp_operand_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 109;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 109;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res == 0) ? true : false;
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_string_concat_values_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_format_value_1;
        PyObject *tmp_expression_value_8;
        PyObject *tmp_format_spec_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_8 = par_self;
        tmp_format_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_8, mod_consts[11]);
        if (tmp_format_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_format_spec_1 = mod_consts[12];
        tmp_tuple_element_1 = BUILTIN_FORMAT(tmp_format_value_1, tmp_format_spec_1);
        Py_DECREF(tmp_format_value_1);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_string_concat_values_1 = PyTuple_New(3);
        {
            PyObject *tmp_format_value_2;
            PyObject *tmp_expression_value_9;
            PyObject *tmp_format_spec_2;
            PyTuple_SET_ITEM(tmp_string_concat_values_1, 0, tmp_tuple_element_1);
            tmp_tuple_element_1 = mod_consts[13];
            PyTuple_SET_ITEM0(tmp_string_concat_values_1, 1, tmp_tuple_element_1);
            CHECK_OBJECT(par_self);
            tmp_expression_value_9 = par_self;
            tmp_format_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_9, mod_consts[8]);
            if (tmp_format_value_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 110;
                type_description_1 = "oooooo";
                goto tuple_build_exception_1;
            }
            tmp_format_spec_2 = mod_consts[12];
            tmp_tuple_element_1 = BUILTIN_FORMAT(tmp_format_value_2, tmp_format_spec_2);
            Py_DECREF(tmp_format_value_2);
            if (tmp_tuple_element_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 110;
                type_description_1 = "oooooo";
                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_string_concat_values_1, 2, tmp_tuple_element_1);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_string_concat_values_1);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_assattr_value_1 = PyUnicode_Join(mod_consts[12], tmp_string_concat_values_1);
        Py_DECREF(tmp_string_concat_values_1);
        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[14], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
    }
    branch_no_2:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_57711ddcfe31d729de1164a5616054be);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_57711ddcfe31d729de1164a5616054be);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_57711ddcfe31d729de1164a5616054be, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_57711ddcfe31d729de1164a5616054be->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_57711ddcfe31d729de1164a5616054be, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_57711ddcfe31d729de1164a5616054be,
        type_description_1,
        par_self,
        par_headers,
        par_reason,
        par_body,
        par_text,
        par_content_type
    );


    // Release cached frame if used for exception.
    if (frame_57711ddcfe31d729de1164a5616054be == cache_frame_57711ddcfe31d729de1164a5616054be) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_57711ddcfe31d729de1164a5616054be);
        cache_frame_57711ddcfe31d729de1164a5616054be = NULL;
    }

    assertFrameObject(frame_57711ddcfe31d729de1164a5616054be);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_headers);
    Py_DECREF(par_headers);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);
    CHECK_OBJECT(par_body);
    Py_DECREF(par_body);
    CHECK_OBJECT(par_text);
    Py_DECREF(par_text);
    CHECK_OBJECT(par_content_type);
    Py_DECREF(par_content_type);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_headers);
    Py_DECREF(par_headers);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);
    CHECK_OBJECT(par_body);
    Py_DECREF(par_body);
    CHECK_OBJECT(par_text);
    Py_DECREF(par_text);
    CHECK_OBJECT(par_content_type);
    Py_DECREF(par_content_type);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_aiohttp$web_exceptions$$$function__3___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_location = python_pars[1];
    PyObject *par_headers = python_pars[2];
    PyObject *par_reason = python_pars[3];
    PyObject *par_body = python_pars[4];
    PyObject *par_text = python_pars[5];
    PyObject *par_content_type = python_pars[6];
    struct Nuitka_FrameObject *frame_7f1d7313dfb49e18519020daa8c06608;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_7f1d7313dfb49e18519020daa8c06608 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_7f1d7313dfb49e18519020daa8c06608)) {
        Py_XDECREF(cache_frame_7f1d7313dfb49e18519020daa8c06608);

#if _DEBUG_REFCOUNTS
        if (cache_frame_7f1d7313dfb49e18519020daa8c06608 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_7f1d7313dfb49e18519020daa8c06608 = MAKE_FUNCTION_FRAME(codeobj_7f1d7313dfb49e18519020daa8c06608, module_aiohttp$web_exceptions, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_7f1d7313dfb49e18519020daa8c06608->m_type_description == NULL);
    frame_7f1d7313dfb49e18519020daa8c06608 = cache_frame_7f1d7313dfb49e18519020daa8c06608;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_7f1d7313dfb49e18519020daa8c06608);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_7f1d7313dfb49e18519020daa8c06608) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_operand_value_1;
        CHECK_OBJECT(par_location);
        tmp_operand_value_1 = par_location;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 174;
            type_description_1 = "oooooooc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_make_exception_arg_1;
        tmp_make_exception_arg_1 = mod_consts[15];
        frame_7f1d7313dfb49e18519020daa8c06608->m_frame.f_lineno = 175;
        tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_ValueError, tmp_make_exception_arg_1);
        assert(!(tmp_raise_type_1 == NULL));
        exception_type = tmp_raise_type_1;
        exception_lineno = 175;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooooooc";
        goto frame_exception_exit_1;
    }
    branch_no_1:;
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_kw_call_value_0_1;
        PyObject *tmp_kw_call_value_1_1;
        PyObject *tmp_kw_call_value_2_1;
        PyObject *tmp_kw_call_value_3_1;
        PyObject *tmp_kw_call_value_4_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[16]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 176;
            type_description_1 = "oooooooc";
            goto frame_exception_exit_1;
        }

        tmp_type_arg_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_expression_value_1 = BUILTIN_SUPER0(tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 176;
            type_description_1 = "oooooooc";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[5]);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 176;
            type_description_1 = "oooooooc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_headers);
        tmp_kw_call_value_0_1 = par_headers;
        CHECK_OBJECT(par_reason);
        tmp_kw_call_value_1_1 = par_reason;
        CHECK_OBJECT(par_body);
        tmp_kw_call_value_2_1 = par_body;
        CHECK_OBJECT(par_text);
        tmp_kw_call_value_3_1 = par_text;
        CHECK_OBJECT(par_content_type);
        tmp_kw_call_value_4_1 = par_content_type;
        frame_7f1d7313dfb49e18519020daa8c06608->m_frame.f_lineno = 176;
        {
            PyObject *kw_values[5] = {tmp_kw_call_value_0_1, tmp_kw_call_value_1_1, tmp_kw_call_value_2_1, tmp_kw_call_value_3_1, tmp_kw_call_value_4_1};

            tmp_call_result_1 = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tmp_called_value_1, kw_values, mod_consts[17]);
        }

        Py_DECREF(tmp_called_value_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 176;
            type_description_1 = "oooooooc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_unicode_arg_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_ass_subscript_1;
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[18]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[18]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 183;
            type_description_1 = "oooooooc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_location);
        tmp_args_element_value_1 = par_location;
        frame_7f1d7313dfb49e18519020daa8c06608->m_frame.f_lineno = 183;
        tmp_unicode_arg_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_1);
        if (tmp_unicode_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 183;
            type_description_1 = "oooooooc";
            goto frame_exception_exit_1;
        }
        tmp_ass_subvalue_1 = PyObject_Unicode(tmp_unicode_arg_1);
        Py_DECREF(tmp_unicode_arg_1);
        if (tmp_ass_subvalue_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 183;
            type_description_1 = "oooooooc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[19]);
        if (tmp_ass_subscribed_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_ass_subvalue_1);

            exception_lineno = 183;
            type_description_1 = "oooooooc";
            goto frame_exception_exit_1;
        }
        tmp_ass_subscript_1 = mod_consts[20];
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
        Py_DECREF(tmp_ass_subscribed_1);
        Py_DECREF(tmp_ass_subvalue_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 183;
            type_description_1 = "oooooooc";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_location);
        tmp_assattr_value_1 = par_location;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[21], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 184;
            type_description_1 = "oooooooc";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_7f1d7313dfb49e18519020daa8c06608);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_7f1d7313dfb49e18519020daa8c06608);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_7f1d7313dfb49e18519020daa8c06608, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_7f1d7313dfb49e18519020daa8c06608->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_7f1d7313dfb49e18519020daa8c06608, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_7f1d7313dfb49e18519020daa8c06608,
        type_description_1,
        par_self,
        par_location,
        par_headers,
        par_reason,
        par_body,
        par_text,
        par_content_type,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_7f1d7313dfb49e18519020daa8c06608 == cache_frame_7f1d7313dfb49e18519020daa8c06608) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_7f1d7313dfb49e18519020daa8c06608);
        cache_frame_7f1d7313dfb49e18519020daa8c06608 = NULL;
    }

    assertFrameObject(frame_7f1d7313dfb49e18519020daa8c06608);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_location);
    Py_DECREF(par_location);
    CHECK_OBJECT(par_headers);
    Py_DECREF(par_headers);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);
    CHECK_OBJECT(par_body);
    Py_DECREF(par_body);
    CHECK_OBJECT(par_text);
    Py_DECREF(par_text);
    CHECK_OBJECT(par_content_type);
    Py_DECREF(par_content_type);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_location);
    Py_DECREF(par_location);
    CHECK_OBJECT(par_headers);
    Py_DECREF(par_headers);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);
    CHECK_OBJECT(par_body);
    Py_DECREF(par_body);
    CHECK_OBJECT(par_text);
    Py_DECREF(par_text);
    CHECK_OBJECT(par_content_type);
    Py_DECREF(par_content_type);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_aiohttp$web_exceptions$$$function__4___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_method = python_pars[1];
    PyObject *par_allowed_methods = python_pars[2];
    PyObject *par_headers = python_pars[3];
    PyObject *par_reason = python_pars[4];
    PyObject *par_body = python_pars[5];
    PyObject *par_text = python_pars[6];
    PyObject *par_content_type = python_pars[7];
    PyObject *var_allow = NULL;
    struct Nuitka_FrameObject *frame_b80d7e69594275f3dadf950b93d812a2;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_b80d7e69594275f3dadf950b93d812a2 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_b80d7e69594275f3dadf950b93d812a2)) {
        Py_XDECREF(cache_frame_b80d7e69594275f3dadf950b93d812a2);

#if _DEBUG_REFCOUNTS
        if (cache_frame_b80d7e69594275f3dadf950b93d812a2 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_b80d7e69594275f3dadf950b93d812a2 = MAKE_FUNCTION_FRAME(codeobj_b80d7e69594275f3dadf950b93d812a2, module_aiohttp$web_exceptions, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_b80d7e69594275f3dadf950b93d812a2->m_type_description == NULL);
    frame_b80d7e69594275f3dadf950b93d812a2 = cache_frame_b80d7e69594275f3dadf950b93d812a2;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_b80d7e69594275f3dadf950b93d812a2);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_b80d7e69594275f3dadf950b93d812a2) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_str_arg_value_1;
        PyObject *tmp_iterable_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        tmp_str_arg_value_1 = mod_consts[22];
        tmp_called_value_1 = LOOKUP_BUILTIN(mod_consts[23]);
        assert(tmp_called_value_1 != NULL);
        CHECK_OBJECT(par_allowed_methods);
        tmp_args_element_value_1 = par_allowed_methods;
        frame_b80d7e69594275f3dadf950b93d812a2->m_frame.f_lineno = 267;
        tmp_iterable_value_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_iterable_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 267;
            type_description_1 = "oooooooooc";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = UNICODE_JOIN(tmp_str_arg_value_1, tmp_iterable_value_1);
        Py_DECREF(tmp_iterable_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 267;
            type_description_1 = "oooooooooc";
            goto frame_exception_exit_1;
        }
        assert(var_allow == NULL);
        var_allow = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_kw_call_value_0_1;
        PyObject *tmp_kw_call_value_1_1;
        PyObject *tmp_kw_call_value_2_1;
        PyObject *tmp_kw_call_value_3_1;
        PyObject *tmp_kw_call_value_4_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[16]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 268;
            type_description_1 = "oooooooooc";
            goto frame_exception_exit_1;
        }

        tmp_type_arg_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_expression_value_1 = BUILTIN_SUPER0(tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 268;
            type_description_1 = "oooooooooc";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[5]);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 268;
            type_description_1 = "oooooooooc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_headers);
        tmp_kw_call_value_0_1 = par_headers;
        CHECK_OBJECT(par_reason);
        tmp_kw_call_value_1_1 = par_reason;
        CHECK_OBJECT(par_body);
        tmp_kw_call_value_2_1 = par_body;
        CHECK_OBJECT(par_text);
        tmp_kw_call_value_3_1 = par_text;
        CHECK_OBJECT(par_content_type);
        tmp_kw_call_value_4_1 = par_content_type;
        frame_b80d7e69594275f3dadf950b93d812a2->m_frame.f_lineno = 268;
        {
            PyObject *kw_values[5] = {tmp_kw_call_value_0_1, tmp_kw_call_value_1_1, tmp_kw_call_value_2_1, tmp_kw_call_value_3_1, tmp_kw_call_value_4_1};

            tmp_call_result_1 = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tmp_called_value_2, kw_values, mod_consts[17]);
        }

        Py_DECREF(tmp_called_value_2);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 268;
            type_description_1 = "oooooooooc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_ass_subscript_1;
        CHECK_OBJECT(var_allow);
        tmp_ass_subvalue_1 = var_allow;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[19]);
        if (tmp_ass_subscribed_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 275;
            type_description_1 = "oooooooooc";
            goto frame_exception_exit_1;
        }
        tmp_ass_subscript_1 = mod_consts[24];
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
        Py_DECREF(tmp_ass_subscribed_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 275;
            type_description_1 = "oooooooooc";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_set_arg_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_allowed_methods);
        tmp_set_arg_1 = par_allowed_methods;
        tmp_assattr_value_1 = PySet_New(tmp_set_arg_1);
        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 276;
            type_description_1 = "oooooooooc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[25], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 276;
            type_description_1 = "oooooooooc";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_called_value_3;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT(par_method);
        tmp_expression_value_3 = par_method;
        tmp_called_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[26]);
        if (tmp_called_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 277;
            type_description_1 = "oooooooooc";
            goto frame_exception_exit_1;
        }
        frame_b80d7e69594275f3dadf950b93d812a2->m_frame.f_lineno = 277;
        tmp_assattr_value_2 = CALL_FUNCTION_NO_ARGS(tmp_called_value_3);
        Py_DECREF(tmp_called_value_3);
        if (tmp_assattr_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 277;
            type_description_1 = "oooooooooc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[27], tmp_assattr_value_2);
        Py_DECREF(tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 277;
            type_description_1 = "oooooooooc";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b80d7e69594275f3dadf950b93d812a2);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b80d7e69594275f3dadf950b93d812a2);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_b80d7e69594275f3dadf950b93d812a2, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_b80d7e69594275f3dadf950b93d812a2->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_b80d7e69594275f3dadf950b93d812a2, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_b80d7e69594275f3dadf950b93d812a2,
        type_description_1,
        par_self,
        par_method,
        par_allowed_methods,
        par_headers,
        par_reason,
        par_body,
        par_text,
        par_content_type,
        var_allow,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_b80d7e69594275f3dadf950b93d812a2 == cache_frame_b80d7e69594275f3dadf950b93d812a2) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_b80d7e69594275f3dadf950b93d812a2);
        cache_frame_b80d7e69594275f3dadf950b93d812a2 = NULL;
    }

    assertFrameObject(frame_b80d7e69594275f3dadf950b93d812a2);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_allow);
    Py_DECREF(var_allow);
    var_allow = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_allow);
    var_allow = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_method);
    Py_DECREF(par_method);
    CHECK_OBJECT(par_allowed_methods);
    Py_DECREF(par_allowed_methods);
    CHECK_OBJECT(par_headers);
    Py_DECREF(par_headers);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);
    CHECK_OBJECT(par_body);
    Py_DECREF(par_body);
    CHECK_OBJECT(par_text);
    Py_DECREF(par_text);
    CHECK_OBJECT(par_content_type);
    Py_DECREF(par_content_type);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_method);
    Py_DECREF(par_method);
    CHECK_OBJECT(par_allowed_methods);
    Py_DECREF(par_allowed_methods);
    CHECK_OBJECT(par_headers);
    Py_DECREF(par_headers);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);
    CHECK_OBJECT(par_body);
    Py_DECREF(par_body);
    CHECK_OBJECT(par_text);
    Py_DECREF(par_text);
    CHECK_OBJECT(par_content_type);
    Py_DECREF(par_content_type);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_aiohttp$web_exceptions$$$function__5___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_max_size = python_pars[1];
    PyObject *par_actual_size = python_pars[2];
    PyObject *par_kwargs = python_pars[3];
    struct Nuitka_FrameObject *frame_5041c2cd922023130a954d422a678536;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_5041c2cd922023130a954d422a678536 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_5041c2cd922023130a954d422a678536)) {
        Py_XDECREF(cache_frame_5041c2cd922023130a954d422a678536);

#if _DEBUG_REFCOUNTS
        if (cache_frame_5041c2cd922023130a954d422a678536 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_5041c2cd922023130a954d422a678536 = MAKE_FUNCTION_FRAME(codeobj_5041c2cd922023130a954d422a678536, module_aiohttp$web_exceptions, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_5041c2cd922023130a954d422a678536->m_type_description == NULL);
    frame_5041c2cd922023130a954d422a678536 = cache_frame_5041c2cd922023130a954d422a678536;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_5041c2cd922023130a954d422a678536);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_5041c2cd922023130a954d422a678536) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_dict_arg_value_1;
        PyObject *tmp_key_value_1;
        PyObject *tmp_default_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_capi_result_1;
        CHECK_OBJECT(par_kwargs);
        tmp_dict_arg_value_1 = par_kwargs;
        tmp_key_value_1 = mod_consts[14];
        tmp_expression_value_1 = mod_consts[28];
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[29]);
        assert(!(tmp_called_value_1 == NULL));
        CHECK_OBJECT(par_max_size);
        tmp_args_element_value_1 = par_max_size;
        CHECK_OBJECT(par_actual_size);
        tmp_args_element_value_2 = par_actual_size;
        frame_5041c2cd922023130a954d422a678536->m_frame.f_lineno = 314;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_default_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        if (tmp_default_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 314;
            type_description_1 = "ooooc";
            goto frame_exception_exit_1;
        }
        tmp_capi_result_1 = DICT_SETDEFAULT3(tmp_dict_arg_value_1, tmp_key_value_1, tmp_default_value_1);
        Py_DECREF(tmp_default_value_1);
        assert(!(tmp_capi_result_1 == NULL));
        Py_DECREF(tmp_capi_result_1);
    }
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_call_result_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[16]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 317;
            type_description_1 = "ooooc";
            goto frame_exception_exit_1;
        }

        tmp_type_arg_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_expression_value_2 = BUILTIN_SUPER0(tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 317;
            type_description_1 = "ooooc";
            goto frame_exception_exit_1;
        }
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[5]);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 317;
            type_description_1 = "ooooc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_kwargs);
        tmp_dircall_arg2_1 = par_kwargs;
        Py_INCREF(tmp_dircall_arg2_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
            tmp_call_result_1 = impl___main__$$$function__6_complex_call_helper_star_dict(dir_call_args);
        }
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 317;
            type_description_1 = "ooooc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5041c2cd922023130a954d422a678536);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5041c2cd922023130a954d422a678536);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_5041c2cd922023130a954d422a678536, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_5041c2cd922023130a954d422a678536->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_5041c2cd922023130a954d422a678536, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_5041c2cd922023130a954d422a678536,
        type_description_1,
        par_self,
        par_max_size,
        par_actual_size,
        par_kwargs,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_5041c2cd922023130a954d422a678536 == cache_frame_5041c2cd922023130a954d422a678536) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_5041c2cd922023130a954d422a678536);
        cache_frame_5041c2cd922023130a954d422a678536 = NULL;
    }

    assertFrameObject(frame_5041c2cd922023130a954d422a678536);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_max_size);
    Py_DECREF(par_max_size);
    CHECK_OBJECT(par_actual_size);
    Py_DECREF(par_actual_size);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_max_size);
    Py_DECREF(par_max_size);
    CHECK_OBJECT(par_actual_size);
    Py_DECREF(par_actual_size);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_aiohttp$web_exceptions$$$function__6___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_link = python_pars[1];
    PyObject *par_headers = python_pars[2];
    PyObject *par_reason = python_pars[3];
    PyObject *par_body = python_pars[4];
    PyObject *par_text = python_pars[5];
    PyObject *par_content_type = python_pars[6];
    struct Nuitka_FrameObject *frame_1a6f4f0c9fa04b4935c1209cc1d7e7b0;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_1a6f4f0c9fa04b4935c1209cc1d7e7b0 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_1a6f4f0c9fa04b4935c1209cc1d7e7b0)) {
        Py_XDECREF(cache_frame_1a6f4f0c9fa04b4935c1209cc1d7e7b0);

#if _DEBUG_REFCOUNTS
        if (cache_frame_1a6f4f0c9fa04b4935c1209cc1d7e7b0 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_1a6f4f0c9fa04b4935c1209cc1d7e7b0 = MAKE_FUNCTION_FRAME(codeobj_1a6f4f0c9fa04b4935c1209cc1d7e7b0, module_aiohttp$web_exceptions, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_1a6f4f0c9fa04b4935c1209cc1d7e7b0->m_type_description == NULL);
    frame_1a6f4f0c9fa04b4935c1209cc1d7e7b0 = cache_frame_1a6f4f0c9fa04b4935c1209cc1d7e7b0;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_1a6f4f0c9fa04b4935c1209cc1d7e7b0);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_1a6f4f0c9fa04b4935c1209cc1d7e7b0) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_kw_call_value_0_1;
        PyObject *tmp_kw_call_value_1_1;
        PyObject *tmp_kw_call_value_2_1;
        PyObject *tmp_kw_call_value_3_1;
        PyObject *tmp_kw_call_value_4_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[16]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 377;
            type_description_1 = "oooooooc";
            goto frame_exception_exit_1;
        }

        tmp_type_arg_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_expression_value_1 = BUILTIN_SUPER0(tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 377;
            type_description_1 = "oooooooc";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[5]);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 377;
            type_description_1 = "oooooooc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_headers);
        tmp_kw_call_value_0_1 = par_headers;
        CHECK_OBJECT(par_reason);
        tmp_kw_call_value_1_1 = par_reason;
        CHECK_OBJECT(par_body);
        tmp_kw_call_value_2_1 = par_body;
        CHECK_OBJECT(par_text);
        tmp_kw_call_value_3_1 = par_text;
        CHECK_OBJECT(par_content_type);
        tmp_kw_call_value_4_1 = par_content_type;
        frame_1a6f4f0c9fa04b4935c1209cc1d7e7b0->m_frame.f_lineno = 377;
        {
            PyObject *kw_values[5] = {tmp_kw_call_value_0_1, tmp_kw_call_value_1_1, tmp_kw_call_value_2_1, tmp_kw_call_value_3_1, tmp_kw_call_value_4_1};

            tmp_call_result_1 = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tmp_called_value_1, kw_values, mod_consts[17]);
        }

        Py_DECREF(tmp_called_value_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 377;
            type_description_1 = "oooooooc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_ass_subscript_1;
        tmp_left_value_1 = mod_consts[30];
        CHECK_OBJECT(par_link);
        tmp_right_value_1 = par_link;
        tmp_ass_subvalue_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_value_1, tmp_right_value_1);
        if (tmp_ass_subvalue_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 384;
            type_description_1 = "oooooooc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[19]);
        if (tmp_ass_subscribed_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_ass_subvalue_1);

            exception_lineno = 384;
            type_description_1 = "oooooooc";
            goto frame_exception_exit_1;
        }
        tmp_ass_subscript_1 = mod_consts[31];
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
        Py_DECREF(tmp_ass_subscribed_1);
        Py_DECREF(tmp_ass_subvalue_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 384;
            type_description_1 = "oooooooc";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_link);
        tmp_assattr_value_1 = par_link;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[32], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 385;
            type_description_1 = "oooooooc";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1a6f4f0c9fa04b4935c1209cc1d7e7b0);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1a6f4f0c9fa04b4935c1209cc1d7e7b0);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_1a6f4f0c9fa04b4935c1209cc1d7e7b0, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_1a6f4f0c9fa04b4935c1209cc1d7e7b0->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_1a6f4f0c9fa04b4935c1209cc1d7e7b0, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_1a6f4f0c9fa04b4935c1209cc1d7e7b0,
        type_description_1,
        par_self,
        par_link,
        par_headers,
        par_reason,
        par_body,
        par_text,
        par_content_type,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_1a6f4f0c9fa04b4935c1209cc1d7e7b0 == cache_frame_1a6f4f0c9fa04b4935c1209cc1d7e7b0) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_1a6f4f0c9fa04b4935c1209cc1d7e7b0);
        cache_frame_1a6f4f0c9fa04b4935c1209cc1d7e7b0 = NULL;
    }

    assertFrameObject(frame_1a6f4f0c9fa04b4935c1209cc1d7e7b0);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_link);
    Py_DECREF(par_link);
    CHECK_OBJECT(par_headers);
    Py_DECREF(par_headers);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);
    CHECK_OBJECT(par_body);
    Py_DECREF(par_body);
    CHECK_OBJECT(par_text);
    Py_DECREF(par_text);
    CHECK_OBJECT(par_content_type);
    Py_DECREF(par_content_type);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_link);
    Py_DECREF(par_link);
    CHECK_OBJECT(par_headers);
    Py_DECREF(par_headers);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);
    CHECK_OBJECT(par_body);
    Py_DECREF(par_body);
    CHECK_OBJECT(par_text);
    Py_DECREF(par_text);
    CHECK_OBJECT(par_content_type);
    Py_DECREF(par_content_type);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



static PyObject *MAKE_FUNCTION_aiohttp$web_exceptions$$$function__1___init__(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_aiohttp$web_exceptions$$$function__1___init__,
        mod_consts[5],
#if PYTHON_VERSION >= 0x300
        mod_consts[73],
#endif
        codeobj_57711ddcfe31d729de1164a5616054be,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_aiohttp$web_exceptions,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_aiohttp$web_exceptions$$$function__2___bool__(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[75],
#if PYTHON_VERSION >= 0x300
        mod_consts[76],
#endif
        codeobj_3012dc4e4b6ab93cc05f0db6757c4eb1,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_aiohttp$web_exceptions,
        NULL,
        NULL,
        0
    );
    Nuitka_Function_EnableConstReturnTrue(result);

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_aiohttp$web_exceptions$$$function__3___init__(PyObject *kw_defaults, PyObject *annotations, struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_aiohttp$web_exceptions$$$function__3___init__,
        mod_consts[5],
#if PYTHON_VERSION >= 0x300
        mod_consts[99],
#endif
        codeobj_7f1d7313dfb49e18519020daa8c06608,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_aiohttp$web_exceptions,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_aiohttp$web_exceptions$$$function__4___init__(PyObject *kw_defaults, PyObject *annotations, struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_aiohttp$web_exceptions$$$function__4___init__,
        mod_consts[5],
#if PYTHON_VERSION >= 0x300
        mod_consts[129],
#endif
        codeobj_b80d7e69594275f3dadf950b93d812a2,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_aiohttp$web_exceptions,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_aiohttp$web_exceptions$$$function__5___init__(PyObject *annotations, struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_aiohttp$web_exceptions$$$function__5___init__,
        mod_consts[5],
#if PYTHON_VERSION >= 0x300
        mod_consts[150],
#endif
        codeobj_5041c2cd922023130a954d422a678536,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_aiohttp$web_exceptions,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_aiohttp$web_exceptions$$$function__6___init__(PyObject *kw_defaults, PyObject *annotations, struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_aiohttp$web_exceptions$$$function__6___init__,
        mod_consts[5],
#if PYTHON_VERSION >= 0x300
        mod_consts[175],
#endif
        codeobj_1a6f4f0c9fa04b4935c1209cc1d7e7b0,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_aiohttp$web_exceptions,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}


extern void _initCompiledCellType();
extern void _initCompiledGeneratorType();
extern void _initCompiledFunctionType();
extern void _initCompiledMethodType();
extern void _initCompiledFrameType();

extern PyTypeObject Nuitka_Loader_Type;

#ifdef _NUITKA_PLUGIN_DILL_ENABLED
// Provide a way to create find a function via its C code and create it back
// in another process, useful for multiprocessing extensions like dill
extern void registerDillPluginTables(char const *module_name, PyMethodDef *reduce_compiled_function, PyMethodDef *create_compiled_function);

function_impl_code functable_aiohttp$web_exceptions[] = {
    impl_aiohttp$web_exceptions$$$function__1___init__,
    NULL,
    impl_aiohttp$web_exceptions$$$function__3___init__,
    impl_aiohttp$web_exceptions$$$function__4___init__,
    impl_aiohttp$web_exceptions$$$function__5___init__,
    impl_aiohttp$web_exceptions$$$function__6___init__,
    NULL
};

static char const *_reduce_compiled_function_argnames[] = {
    "func",
    NULL
};

static PyObject *_reduce_compiled_function(PyObject *self, PyObject *args, PyObject *kwds) {
    PyObject *func;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "O:reduce_compiled_function", (char **)_reduce_compiled_function_argnames, &func, NULL)) {
        return NULL;
    }

    if (Nuitka_Function_Check(func) == false) {
        SET_CURRENT_EXCEPTION_TYPE0_STR(PyExc_TypeError, "not a compiled function");
        return NULL;
    }

    struct Nuitka_FunctionObject *function = (struct Nuitka_FunctionObject *)func;

    function_impl_code *current = functable_aiohttp$web_exceptions;
    int offset = 0;

    while (*current != NULL) {
        if (*current == function->m_c_code) {
            break;
        }

        current += 1;
        offset += 1;
    }

    if (*current == NULL) {
        SET_CURRENT_EXCEPTION_TYPE0_STR(PyExc_TypeError, "Cannot find compiled function in module.");
        return NULL;
    }

    PyObject *code_object_desc = PyTuple_New(6);
    PyTuple_SET_ITEM0(code_object_desc, 0, function->m_code_object->co_filename);
    PyTuple_SET_ITEM0(code_object_desc, 1, function->m_code_object->co_name);
    PyTuple_SET_ITEM(code_object_desc, 2, PyLong_FromLong(function->m_code_object->co_firstlineno));
    PyTuple_SET_ITEM0(code_object_desc, 3, function->m_code_object->co_varnames);
    PyTuple_SET_ITEM(code_object_desc, 4, PyLong_FromLong(function->m_code_object->co_argcount));
    PyTuple_SET_ITEM(code_object_desc, 5, PyLong_FromLong(function->m_code_object->co_flags));

    CHECK_OBJECT_DEEP(code_object_desc);

    PyObject *result = PyTuple_New(4);
    PyTuple_SET_ITEM(result, 0, PyLong_FromLong(offset));
    PyTuple_SET_ITEM(result, 1, code_object_desc);
    PyTuple_SET_ITEM0(result, 2, function->m_defaults);
    PyTuple_SET_ITEM0(result, 3, function->m_doc != NULL ? function->m_doc : Py_None);

    CHECK_OBJECT_DEEP(result);

    return result;
}

static PyMethodDef _method_def_reduce_compiled_function = {"reduce_compiled_function", (PyCFunction)_reduce_compiled_function,
                                                           METH_VARARGS | METH_KEYWORDS, NULL};

static char const *_create_compiled_function_argnames[] = {
    "func",
    "code_object_desc",
    "defaults",
    "doc",
    NULL
};


static PyObject *_create_compiled_function(PyObject *self, PyObject *args, PyObject *kwds) {
    CHECK_OBJECT_DEEP(args);

    PyObject *func;
    PyObject *code_object_desc;
    PyObject *defaults;
    PyObject *doc;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "OOOO:create_compiled_function", (char **)_create_compiled_function_argnames, &func, &code_object_desc, &defaults, &doc, NULL)) {
        return NULL;
    }

    int offset = PyLong_AsLong(func);

    if (offset == -1 && ERROR_OCCURRED()) {
        return NULL;
    }

    if (offset > sizeof(functable_aiohttp$web_exceptions) || offset < 0) {
        SET_CURRENT_EXCEPTION_TYPE0_STR(PyExc_TypeError, "Wrong offset for compiled function.");
        return NULL;
    }

    PyObject *filename = PyTuple_GET_ITEM(code_object_desc, 0);
    PyObject *function_name = PyTuple_GET_ITEM(code_object_desc, 1);
    PyObject *line = PyTuple_GET_ITEM(code_object_desc, 2);
    int line_int = PyLong_AsLong(line);
    assert(!ERROR_OCCURRED());

    PyObject *argnames = PyTuple_GET_ITEM(code_object_desc, 3);
    PyObject *arg_count = PyTuple_GET_ITEM(code_object_desc, 4);
    int arg_count_int = PyLong_AsLong(arg_count);
    assert(!ERROR_OCCURRED());
    PyObject *flags = PyTuple_GET_ITEM(code_object_desc, 5);
    int flags_int = PyLong_AsLong(flags);
    assert(!ERROR_OCCURRED());

    PyCodeObject *code_object = MAKE_CODEOBJECT(
        filename,
        line_int,
        flags_int,
        function_name,
        argnames,
        NULL, // freevars
        arg_count_int,
        0, // TODO: Missing kw_only_count
        0 // TODO: Missing pos_only_count
    );

    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        functable_aiohttp$web_exceptions[offset],
        code_object->co_name,
#if PYTHON_VERSION >= 0x300
        NULL, // TODO: Not transferring qualname yet
#endif
        code_object,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL, // kwdefaults are done on the outside currently
        NULL, // TODO: Not transferring annotations
#endif
        module_aiohttp$web_exceptions,
        doc,
        NULL,
        0
    );

    return (PyObject *)result;
}

static PyMethodDef _method_def_create_compiled_function = {
    "create_compiled_function",
    (PyCFunction)_create_compiled_function,
    METH_VARARGS | METH_KEYWORDS, NULL
};


#endif

// Internal entry point for module code.
PyObject *modulecode_aiohttp$web_exceptions(PyObject *module, struct Nuitka_MetaPathBasedLoaderEntry const *loader_entry) {
    // Report entry to PGO.
    PGO_onModuleEntered("aiohttp.web_exceptions");

    // Store the module for future use.
    module_aiohttp$web_exceptions = module;

    // Modules can be loaded again in case of errors, avoid the init being done again.
    static bool init_done = false;

    if (init_done == false) {
#if defined(_NUITKA_MODULE) && 0
        // In case of an extension module loaded into a process, we need to call
        // initialization here because that's the first and potentially only time
        // we are going called.

        // Initialize the constant values used.
        _initBuiltinModule();
        createGlobalConstants();

        /* Initialize the compiled types of Nuitka. */
        _initCompiledCellType();
        _initCompiledGeneratorType();
        _initCompiledFunctionType();
        _initCompiledMethodType();
        _initCompiledFrameType();

        _initSlotCompare();
#if PYTHON_VERSION >= 0x270
        _initSlotIternext();
#endif

        patchTypeComparison();

        // Enable meta path based loader if not already done.
#ifdef _NUITKA_TRACE
        PRINT_STRING("aiohttp.web_exceptions: Calling setupMetaPathBasedLoader().\n");
#endif
        setupMetaPathBasedLoader();

#if PYTHON_VERSION >= 0x300
        patchInspectModule();
#endif

#endif

        /* The constants only used by this module are created now. */
#ifdef _NUITKA_TRACE
        PRINT_STRING("aiohttp.web_exceptions: Calling createModuleConstants().\n");
#endif
        createModuleConstants();

        /* The code objects used by this module are created now. */
#ifdef _NUITKA_TRACE
        PRINT_STRING("aiohttp.web_exceptions: Calling createModuleCodeObjects().\n");
#endif
        createModuleCodeObjects();

        init_done = true;
    }

    // PRINT_STRING("in initaiohttp$web_exceptions\n");

    moduledict_aiohttp$web_exceptions = MODULE_DICT(module_aiohttp$web_exceptions);

#ifdef _NUITKA_PLUGIN_DILL_ENABLED
    registerDillPluginTables(loader_entry->name, &_method_def_reduce_compiled_function, &_method_def_create_compiled_function);
#endif

    // Set "__compiled__" to what version information we have.
    UPDATE_STRING_DICT0(
        moduledict_aiohttp$web_exceptions,
        (Nuitka_StringObject *)const_str_plain___compiled__,
        Nuitka_dunder_compiled_value
    );

    // Update "__package__" value to what it ought to be.
    {
#if 0
        UPDATE_STRING_DICT0(
            moduledict_aiohttp$web_exceptions,
            (Nuitka_StringObject *)const_str_plain___package__,
            mod_consts[12]
        );
#elif 0
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)const_str_plain___name__);

        UPDATE_STRING_DICT0(
            moduledict_aiohttp$web_exceptions,
            (Nuitka_StringObject *)const_str_plain___package__,
            module_name
        );
#else

#if PYTHON_VERSION < 0x300
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)const_str_plain___name__);
        char const *module_name_cstr = PyString_AS_STRING(module_name);

        char const *last_dot = strrchr(module_name_cstr, '.');

        if (last_dot != NULL) {
            UPDATE_STRING_DICT1(
                moduledict_aiohttp$web_exceptions,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyString_FromStringAndSize(module_name_cstr, last_dot - module_name_cstr)
            );
        }
#else
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)const_str_plain___name__);
        Py_ssize_t dot_index = PyUnicode_Find(module_name, const_str_dot, 0, PyUnicode_GetLength(module_name), -1);

        if (dot_index != -1) {
            UPDATE_STRING_DICT1(
                moduledict_aiohttp$web_exceptions,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyUnicode_Substring(module_name, 0, dot_index)
            );
        }
#endif
#endif
    }

    CHECK_OBJECT(module_aiohttp$web_exceptions);

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    if (GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)const_str_plain___builtins__) == NULL) {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then but the module itself.
#if defined(_NUITKA_MODULE) || !0
        value = PyModule_GetDict(value);
#endif

        UPDATE_STRING_DICT0(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)const_str_plain___builtins__, value);
    }

#if PYTHON_VERSION >= 0x300
    UPDATE_STRING_DICT0(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)const_str_plain___loader__, (PyObject *)&Nuitka_Loader_Type);
#endif

#if PYTHON_VERSION >= 0x340
// Set the "__spec__" value

#if 0
    // Main modules just get "None" as spec.
    UPDATE_STRING_DICT0(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)const_str_plain___spec__, Py_None);
#else
    // Other modules get a "ModuleSpec" from the standard mechanism.
    {
        PyObject *bootstrap_module = getImportLibBootstrapModule();
        CHECK_OBJECT(bootstrap_module);

        PyObject *_spec_from_module = PyObject_GetAttrString(bootstrap_module, "_spec_from_module");
        CHECK_OBJECT(_spec_from_module);

        PyObject *spec_value = CALL_FUNCTION_WITH_SINGLE_ARG(_spec_from_module, module_aiohttp$web_exceptions);
        Py_DECREF(_spec_from_module);

        // We can assume this to never fail, or else we are in trouble anyway.
        // CHECK_OBJECT(spec_value);

        if (spec_value == NULL) {
            PyErr_PrintEx(0);
            abort();
        }

// Mark the execution in the "__spec__" value.
        SET_ATTRIBUTE(spec_value, const_str_plain__initializing, Py_True);

        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)const_str_plain___spec__, spec_value);
    }
#endif
#endif

    // Temp variables if any
    PyObject *outline_0_var___class__ = NULL;
    PyObject *outline_1_var___class__ = NULL;
    PyObject *outline_2_var___class__ = NULL;
    PyObject *outline_3_var___class__ = NULL;
    PyObject *outline_4_var___class__ = NULL;
    PyObject *outline_5_var___class__ = NULL;
    PyObject *outline_6_var___class__ = NULL;
    PyObject *outline_7_var___class__ = NULL;
    PyObject *outline_8_var___class__ = NULL;
    PyObject *outline_9_var___class__ = NULL;
    PyObject *outline_10_var___class__ = NULL;
    struct Nuitka_CellObject *outline_11_var___class__ = Nuitka_Cell_Empty();
    PyObject *outline_12_var___class__ = NULL;
    PyObject *outline_13_var___class__ = NULL;
    PyObject *outline_14_var___class__ = NULL;
    PyObject *outline_15_var___class__ = NULL;
    PyObject *outline_16_var___class__ = NULL;
    PyObject *outline_17_var___class__ = NULL;
    PyObject *outline_18_var___class__ = NULL;
    PyObject *outline_19_var___class__ = NULL;
    PyObject *outline_20_var___class__ = NULL;
    PyObject *outline_21_var___class__ = NULL;
    PyObject *outline_22_var___class__ = NULL;
    PyObject *outline_23_var___class__ = NULL;
    PyObject *outline_24_var___class__ = NULL;
    PyObject *outline_25_var___class__ = NULL;
    struct Nuitka_CellObject *outline_26_var___class__ = Nuitka_Cell_Empty();
    PyObject *outline_27_var___class__ = NULL;
    PyObject *outline_28_var___class__ = NULL;
    PyObject *outline_29_var___class__ = NULL;
    PyObject *outline_30_var___class__ = NULL;
    PyObject *outline_31_var___class__ = NULL;
    PyObject *outline_32_var___class__ = NULL;
    PyObject *outline_33_var___class__ = NULL;
    struct Nuitka_CellObject *outline_34_var___class__ = Nuitka_Cell_Empty();
    PyObject *outline_35_var___class__ = NULL;
    PyObject *outline_36_var___class__ = NULL;
    PyObject *outline_37_var___class__ = NULL;
    PyObject *outline_38_var___class__ = NULL;
    PyObject *outline_39_var___class__ = NULL;
    PyObject *outline_40_var___class__ = NULL;
    PyObject *outline_41_var___class__ = NULL;
    PyObject *outline_42_var___class__ = NULL;
    PyObject *outline_43_var___class__ = NULL;
    PyObject *outline_44_var___class__ = NULL;
    PyObject *outline_45_var___class__ = NULL;
    struct Nuitka_CellObject *outline_46_var___class__ = Nuitka_Cell_Empty();
    PyObject *outline_47_var___class__ = NULL;
    PyObject *outline_48_var___class__ = NULL;
    PyObject *outline_49_var___class__ = NULL;
    PyObject *outline_50_var___class__ = NULL;
    PyObject *outline_51_var___class__ = NULL;
    PyObject *outline_52_var___class__ = NULL;
    PyObject *outline_53_var___class__ = NULL;
    PyObject *outline_54_var___class__ = NULL;
    PyObject *outline_55_var___class__ = NULL;
    PyObject *outline_56_var___class__ = NULL;
    PyObject *outline_57_var___class__ = NULL;
    PyObject *tmp_class_creation_10__bases = NULL;
    PyObject *tmp_class_creation_10__bases_orig = NULL;
    PyObject *tmp_class_creation_10__class_decl_dict = NULL;
    PyObject *tmp_class_creation_10__metaclass = NULL;
    PyObject *tmp_class_creation_10__prepared = NULL;
    PyObject *tmp_class_creation_11__bases = NULL;
    PyObject *tmp_class_creation_11__bases_orig = NULL;
    PyObject *tmp_class_creation_11__class_decl_dict = NULL;
    PyObject *tmp_class_creation_11__metaclass = NULL;
    PyObject *tmp_class_creation_11__prepared = NULL;
    PyObject *tmp_class_creation_12__bases = NULL;
    PyObject *tmp_class_creation_12__bases_orig = NULL;
    PyObject *tmp_class_creation_12__class_decl_dict = NULL;
    PyObject *tmp_class_creation_12__metaclass = NULL;
    PyObject *tmp_class_creation_12__prepared = NULL;
    PyObject *tmp_class_creation_13__bases = NULL;
    PyObject *tmp_class_creation_13__bases_orig = NULL;
    PyObject *tmp_class_creation_13__class_decl_dict = NULL;
    PyObject *tmp_class_creation_13__metaclass = NULL;
    PyObject *tmp_class_creation_13__prepared = NULL;
    PyObject *tmp_class_creation_14__bases = NULL;
    PyObject *tmp_class_creation_14__bases_orig = NULL;
    PyObject *tmp_class_creation_14__class_decl_dict = NULL;
    PyObject *tmp_class_creation_14__metaclass = NULL;
    PyObject *tmp_class_creation_14__prepared = NULL;
    PyObject *tmp_class_creation_15__bases = NULL;
    PyObject *tmp_class_creation_15__bases_orig = NULL;
    PyObject *tmp_class_creation_15__class_decl_dict = NULL;
    PyObject *tmp_class_creation_15__metaclass = NULL;
    PyObject *tmp_class_creation_15__prepared = NULL;
    PyObject *tmp_class_creation_16__bases = NULL;
    PyObject *tmp_class_creation_16__bases_orig = NULL;
    PyObject *tmp_class_creation_16__class_decl_dict = NULL;
    PyObject *tmp_class_creation_16__metaclass = NULL;
    PyObject *tmp_class_creation_16__prepared = NULL;
    PyObject *tmp_class_creation_17__bases = NULL;
    PyObject *tmp_class_creation_17__bases_orig = NULL;
    PyObject *tmp_class_creation_17__class_decl_dict = NULL;
    PyObject *tmp_class_creation_17__metaclass = NULL;
    PyObject *tmp_class_creation_17__prepared = NULL;
    PyObject *tmp_class_creation_18__bases = NULL;
    PyObject *tmp_class_creation_18__bases_orig = NULL;
    PyObject *tmp_class_creation_18__class_decl_dict = NULL;
    PyObject *tmp_class_creation_18__metaclass = NULL;
    PyObject *tmp_class_creation_18__prepared = NULL;
    PyObject *tmp_class_creation_19__bases = NULL;
    PyObject *tmp_class_creation_19__bases_orig = NULL;
    PyObject *tmp_class_creation_19__class_decl_dict = NULL;
    PyObject *tmp_class_creation_19__metaclass = NULL;
    PyObject *tmp_class_creation_19__prepared = NULL;
    PyObject *tmp_class_creation_1__bases = NULL;
    PyObject *tmp_class_creation_1__bases_orig = NULL;
    PyObject *tmp_class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_class_creation_1__prepared = NULL;
    PyObject *tmp_class_creation_20__bases = NULL;
    PyObject *tmp_class_creation_20__bases_orig = NULL;
    PyObject *tmp_class_creation_20__class_decl_dict = NULL;
    PyObject *tmp_class_creation_20__metaclass = NULL;
    PyObject *tmp_class_creation_20__prepared = NULL;
    PyObject *tmp_class_creation_21__bases = NULL;
    PyObject *tmp_class_creation_21__bases_orig = NULL;
    PyObject *tmp_class_creation_21__class_decl_dict = NULL;
    PyObject *tmp_class_creation_21__metaclass = NULL;
    PyObject *tmp_class_creation_21__prepared = NULL;
    PyObject *tmp_class_creation_22__bases = NULL;
    PyObject *tmp_class_creation_22__bases_orig = NULL;
    PyObject *tmp_class_creation_22__class_decl_dict = NULL;
    PyObject *tmp_class_creation_22__metaclass = NULL;
    PyObject *tmp_class_creation_22__prepared = NULL;
    PyObject *tmp_class_creation_23__bases = NULL;
    PyObject *tmp_class_creation_23__bases_orig = NULL;
    PyObject *tmp_class_creation_23__class_decl_dict = NULL;
    PyObject *tmp_class_creation_23__metaclass = NULL;
    PyObject *tmp_class_creation_23__prepared = NULL;
    PyObject *tmp_class_creation_24__bases = NULL;
    PyObject *tmp_class_creation_24__bases_orig = NULL;
    PyObject *tmp_class_creation_24__class_decl_dict = NULL;
    PyObject *tmp_class_creation_24__metaclass = NULL;
    PyObject *tmp_class_creation_24__prepared = NULL;
    PyObject *tmp_class_creation_25__bases = NULL;
    PyObject *tmp_class_creation_25__bases_orig = NULL;
    PyObject *tmp_class_creation_25__class_decl_dict = NULL;
    PyObject *tmp_class_creation_25__metaclass = NULL;
    PyObject *tmp_class_creation_25__prepared = NULL;
    PyObject *tmp_class_creation_26__bases = NULL;
    PyObject *tmp_class_creation_26__bases_orig = NULL;
    PyObject *tmp_class_creation_26__class_decl_dict = NULL;
    PyObject *tmp_class_creation_26__metaclass = NULL;
    PyObject *tmp_class_creation_26__prepared = NULL;
    PyObject *tmp_class_creation_27__bases = NULL;
    PyObject *tmp_class_creation_27__bases_orig = NULL;
    PyObject *tmp_class_creation_27__class_decl_dict = NULL;
    PyObject *tmp_class_creation_27__metaclass = NULL;
    PyObject *tmp_class_creation_27__prepared = NULL;
    PyObject *tmp_class_creation_28__bases = NULL;
    PyObject *tmp_class_creation_28__bases_orig = NULL;
    PyObject *tmp_class_creation_28__class_decl_dict = NULL;
    PyObject *tmp_class_creation_28__metaclass = NULL;
    PyObject *tmp_class_creation_28__prepared = NULL;
    PyObject *tmp_class_creation_29__bases = NULL;
    PyObject *tmp_class_creation_29__bases_orig = NULL;
    PyObject *tmp_class_creation_29__class_decl_dict = NULL;
    PyObject *tmp_class_creation_29__metaclass = NULL;
    PyObject *tmp_class_creation_29__prepared = NULL;
    PyObject *tmp_class_creation_2__bases = NULL;
    PyObject *tmp_class_creation_2__bases_orig = NULL;
    PyObject *tmp_class_creation_2__class_decl_dict = NULL;
    PyObject *tmp_class_creation_2__metaclass = NULL;
    PyObject *tmp_class_creation_2__prepared = NULL;
    PyObject *tmp_class_creation_30__bases = NULL;
    PyObject *tmp_class_creation_30__bases_orig = NULL;
    PyObject *tmp_class_creation_30__class_decl_dict = NULL;
    PyObject *tmp_class_creation_30__metaclass = NULL;
    PyObject *tmp_class_creation_30__prepared = NULL;
    PyObject *tmp_class_creation_31__bases = NULL;
    PyObject *tmp_class_creation_31__bases_orig = NULL;
    PyObject *tmp_class_creation_31__class_decl_dict = NULL;
    PyObject *tmp_class_creation_31__metaclass = NULL;
    PyObject *tmp_class_creation_31__prepared = NULL;
    PyObject *tmp_class_creation_32__bases = NULL;
    PyObject *tmp_class_creation_32__bases_orig = NULL;
    PyObject *tmp_class_creation_32__class_decl_dict = NULL;
    PyObject *tmp_class_creation_32__metaclass = NULL;
    PyObject *tmp_class_creation_32__prepared = NULL;
    PyObject *tmp_class_creation_33__bases = NULL;
    PyObject *tmp_class_creation_33__bases_orig = NULL;
    PyObject *tmp_class_creation_33__class_decl_dict = NULL;
    PyObject *tmp_class_creation_33__metaclass = NULL;
    PyObject *tmp_class_creation_33__prepared = NULL;
    PyObject *tmp_class_creation_34__bases = NULL;
    PyObject *tmp_class_creation_34__bases_orig = NULL;
    PyObject *tmp_class_creation_34__class_decl_dict = NULL;
    PyObject *tmp_class_creation_34__metaclass = NULL;
    PyObject *tmp_class_creation_34__prepared = NULL;
    PyObject *tmp_class_creation_35__bases = NULL;
    PyObject *tmp_class_creation_35__bases_orig = NULL;
    PyObject *tmp_class_creation_35__class_decl_dict = NULL;
    PyObject *tmp_class_creation_35__metaclass = NULL;
    PyObject *tmp_class_creation_35__prepared = NULL;
    PyObject *tmp_class_creation_36__bases = NULL;
    PyObject *tmp_class_creation_36__bases_orig = NULL;
    PyObject *tmp_class_creation_36__class_decl_dict = NULL;
    PyObject *tmp_class_creation_36__metaclass = NULL;
    PyObject *tmp_class_creation_36__prepared = NULL;
    PyObject *tmp_class_creation_37__bases = NULL;
    PyObject *tmp_class_creation_37__bases_orig = NULL;
    PyObject *tmp_class_creation_37__class_decl_dict = NULL;
    PyObject *tmp_class_creation_37__metaclass = NULL;
    PyObject *tmp_class_creation_37__prepared = NULL;
    PyObject *tmp_class_creation_38__bases = NULL;
    PyObject *tmp_class_creation_38__bases_orig = NULL;
    PyObject *tmp_class_creation_38__class_decl_dict = NULL;
    PyObject *tmp_class_creation_38__metaclass = NULL;
    PyObject *tmp_class_creation_38__prepared = NULL;
    PyObject *tmp_class_creation_39__bases = NULL;
    PyObject *tmp_class_creation_39__bases_orig = NULL;
    PyObject *tmp_class_creation_39__class_decl_dict = NULL;
    PyObject *tmp_class_creation_39__metaclass = NULL;
    PyObject *tmp_class_creation_39__prepared = NULL;
    PyObject *tmp_class_creation_3__bases = NULL;
    PyObject *tmp_class_creation_3__bases_orig = NULL;
    PyObject *tmp_class_creation_3__class_decl_dict = NULL;
    PyObject *tmp_class_creation_3__metaclass = NULL;
    PyObject *tmp_class_creation_3__prepared = NULL;
    PyObject *tmp_class_creation_40__bases = NULL;
    PyObject *tmp_class_creation_40__bases_orig = NULL;
    PyObject *tmp_class_creation_40__class_decl_dict = NULL;
    PyObject *tmp_class_creation_40__metaclass = NULL;
    PyObject *tmp_class_creation_40__prepared = NULL;
    PyObject *tmp_class_creation_41__bases = NULL;
    PyObject *tmp_class_creation_41__bases_orig = NULL;
    PyObject *tmp_class_creation_41__class_decl_dict = NULL;
    PyObject *tmp_class_creation_41__metaclass = NULL;
    PyObject *tmp_class_creation_41__prepared = NULL;
    PyObject *tmp_class_creation_42__bases = NULL;
    PyObject *tmp_class_creation_42__bases_orig = NULL;
    PyObject *tmp_class_creation_42__class_decl_dict = NULL;
    PyObject *tmp_class_creation_42__metaclass = NULL;
    PyObject *tmp_class_creation_42__prepared = NULL;
    PyObject *tmp_class_creation_43__bases = NULL;
    PyObject *tmp_class_creation_43__bases_orig = NULL;
    PyObject *tmp_class_creation_43__class_decl_dict = NULL;
    PyObject *tmp_class_creation_43__metaclass = NULL;
    PyObject *tmp_class_creation_43__prepared = NULL;
    PyObject *tmp_class_creation_44__bases = NULL;
    PyObject *tmp_class_creation_44__bases_orig = NULL;
    PyObject *tmp_class_creation_44__class_decl_dict = NULL;
    PyObject *tmp_class_creation_44__metaclass = NULL;
    PyObject *tmp_class_creation_44__prepared = NULL;
    PyObject *tmp_class_creation_45__bases = NULL;
    PyObject *tmp_class_creation_45__bases_orig = NULL;
    PyObject *tmp_class_creation_45__class_decl_dict = NULL;
    PyObject *tmp_class_creation_45__metaclass = NULL;
    PyObject *tmp_class_creation_45__prepared = NULL;
    PyObject *tmp_class_creation_46__bases = NULL;
    PyObject *tmp_class_creation_46__bases_orig = NULL;
    PyObject *tmp_class_creation_46__class_decl_dict = NULL;
    PyObject *tmp_class_creation_46__metaclass = NULL;
    PyObject *tmp_class_creation_46__prepared = NULL;
    PyObject *tmp_class_creation_47__bases = NULL;
    PyObject *tmp_class_creation_47__bases_orig = NULL;
    PyObject *tmp_class_creation_47__class_decl_dict = NULL;
    PyObject *tmp_class_creation_47__metaclass = NULL;
    PyObject *tmp_class_creation_47__prepared = NULL;
    PyObject *tmp_class_creation_48__bases = NULL;
    PyObject *tmp_class_creation_48__bases_orig = NULL;
    PyObject *tmp_class_creation_48__class_decl_dict = NULL;
    PyObject *tmp_class_creation_48__metaclass = NULL;
    PyObject *tmp_class_creation_48__prepared = NULL;
    PyObject *tmp_class_creation_49__bases = NULL;
    PyObject *tmp_class_creation_49__bases_orig = NULL;
    PyObject *tmp_class_creation_49__class_decl_dict = NULL;
    PyObject *tmp_class_creation_49__metaclass = NULL;
    PyObject *tmp_class_creation_49__prepared = NULL;
    PyObject *tmp_class_creation_4__bases = NULL;
    PyObject *tmp_class_creation_4__bases_orig = NULL;
    PyObject *tmp_class_creation_4__class_decl_dict = NULL;
    PyObject *tmp_class_creation_4__metaclass = NULL;
    PyObject *tmp_class_creation_4__prepared = NULL;
    PyObject *tmp_class_creation_50__bases = NULL;
    PyObject *tmp_class_creation_50__bases_orig = NULL;
    PyObject *tmp_class_creation_50__class_decl_dict = NULL;
    PyObject *tmp_class_creation_50__metaclass = NULL;
    PyObject *tmp_class_creation_50__prepared = NULL;
    PyObject *tmp_class_creation_51__bases = NULL;
    PyObject *tmp_class_creation_51__bases_orig = NULL;
    PyObject *tmp_class_creation_51__class_decl_dict = NULL;
    PyObject *tmp_class_creation_51__metaclass = NULL;
    PyObject *tmp_class_creation_51__prepared = NULL;
    PyObject *tmp_class_creation_52__bases = NULL;
    PyObject *tmp_class_creation_52__bases_orig = NULL;
    PyObject *tmp_class_creation_52__class_decl_dict = NULL;
    PyObject *tmp_class_creation_52__metaclass = NULL;
    PyObject *tmp_class_creation_52__prepared = NULL;
    PyObject *tmp_class_creation_53__bases = NULL;
    PyObject *tmp_class_creation_53__bases_orig = NULL;
    PyObject *tmp_class_creation_53__class_decl_dict = NULL;
    PyObject *tmp_class_creation_53__metaclass = NULL;
    PyObject *tmp_class_creation_53__prepared = NULL;
    PyObject *tmp_class_creation_54__bases = NULL;
    PyObject *tmp_class_creation_54__bases_orig = NULL;
    PyObject *tmp_class_creation_54__class_decl_dict = NULL;
    PyObject *tmp_class_creation_54__metaclass = NULL;
    PyObject *tmp_class_creation_54__prepared = NULL;
    PyObject *tmp_class_creation_55__bases = NULL;
    PyObject *tmp_class_creation_55__bases_orig = NULL;
    PyObject *tmp_class_creation_55__class_decl_dict = NULL;
    PyObject *tmp_class_creation_55__metaclass = NULL;
    PyObject *tmp_class_creation_55__prepared = NULL;
    PyObject *tmp_class_creation_56__bases = NULL;
    PyObject *tmp_class_creation_56__bases_orig = NULL;
    PyObject *tmp_class_creation_56__class_decl_dict = NULL;
    PyObject *tmp_class_creation_56__metaclass = NULL;
    PyObject *tmp_class_creation_56__prepared = NULL;
    PyObject *tmp_class_creation_57__bases = NULL;
    PyObject *tmp_class_creation_57__bases_orig = NULL;
    PyObject *tmp_class_creation_57__class_decl_dict = NULL;
    PyObject *tmp_class_creation_57__metaclass = NULL;
    PyObject *tmp_class_creation_57__prepared = NULL;
    PyObject *tmp_class_creation_58__bases = NULL;
    PyObject *tmp_class_creation_58__bases_orig = NULL;
    PyObject *tmp_class_creation_58__class_decl_dict = NULL;
    PyObject *tmp_class_creation_58__metaclass = NULL;
    PyObject *tmp_class_creation_58__prepared = NULL;
    PyObject *tmp_class_creation_5__bases = NULL;
    PyObject *tmp_class_creation_5__bases_orig = NULL;
    PyObject *tmp_class_creation_5__class_decl_dict = NULL;
    PyObject *tmp_class_creation_5__metaclass = NULL;
    PyObject *tmp_class_creation_5__prepared = NULL;
    PyObject *tmp_class_creation_6__bases = NULL;
    PyObject *tmp_class_creation_6__bases_orig = NULL;
    PyObject *tmp_class_creation_6__class_decl_dict = NULL;
    PyObject *tmp_class_creation_6__metaclass = NULL;
    PyObject *tmp_class_creation_6__prepared = NULL;
    PyObject *tmp_class_creation_7__bases = NULL;
    PyObject *tmp_class_creation_7__bases_orig = NULL;
    PyObject *tmp_class_creation_7__class_decl_dict = NULL;
    PyObject *tmp_class_creation_7__metaclass = NULL;
    PyObject *tmp_class_creation_7__prepared = NULL;
    PyObject *tmp_class_creation_8__bases = NULL;
    PyObject *tmp_class_creation_8__bases_orig = NULL;
    PyObject *tmp_class_creation_8__class_decl_dict = NULL;
    PyObject *tmp_class_creation_8__metaclass = NULL;
    PyObject *tmp_class_creation_8__prepared = NULL;
    PyObject *tmp_class_creation_9__bases = NULL;
    PyObject *tmp_class_creation_9__bases_orig = NULL;
    PyObject *tmp_class_creation_9__class_decl_dict = NULL;
    PyObject *tmp_class_creation_9__metaclass = NULL;
    PyObject *tmp_class_creation_9__prepared = NULL;
    PyObject *tmp_import_from_1__module = NULL;
    PyObject *tmp_import_from_2__module = NULL;
    struct Nuitka_FrameObject *frame_4cc4ce6283075c7e22e7df36f495c03e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    int tmp_res;
    PyObject *tmp_dictdel_dict;
    PyObject *tmp_dictdel_key;
    PyObject *locals_aiohttp$web_exceptions$$$class__1_HTTPException_75 = NULL;
    PyObject *tmp_dictset_value;
    struct Nuitka_FrameObject *frame_80217f53360cd5c56c7f38707ef87428_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    static struct Nuitka_FrameObject *cache_frame_80217f53360cd5c56c7f38707ef87428_2 = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *locals_aiohttp$web_exceptions$$$class__2_HTTPError_116 = NULL;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *locals_aiohttp$web_exceptions$$$class__3_HTTPRedirection_120 = NULL;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *locals_aiohttp$web_exceptions$$$class__4_HTTPSuccessful_124 = NULL;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *locals_aiohttp$web_exceptions$$$class__5_HTTPOk_128 = NULL;
    struct Nuitka_FrameObject *frame_74b4e629fc5f2c812af1ae5f6716af8e_3;
    NUITKA_MAY_BE_UNUSED char const *type_description_3 = NULL;
    static struct Nuitka_FrameObject *cache_frame_74b4e629fc5f2c812af1ae5f6716af8e_3 = NULL;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_17;
    PyObject *locals_aiohttp$web_exceptions$$$class__6_HTTPCreated_132 = NULL;
    struct Nuitka_FrameObject *frame_272e0c92cba6f37a767cf6fb362468c0_4;
    NUITKA_MAY_BE_UNUSED char const *type_description_4 = NULL;
    static struct Nuitka_FrameObject *cache_frame_272e0c92cba6f37a767cf6fb362468c0_4 = NULL;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_18;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_19;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_20;
    PyObject *locals_aiohttp$web_exceptions$$$class__7_HTTPAccepted_136 = NULL;
    struct Nuitka_FrameObject *frame_10553aca1b0baa9d6fe22af4cd7eda67_5;
    NUITKA_MAY_BE_UNUSED char const *type_description_5 = NULL;
    static struct Nuitka_FrameObject *cache_frame_10553aca1b0baa9d6fe22af4cd7eda67_5 = NULL;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_21;
    PyObject *exception_keeper_type_22;
    PyObject *exception_keeper_value_22;
    PyTracebackObject *exception_keeper_tb_22;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_22;
    PyObject *exception_keeper_type_23;
    PyObject *exception_keeper_value_23;
    PyTracebackObject *exception_keeper_tb_23;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_23;
    PyObject *locals_aiohttp$web_exceptions$$$class__8_HTTPNonAuthoritativeInformation_140 = NULL;
    struct Nuitka_FrameObject *frame_4cb3b9a2c3afe1b42b3f310e2b86ac47_6;
    NUITKA_MAY_BE_UNUSED char const *type_description_6 = NULL;
    static struct Nuitka_FrameObject *cache_frame_4cb3b9a2c3afe1b42b3f310e2b86ac47_6 = NULL;
    PyObject *exception_keeper_type_24;
    PyObject *exception_keeper_value_24;
    PyTracebackObject *exception_keeper_tb_24;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_24;
    PyObject *exception_keeper_type_25;
    PyObject *exception_keeper_value_25;
    PyTracebackObject *exception_keeper_tb_25;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_25;
    PyObject *exception_keeper_type_26;
    PyObject *exception_keeper_value_26;
    PyTracebackObject *exception_keeper_tb_26;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_26;
    PyObject *locals_aiohttp$web_exceptions$$$class__9_HTTPNoContent_144 = NULL;
    struct Nuitka_FrameObject *frame_3333be612be9b91290a6820617d3aff9_7;
    NUITKA_MAY_BE_UNUSED char const *type_description_7 = NULL;
    static struct Nuitka_FrameObject *cache_frame_3333be612be9b91290a6820617d3aff9_7 = NULL;
    PyObject *exception_keeper_type_27;
    PyObject *exception_keeper_value_27;
    PyTracebackObject *exception_keeper_tb_27;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_27;
    PyObject *exception_keeper_type_28;
    PyObject *exception_keeper_value_28;
    PyTracebackObject *exception_keeper_tb_28;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_28;
    PyObject *exception_keeper_type_29;
    PyObject *exception_keeper_value_29;
    PyTracebackObject *exception_keeper_tb_29;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_29;
    PyObject *locals_aiohttp$web_exceptions$$$class__10_HTTPResetContent_149 = NULL;
    struct Nuitka_FrameObject *frame_75d3281b65ea0c378ef76e6ee9f1344e_8;
    NUITKA_MAY_BE_UNUSED char const *type_description_8 = NULL;
    static struct Nuitka_FrameObject *cache_frame_75d3281b65ea0c378ef76e6ee9f1344e_8 = NULL;
    PyObject *exception_keeper_type_30;
    PyObject *exception_keeper_value_30;
    PyTracebackObject *exception_keeper_tb_30;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_30;
    PyObject *exception_keeper_type_31;
    PyObject *exception_keeper_value_31;
    PyTracebackObject *exception_keeper_tb_31;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_31;
    PyObject *exception_keeper_type_32;
    PyObject *exception_keeper_value_32;
    PyTracebackObject *exception_keeper_tb_32;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_32;
    PyObject *locals_aiohttp$web_exceptions$$$class__11_HTTPPartialContent_154 = NULL;
    struct Nuitka_FrameObject *frame_ffb3a9d961fd2f41fbb1a5f6b70ad010_9;
    NUITKA_MAY_BE_UNUSED char const *type_description_9 = NULL;
    static struct Nuitka_FrameObject *cache_frame_ffb3a9d961fd2f41fbb1a5f6b70ad010_9 = NULL;
    PyObject *exception_keeper_type_33;
    PyObject *exception_keeper_value_33;
    PyTracebackObject *exception_keeper_tb_33;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_33;
    PyObject *exception_keeper_type_34;
    PyObject *exception_keeper_value_34;
    PyTracebackObject *exception_keeper_tb_34;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_34;
    PyObject *exception_keeper_type_35;
    PyObject *exception_keeper_value_35;
    PyTracebackObject *exception_keeper_tb_35;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_35;
    PyObject *locals_aiohttp$web_exceptions$$$class__12__HTTPMove_163 = NULL;
    struct Nuitka_FrameObject *frame_d722b1eaa4a23b797a931284584d8257_10;
    NUITKA_MAY_BE_UNUSED char const *type_description_10 = NULL;
    static struct Nuitka_FrameObject *cache_frame_d722b1eaa4a23b797a931284584d8257_10 = NULL;
    PyObject *exception_keeper_type_36;
    PyObject *exception_keeper_value_36;
    PyTracebackObject *exception_keeper_tb_36;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_36;
    PyObject *exception_keeper_type_37;
    PyObject *exception_keeper_value_37;
    PyTracebackObject *exception_keeper_tb_37;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_37;
    PyObject *exception_keeper_type_38;
    PyObject *exception_keeper_value_38;
    PyTracebackObject *exception_keeper_tb_38;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_38;
    PyObject *locals_aiohttp$web_exceptions$$$class__13_HTTPMultipleChoices_187 = NULL;
    struct Nuitka_FrameObject *frame_e0612cdca98a9eeb4c5daf89b6b9d70a_11;
    NUITKA_MAY_BE_UNUSED char const *type_description_11 = NULL;
    static struct Nuitka_FrameObject *cache_frame_e0612cdca98a9eeb4c5daf89b6b9d70a_11 = NULL;
    PyObject *exception_keeper_type_39;
    PyObject *exception_keeper_value_39;
    PyTracebackObject *exception_keeper_tb_39;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_39;
    PyObject *exception_keeper_type_40;
    PyObject *exception_keeper_value_40;
    PyTracebackObject *exception_keeper_tb_40;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_40;
    PyObject *exception_keeper_type_41;
    PyObject *exception_keeper_value_41;
    PyTracebackObject *exception_keeper_tb_41;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_41;
    PyObject *locals_aiohttp$web_exceptions$$$class__14_HTTPMovedPermanently_191 = NULL;
    struct Nuitka_FrameObject *frame_c65f0b71934d64e244a59bc45ea34528_12;
    NUITKA_MAY_BE_UNUSED char const *type_description_12 = NULL;
    static struct Nuitka_FrameObject *cache_frame_c65f0b71934d64e244a59bc45ea34528_12 = NULL;
    PyObject *exception_keeper_type_42;
    PyObject *exception_keeper_value_42;
    PyTracebackObject *exception_keeper_tb_42;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_42;
    PyObject *exception_keeper_type_43;
    PyObject *exception_keeper_value_43;
    PyTracebackObject *exception_keeper_tb_43;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_43;
    PyObject *exception_keeper_type_44;
    PyObject *exception_keeper_value_44;
    PyTracebackObject *exception_keeper_tb_44;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_44;
    PyObject *locals_aiohttp$web_exceptions$$$class__15_HTTPFound_195 = NULL;
    struct Nuitka_FrameObject *frame_181f49a2cef869dc2fa564051fc94c90_13;
    NUITKA_MAY_BE_UNUSED char const *type_description_13 = NULL;
    static struct Nuitka_FrameObject *cache_frame_181f49a2cef869dc2fa564051fc94c90_13 = NULL;
    PyObject *exception_keeper_type_45;
    PyObject *exception_keeper_value_45;
    PyTracebackObject *exception_keeper_tb_45;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_45;
    PyObject *exception_keeper_type_46;
    PyObject *exception_keeper_value_46;
    PyTracebackObject *exception_keeper_tb_46;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_46;
    PyObject *exception_keeper_type_47;
    PyObject *exception_keeper_value_47;
    PyTracebackObject *exception_keeper_tb_47;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_47;
    PyObject *locals_aiohttp$web_exceptions$$$class__16_HTTPSeeOther_201 = NULL;
    struct Nuitka_FrameObject *frame_c9eeeb2528898d4f0d2226f2150e7100_14;
    NUITKA_MAY_BE_UNUSED char const *type_description_14 = NULL;
    static struct Nuitka_FrameObject *cache_frame_c9eeeb2528898d4f0d2226f2150e7100_14 = NULL;
    PyObject *exception_keeper_type_48;
    PyObject *exception_keeper_value_48;
    PyTracebackObject *exception_keeper_tb_48;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_48;
    PyObject *exception_keeper_type_49;
    PyObject *exception_keeper_value_49;
    PyTracebackObject *exception_keeper_tb_49;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_49;
    PyObject *exception_keeper_type_50;
    PyObject *exception_keeper_value_50;
    PyTracebackObject *exception_keeper_tb_50;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_50;
    PyObject *locals_aiohttp$web_exceptions$$$class__17_HTTPNotModified_205 = NULL;
    struct Nuitka_FrameObject *frame_af43bceb6f688d49590950019f7fbcda_15;
    NUITKA_MAY_BE_UNUSED char const *type_description_15 = NULL;
    static struct Nuitka_FrameObject *cache_frame_af43bceb6f688d49590950019f7fbcda_15 = NULL;
    PyObject *exception_keeper_type_51;
    PyObject *exception_keeper_value_51;
    PyTracebackObject *exception_keeper_tb_51;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_51;
    PyObject *exception_keeper_type_52;
    PyObject *exception_keeper_value_52;
    PyTracebackObject *exception_keeper_tb_52;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_52;
    PyObject *exception_keeper_type_53;
    PyObject *exception_keeper_value_53;
    PyTracebackObject *exception_keeper_tb_53;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_53;
    PyObject *locals_aiohttp$web_exceptions$$$class__18_HTTPUseProxy_211 = NULL;
    struct Nuitka_FrameObject *frame_59c8aa990f11ff133b6bd6c60f3d66ff_16;
    NUITKA_MAY_BE_UNUSED char const *type_description_16 = NULL;
    static struct Nuitka_FrameObject *cache_frame_59c8aa990f11ff133b6bd6c60f3d66ff_16 = NULL;
    PyObject *exception_keeper_type_54;
    PyObject *exception_keeper_value_54;
    PyTracebackObject *exception_keeper_tb_54;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_54;
    PyObject *exception_keeper_type_55;
    PyObject *exception_keeper_value_55;
    PyTracebackObject *exception_keeper_tb_55;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_55;
    PyObject *exception_keeper_type_56;
    PyObject *exception_keeper_value_56;
    PyTracebackObject *exception_keeper_tb_56;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_56;
    PyObject *locals_aiohttp$web_exceptions$$$class__19_HTTPTemporaryRedirect_216 = NULL;
    struct Nuitka_FrameObject *frame_30d1733a30c16574e3f49de3c14624a1_17;
    NUITKA_MAY_BE_UNUSED char const *type_description_17 = NULL;
    static struct Nuitka_FrameObject *cache_frame_30d1733a30c16574e3f49de3c14624a1_17 = NULL;
    PyObject *exception_keeper_type_57;
    PyObject *exception_keeper_value_57;
    PyTracebackObject *exception_keeper_tb_57;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_57;
    PyObject *exception_keeper_type_58;
    PyObject *exception_keeper_value_58;
    PyTracebackObject *exception_keeper_tb_58;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_58;
    PyObject *exception_keeper_type_59;
    PyObject *exception_keeper_value_59;
    PyTracebackObject *exception_keeper_tb_59;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_59;
    PyObject *locals_aiohttp$web_exceptions$$$class__20_HTTPPermanentRedirect_220 = NULL;
    struct Nuitka_FrameObject *frame_d9d75d15b1dec25cbf3f516a4adba3a7_18;
    NUITKA_MAY_BE_UNUSED char const *type_description_18 = NULL;
    static struct Nuitka_FrameObject *cache_frame_d9d75d15b1dec25cbf3f516a4adba3a7_18 = NULL;
    PyObject *exception_keeper_type_60;
    PyObject *exception_keeper_value_60;
    PyTracebackObject *exception_keeper_tb_60;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_60;
    PyObject *exception_keeper_type_61;
    PyObject *exception_keeper_value_61;
    PyTracebackObject *exception_keeper_tb_61;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_61;
    PyObject *exception_keeper_type_62;
    PyObject *exception_keeper_value_62;
    PyTracebackObject *exception_keeper_tb_62;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_62;
    PyObject *locals_aiohttp$web_exceptions$$$class__21_HTTPClientError_229 = NULL;
    PyObject *exception_keeper_type_63;
    PyObject *exception_keeper_value_63;
    PyTracebackObject *exception_keeper_tb_63;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_63;
    PyObject *exception_keeper_type_64;
    PyObject *exception_keeper_value_64;
    PyTracebackObject *exception_keeper_tb_64;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_64;
    PyObject *exception_keeper_type_65;
    PyObject *exception_keeper_value_65;
    PyTracebackObject *exception_keeper_tb_65;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_65;
    PyObject *locals_aiohttp$web_exceptions$$$class__22_HTTPBadRequest_233 = NULL;
    struct Nuitka_FrameObject *frame_b808cbf6ef3af6bdee26d60d49d98fe9_19;
    NUITKA_MAY_BE_UNUSED char const *type_description_19 = NULL;
    static struct Nuitka_FrameObject *cache_frame_b808cbf6ef3af6bdee26d60d49d98fe9_19 = NULL;
    PyObject *exception_keeper_type_66;
    PyObject *exception_keeper_value_66;
    PyTracebackObject *exception_keeper_tb_66;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_66;
    PyObject *exception_keeper_type_67;
    PyObject *exception_keeper_value_67;
    PyTracebackObject *exception_keeper_tb_67;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_67;
    PyObject *exception_keeper_type_68;
    PyObject *exception_keeper_value_68;
    PyTracebackObject *exception_keeper_tb_68;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_68;
    PyObject *locals_aiohttp$web_exceptions$$$class__23_HTTPUnauthorized_237 = NULL;
    struct Nuitka_FrameObject *frame_896f721b3cdd968a04613eb95bac246a_20;
    NUITKA_MAY_BE_UNUSED char const *type_description_20 = NULL;
    static struct Nuitka_FrameObject *cache_frame_896f721b3cdd968a04613eb95bac246a_20 = NULL;
    PyObject *exception_keeper_type_69;
    PyObject *exception_keeper_value_69;
    PyTracebackObject *exception_keeper_tb_69;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_69;
    PyObject *exception_keeper_type_70;
    PyObject *exception_keeper_value_70;
    PyTracebackObject *exception_keeper_tb_70;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_70;
    PyObject *exception_keeper_type_71;
    PyObject *exception_keeper_value_71;
    PyTracebackObject *exception_keeper_tb_71;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_71;
    PyObject *locals_aiohttp$web_exceptions$$$class__24_HTTPPaymentRequired_241 = NULL;
    struct Nuitka_FrameObject *frame_505fdc7799db46a65af4a0df2e063cea_21;
    NUITKA_MAY_BE_UNUSED char const *type_description_21 = NULL;
    static struct Nuitka_FrameObject *cache_frame_505fdc7799db46a65af4a0df2e063cea_21 = NULL;
    PyObject *exception_keeper_type_72;
    PyObject *exception_keeper_value_72;
    PyTracebackObject *exception_keeper_tb_72;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_72;
    PyObject *exception_keeper_type_73;
    PyObject *exception_keeper_value_73;
    PyTracebackObject *exception_keeper_tb_73;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_73;
    PyObject *exception_keeper_type_74;
    PyObject *exception_keeper_value_74;
    PyTracebackObject *exception_keeper_tb_74;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_74;
    PyObject *locals_aiohttp$web_exceptions$$$class__25_HTTPForbidden_245 = NULL;
    struct Nuitka_FrameObject *frame_b8b1950400aaf4510ee2d2ee8e8ca436_22;
    NUITKA_MAY_BE_UNUSED char const *type_description_22 = NULL;
    static struct Nuitka_FrameObject *cache_frame_b8b1950400aaf4510ee2d2ee8e8ca436_22 = NULL;
    PyObject *exception_keeper_type_75;
    PyObject *exception_keeper_value_75;
    PyTracebackObject *exception_keeper_tb_75;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_75;
    PyObject *exception_keeper_type_76;
    PyObject *exception_keeper_value_76;
    PyTracebackObject *exception_keeper_tb_76;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_76;
    PyObject *exception_keeper_type_77;
    PyObject *exception_keeper_value_77;
    PyTracebackObject *exception_keeper_tb_77;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_77;
    PyObject *locals_aiohttp$web_exceptions$$$class__26_HTTPNotFound_249 = NULL;
    struct Nuitka_FrameObject *frame_bddc09fead8ce6f71a6830ba5da102b2_23;
    NUITKA_MAY_BE_UNUSED char const *type_description_23 = NULL;
    static struct Nuitka_FrameObject *cache_frame_bddc09fead8ce6f71a6830ba5da102b2_23 = NULL;
    PyObject *exception_keeper_type_78;
    PyObject *exception_keeper_value_78;
    PyTracebackObject *exception_keeper_tb_78;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_78;
    PyObject *exception_keeper_type_79;
    PyObject *exception_keeper_value_79;
    PyTracebackObject *exception_keeper_tb_79;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_79;
    PyObject *exception_keeper_type_80;
    PyObject *exception_keeper_value_80;
    PyTracebackObject *exception_keeper_tb_80;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_80;
    PyObject *locals_aiohttp$web_exceptions$$$class__27_HTTPMethodNotAllowed_253 = NULL;
    struct Nuitka_FrameObject *frame_2e3ec85c770b6095e5b520d4af534846_24;
    NUITKA_MAY_BE_UNUSED char const *type_description_24 = NULL;
    static struct Nuitka_FrameObject *cache_frame_2e3ec85c770b6095e5b520d4af534846_24 = NULL;
    PyObject *exception_keeper_type_81;
    PyObject *exception_keeper_value_81;
    PyTracebackObject *exception_keeper_tb_81;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_81;
    PyObject *exception_keeper_type_82;
    PyObject *exception_keeper_value_82;
    PyTracebackObject *exception_keeper_tb_82;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_82;
    PyObject *exception_keeper_type_83;
    PyObject *exception_keeper_value_83;
    PyTracebackObject *exception_keeper_tb_83;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_83;
    PyObject *locals_aiohttp$web_exceptions$$$class__28_HTTPNotAcceptable_280 = NULL;
    struct Nuitka_FrameObject *frame_0793e14ad2280948d27cc37307622bef_25;
    NUITKA_MAY_BE_UNUSED char const *type_description_25 = NULL;
    static struct Nuitka_FrameObject *cache_frame_0793e14ad2280948d27cc37307622bef_25 = NULL;
    PyObject *exception_keeper_type_84;
    PyObject *exception_keeper_value_84;
    PyTracebackObject *exception_keeper_tb_84;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_84;
    PyObject *exception_keeper_type_85;
    PyObject *exception_keeper_value_85;
    PyTracebackObject *exception_keeper_tb_85;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_85;
    PyObject *exception_keeper_type_86;
    PyObject *exception_keeper_value_86;
    PyTracebackObject *exception_keeper_tb_86;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_86;
    PyObject *locals_aiohttp$web_exceptions$$$class__29_HTTPProxyAuthenticationRequired_284 = NULL;
    struct Nuitka_FrameObject *frame_5c97ef15107b228a5dc1a4e78aa80612_26;
    NUITKA_MAY_BE_UNUSED char const *type_description_26 = NULL;
    static struct Nuitka_FrameObject *cache_frame_5c97ef15107b228a5dc1a4e78aa80612_26 = NULL;
    PyObject *exception_keeper_type_87;
    PyObject *exception_keeper_value_87;
    PyTracebackObject *exception_keeper_tb_87;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_87;
    PyObject *exception_keeper_type_88;
    PyObject *exception_keeper_value_88;
    PyTracebackObject *exception_keeper_tb_88;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_88;
    PyObject *exception_keeper_type_89;
    PyObject *exception_keeper_value_89;
    PyTracebackObject *exception_keeper_tb_89;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_89;
    PyObject *locals_aiohttp$web_exceptions$$$class__30_HTTPRequestTimeout_288 = NULL;
    struct Nuitka_FrameObject *frame_865ef81c8777678d1d66964a3cdf063c_27;
    NUITKA_MAY_BE_UNUSED char const *type_description_27 = NULL;
    static struct Nuitka_FrameObject *cache_frame_865ef81c8777678d1d66964a3cdf063c_27 = NULL;
    PyObject *exception_keeper_type_90;
    PyObject *exception_keeper_value_90;
    PyTracebackObject *exception_keeper_tb_90;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_90;
    PyObject *exception_keeper_type_91;
    PyObject *exception_keeper_value_91;
    PyTracebackObject *exception_keeper_tb_91;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_91;
    PyObject *exception_keeper_type_92;
    PyObject *exception_keeper_value_92;
    PyTracebackObject *exception_keeper_tb_92;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_92;
    PyObject *locals_aiohttp$web_exceptions$$$class__31_HTTPConflict_292 = NULL;
    struct Nuitka_FrameObject *frame_b3e20ebc481aefb7887320a4b7e86857_28;
    NUITKA_MAY_BE_UNUSED char const *type_description_28 = NULL;
    static struct Nuitka_FrameObject *cache_frame_b3e20ebc481aefb7887320a4b7e86857_28 = NULL;
    PyObject *exception_keeper_type_93;
    PyObject *exception_keeper_value_93;
    PyTracebackObject *exception_keeper_tb_93;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_93;
    PyObject *exception_keeper_type_94;
    PyObject *exception_keeper_value_94;
    PyTracebackObject *exception_keeper_tb_94;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_94;
    PyObject *exception_keeper_type_95;
    PyObject *exception_keeper_value_95;
    PyTracebackObject *exception_keeper_tb_95;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_95;
    PyObject *locals_aiohttp$web_exceptions$$$class__32_HTTPGone_296 = NULL;
    struct Nuitka_FrameObject *frame_225ebbd64dcf77cc25245db7a78a0798_29;
    NUITKA_MAY_BE_UNUSED char const *type_description_29 = NULL;
    static struct Nuitka_FrameObject *cache_frame_225ebbd64dcf77cc25245db7a78a0798_29 = NULL;
    PyObject *exception_keeper_type_96;
    PyObject *exception_keeper_value_96;
    PyTracebackObject *exception_keeper_tb_96;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_96;
    PyObject *exception_keeper_type_97;
    PyObject *exception_keeper_value_97;
    PyTracebackObject *exception_keeper_tb_97;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_97;
    PyObject *exception_keeper_type_98;
    PyObject *exception_keeper_value_98;
    PyTracebackObject *exception_keeper_tb_98;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_98;
    PyObject *locals_aiohttp$web_exceptions$$$class__33_HTTPLengthRequired_300 = NULL;
    struct Nuitka_FrameObject *frame_de2bddd7e35a811b3091eb861bb3130e_30;
    NUITKA_MAY_BE_UNUSED char const *type_description_30 = NULL;
    static struct Nuitka_FrameObject *cache_frame_de2bddd7e35a811b3091eb861bb3130e_30 = NULL;
    PyObject *exception_keeper_type_99;
    PyObject *exception_keeper_value_99;
    PyTracebackObject *exception_keeper_tb_99;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_99;
    PyObject *exception_keeper_type_100;
    PyObject *exception_keeper_value_100;
    PyTracebackObject *exception_keeper_tb_100;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_100;
    PyObject *exception_keeper_type_101;
    PyObject *exception_keeper_value_101;
    PyTracebackObject *exception_keeper_tb_101;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_101;
    PyObject *locals_aiohttp$web_exceptions$$$class__34_HTTPPreconditionFailed_304 = NULL;
    struct Nuitka_FrameObject *frame_e51cc26c7b2ac1910ca557fda89970b0_31;
    NUITKA_MAY_BE_UNUSED char const *type_description_31 = NULL;
    static struct Nuitka_FrameObject *cache_frame_e51cc26c7b2ac1910ca557fda89970b0_31 = NULL;
    PyObject *exception_keeper_type_102;
    PyObject *exception_keeper_value_102;
    PyTracebackObject *exception_keeper_tb_102;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_102;
    PyObject *exception_keeper_type_103;
    PyObject *exception_keeper_value_103;
    PyTracebackObject *exception_keeper_tb_103;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_103;
    PyObject *exception_keeper_type_104;
    PyObject *exception_keeper_value_104;
    PyTracebackObject *exception_keeper_tb_104;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_104;
    PyObject *locals_aiohttp$web_exceptions$$$class__35_HTTPRequestEntityTooLarge_308 = NULL;
    struct Nuitka_FrameObject *frame_15a6f6e6299c3b077a96876bf02a4c05_32;
    NUITKA_MAY_BE_UNUSED char const *type_description_32 = NULL;
    static struct Nuitka_FrameObject *cache_frame_15a6f6e6299c3b077a96876bf02a4c05_32 = NULL;
    PyObject *exception_keeper_type_105;
    PyObject *exception_keeper_value_105;
    PyTracebackObject *exception_keeper_tb_105;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_105;
    PyObject *exception_keeper_type_106;
    PyObject *exception_keeper_value_106;
    PyTracebackObject *exception_keeper_tb_106;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_106;
    PyObject *exception_keeper_type_107;
    PyObject *exception_keeper_value_107;
    PyTracebackObject *exception_keeper_tb_107;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_107;
    PyObject *locals_aiohttp$web_exceptions$$$class__36_HTTPRequestURITooLong_320 = NULL;
    struct Nuitka_FrameObject *frame_01261c52d8188d40d0a4e5d8b40ac498_33;
    NUITKA_MAY_BE_UNUSED char const *type_description_33 = NULL;
    static struct Nuitka_FrameObject *cache_frame_01261c52d8188d40d0a4e5d8b40ac498_33 = NULL;
    PyObject *exception_keeper_type_108;
    PyObject *exception_keeper_value_108;
    PyTracebackObject *exception_keeper_tb_108;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_108;
    PyObject *exception_keeper_type_109;
    PyObject *exception_keeper_value_109;
    PyTracebackObject *exception_keeper_tb_109;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_109;
    PyObject *exception_keeper_type_110;
    PyObject *exception_keeper_value_110;
    PyTracebackObject *exception_keeper_tb_110;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_110;
    PyObject *locals_aiohttp$web_exceptions$$$class__37_HTTPUnsupportedMediaType_324 = NULL;
    struct Nuitka_FrameObject *frame_2af87b89d09c5805b18af331cdb15cbf_34;
    NUITKA_MAY_BE_UNUSED char const *type_description_34 = NULL;
    static struct Nuitka_FrameObject *cache_frame_2af87b89d09c5805b18af331cdb15cbf_34 = NULL;
    PyObject *exception_keeper_type_111;
    PyObject *exception_keeper_value_111;
    PyTracebackObject *exception_keeper_tb_111;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_111;
    PyObject *exception_keeper_type_112;
    PyObject *exception_keeper_value_112;
    PyTracebackObject *exception_keeper_tb_112;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_112;
    PyObject *exception_keeper_type_113;
    PyObject *exception_keeper_value_113;
    PyTracebackObject *exception_keeper_tb_113;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_113;
    PyObject *locals_aiohttp$web_exceptions$$$class__38_HTTPRequestRangeNotSatisfiable_328 = NULL;
    struct Nuitka_FrameObject *frame_a9c95723eb0c85289c3d8f02ca34f1a9_35;
    NUITKA_MAY_BE_UNUSED char const *type_description_35 = NULL;
    static struct Nuitka_FrameObject *cache_frame_a9c95723eb0c85289c3d8f02ca34f1a9_35 = NULL;
    PyObject *exception_keeper_type_114;
    PyObject *exception_keeper_value_114;
    PyTracebackObject *exception_keeper_tb_114;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_114;
    PyObject *exception_keeper_type_115;
    PyObject *exception_keeper_value_115;
    PyTracebackObject *exception_keeper_tb_115;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_115;
    PyObject *exception_keeper_type_116;
    PyObject *exception_keeper_value_116;
    PyTracebackObject *exception_keeper_tb_116;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_116;
    PyObject *locals_aiohttp$web_exceptions$$$class__39_HTTPExpectationFailed_332 = NULL;
    struct Nuitka_FrameObject *frame_c4a26f5fe9959d9818187a46bdfb5bad_36;
    NUITKA_MAY_BE_UNUSED char const *type_description_36 = NULL;
    static struct Nuitka_FrameObject *cache_frame_c4a26f5fe9959d9818187a46bdfb5bad_36 = NULL;
    PyObject *exception_keeper_type_117;
    PyObject *exception_keeper_value_117;
    PyTracebackObject *exception_keeper_tb_117;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_117;
    PyObject *exception_keeper_type_118;
    PyObject *exception_keeper_value_118;
    PyTracebackObject *exception_keeper_tb_118;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_118;
    PyObject *exception_keeper_type_119;
    PyObject *exception_keeper_value_119;
    PyTracebackObject *exception_keeper_tb_119;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_119;
    PyObject *locals_aiohttp$web_exceptions$$$class__40_HTTPMisdirectedRequest_336 = NULL;
    struct Nuitka_FrameObject *frame_01fcbdf2f4502716019041a2a602baba_37;
    NUITKA_MAY_BE_UNUSED char const *type_description_37 = NULL;
    static struct Nuitka_FrameObject *cache_frame_01fcbdf2f4502716019041a2a602baba_37 = NULL;
    PyObject *exception_keeper_type_120;
    PyObject *exception_keeper_value_120;
    PyTracebackObject *exception_keeper_tb_120;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_120;
    PyObject *exception_keeper_type_121;
    PyObject *exception_keeper_value_121;
    PyTracebackObject *exception_keeper_tb_121;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_121;
    PyObject *exception_keeper_type_122;
    PyObject *exception_keeper_value_122;
    PyTracebackObject *exception_keeper_tb_122;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_122;
    PyObject *locals_aiohttp$web_exceptions$$$class__41_HTTPUnprocessableEntity_340 = NULL;
    struct Nuitka_FrameObject *frame_42436eb2d657bbc44709221a8551bf5b_38;
    NUITKA_MAY_BE_UNUSED char const *type_description_38 = NULL;
    static struct Nuitka_FrameObject *cache_frame_42436eb2d657bbc44709221a8551bf5b_38 = NULL;
    PyObject *exception_keeper_type_123;
    PyObject *exception_keeper_value_123;
    PyTracebackObject *exception_keeper_tb_123;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_123;
    PyObject *exception_keeper_type_124;
    PyObject *exception_keeper_value_124;
    PyTracebackObject *exception_keeper_tb_124;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_124;
    PyObject *exception_keeper_type_125;
    PyObject *exception_keeper_value_125;
    PyTracebackObject *exception_keeper_tb_125;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_125;
    PyObject *locals_aiohttp$web_exceptions$$$class__42_HTTPFailedDependency_344 = NULL;
    struct Nuitka_FrameObject *frame_b9359806fd69eb34ab65f4475b632b3b_39;
    NUITKA_MAY_BE_UNUSED char const *type_description_39 = NULL;
    static struct Nuitka_FrameObject *cache_frame_b9359806fd69eb34ab65f4475b632b3b_39 = NULL;
    PyObject *exception_keeper_type_126;
    PyObject *exception_keeper_value_126;
    PyTracebackObject *exception_keeper_tb_126;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_126;
    PyObject *exception_keeper_type_127;
    PyObject *exception_keeper_value_127;
    PyTracebackObject *exception_keeper_tb_127;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_127;
    PyObject *exception_keeper_type_128;
    PyObject *exception_keeper_value_128;
    PyTracebackObject *exception_keeper_tb_128;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_128;
    PyObject *locals_aiohttp$web_exceptions$$$class__43_HTTPUpgradeRequired_348 = NULL;
    struct Nuitka_FrameObject *frame_bef66d9d272a1b169590545e494b1c63_40;
    NUITKA_MAY_BE_UNUSED char const *type_description_40 = NULL;
    static struct Nuitka_FrameObject *cache_frame_bef66d9d272a1b169590545e494b1c63_40 = NULL;
    PyObject *exception_keeper_type_129;
    PyObject *exception_keeper_value_129;
    PyTracebackObject *exception_keeper_tb_129;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_129;
    PyObject *exception_keeper_type_130;
    PyObject *exception_keeper_value_130;
    PyTracebackObject *exception_keeper_tb_130;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_130;
    PyObject *exception_keeper_type_131;
    PyObject *exception_keeper_value_131;
    PyTracebackObject *exception_keeper_tb_131;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_131;
    PyObject *locals_aiohttp$web_exceptions$$$class__44_HTTPPreconditionRequired_352 = NULL;
    struct Nuitka_FrameObject *frame_6012f98e075057dbf8f05f7da0e41c76_41;
    NUITKA_MAY_BE_UNUSED char const *type_description_41 = NULL;
    static struct Nuitka_FrameObject *cache_frame_6012f98e075057dbf8f05f7da0e41c76_41 = NULL;
    PyObject *exception_keeper_type_132;
    PyObject *exception_keeper_value_132;
    PyTracebackObject *exception_keeper_tb_132;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_132;
    PyObject *exception_keeper_type_133;
    PyObject *exception_keeper_value_133;
    PyTracebackObject *exception_keeper_tb_133;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_133;
    PyObject *exception_keeper_type_134;
    PyObject *exception_keeper_value_134;
    PyTracebackObject *exception_keeper_tb_134;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_134;
    PyObject *locals_aiohttp$web_exceptions$$$class__45_HTTPTooManyRequests_356 = NULL;
    struct Nuitka_FrameObject *frame_08772f8718f00154fa2a03650fa59b0f_42;
    NUITKA_MAY_BE_UNUSED char const *type_description_42 = NULL;
    static struct Nuitka_FrameObject *cache_frame_08772f8718f00154fa2a03650fa59b0f_42 = NULL;
    PyObject *exception_keeper_type_135;
    PyObject *exception_keeper_value_135;
    PyTracebackObject *exception_keeper_tb_135;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_135;
    PyObject *exception_keeper_type_136;
    PyObject *exception_keeper_value_136;
    PyTracebackObject *exception_keeper_tb_136;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_136;
    PyObject *exception_keeper_type_137;
    PyObject *exception_keeper_value_137;
    PyTracebackObject *exception_keeper_tb_137;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_137;
    PyObject *locals_aiohttp$web_exceptions$$$class__46_HTTPRequestHeaderFieldsTooLarge_360 = NULL;
    struct Nuitka_FrameObject *frame_fe9477504f315378ef668bd520edff9f_43;
    NUITKA_MAY_BE_UNUSED char const *type_description_43 = NULL;
    static struct Nuitka_FrameObject *cache_frame_fe9477504f315378ef668bd520edff9f_43 = NULL;
    PyObject *exception_keeper_type_138;
    PyObject *exception_keeper_value_138;
    PyTracebackObject *exception_keeper_tb_138;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_138;
    PyObject *exception_keeper_type_139;
    PyObject *exception_keeper_value_139;
    PyTracebackObject *exception_keeper_tb_139;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_139;
    PyObject *exception_keeper_type_140;
    PyObject *exception_keeper_value_140;
    PyTracebackObject *exception_keeper_tb_140;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_140;
    PyObject *locals_aiohttp$web_exceptions$$$class__47_HTTPUnavailableForLegalReasons_364 = NULL;
    struct Nuitka_FrameObject *frame_5aef0c65e990ae5a2e475e7167364ce1_44;
    NUITKA_MAY_BE_UNUSED char const *type_description_44 = NULL;
    static struct Nuitka_FrameObject *cache_frame_5aef0c65e990ae5a2e475e7167364ce1_44 = NULL;
    PyObject *exception_keeper_type_141;
    PyObject *exception_keeper_value_141;
    PyTracebackObject *exception_keeper_tb_141;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_141;
    PyObject *exception_keeper_type_142;
    PyObject *exception_keeper_value_142;
    PyTracebackObject *exception_keeper_tb_142;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_142;
    PyObject *exception_keeper_type_143;
    PyObject *exception_keeper_value_143;
    PyTracebackObject *exception_keeper_tb_143;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_143;
    PyObject *locals_aiohttp$web_exceptions$$$class__48_HTTPServerError_400 = NULL;
    PyObject *exception_keeper_type_144;
    PyObject *exception_keeper_value_144;
    PyTracebackObject *exception_keeper_tb_144;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_144;
    PyObject *exception_keeper_type_145;
    PyObject *exception_keeper_value_145;
    PyTracebackObject *exception_keeper_tb_145;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_145;
    PyObject *exception_keeper_type_146;
    PyObject *exception_keeper_value_146;
    PyTracebackObject *exception_keeper_tb_146;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_146;
    PyObject *locals_aiohttp$web_exceptions$$$class__49_HTTPInternalServerError_404 = NULL;
    struct Nuitka_FrameObject *frame_43334e89c6d959f581e7f84ba15d7213_45;
    NUITKA_MAY_BE_UNUSED char const *type_description_45 = NULL;
    static struct Nuitka_FrameObject *cache_frame_43334e89c6d959f581e7f84ba15d7213_45 = NULL;
    PyObject *exception_keeper_type_147;
    PyObject *exception_keeper_value_147;
    PyTracebackObject *exception_keeper_tb_147;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_147;
    PyObject *exception_keeper_type_148;
    PyObject *exception_keeper_value_148;
    PyTracebackObject *exception_keeper_tb_148;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_148;
    PyObject *exception_keeper_type_149;
    PyObject *exception_keeper_value_149;
    PyTracebackObject *exception_keeper_tb_149;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_149;
    PyObject *locals_aiohttp$web_exceptions$$$class__50_HTTPNotImplemented_408 = NULL;
    struct Nuitka_FrameObject *frame_c9a228b4216d2a6a7d61ecb3f7098702_46;
    NUITKA_MAY_BE_UNUSED char const *type_description_46 = NULL;
    static struct Nuitka_FrameObject *cache_frame_c9a228b4216d2a6a7d61ecb3f7098702_46 = NULL;
    PyObject *exception_keeper_type_150;
    PyObject *exception_keeper_value_150;
    PyTracebackObject *exception_keeper_tb_150;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_150;
    PyObject *exception_keeper_type_151;
    PyObject *exception_keeper_value_151;
    PyTracebackObject *exception_keeper_tb_151;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_151;
    PyObject *exception_keeper_type_152;
    PyObject *exception_keeper_value_152;
    PyTracebackObject *exception_keeper_tb_152;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_152;
    PyObject *locals_aiohttp$web_exceptions$$$class__51_HTTPBadGateway_412 = NULL;
    struct Nuitka_FrameObject *frame_ca6df3e14563b007807148668134a6e3_47;
    NUITKA_MAY_BE_UNUSED char const *type_description_47 = NULL;
    static struct Nuitka_FrameObject *cache_frame_ca6df3e14563b007807148668134a6e3_47 = NULL;
    PyObject *exception_keeper_type_153;
    PyObject *exception_keeper_value_153;
    PyTracebackObject *exception_keeper_tb_153;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_153;
    PyObject *exception_keeper_type_154;
    PyObject *exception_keeper_value_154;
    PyTracebackObject *exception_keeper_tb_154;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_154;
    PyObject *exception_keeper_type_155;
    PyObject *exception_keeper_value_155;
    PyTracebackObject *exception_keeper_tb_155;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_155;
    PyObject *locals_aiohttp$web_exceptions$$$class__52_HTTPServiceUnavailable_416 = NULL;
    struct Nuitka_FrameObject *frame_a1c4d66701877ec2f64023dbbfae569e_48;
    NUITKA_MAY_BE_UNUSED char const *type_description_48 = NULL;
    static struct Nuitka_FrameObject *cache_frame_a1c4d66701877ec2f64023dbbfae569e_48 = NULL;
    PyObject *exception_keeper_type_156;
    PyObject *exception_keeper_value_156;
    PyTracebackObject *exception_keeper_tb_156;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_156;
    PyObject *exception_keeper_type_157;
    PyObject *exception_keeper_value_157;
    PyTracebackObject *exception_keeper_tb_157;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_157;
    PyObject *exception_keeper_type_158;
    PyObject *exception_keeper_value_158;
    PyTracebackObject *exception_keeper_tb_158;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_158;
    PyObject *locals_aiohttp$web_exceptions$$$class__53_HTTPGatewayTimeout_420 = NULL;
    struct Nuitka_FrameObject *frame_fad791a764dc605ee6ecfa957aacc083_49;
    NUITKA_MAY_BE_UNUSED char const *type_description_49 = NULL;
    static struct Nuitka_FrameObject *cache_frame_fad791a764dc605ee6ecfa957aacc083_49 = NULL;
    PyObject *exception_keeper_type_159;
    PyObject *exception_keeper_value_159;
    PyTracebackObject *exception_keeper_tb_159;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_159;
    PyObject *exception_keeper_type_160;
    PyObject *exception_keeper_value_160;
    PyTracebackObject *exception_keeper_tb_160;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_160;
    PyObject *exception_keeper_type_161;
    PyObject *exception_keeper_value_161;
    PyTracebackObject *exception_keeper_tb_161;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_161;
    PyObject *locals_aiohttp$web_exceptions$$$class__54_HTTPVersionNotSupported_424 = NULL;
    struct Nuitka_FrameObject *frame_e5b444f618430b69c6774bc55db0cf9a_50;
    NUITKA_MAY_BE_UNUSED char const *type_description_50 = NULL;
    static struct Nuitka_FrameObject *cache_frame_e5b444f618430b69c6774bc55db0cf9a_50 = NULL;
    PyObject *exception_keeper_type_162;
    PyObject *exception_keeper_value_162;
    PyTracebackObject *exception_keeper_tb_162;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_162;
    PyObject *exception_keeper_type_163;
    PyObject *exception_keeper_value_163;
    PyTracebackObject *exception_keeper_tb_163;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_163;
    PyObject *exception_keeper_type_164;
    PyObject *exception_keeper_value_164;
    PyTracebackObject *exception_keeper_tb_164;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_164;
    PyObject *locals_aiohttp$web_exceptions$$$class__55_HTTPVariantAlsoNegotiates_428 = NULL;
    struct Nuitka_FrameObject *frame_7feecd1d433f004b2b75d7760af86b01_51;
    NUITKA_MAY_BE_UNUSED char const *type_description_51 = NULL;
    static struct Nuitka_FrameObject *cache_frame_7feecd1d433f004b2b75d7760af86b01_51 = NULL;
    PyObject *exception_keeper_type_165;
    PyObject *exception_keeper_value_165;
    PyTracebackObject *exception_keeper_tb_165;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_165;
    PyObject *exception_keeper_type_166;
    PyObject *exception_keeper_value_166;
    PyTracebackObject *exception_keeper_tb_166;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_166;
    PyObject *exception_keeper_type_167;
    PyObject *exception_keeper_value_167;
    PyTracebackObject *exception_keeper_tb_167;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_167;
    PyObject *locals_aiohttp$web_exceptions$$$class__56_HTTPInsufficientStorage_432 = NULL;
    struct Nuitka_FrameObject *frame_3d7b12a82ae59edea9bc637972ca445a_52;
    NUITKA_MAY_BE_UNUSED char const *type_description_52 = NULL;
    static struct Nuitka_FrameObject *cache_frame_3d7b12a82ae59edea9bc637972ca445a_52 = NULL;
    PyObject *exception_keeper_type_168;
    PyObject *exception_keeper_value_168;
    PyTracebackObject *exception_keeper_tb_168;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_168;
    PyObject *exception_keeper_type_169;
    PyObject *exception_keeper_value_169;
    PyTracebackObject *exception_keeper_tb_169;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_169;
    PyObject *exception_keeper_type_170;
    PyObject *exception_keeper_value_170;
    PyTracebackObject *exception_keeper_tb_170;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_170;
    PyObject *locals_aiohttp$web_exceptions$$$class__57_HTTPNotExtended_436 = NULL;
    struct Nuitka_FrameObject *frame_9aa37884b5c621e87e0f0ba3fd314cbc_53;
    NUITKA_MAY_BE_UNUSED char const *type_description_53 = NULL;
    static struct Nuitka_FrameObject *cache_frame_9aa37884b5c621e87e0f0ba3fd314cbc_53 = NULL;
    PyObject *exception_keeper_type_171;
    PyObject *exception_keeper_value_171;
    PyTracebackObject *exception_keeper_tb_171;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_171;
    PyObject *exception_keeper_type_172;
    PyObject *exception_keeper_value_172;
    PyTracebackObject *exception_keeper_tb_172;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_172;
    PyObject *exception_keeper_type_173;
    PyObject *exception_keeper_value_173;
    PyTracebackObject *exception_keeper_tb_173;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_173;
    PyObject *locals_aiohttp$web_exceptions$$$class__58_HTTPNetworkAuthenticationRequired_440 = NULL;
    struct Nuitka_FrameObject *frame_40a2aafd85dbb744639560e9d429f0b3_54;
    NUITKA_MAY_BE_UNUSED char const *type_description_54 = NULL;
    static struct Nuitka_FrameObject *cache_frame_40a2aafd85dbb744639560e9d429f0b3_54 = NULL;
    PyObject *exception_keeper_type_174;
    PyObject *exception_keeper_value_174;
    PyTracebackObject *exception_keeper_tb_174;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_174;
    PyObject *exception_keeper_type_175;
    PyObject *exception_keeper_value_175;
    PyTracebackObject *exception_keeper_tb_175;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_175;
    PyObject *exception_keeper_type_176;
    PyObject *exception_keeper_value_176;
    PyTracebackObject *exception_keeper_tb_176;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_176;

    // Module code.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = Py_None;
        UPDATE_STRING_DICT0(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[33], tmp_assign_source_1);
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = module_filename_obj;
        UPDATE_STRING_DICT0(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[34], tmp_assign_source_2);
    }
    // Frame without reuse.
    frame_4cc4ce6283075c7e22e7df36f495c03e = MAKE_MODULE_FRAME(codeobj_4cc4ce6283075c7e22e7df36f495c03e, module_aiohttp$web_exceptions);

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack(frame_4cc4ce6283075c7e22e7df36f495c03e);
    assert(Py_REFCNT(frame_4cc4ce6283075c7e22e7df36f495c03e) == 2);

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_value_1 = module_filename_obj;
        tmp_assattr_target_1 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[35]);

        if (unlikely(tmp_assattr_target_1 == NULL)) {
            tmp_assattr_target_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[35]);
        }

        assert(!(tmp_assattr_target_1 == NULL));
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[36], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_value_2 = Py_True;
        tmp_assattr_target_2 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[35]);

        if (unlikely(tmp_assattr_target_2 == NULL)) {
            tmp_assattr_target_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[35]);
        }

        assert(!(tmp_assattr_target_2 == NULL));
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[37], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = Py_None;
        UPDATE_STRING_DICT0(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[38], tmp_assign_source_3);
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_name_value_1;
        PyObject *tmp_globals_arg_value_1;
        PyObject *tmp_locals_arg_value_1;
        PyObject *tmp_fromlist_value_1;
        PyObject *tmp_level_value_1;
        tmp_name_value_1 = mod_consts[0];
        tmp_globals_arg_value_1 = (PyObject *)moduledict_aiohttp$web_exceptions;
        tmp_locals_arg_value_1 = Py_None;
        tmp_fromlist_value_1 = Py_None;
        tmp_level_value_1 = mod_consts[39];
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 1;
        tmp_assign_source_4 = IMPORT_MODULE5(tmp_name_value_1, tmp_globals_arg_value_1, tmp_locals_arg_value_1, tmp_fromlist_value_1, tmp_level_value_1);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[0], tmp_assign_source_4);
    }
    {
        PyObject *tmp_assign_source_5;
        tmp_assign_source_5 = IMPORT_HARD_TYPING();
        assert(!(tmp_assign_source_5 == NULL));
        assert(tmp_import_from_1__module == NULL);
        Py_INCREF(tmp_assign_source_5);
        tmp_import_from_1__module = tmp_assign_source_5;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_import_name_from_1;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_1 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_1)) {
            tmp_assign_source_6 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_1,
                (PyObject *)moduledict_aiohttp$web_exceptions,
                mod_consts[40],
                mod_consts[39]
            );
        } else {
            tmp_assign_source_6 = IMPORT_NAME(tmp_import_name_from_1, mod_consts[40]);
        }

        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[40], tmp_assign_source_6);
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_import_name_from_2;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_2 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_2)) {
            tmp_assign_source_7 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_2,
                (PyObject *)moduledict_aiohttp$web_exceptions,
                mod_consts[41],
                mod_consts[39]
            );
        } else {
            tmp_assign_source_7 = IMPORT_NAME(tmp_import_name_from_2, mod_consts[41]);
        }

        if (tmp_assign_source_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[41], tmp_assign_source_7);
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_import_name_from_3;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_3 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_3)) {
            tmp_assign_source_8 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_3,
                (PyObject *)moduledict_aiohttp$web_exceptions,
                mod_consts[42],
                mod_consts[39]
            );
        } else {
            tmp_assign_source_8 = IMPORT_NAME(tmp_import_name_from_3, mod_consts[42]);
        }

        if (tmp_assign_source_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[42], tmp_assign_source_8);
    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_import_name_from_4;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_4 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_4)) {
            tmp_assign_source_9 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_4,
                (PyObject *)moduledict_aiohttp$web_exceptions,
                mod_consts[43],
                mod_consts[39]
            );
        } else {
            tmp_assign_source_9 = IMPORT_NAME(tmp_import_name_from_4, mod_consts[43]);
        }

        if (tmp_assign_source_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[43], tmp_assign_source_9);
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_import_name_from_5;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_5 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_5)) {
            tmp_assign_source_10 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_5,
                (PyObject *)moduledict_aiohttp$web_exceptions,
                mod_consts[44],
                mod_consts[39]
            );
        } else {
            tmp_assign_source_10 = IMPORT_NAME(tmp_import_name_from_5, mod_consts[44]);
        }

        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[44], tmp_assign_source_10);
    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_import_name_from_6;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_6 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_6)) {
            tmp_assign_source_11 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_6,
                (PyObject *)moduledict_aiohttp$web_exceptions,
                mod_consts[45],
                mod_consts[39]
            );
        } else {
            tmp_assign_source_11 = IMPORT_NAME(tmp_import_name_from_6, mod_consts[45]);
        }

        if (tmp_assign_source_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[45], tmp_assign_source_11);
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_import_from_1__module);
    Py_DECREF(tmp_import_from_1__module);
    tmp_import_from_1__module = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    CHECK_OBJECT(tmp_import_from_1__module);
    Py_DECREF(tmp_import_from_1__module);
    tmp_import_from_1__module = NULL;
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_import_name_from_7;
        PyObject *tmp_name_value_2;
        PyObject *tmp_globals_arg_value_2;
        PyObject *tmp_locals_arg_value_2;
        PyObject *tmp_fromlist_value_2;
        PyObject *tmp_level_value_2;
        tmp_name_value_2 = mod_consts[46];
        tmp_globals_arg_value_2 = (PyObject *)moduledict_aiohttp$web_exceptions;
        tmp_locals_arg_value_2 = Py_None;
        tmp_fromlist_value_2 = mod_consts[47];
        tmp_level_value_2 = mod_consts[39];
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 4;
        tmp_import_name_from_7 = IMPORT_MODULE5(tmp_name_value_2, tmp_globals_arg_value_2, tmp_locals_arg_value_2, tmp_fromlist_value_2, tmp_level_value_2);
        if (tmp_import_name_from_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 4;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_7)) {
            tmp_assign_source_12 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_7,
                (PyObject *)moduledict_aiohttp$web_exceptions,
                mod_consts[18],
                mod_consts[39]
            );
        } else {
            tmp_assign_source_12 = IMPORT_NAME(tmp_import_name_from_7, mod_consts[18]);
        }

        Py_DECREF(tmp_import_name_from_7);
        if (tmp_assign_source_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 4;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[18], tmp_assign_source_12);
    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_name_value_3;
        PyObject *tmp_globals_arg_value_3;
        PyObject *tmp_locals_arg_value_3;
        PyObject *tmp_fromlist_value_3;
        PyObject *tmp_level_value_3;
        tmp_name_value_3 = mod_consts[48];
        tmp_globals_arg_value_3 = (PyObject *)moduledict_aiohttp$web_exceptions;
        tmp_locals_arg_value_3 = Py_None;
        tmp_fromlist_value_3 = mod_consts[49];
        tmp_level_value_3 = mod_consts[50];
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 6;
        tmp_assign_source_13 = IMPORT_MODULE5(tmp_name_value_3, tmp_globals_arg_value_3, tmp_locals_arg_value_3, tmp_fromlist_value_3, tmp_level_value_3);
        if (tmp_assign_source_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 6;

            goto frame_exception_exit_1;
        }
        assert(tmp_import_from_2__module == NULL);
        tmp_import_from_2__module = tmp_assign_source_13;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_import_name_from_8;
        CHECK_OBJECT(tmp_import_from_2__module);
        tmp_import_name_from_8 = tmp_import_from_2__module;
        if (PyModule_Check(tmp_import_name_from_8)) {
            tmp_assign_source_14 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_8,
                (PyObject *)moduledict_aiohttp$web_exceptions,
                mod_consts[51],
                mod_consts[39]
            );
        } else {
            tmp_assign_source_14 = IMPORT_NAME(tmp_import_name_from_8, mod_consts[51]);
        }

        if (tmp_assign_source_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 6;

            goto try_except_handler_2;
        }
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[51], tmp_assign_source_14);
    }
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_import_name_from_9;
        CHECK_OBJECT(tmp_import_from_2__module);
        tmp_import_name_from_9 = tmp_import_from_2__module;
        if (PyModule_Check(tmp_import_name_from_9)) {
            tmp_assign_source_15 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_9,
                (PyObject *)moduledict_aiohttp$web_exceptions,
                mod_consts[52],
                mod_consts[39]
            );
        } else {
            tmp_assign_source_15 = IMPORT_NAME(tmp_import_name_from_9, mod_consts[52]);
        }

        if (tmp_assign_source_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 6;

            goto try_except_handler_2;
        }
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[52], tmp_assign_source_15);
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_import_from_2__module);
    Py_DECREF(tmp_import_from_2__module);
    tmp_import_from_2__module = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(tmp_import_from_2__module);
    Py_DECREF(tmp_import_from_2__module);
    tmp_import_from_2__module = NULL;
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_import_name_from_10;
        PyObject *tmp_name_value_4;
        PyObject *tmp_globals_arg_value_4;
        PyObject *tmp_locals_arg_value_4;
        PyObject *tmp_fromlist_value_4;
        PyObject *tmp_level_value_4;
        tmp_name_value_4 = mod_consts[53];
        tmp_globals_arg_value_4 = (PyObject *)moduledict_aiohttp$web_exceptions;
        tmp_locals_arg_value_4 = Py_None;
        tmp_fromlist_value_4 = mod_consts[54];
        tmp_level_value_4 = mod_consts[50];
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 7;
        tmp_import_name_from_10 = IMPORT_MODULE5(tmp_name_value_4, tmp_globals_arg_value_4, tmp_locals_arg_value_4, tmp_fromlist_value_4, tmp_level_value_4);
        if (tmp_import_name_from_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 7;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_10)) {
            tmp_assign_source_16 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_10,
                (PyObject *)moduledict_aiohttp$web_exceptions,
                mod_consts[4],
                mod_consts[39]
            );
        } else {
            tmp_assign_source_16 = IMPORT_NAME(tmp_import_name_from_10, mod_consts[4]);
        }

        Py_DECREF(tmp_import_name_from_10);
        if (tmp_assign_source_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 7;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[4], tmp_assign_source_16);
    }
    {
        PyObject *tmp_assign_source_17;
        tmp_assign_source_17 = mod_consts[55];
        UPDATE_STRING_DICT0(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[56], tmp_assign_source_17);
    }
    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_tuple_element_1;
        tmp_tuple_element_1 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[4]);

        if (unlikely(tmp_tuple_element_1 == NULL)) {
            tmp_tuple_element_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[4]);
        }

        assert(!(tmp_tuple_element_1 == NULL));
        tmp_assign_source_18 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_assign_source_18, 0, tmp_tuple_element_1);
        tmp_tuple_element_1 = PyExc_Exception;
        PyTuple_SET_ITEM0(tmp_assign_source_18, 1, tmp_tuple_element_1);
        assert(tmp_class_creation_1__bases_orig == NULL);
        tmp_class_creation_1__bases_orig = tmp_assign_source_18;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_dircall_arg1_1;
        CHECK_OBJECT(tmp_class_creation_1__bases_orig);
        tmp_dircall_arg1_1 = tmp_class_creation_1__bases_orig;
        Py_INCREF(tmp_dircall_arg1_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1};
            tmp_assign_source_19 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 75;

            goto try_except_handler_3;
        }
        assert(tmp_class_creation_1__bases == NULL);
        tmp_class_creation_1__bases = tmp_assign_source_19;
    }
    {
        PyObject *tmp_assign_source_20;
        tmp_assign_source_20 = PyDict_New();
        assert(tmp_class_creation_1__class_decl_dict == NULL);
        tmp_class_creation_1__class_decl_dict = tmp_assign_source_20;
    }
    {
        PyObject *tmp_assign_source_21;
        PyObject *tmp_metaclass_value_1;
        bool tmp_condition_result_1;
        PyObject *tmp_key_value_1;
        PyObject *tmp_dict_arg_value_1;
        PyObject *tmp_dict_arg_value_2;
        PyObject *tmp_key_value_2;
        nuitka_bool tmp_condition_result_2;
        int tmp_truth_name_1;
        PyObject *tmp_type_arg_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_subscript_value_1;
        PyObject *tmp_bases_value_1;
        tmp_key_value_1 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_arg_value_1 = tmp_class_creation_1__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_1, tmp_key_value_1);
        assert(!(tmp_res == -1));
        tmp_condition_result_1 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_arg_value_2 = tmp_class_creation_1__class_decl_dict;
        tmp_key_value_2 = mod_consts[57];
        tmp_metaclass_value_1 = DICT_GET_ITEM0(tmp_dict_arg_value_2, tmp_key_value_2);
        if (tmp_metaclass_value_1 == NULL) {
            tmp_metaclass_value_1 = Py_None;
        }
        assert(!(tmp_metaclass_value_1 == NULL));
        Py_INCREF(tmp_metaclass_value_1);
        goto condexpr_end_1;
        condexpr_false_1:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_class_creation_1__bases);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 75;

            goto try_except_handler_3;
        }
        tmp_condition_result_2 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_2;
        } else {
            goto condexpr_false_2;
        }
        condexpr_true_2:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_expression_value_1 = tmp_class_creation_1__bases;
        tmp_subscript_value_1 = mod_consts[39];
        tmp_type_arg_1 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_1, tmp_subscript_value_1, 0);
        if (tmp_type_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 75;

            goto try_except_handler_3;
        }
        tmp_metaclass_value_1 = BUILTIN_TYPE1(tmp_type_arg_1);
        Py_DECREF(tmp_type_arg_1);
        if (tmp_metaclass_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 75;

            goto try_except_handler_3;
        }
        goto condexpr_end_2;
        condexpr_false_2:;
        tmp_metaclass_value_1 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_1);
        condexpr_end_2:;
        condexpr_end_1:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_bases_value_1 = tmp_class_creation_1__bases;
        tmp_assign_source_21 = SELECT_METACLASS(tmp_metaclass_value_1, tmp_bases_value_1);
        Py_DECREF(tmp_metaclass_value_1);
        if (tmp_assign_source_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 75;

            goto try_except_handler_3;
        }
        assert(tmp_class_creation_1__metaclass == NULL);
        tmp_class_creation_1__metaclass = tmp_assign_source_21;
    }
    {
        bool tmp_condition_result_3;
        PyObject *tmp_key_value_3;
        PyObject *tmp_dict_arg_value_3;
        tmp_key_value_3 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_arg_value_3 = tmp_class_creation_1__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_3, tmp_key_value_3);
        assert(!(tmp_res == -1));
        tmp_condition_result_3 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_3 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_1__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 75;

        goto try_except_handler_3;
    }
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_expression_value_2 = tmp_class_creation_1__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_2, mod_consts[58]);
        tmp_condition_result_4 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_22;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_args_value_1;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_kwargs_value_1;
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_expression_value_3 = tmp_class_creation_1__metaclass;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[58]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 75;

            goto try_except_handler_3;
        }
        tmp_tuple_element_2 = mod_consts[59];
        tmp_args_value_1 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_1, 0, tmp_tuple_element_2);
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_tuple_element_2 = tmp_class_creation_1__bases;
        PyTuple_SET_ITEM0(tmp_args_value_1, 1, tmp_tuple_element_2);
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_kwargs_value_1 = tmp_class_creation_1__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 75;
        tmp_assign_source_22 = CALL_FUNCTION(tmp_called_value_1, tmp_args_value_1, tmp_kwargs_value_1);
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_value_1);
        if (tmp_assign_source_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 75;

            goto try_except_handler_3;
        }
        assert(tmp_class_creation_1__prepared == NULL);
        tmp_class_creation_1__prepared = tmp_assign_source_22;
    }
    {
        bool tmp_condition_result_5;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(tmp_class_creation_1__prepared);
        tmp_expression_value_4 = tmp_class_creation_1__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_4, mod_consts[60]);
        tmp_operand_value_1 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 75;

            goto try_except_handler_3;
        }
        tmp_condition_result_5 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_5 != false) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_raise_value_1;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_tuple_element_3;
        PyObject *tmp_getattr_target_1;
        PyObject *tmp_getattr_attr_1;
        PyObject *tmp_getattr_default_1;
        tmp_raise_type_1 = PyExc_TypeError;
        tmp_left_value_1 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_getattr_target_1 = tmp_class_creation_1__metaclass;
        tmp_getattr_attr_1 = mod_consts[62];
        tmp_getattr_default_1 = mod_consts[63];
        tmp_tuple_element_3 = BUILTIN_GETATTR(tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1);
        if (tmp_tuple_element_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 75;

            goto try_except_handler_3;
        }
        tmp_right_value_1 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_5;
            PyObject *tmp_type_arg_2;
            PyTuple_SET_ITEM(tmp_right_value_1, 0, tmp_tuple_element_3);
            CHECK_OBJECT(tmp_class_creation_1__prepared);
            tmp_type_arg_2 = tmp_class_creation_1__prepared;
            tmp_expression_value_5 = BUILTIN_TYPE1(tmp_type_arg_2);
            assert(!(tmp_expression_value_5 == NULL));
            tmp_tuple_element_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[62]);
            Py_DECREF(tmp_expression_value_5);
            if (tmp_tuple_element_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 75;

                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_right_value_1, 1, tmp_tuple_element_3);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_right_value_1);
        goto try_except_handler_3;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_raise_value_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_1, tmp_right_value_1);
        Py_DECREF(tmp_right_value_1);
        if (tmp_raise_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 75;

            goto try_except_handler_3;
        }
        exception_type = tmp_raise_type_1;
        Py_INCREF(tmp_raise_type_1);
        exception_value = tmp_raise_value_1;
        exception_lineno = 75;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_3;
    }
    branch_no_3:;
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_assign_source_23;
        tmp_assign_source_23 = PyDict_New();
        assert(tmp_class_creation_1__prepared == NULL);
        tmp_class_creation_1__prepared = tmp_assign_source_23;
    }
    branch_end_2:;
    {
        PyObject *tmp_assign_source_24;
        {
            PyObject *tmp_set_locals_1;
            CHECK_OBJECT(tmp_class_creation_1__prepared);
            tmp_set_locals_1 = tmp_class_creation_1__prepared;
            locals_aiohttp$web_exceptions$$$class__1_HTTPException_75 = tmp_set_locals_1;
            Py_INCREF(tmp_set_locals_1);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__1_HTTPException_75, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 75;

            goto try_except_handler_5;
        }
        tmp_dictset_value = mod_consts[59];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__1_HTTPException_75, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 75;

            goto try_except_handler_5;
        }
        if (isFrameUnusable(cache_frame_80217f53360cd5c56c7f38707ef87428_2)) {
            Py_XDECREF(cache_frame_80217f53360cd5c56c7f38707ef87428_2);

#if _DEBUG_REFCOUNTS
            if (cache_frame_80217f53360cd5c56c7f38707ef87428_2 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_80217f53360cd5c56c7f38707ef87428_2 = MAKE_FUNCTION_FRAME(codeobj_80217f53360cd5c56c7f38707ef87428, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_80217f53360cd5c56c7f38707ef87428_2->m_type_description == NULL);
        frame_80217f53360cd5c56c7f38707ef87428_2 = cache_frame_80217f53360cd5c56c7f38707ef87428_2;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_80217f53360cd5c56c7f38707ef87428_2);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_80217f53360cd5c56c7f38707ef87428_2) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[67];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__1_HTTPException_75, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 80;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }
        tmp_dictset_value = Py_False;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__1_HTTPException_75, mod_consts[10], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 81;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }
        tmp_dictset_value = Py_True;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__1_HTTPException_75, mod_consts[68], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 83;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }
        {
            PyObject *tmp_kw_defaults_1;
            PyObject *tmp_annotations_1;
            PyObject *tmp_dict_key_1;
            PyObject *tmp_dict_value_1;
            PyObject *tmp_expression_value_6;
            PyObject *tmp_subscript_value_2;
            tmp_kw_defaults_1 = PyDict_Copy(mod_consts[69]);
            tmp_dict_key_1 = mod_consts[19];
            tmp_expression_value_6 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__1_HTTPException_75, mod_consts[44]);

            if (tmp_expression_value_6 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_6 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[44]);

                    if (unlikely(tmp_expression_value_6 == NULL)) {
                        tmp_expression_value_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[44]);
                    }

                    if (tmp_expression_value_6 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_kw_defaults_1);

                        exception_lineno = 88;
                        type_description_2 = "o";
                        goto frame_exception_exit_2;
                    }
                    Py_INCREF(tmp_expression_value_6);
                } else {
                    goto frame_exception_exit_2;
                }
            }

            tmp_subscript_value_2 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__1_HTTPException_75, mod_consts[51]);

            if (tmp_subscript_value_2 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_subscript_value_2 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[51]);

                    if (unlikely(tmp_subscript_value_2 == NULL)) {
                        tmp_subscript_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[51]);
                    }

                    if (tmp_subscript_value_2 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_kw_defaults_1);
                        Py_DECREF(tmp_expression_value_6);

                        exception_lineno = 88;
                        type_description_2 = "o";
                        goto frame_exception_exit_2;
                    }
                    Py_INCREF(tmp_subscript_value_2);
                } else {
                    goto frame_exception_exit_2;
                }
            }

            tmp_dict_value_1 = LOOKUP_SUBSCRIPT(tmp_expression_value_6, tmp_subscript_value_2);
            Py_DECREF(tmp_expression_value_6);
            Py_DECREF(tmp_subscript_value_2);
            if (tmp_dict_value_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_kw_defaults_1);

                exception_lineno = 88;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            tmp_annotations_1 = _PyDict_NewPresized( 6 );
            {
                PyObject *tmp_expression_value_7;
                PyObject *tmp_subscript_value_3;
                PyObject *tmp_expression_value_8;
                PyObject *tmp_subscript_value_4;
                PyObject *tmp_expression_value_9;
                PyObject *tmp_subscript_value_5;
                tmp_res = PyDict_SetItem(tmp_annotations_1, tmp_dict_key_1, tmp_dict_value_1);
                Py_DECREF(tmp_dict_value_1);
                assert(!(tmp_res != 0));
                tmp_dict_key_1 = mod_consts[8];
                tmp_expression_value_7 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__1_HTTPException_75, mod_consts[44]);

                if (tmp_expression_value_7 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_7 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[44]);

                        if (unlikely(tmp_expression_value_7 == NULL)) {
                            tmp_expression_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[44]);
                        }

                        if (tmp_expression_value_7 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 89;
                            type_description_2 = "o";
                            goto dict_build_exception_1;
                        }
                        Py_INCREF(tmp_expression_value_7);
                    } else {
                        goto dict_build_exception_1;
                    }
                }

                tmp_subscript_value_3 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__1_HTTPException_75, mod_consts[70]);

                if (tmp_subscript_value_3 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_subscript_value_3 = (PyObject *)&PyUnicode_Type;
                        Py_INCREF(tmp_subscript_value_3);
                    } else {
                        goto dict_build_exception_1;
                    }
                }

                tmp_dict_value_1 = LOOKUP_SUBSCRIPT(tmp_expression_value_7, tmp_subscript_value_3);
                Py_DECREF(tmp_expression_value_7);
                Py_DECREF(tmp_subscript_value_3);
                if (tmp_dict_value_1 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 89;
                    type_description_2 = "o";
                    goto dict_build_exception_1;
                }
                tmp_res = PyDict_SetItem(tmp_annotations_1, tmp_dict_key_1, tmp_dict_value_1);
                Py_DECREF(tmp_dict_value_1);
                assert(!(tmp_res != 0));
                tmp_dict_key_1 = mod_consts[9];
                tmp_dict_value_1 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__1_HTTPException_75, mod_consts[40]);

                if (tmp_dict_value_1 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_dict_value_1 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[40]);

                        if (unlikely(tmp_dict_value_1 == NULL)) {
                            tmp_dict_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[40]);
                        }

                        if (tmp_dict_value_1 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 90;
                            type_description_2 = "o";
                            goto dict_build_exception_1;
                        }
                        Py_INCREF(tmp_dict_value_1);
                    } else {
                        goto dict_build_exception_1;
                    }
                }

                tmp_res = PyDict_SetItem(tmp_annotations_1, tmp_dict_key_1, tmp_dict_value_1);
                Py_DECREF(tmp_dict_value_1);
                assert(!(tmp_res != 0));
                tmp_dict_key_1 = mod_consts[14];
                tmp_expression_value_8 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__1_HTTPException_75, mod_consts[44]);

                if (tmp_expression_value_8 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_8 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[44]);

                        if (unlikely(tmp_expression_value_8 == NULL)) {
                            tmp_expression_value_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[44]);
                        }

                        if (tmp_expression_value_8 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 91;
                            type_description_2 = "o";
                            goto dict_build_exception_1;
                        }
                        Py_INCREF(tmp_expression_value_8);
                    } else {
                        goto dict_build_exception_1;
                    }
                }

                tmp_subscript_value_4 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__1_HTTPException_75, mod_consts[70]);

                if (tmp_subscript_value_4 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_subscript_value_4 = (PyObject *)&PyUnicode_Type;
                        Py_INCREF(tmp_subscript_value_4);
                    } else {
                        goto dict_build_exception_1;
                    }
                }

                tmp_dict_value_1 = LOOKUP_SUBSCRIPT(tmp_expression_value_8, tmp_subscript_value_4);
                Py_DECREF(tmp_expression_value_8);
                Py_DECREF(tmp_subscript_value_4);
                if (tmp_dict_value_1 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 91;
                    type_description_2 = "o";
                    goto dict_build_exception_1;
                }
                tmp_res = PyDict_SetItem(tmp_annotations_1, tmp_dict_key_1, tmp_dict_value_1);
                Py_DECREF(tmp_dict_value_1);
                assert(!(tmp_res != 0));
                tmp_dict_key_1 = mod_consts[71];
                tmp_expression_value_9 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__1_HTTPException_75, mod_consts[44]);

                if (tmp_expression_value_9 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_9 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[44]);

                        if (unlikely(tmp_expression_value_9 == NULL)) {
                            tmp_expression_value_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[44]);
                        }

                        if (tmp_expression_value_9 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 92;
                            type_description_2 = "o";
                            goto dict_build_exception_1;
                        }
                        Py_INCREF(tmp_expression_value_9);
                    } else {
                        goto dict_build_exception_1;
                    }
                }

                tmp_subscript_value_5 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__1_HTTPException_75, mod_consts[70]);

                if (tmp_subscript_value_5 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_subscript_value_5 = (PyObject *)&PyUnicode_Type;
                        Py_INCREF(tmp_subscript_value_5);
                    } else {
                        goto dict_build_exception_1;
                    }
                }

                tmp_dict_value_1 = LOOKUP_SUBSCRIPT(tmp_expression_value_9, tmp_subscript_value_5);
                Py_DECREF(tmp_expression_value_9);
                Py_DECREF(tmp_subscript_value_5);
                if (tmp_dict_value_1 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 92;
                    type_description_2 = "o";
                    goto dict_build_exception_1;
                }
                tmp_res = PyDict_SetItem(tmp_annotations_1, tmp_dict_key_1, tmp_dict_value_1);
                Py_DECREF(tmp_dict_value_1);
                assert(!(tmp_res != 0));
                tmp_dict_key_1 = mod_consts[72];
                tmp_dict_value_1 = Py_None;
                tmp_res = PyDict_SetItem(tmp_annotations_1, tmp_dict_key_1, tmp_dict_value_1);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_1;
            // Exception handling pass through code for dict_build:
            dict_build_exception_1:;
            Py_DECREF(tmp_kw_defaults_1);
            Py_DECREF(tmp_annotations_1);
            goto frame_exception_exit_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_1:;


            tmp_dictset_value = MAKE_FUNCTION_aiohttp$web_exceptions$$$function__1___init__(tmp_kw_defaults_1, tmp_annotations_1);

            tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__1_HTTPException_75, mod_consts[5], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 85;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
        }
        {
            PyObject *tmp_annotations_2;
            PyObject *tmp_dict_key_2;
            PyObject *tmp_dict_value_2;
            tmp_dict_key_2 = mod_consts[72];
            tmp_dict_value_2 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__1_HTTPException_75, mod_consts[74]);

            if (tmp_dict_value_2 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_dict_value_2 = (PyObject *)&PyBool_Type;
                    Py_INCREF(tmp_dict_value_2);
                } else {
                    goto frame_exception_exit_2;
                }
            }

            tmp_annotations_2 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem(tmp_annotations_2, tmp_dict_key_2, tmp_dict_value_2);
            Py_DECREF(tmp_dict_value_2);
            assert(!(tmp_res != 0));


            tmp_dictset_value = MAKE_FUNCTION_aiohttp$web_exceptions$$$function__2___bool__(tmp_annotations_2);

            tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__1_HTTPException_75, mod_consts[75], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 112;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_80217f53360cd5c56c7f38707ef87428_2);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_80217f53360cd5c56c7f38707ef87428_2);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_80217f53360cd5c56c7f38707ef87428_2, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_80217f53360cd5c56c7f38707ef87428_2->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_80217f53360cd5c56c7f38707ef87428_2, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_80217f53360cd5c56c7f38707ef87428_2,
            type_description_2,
            outline_0_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_80217f53360cd5c56c7f38707ef87428_2 == cache_frame_80217f53360cd5c56c7f38707ef87428_2) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_80217f53360cd5c56c7f38707ef87428_2);
            cache_frame_80217f53360cd5c56c7f38707ef87428_2 = NULL;
        }

        assertFrameObject(frame_80217f53360cd5c56c7f38707ef87428_2);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;

        goto try_except_handler_5;
        skip_nested_handling_1:;
        {
            nuitka_bool tmp_condition_result_6;
            PyObject *tmp_cmp_expr_left_1;
            PyObject *tmp_cmp_expr_right_1;
            CHECK_OBJECT(tmp_class_creation_1__bases);
            tmp_cmp_expr_left_1 = tmp_class_creation_1__bases;
            CHECK_OBJECT(tmp_class_creation_1__bases_orig);
            tmp_cmp_expr_right_1 = tmp_class_creation_1__bases_orig;
            tmp_condition_result_6 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
            if (tmp_condition_result_6 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 75;

                goto try_except_handler_5;
            }
            if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
                goto branch_yes_4;
            } else {
                goto branch_no_4;
            }
            assert(tmp_condition_result_6 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_4:;
        CHECK_OBJECT(tmp_class_creation_1__bases_orig);
        tmp_dictset_value = tmp_class_creation_1__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__1_HTTPException_75, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 75;

            goto try_except_handler_5;
        }
        branch_no_4:;
        {
            PyObject *tmp_assign_source_25;
            PyObject *tmp_called_value_2;
            PyObject *tmp_args_value_2;
            PyObject *tmp_tuple_element_4;
            PyObject *tmp_kwargs_value_2;
            CHECK_OBJECT(tmp_class_creation_1__metaclass);
            tmp_called_value_2 = tmp_class_creation_1__metaclass;
            tmp_tuple_element_4 = mod_consts[59];
            tmp_args_value_2 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_2, 0, tmp_tuple_element_4);
            CHECK_OBJECT(tmp_class_creation_1__bases);
            tmp_tuple_element_4 = tmp_class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_2, 1, tmp_tuple_element_4);
            tmp_tuple_element_4 = locals_aiohttp$web_exceptions$$$class__1_HTTPException_75;
            PyTuple_SET_ITEM0(tmp_args_value_2, 2, tmp_tuple_element_4);
            CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
            tmp_kwargs_value_2 = tmp_class_creation_1__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 75;
            tmp_assign_source_25 = CALL_FUNCTION(tmp_called_value_2, tmp_args_value_2, tmp_kwargs_value_2);
            Py_DECREF(tmp_args_value_2);
            if (tmp_assign_source_25 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 75;

                goto try_except_handler_5;
            }
            assert(outline_0_var___class__ == NULL);
            outline_0_var___class__ = tmp_assign_source_25;
        }
        CHECK_OBJECT(outline_0_var___class__);
        tmp_assign_source_24 = outline_0_var___class__;
        Py_INCREF(tmp_assign_source_24);
        goto try_return_handler_5;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_5:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__1_HTTPException_75);
        locals_aiohttp$web_exceptions$$$class__1_HTTPException_75 = NULL;
        goto try_return_handler_4;
        // Exception handler code:
        try_except_handler_5:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__1_HTTPException_75);
        locals_aiohttp$web_exceptions$$$class__1_HTTPException_75 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto try_except_handler_4;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_4:;
        CHECK_OBJECT(outline_0_var___class__);
        Py_DECREF(outline_0_var___class__);
        outline_0_var___class__ = NULL;
        goto outline_result_1;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;
        exception_lineno = exception_keeper_lineno_4;

        goto outline_exception_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_1:;
        exception_lineno = 75;
        goto try_except_handler_3;
        outline_result_1:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[59], tmp_assign_source_24);
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_class_creation_1__bases_orig);
    Py_DECREF(tmp_class_creation_1__bases_orig);
    tmp_class_creation_1__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_1__bases);
    tmp_class_creation_1__bases = NULL;
    Py_XDECREF(tmp_class_creation_1__class_decl_dict);
    tmp_class_creation_1__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_1__metaclass);
    tmp_class_creation_1__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_1__prepared);
    tmp_class_creation_1__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    CHECK_OBJECT(tmp_class_creation_1__bases_orig);
    Py_DECREF(tmp_class_creation_1__bases_orig);
    tmp_class_creation_1__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_1__bases);
    Py_DECREF(tmp_class_creation_1__bases);
    tmp_class_creation_1__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
    Py_DECREF(tmp_class_creation_1__class_decl_dict);
    tmp_class_creation_1__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_1__metaclass);
    Py_DECREF(tmp_class_creation_1__metaclass);
    tmp_class_creation_1__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_1__prepared);
    Py_DECREF(tmp_class_creation_1__prepared);
    tmp_class_creation_1__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_26;
        PyObject *tmp_tuple_element_5;
        tmp_tuple_element_5 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[59]);

        if (unlikely(tmp_tuple_element_5 == NULL)) {
            tmp_tuple_element_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[59]);
        }

        if (tmp_tuple_element_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 116;

            goto try_except_handler_6;
        }
        tmp_assign_source_26 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_26, 0, tmp_tuple_element_5);
        assert(tmp_class_creation_2__bases_orig == NULL);
        tmp_class_creation_2__bases_orig = tmp_assign_source_26;
    }
    {
        PyObject *tmp_assign_source_27;
        PyObject *tmp_dircall_arg1_2;
        CHECK_OBJECT(tmp_class_creation_2__bases_orig);
        tmp_dircall_arg1_2 = tmp_class_creation_2__bases_orig;
        Py_INCREF(tmp_dircall_arg1_2);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_2};
            tmp_assign_source_27 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 116;

            goto try_except_handler_6;
        }
        assert(tmp_class_creation_2__bases == NULL);
        tmp_class_creation_2__bases = tmp_assign_source_27;
    }
    {
        PyObject *tmp_assign_source_28;
        tmp_assign_source_28 = PyDict_New();
        assert(tmp_class_creation_2__class_decl_dict == NULL);
        tmp_class_creation_2__class_decl_dict = tmp_assign_source_28;
    }
    {
        PyObject *tmp_assign_source_29;
        PyObject *tmp_metaclass_value_2;
        bool tmp_condition_result_7;
        PyObject *tmp_key_value_4;
        PyObject *tmp_dict_arg_value_4;
        PyObject *tmp_dict_arg_value_5;
        PyObject *tmp_key_value_5;
        nuitka_bool tmp_condition_result_8;
        int tmp_truth_name_2;
        PyObject *tmp_type_arg_3;
        PyObject *tmp_expression_value_10;
        PyObject *tmp_subscript_value_6;
        PyObject *tmp_bases_value_2;
        tmp_key_value_4 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_arg_value_4 = tmp_class_creation_2__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_4, tmp_key_value_4);
        assert(!(tmp_res == -1));
        tmp_condition_result_7 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_7 != false) {
            goto condexpr_true_3;
        } else {
            goto condexpr_false_3;
        }
        condexpr_true_3:;
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_arg_value_5 = tmp_class_creation_2__class_decl_dict;
        tmp_key_value_5 = mod_consts[57];
        tmp_metaclass_value_2 = DICT_GET_ITEM0(tmp_dict_arg_value_5, tmp_key_value_5);
        if (tmp_metaclass_value_2 == NULL) {
            tmp_metaclass_value_2 = Py_None;
        }
        assert(!(tmp_metaclass_value_2 == NULL));
        Py_INCREF(tmp_metaclass_value_2);
        goto condexpr_end_3;
        condexpr_false_3:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_class_creation_2__bases);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 116;

            goto try_except_handler_6;
        }
        tmp_condition_result_8 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_8 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_4;
        } else {
            goto condexpr_false_4;
        }
        condexpr_true_4:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_expression_value_10 = tmp_class_creation_2__bases;
        tmp_subscript_value_6 = mod_consts[39];
        tmp_type_arg_3 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_10, tmp_subscript_value_6, 0);
        if (tmp_type_arg_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 116;

            goto try_except_handler_6;
        }
        tmp_metaclass_value_2 = BUILTIN_TYPE1(tmp_type_arg_3);
        Py_DECREF(tmp_type_arg_3);
        if (tmp_metaclass_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 116;

            goto try_except_handler_6;
        }
        goto condexpr_end_4;
        condexpr_false_4:;
        tmp_metaclass_value_2 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_2);
        condexpr_end_4:;
        condexpr_end_3:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_bases_value_2 = tmp_class_creation_2__bases;
        tmp_assign_source_29 = SELECT_METACLASS(tmp_metaclass_value_2, tmp_bases_value_2);
        Py_DECREF(tmp_metaclass_value_2);
        if (tmp_assign_source_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 116;

            goto try_except_handler_6;
        }
        assert(tmp_class_creation_2__metaclass == NULL);
        tmp_class_creation_2__metaclass = tmp_assign_source_29;
    }
    {
        bool tmp_condition_result_9;
        PyObject *tmp_key_value_6;
        PyObject *tmp_dict_arg_value_6;
        tmp_key_value_6 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_arg_value_6 = tmp_class_creation_2__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_6, tmp_key_value_6);
        assert(!(tmp_res == -1));
        tmp_condition_result_9 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_9 != false) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
    }
    branch_yes_5:;
    CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_2__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 116;

        goto try_except_handler_6;
    }
    branch_no_5:;
    {
        nuitka_bool tmp_condition_result_10;
        PyObject *tmp_expression_value_11;
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_expression_value_11 = tmp_class_creation_2__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_11, mod_consts[58]);
        tmp_condition_result_10 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_10 == NUITKA_BOOL_TRUE) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
    }
    branch_yes_6:;
    {
        PyObject *tmp_assign_source_30;
        PyObject *tmp_called_value_3;
        PyObject *tmp_expression_value_12;
        PyObject *tmp_args_value_3;
        PyObject *tmp_tuple_element_6;
        PyObject *tmp_kwargs_value_3;
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_expression_value_12 = tmp_class_creation_2__metaclass;
        tmp_called_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_12, mod_consts[58]);
        if (tmp_called_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 116;

            goto try_except_handler_6;
        }
        tmp_tuple_element_6 = mod_consts[78];
        tmp_args_value_3 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_3, 0, tmp_tuple_element_6);
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_tuple_element_6 = tmp_class_creation_2__bases;
        PyTuple_SET_ITEM0(tmp_args_value_3, 1, tmp_tuple_element_6);
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_kwargs_value_3 = tmp_class_creation_2__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 116;
        tmp_assign_source_30 = CALL_FUNCTION(tmp_called_value_3, tmp_args_value_3, tmp_kwargs_value_3);
        Py_DECREF(tmp_called_value_3);
        Py_DECREF(tmp_args_value_3);
        if (tmp_assign_source_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 116;

            goto try_except_handler_6;
        }
        assert(tmp_class_creation_2__prepared == NULL);
        tmp_class_creation_2__prepared = tmp_assign_source_30;
    }
    {
        bool tmp_condition_result_11;
        PyObject *tmp_operand_value_2;
        PyObject *tmp_expression_value_13;
        CHECK_OBJECT(tmp_class_creation_2__prepared);
        tmp_expression_value_13 = tmp_class_creation_2__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_13, mod_consts[60]);
        tmp_operand_value_2 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 116;

            goto try_except_handler_6;
        }
        tmp_condition_result_11 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_11 != false) {
            goto branch_yes_7;
        } else {
            goto branch_no_7;
        }
    }
    branch_yes_7:;
    {
        PyObject *tmp_raise_type_2;
        PyObject *tmp_raise_value_2;
        PyObject *tmp_left_value_2;
        PyObject *tmp_right_value_2;
        PyObject *tmp_tuple_element_7;
        PyObject *tmp_getattr_target_2;
        PyObject *tmp_getattr_attr_2;
        PyObject *tmp_getattr_default_2;
        tmp_raise_type_2 = PyExc_TypeError;
        tmp_left_value_2 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_getattr_target_2 = tmp_class_creation_2__metaclass;
        tmp_getattr_attr_2 = mod_consts[62];
        tmp_getattr_default_2 = mod_consts[63];
        tmp_tuple_element_7 = BUILTIN_GETATTR(tmp_getattr_target_2, tmp_getattr_attr_2, tmp_getattr_default_2);
        if (tmp_tuple_element_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 116;

            goto try_except_handler_6;
        }
        tmp_right_value_2 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_14;
            PyObject *tmp_type_arg_4;
            PyTuple_SET_ITEM(tmp_right_value_2, 0, tmp_tuple_element_7);
            CHECK_OBJECT(tmp_class_creation_2__prepared);
            tmp_type_arg_4 = tmp_class_creation_2__prepared;
            tmp_expression_value_14 = BUILTIN_TYPE1(tmp_type_arg_4);
            assert(!(tmp_expression_value_14 == NULL));
            tmp_tuple_element_7 = LOOKUP_ATTRIBUTE(tmp_expression_value_14, mod_consts[62]);
            Py_DECREF(tmp_expression_value_14);
            if (tmp_tuple_element_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 116;

                goto tuple_build_exception_2;
            }
            PyTuple_SET_ITEM(tmp_right_value_2, 1, tmp_tuple_element_7);
        }
        goto tuple_build_noexception_2;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_2:;
        Py_DECREF(tmp_right_value_2);
        goto try_except_handler_6;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_2:;
        tmp_raise_value_2 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_2, tmp_right_value_2);
        Py_DECREF(tmp_right_value_2);
        if (tmp_raise_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 116;

            goto try_except_handler_6;
        }
        exception_type = tmp_raise_type_2;
        Py_INCREF(tmp_raise_type_2);
        exception_value = tmp_raise_value_2;
        exception_lineno = 116;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_6;
    }
    branch_no_7:;
    goto branch_end_6;
    branch_no_6:;
    {
        PyObject *tmp_assign_source_31;
        tmp_assign_source_31 = PyDict_New();
        assert(tmp_class_creation_2__prepared == NULL);
        tmp_class_creation_2__prepared = tmp_assign_source_31;
    }
    branch_end_6:;
    {
        PyObject *tmp_assign_source_32;
        {
            PyObject *tmp_set_locals_2;
            CHECK_OBJECT(tmp_class_creation_2__prepared);
            tmp_set_locals_2 = tmp_class_creation_2__prepared;
            locals_aiohttp$web_exceptions$$$class__2_HTTPError_116 = tmp_set_locals_2;
            Py_INCREF(tmp_set_locals_2);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__2_HTTPError_116, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 116;

            goto try_except_handler_8;
        }
        tmp_dictset_value = mod_consts[79];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__2_HTTPError_116, mod_consts[33], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 116;

            goto try_except_handler_8;
        }
        tmp_dictset_value = mod_consts[78];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__2_HTTPError_116, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 116;

            goto try_except_handler_8;
        }
        {
            nuitka_bool tmp_condition_result_12;
            PyObject *tmp_cmp_expr_left_2;
            PyObject *tmp_cmp_expr_right_2;
            CHECK_OBJECT(tmp_class_creation_2__bases);
            tmp_cmp_expr_left_2 = tmp_class_creation_2__bases;
            CHECK_OBJECT(tmp_class_creation_2__bases_orig);
            tmp_cmp_expr_right_2 = tmp_class_creation_2__bases_orig;
            tmp_condition_result_12 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_2, tmp_cmp_expr_right_2);
            if (tmp_condition_result_12 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 116;

                goto try_except_handler_8;
            }
            if (tmp_condition_result_12 == NUITKA_BOOL_TRUE) {
                goto branch_yes_8;
            } else {
                goto branch_no_8;
            }
            assert(tmp_condition_result_12 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_8:;
        CHECK_OBJECT(tmp_class_creation_2__bases_orig);
        tmp_dictset_value = tmp_class_creation_2__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__2_HTTPError_116, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 116;

            goto try_except_handler_8;
        }
        branch_no_8:;
        {
            PyObject *tmp_assign_source_33;
            PyObject *tmp_called_value_4;
            PyObject *tmp_args_value_4;
            PyObject *tmp_tuple_element_8;
            PyObject *tmp_kwargs_value_4;
            CHECK_OBJECT(tmp_class_creation_2__metaclass);
            tmp_called_value_4 = tmp_class_creation_2__metaclass;
            tmp_tuple_element_8 = mod_consts[78];
            tmp_args_value_4 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_4, 0, tmp_tuple_element_8);
            CHECK_OBJECT(tmp_class_creation_2__bases);
            tmp_tuple_element_8 = tmp_class_creation_2__bases;
            PyTuple_SET_ITEM0(tmp_args_value_4, 1, tmp_tuple_element_8);
            tmp_tuple_element_8 = locals_aiohttp$web_exceptions$$$class__2_HTTPError_116;
            PyTuple_SET_ITEM0(tmp_args_value_4, 2, tmp_tuple_element_8);
            CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
            tmp_kwargs_value_4 = tmp_class_creation_2__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 116;
            tmp_assign_source_33 = CALL_FUNCTION(tmp_called_value_4, tmp_args_value_4, tmp_kwargs_value_4);
            Py_DECREF(tmp_args_value_4);
            if (tmp_assign_source_33 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 116;

                goto try_except_handler_8;
            }
            assert(outline_1_var___class__ == NULL);
            outline_1_var___class__ = tmp_assign_source_33;
        }
        CHECK_OBJECT(outline_1_var___class__);
        tmp_assign_source_32 = outline_1_var___class__;
        Py_INCREF(tmp_assign_source_32);
        goto try_return_handler_8;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_8:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__2_HTTPError_116);
        locals_aiohttp$web_exceptions$$$class__2_HTTPError_116 = NULL;
        goto try_return_handler_7;
        // Exception handler code:
        try_except_handler_8:;
        exception_keeper_type_6 = exception_type;
        exception_keeper_value_6 = exception_value;
        exception_keeper_tb_6 = exception_tb;
        exception_keeper_lineno_6 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__2_HTTPError_116);
        locals_aiohttp$web_exceptions$$$class__2_HTTPError_116 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;
        exception_lineno = exception_keeper_lineno_6;

        goto try_except_handler_7;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_7:;
        CHECK_OBJECT(outline_1_var___class__);
        Py_DECREF(outline_1_var___class__);
        outline_1_var___class__ = NULL;
        goto outline_result_2;
        // Exception handler code:
        try_except_handler_7:;
        exception_keeper_type_7 = exception_type;
        exception_keeper_value_7 = exception_value;
        exception_keeper_tb_7 = exception_tb;
        exception_keeper_lineno_7 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;
        exception_lineno = exception_keeper_lineno_7;

        goto outline_exception_2;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_2:;
        exception_lineno = 116;
        goto try_except_handler_6;
        outline_result_2:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[78], tmp_assign_source_32);
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_2__bases_orig);
    tmp_class_creation_2__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_2__bases);
    tmp_class_creation_2__bases = NULL;
    Py_XDECREF(tmp_class_creation_2__class_decl_dict);
    tmp_class_creation_2__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_2__metaclass);
    tmp_class_creation_2__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_2__prepared);
    tmp_class_creation_2__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    CHECK_OBJECT(tmp_class_creation_2__bases_orig);
    Py_DECREF(tmp_class_creation_2__bases_orig);
    tmp_class_creation_2__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_2__bases);
    Py_DECREF(tmp_class_creation_2__bases);
    tmp_class_creation_2__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
    Py_DECREF(tmp_class_creation_2__class_decl_dict);
    tmp_class_creation_2__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_2__metaclass);
    Py_DECREF(tmp_class_creation_2__metaclass);
    tmp_class_creation_2__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_2__prepared);
    Py_DECREF(tmp_class_creation_2__prepared);
    tmp_class_creation_2__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_34;
        PyObject *tmp_tuple_element_9;
        tmp_tuple_element_9 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[59]);

        if (unlikely(tmp_tuple_element_9 == NULL)) {
            tmp_tuple_element_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[59]);
        }

        if (tmp_tuple_element_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 120;

            goto try_except_handler_9;
        }
        tmp_assign_source_34 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_34, 0, tmp_tuple_element_9);
        assert(tmp_class_creation_3__bases_orig == NULL);
        tmp_class_creation_3__bases_orig = tmp_assign_source_34;
    }
    {
        PyObject *tmp_assign_source_35;
        PyObject *tmp_dircall_arg1_3;
        CHECK_OBJECT(tmp_class_creation_3__bases_orig);
        tmp_dircall_arg1_3 = tmp_class_creation_3__bases_orig;
        Py_INCREF(tmp_dircall_arg1_3);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_3};
            tmp_assign_source_35 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 120;

            goto try_except_handler_9;
        }
        assert(tmp_class_creation_3__bases == NULL);
        tmp_class_creation_3__bases = tmp_assign_source_35;
    }
    {
        PyObject *tmp_assign_source_36;
        tmp_assign_source_36 = PyDict_New();
        assert(tmp_class_creation_3__class_decl_dict == NULL);
        tmp_class_creation_3__class_decl_dict = tmp_assign_source_36;
    }
    {
        PyObject *tmp_assign_source_37;
        PyObject *tmp_metaclass_value_3;
        bool tmp_condition_result_13;
        PyObject *tmp_key_value_7;
        PyObject *tmp_dict_arg_value_7;
        PyObject *tmp_dict_arg_value_8;
        PyObject *tmp_key_value_8;
        nuitka_bool tmp_condition_result_14;
        int tmp_truth_name_3;
        PyObject *tmp_type_arg_5;
        PyObject *tmp_expression_value_15;
        PyObject *tmp_subscript_value_7;
        PyObject *tmp_bases_value_3;
        tmp_key_value_7 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_dict_arg_value_7 = tmp_class_creation_3__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_7, tmp_key_value_7);
        assert(!(tmp_res == -1));
        tmp_condition_result_13 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_13 != false) {
            goto condexpr_true_5;
        } else {
            goto condexpr_false_5;
        }
        condexpr_true_5:;
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_dict_arg_value_8 = tmp_class_creation_3__class_decl_dict;
        tmp_key_value_8 = mod_consts[57];
        tmp_metaclass_value_3 = DICT_GET_ITEM0(tmp_dict_arg_value_8, tmp_key_value_8);
        if (tmp_metaclass_value_3 == NULL) {
            tmp_metaclass_value_3 = Py_None;
        }
        assert(!(tmp_metaclass_value_3 == NULL));
        Py_INCREF(tmp_metaclass_value_3);
        goto condexpr_end_5;
        condexpr_false_5:;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_truth_name_3 = CHECK_IF_TRUE(tmp_class_creation_3__bases);
        if (tmp_truth_name_3 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 120;

            goto try_except_handler_9;
        }
        tmp_condition_result_14 = tmp_truth_name_3 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_14 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_6;
        } else {
            goto condexpr_false_6;
        }
        condexpr_true_6:;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_expression_value_15 = tmp_class_creation_3__bases;
        tmp_subscript_value_7 = mod_consts[39];
        tmp_type_arg_5 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_15, tmp_subscript_value_7, 0);
        if (tmp_type_arg_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 120;

            goto try_except_handler_9;
        }
        tmp_metaclass_value_3 = BUILTIN_TYPE1(tmp_type_arg_5);
        Py_DECREF(tmp_type_arg_5);
        if (tmp_metaclass_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 120;

            goto try_except_handler_9;
        }
        goto condexpr_end_6;
        condexpr_false_6:;
        tmp_metaclass_value_3 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_3);
        condexpr_end_6:;
        condexpr_end_5:;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_bases_value_3 = tmp_class_creation_3__bases;
        tmp_assign_source_37 = SELECT_METACLASS(tmp_metaclass_value_3, tmp_bases_value_3);
        Py_DECREF(tmp_metaclass_value_3);
        if (tmp_assign_source_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 120;

            goto try_except_handler_9;
        }
        assert(tmp_class_creation_3__metaclass == NULL);
        tmp_class_creation_3__metaclass = tmp_assign_source_37;
    }
    {
        bool tmp_condition_result_15;
        PyObject *tmp_key_value_9;
        PyObject *tmp_dict_arg_value_9;
        tmp_key_value_9 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_dict_arg_value_9 = tmp_class_creation_3__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_9, tmp_key_value_9);
        assert(!(tmp_res == -1));
        tmp_condition_result_15 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_15 != false) {
            goto branch_yes_9;
        } else {
            goto branch_no_9;
        }
    }
    branch_yes_9:;
    CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_3__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 120;

        goto try_except_handler_9;
    }
    branch_no_9:;
    {
        nuitka_bool tmp_condition_result_16;
        PyObject *tmp_expression_value_16;
        CHECK_OBJECT(tmp_class_creation_3__metaclass);
        tmp_expression_value_16 = tmp_class_creation_3__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_16, mod_consts[58]);
        tmp_condition_result_16 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_16 == NUITKA_BOOL_TRUE) {
            goto branch_yes_10;
        } else {
            goto branch_no_10;
        }
    }
    branch_yes_10:;
    {
        PyObject *tmp_assign_source_38;
        PyObject *tmp_called_value_5;
        PyObject *tmp_expression_value_17;
        PyObject *tmp_args_value_5;
        PyObject *tmp_tuple_element_10;
        PyObject *tmp_kwargs_value_5;
        CHECK_OBJECT(tmp_class_creation_3__metaclass);
        tmp_expression_value_17 = tmp_class_creation_3__metaclass;
        tmp_called_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_17, mod_consts[58]);
        if (tmp_called_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 120;

            goto try_except_handler_9;
        }
        tmp_tuple_element_10 = mod_consts[80];
        tmp_args_value_5 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_5, 0, tmp_tuple_element_10);
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_tuple_element_10 = tmp_class_creation_3__bases;
        PyTuple_SET_ITEM0(tmp_args_value_5, 1, tmp_tuple_element_10);
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_kwargs_value_5 = tmp_class_creation_3__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 120;
        tmp_assign_source_38 = CALL_FUNCTION(tmp_called_value_5, tmp_args_value_5, tmp_kwargs_value_5);
        Py_DECREF(tmp_called_value_5);
        Py_DECREF(tmp_args_value_5);
        if (tmp_assign_source_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 120;

            goto try_except_handler_9;
        }
        assert(tmp_class_creation_3__prepared == NULL);
        tmp_class_creation_3__prepared = tmp_assign_source_38;
    }
    {
        bool tmp_condition_result_17;
        PyObject *tmp_operand_value_3;
        PyObject *tmp_expression_value_18;
        CHECK_OBJECT(tmp_class_creation_3__prepared);
        tmp_expression_value_18 = tmp_class_creation_3__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_18, mod_consts[60]);
        tmp_operand_value_3 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 120;

            goto try_except_handler_9;
        }
        tmp_condition_result_17 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_17 != false) {
            goto branch_yes_11;
        } else {
            goto branch_no_11;
        }
    }
    branch_yes_11:;
    {
        PyObject *tmp_raise_type_3;
        PyObject *tmp_raise_value_3;
        PyObject *tmp_left_value_3;
        PyObject *tmp_right_value_3;
        PyObject *tmp_tuple_element_11;
        PyObject *tmp_getattr_target_3;
        PyObject *tmp_getattr_attr_3;
        PyObject *tmp_getattr_default_3;
        tmp_raise_type_3 = PyExc_TypeError;
        tmp_left_value_3 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_3__metaclass);
        tmp_getattr_target_3 = tmp_class_creation_3__metaclass;
        tmp_getattr_attr_3 = mod_consts[62];
        tmp_getattr_default_3 = mod_consts[63];
        tmp_tuple_element_11 = BUILTIN_GETATTR(tmp_getattr_target_3, tmp_getattr_attr_3, tmp_getattr_default_3);
        if (tmp_tuple_element_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 120;

            goto try_except_handler_9;
        }
        tmp_right_value_3 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_19;
            PyObject *tmp_type_arg_6;
            PyTuple_SET_ITEM(tmp_right_value_3, 0, tmp_tuple_element_11);
            CHECK_OBJECT(tmp_class_creation_3__prepared);
            tmp_type_arg_6 = tmp_class_creation_3__prepared;
            tmp_expression_value_19 = BUILTIN_TYPE1(tmp_type_arg_6);
            assert(!(tmp_expression_value_19 == NULL));
            tmp_tuple_element_11 = LOOKUP_ATTRIBUTE(tmp_expression_value_19, mod_consts[62]);
            Py_DECREF(tmp_expression_value_19);
            if (tmp_tuple_element_11 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 120;

                goto tuple_build_exception_3;
            }
            PyTuple_SET_ITEM(tmp_right_value_3, 1, tmp_tuple_element_11);
        }
        goto tuple_build_noexception_3;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_3:;
        Py_DECREF(tmp_right_value_3);
        goto try_except_handler_9;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_3:;
        tmp_raise_value_3 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_3, tmp_right_value_3);
        Py_DECREF(tmp_right_value_3);
        if (tmp_raise_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 120;

            goto try_except_handler_9;
        }
        exception_type = tmp_raise_type_3;
        Py_INCREF(tmp_raise_type_3);
        exception_value = tmp_raise_value_3;
        exception_lineno = 120;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_9;
    }
    branch_no_11:;
    goto branch_end_10;
    branch_no_10:;
    {
        PyObject *tmp_assign_source_39;
        tmp_assign_source_39 = PyDict_New();
        assert(tmp_class_creation_3__prepared == NULL);
        tmp_class_creation_3__prepared = tmp_assign_source_39;
    }
    branch_end_10:;
    {
        PyObject *tmp_assign_source_40;
        {
            PyObject *tmp_set_locals_3;
            CHECK_OBJECT(tmp_class_creation_3__prepared);
            tmp_set_locals_3 = tmp_class_creation_3__prepared;
            locals_aiohttp$web_exceptions$$$class__3_HTTPRedirection_120 = tmp_set_locals_3;
            Py_INCREF(tmp_set_locals_3);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__3_HTTPRedirection_120, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 120;

            goto try_except_handler_11;
        }
        tmp_dictset_value = mod_consts[81];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__3_HTTPRedirection_120, mod_consts[33], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 120;

            goto try_except_handler_11;
        }
        tmp_dictset_value = mod_consts[80];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__3_HTTPRedirection_120, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 120;

            goto try_except_handler_11;
        }
        {
            nuitka_bool tmp_condition_result_18;
            PyObject *tmp_cmp_expr_left_3;
            PyObject *tmp_cmp_expr_right_3;
            CHECK_OBJECT(tmp_class_creation_3__bases);
            tmp_cmp_expr_left_3 = tmp_class_creation_3__bases;
            CHECK_OBJECT(tmp_class_creation_3__bases_orig);
            tmp_cmp_expr_right_3 = tmp_class_creation_3__bases_orig;
            tmp_condition_result_18 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_3, tmp_cmp_expr_right_3);
            if (tmp_condition_result_18 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 120;

                goto try_except_handler_11;
            }
            if (tmp_condition_result_18 == NUITKA_BOOL_TRUE) {
                goto branch_yes_12;
            } else {
                goto branch_no_12;
            }
            assert(tmp_condition_result_18 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_12:;
        CHECK_OBJECT(tmp_class_creation_3__bases_orig);
        tmp_dictset_value = tmp_class_creation_3__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__3_HTTPRedirection_120, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 120;

            goto try_except_handler_11;
        }
        branch_no_12:;
        {
            PyObject *tmp_assign_source_41;
            PyObject *tmp_called_value_6;
            PyObject *tmp_args_value_6;
            PyObject *tmp_tuple_element_12;
            PyObject *tmp_kwargs_value_6;
            CHECK_OBJECT(tmp_class_creation_3__metaclass);
            tmp_called_value_6 = tmp_class_creation_3__metaclass;
            tmp_tuple_element_12 = mod_consts[80];
            tmp_args_value_6 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_6, 0, tmp_tuple_element_12);
            CHECK_OBJECT(tmp_class_creation_3__bases);
            tmp_tuple_element_12 = tmp_class_creation_3__bases;
            PyTuple_SET_ITEM0(tmp_args_value_6, 1, tmp_tuple_element_12);
            tmp_tuple_element_12 = locals_aiohttp$web_exceptions$$$class__3_HTTPRedirection_120;
            PyTuple_SET_ITEM0(tmp_args_value_6, 2, tmp_tuple_element_12);
            CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
            tmp_kwargs_value_6 = tmp_class_creation_3__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 120;
            tmp_assign_source_41 = CALL_FUNCTION(tmp_called_value_6, tmp_args_value_6, tmp_kwargs_value_6);
            Py_DECREF(tmp_args_value_6);
            if (tmp_assign_source_41 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 120;

                goto try_except_handler_11;
            }
            assert(outline_2_var___class__ == NULL);
            outline_2_var___class__ = tmp_assign_source_41;
        }
        CHECK_OBJECT(outline_2_var___class__);
        tmp_assign_source_40 = outline_2_var___class__;
        Py_INCREF(tmp_assign_source_40);
        goto try_return_handler_11;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_11:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__3_HTTPRedirection_120);
        locals_aiohttp$web_exceptions$$$class__3_HTTPRedirection_120 = NULL;
        goto try_return_handler_10;
        // Exception handler code:
        try_except_handler_11:;
        exception_keeper_type_9 = exception_type;
        exception_keeper_value_9 = exception_value;
        exception_keeper_tb_9 = exception_tb;
        exception_keeper_lineno_9 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__3_HTTPRedirection_120);
        locals_aiohttp$web_exceptions$$$class__3_HTTPRedirection_120 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_9;
        exception_value = exception_keeper_value_9;
        exception_tb = exception_keeper_tb_9;
        exception_lineno = exception_keeper_lineno_9;

        goto try_except_handler_10;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_10:;
        CHECK_OBJECT(outline_2_var___class__);
        Py_DECREF(outline_2_var___class__);
        outline_2_var___class__ = NULL;
        goto outline_result_3;
        // Exception handler code:
        try_except_handler_10:;
        exception_keeper_type_10 = exception_type;
        exception_keeper_value_10 = exception_value;
        exception_keeper_tb_10 = exception_tb;
        exception_keeper_lineno_10 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_10;
        exception_value = exception_keeper_value_10;
        exception_tb = exception_keeper_tb_10;
        exception_lineno = exception_keeper_lineno_10;

        goto outline_exception_3;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_3:;
        exception_lineno = 120;
        goto try_except_handler_9;
        outline_result_3:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[80], tmp_assign_source_40);
    }
    goto try_end_5;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_keeper_lineno_11 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_3__bases_orig);
    tmp_class_creation_3__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_3__bases);
    tmp_class_creation_3__bases = NULL;
    Py_XDECREF(tmp_class_creation_3__class_decl_dict);
    tmp_class_creation_3__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_3__metaclass);
    tmp_class_creation_3__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_3__prepared);
    tmp_class_creation_3__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_11;
    exception_value = exception_keeper_value_11;
    exception_tb = exception_keeper_tb_11;
    exception_lineno = exception_keeper_lineno_11;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    CHECK_OBJECT(tmp_class_creation_3__bases_orig);
    Py_DECREF(tmp_class_creation_3__bases_orig);
    tmp_class_creation_3__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_3__bases);
    Py_DECREF(tmp_class_creation_3__bases);
    tmp_class_creation_3__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
    Py_DECREF(tmp_class_creation_3__class_decl_dict);
    tmp_class_creation_3__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_3__metaclass);
    Py_DECREF(tmp_class_creation_3__metaclass);
    tmp_class_creation_3__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_3__prepared);
    Py_DECREF(tmp_class_creation_3__prepared);
    tmp_class_creation_3__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_42;
        PyObject *tmp_tuple_element_13;
        tmp_tuple_element_13 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[59]);

        if (unlikely(tmp_tuple_element_13 == NULL)) {
            tmp_tuple_element_13 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[59]);
        }

        if (tmp_tuple_element_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto try_except_handler_12;
        }
        tmp_assign_source_42 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_42, 0, tmp_tuple_element_13);
        assert(tmp_class_creation_4__bases_orig == NULL);
        tmp_class_creation_4__bases_orig = tmp_assign_source_42;
    }
    {
        PyObject *tmp_assign_source_43;
        PyObject *tmp_dircall_arg1_4;
        CHECK_OBJECT(tmp_class_creation_4__bases_orig);
        tmp_dircall_arg1_4 = tmp_class_creation_4__bases_orig;
        Py_INCREF(tmp_dircall_arg1_4);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_4};
            tmp_assign_source_43 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto try_except_handler_12;
        }
        assert(tmp_class_creation_4__bases == NULL);
        tmp_class_creation_4__bases = tmp_assign_source_43;
    }
    {
        PyObject *tmp_assign_source_44;
        tmp_assign_source_44 = PyDict_New();
        assert(tmp_class_creation_4__class_decl_dict == NULL);
        tmp_class_creation_4__class_decl_dict = tmp_assign_source_44;
    }
    {
        PyObject *tmp_assign_source_45;
        PyObject *tmp_metaclass_value_4;
        bool tmp_condition_result_19;
        PyObject *tmp_key_value_10;
        PyObject *tmp_dict_arg_value_10;
        PyObject *tmp_dict_arg_value_11;
        PyObject *tmp_key_value_11;
        nuitka_bool tmp_condition_result_20;
        int tmp_truth_name_4;
        PyObject *tmp_type_arg_7;
        PyObject *tmp_expression_value_20;
        PyObject *tmp_subscript_value_8;
        PyObject *tmp_bases_value_4;
        tmp_key_value_10 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_dict_arg_value_10 = tmp_class_creation_4__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_10, tmp_key_value_10);
        assert(!(tmp_res == -1));
        tmp_condition_result_19 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_19 != false) {
            goto condexpr_true_7;
        } else {
            goto condexpr_false_7;
        }
        condexpr_true_7:;
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_dict_arg_value_11 = tmp_class_creation_4__class_decl_dict;
        tmp_key_value_11 = mod_consts[57];
        tmp_metaclass_value_4 = DICT_GET_ITEM0(tmp_dict_arg_value_11, tmp_key_value_11);
        if (tmp_metaclass_value_4 == NULL) {
            tmp_metaclass_value_4 = Py_None;
        }
        assert(!(tmp_metaclass_value_4 == NULL));
        Py_INCREF(tmp_metaclass_value_4);
        goto condexpr_end_7;
        condexpr_false_7:;
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_truth_name_4 = CHECK_IF_TRUE(tmp_class_creation_4__bases);
        if (tmp_truth_name_4 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto try_except_handler_12;
        }
        tmp_condition_result_20 = tmp_truth_name_4 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_20 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_8;
        } else {
            goto condexpr_false_8;
        }
        condexpr_true_8:;
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_expression_value_20 = tmp_class_creation_4__bases;
        tmp_subscript_value_8 = mod_consts[39];
        tmp_type_arg_7 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_20, tmp_subscript_value_8, 0);
        if (tmp_type_arg_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto try_except_handler_12;
        }
        tmp_metaclass_value_4 = BUILTIN_TYPE1(tmp_type_arg_7);
        Py_DECREF(tmp_type_arg_7);
        if (tmp_metaclass_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto try_except_handler_12;
        }
        goto condexpr_end_8;
        condexpr_false_8:;
        tmp_metaclass_value_4 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_4);
        condexpr_end_8:;
        condexpr_end_7:;
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_bases_value_4 = tmp_class_creation_4__bases;
        tmp_assign_source_45 = SELECT_METACLASS(tmp_metaclass_value_4, tmp_bases_value_4);
        Py_DECREF(tmp_metaclass_value_4);
        if (tmp_assign_source_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto try_except_handler_12;
        }
        assert(tmp_class_creation_4__metaclass == NULL);
        tmp_class_creation_4__metaclass = tmp_assign_source_45;
    }
    {
        bool tmp_condition_result_21;
        PyObject *tmp_key_value_12;
        PyObject *tmp_dict_arg_value_12;
        tmp_key_value_12 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_dict_arg_value_12 = tmp_class_creation_4__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_12, tmp_key_value_12);
        assert(!(tmp_res == -1));
        tmp_condition_result_21 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_21 != false) {
            goto branch_yes_13;
        } else {
            goto branch_no_13;
        }
    }
    branch_yes_13:;
    CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_4__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 124;

        goto try_except_handler_12;
    }
    branch_no_13:;
    {
        nuitka_bool tmp_condition_result_22;
        PyObject *tmp_expression_value_21;
        CHECK_OBJECT(tmp_class_creation_4__metaclass);
        tmp_expression_value_21 = tmp_class_creation_4__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_21, mod_consts[58]);
        tmp_condition_result_22 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_22 == NUITKA_BOOL_TRUE) {
            goto branch_yes_14;
        } else {
            goto branch_no_14;
        }
    }
    branch_yes_14:;
    {
        PyObject *tmp_assign_source_46;
        PyObject *tmp_called_value_7;
        PyObject *tmp_expression_value_22;
        PyObject *tmp_args_value_7;
        PyObject *tmp_tuple_element_14;
        PyObject *tmp_kwargs_value_7;
        CHECK_OBJECT(tmp_class_creation_4__metaclass);
        tmp_expression_value_22 = tmp_class_creation_4__metaclass;
        tmp_called_value_7 = LOOKUP_ATTRIBUTE(tmp_expression_value_22, mod_consts[58]);
        if (tmp_called_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto try_except_handler_12;
        }
        tmp_tuple_element_14 = mod_consts[82];
        tmp_args_value_7 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_7, 0, tmp_tuple_element_14);
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_tuple_element_14 = tmp_class_creation_4__bases;
        PyTuple_SET_ITEM0(tmp_args_value_7, 1, tmp_tuple_element_14);
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_kwargs_value_7 = tmp_class_creation_4__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 124;
        tmp_assign_source_46 = CALL_FUNCTION(tmp_called_value_7, tmp_args_value_7, tmp_kwargs_value_7);
        Py_DECREF(tmp_called_value_7);
        Py_DECREF(tmp_args_value_7);
        if (tmp_assign_source_46 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto try_except_handler_12;
        }
        assert(tmp_class_creation_4__prepared == NULL);
        tmp_class_creation_4__prepared = tmp_assign_source_46;
    }
    {
        bool tmp_condition_result_23;
        PyObject *tmp_operand_value_4;
        PyObject *tmp_expression_value_23;
        CHECK_OBJECT(tmp_class_creation_4__prepared);
        tmp_expression_value_23 = tmp_class_creation_4__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_23, mod_consts[60]);
        tmp_operand_value_4 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_4);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto try_except_handler_12;
        }
        tmp_condition_result_23 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_23 != false) {
            goto branch_yes_15;
        } else {
            goto branch_no_15;
        }
    }
    branch_yes_15:;
    {
        PyObject *tmp_raise_type_4;
        PyObject *tmp_raise_value_4;
        PyObject *tmp_left_value_4;
        PyObject *tmp_right_value_4;
        PyObject *tmp_tuple_element_15;
        PyObject *tmp_getattr_target_4;
        PyObject *tmp_getattr_attr_4;
        PyObject *tmp_getattr_default_4;
        tmp_raise_type_4 = PyExc_TypeError;
        tmp_left_value_4 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_4__metaclass);
        tmp_getattr_target_4 = tmp_class_creation_4__metaclass;
        tmp_getattr_attr_4 = mod_consts[62];
        tmp_getattr_default_4 = mod_consts[63];
        tmp_tuple_element_15 = BUILTIN_GETATTR(tmp_getattr_target_4, tmp_getattr_attr_4, tmp_getattr_default_4);
        if (tmp_tuple_element_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto try_except_handler_12;
        }
        tmp_right_value_4 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_24;
            PyObject *tmp_type_arg_8;
            PyTuple_SET_ITEM(tmp_right_value_4, 0, tmp_tuple_element_15);
            CHECK_OBJECT(tmp_class_creation_4__prepared);
            tmp_type_arg_8 = tmp_class_creation_4__prepared;
            tmp_expression_value_24 = BUILTIN_TYPE1(tmp_type_arg_8);
            assert(!(tmp_expression_value_24 == NULL));
            tmp_tuple_element_15 = LOOKUP_ATTRIBUTE(tmp_expression_value_24, mod_consts[62]);
            Py_DECREF(tmp_expression_value_24);
            if (tmp_tuple_element_15 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 124;

                goto tuple_build_exception_4;
            }
            PyTuple_SET_ITEM(tmp_right_value_4, 1, tmp_tuple_element_15);
        }
        goto tuple_build_noexception_4;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_4:;
        Py_DECREF(tmp_right_value_4);
        goto try_except_handler_12;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_4:;
        tmp_raise_value_4 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_4, tmp_right_value_4);
        Py_DECREF(tmp_right_value_4);
        if (tmp_raise_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto try_except_handler_12;
        }
        exception_type = tmp_raise_type_4;
        Py_INCREF(tmp_raise_type_4);
        exception_value = tmp_raise_value_4;
        exception_lineno = 124;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_12;
    }
    branch_no_15:;
    goto branch_end_14;
    branch_no_14:;
    {
        PyObject *tmp_assign_source_47;
        tmp_assign_source_47 = PyDict_New();
        assert(tmp_class_creation_4__prepared == NULL);
        tmp_class_creation_4__prepared = tmp_assign_source_47;
    }
    branch_end_14:;
    {
        PyObject *tmp_assign_source_48;
        {
            PyObject *tmp_set_locals_4;
            CHECK_OBJECT(tmp_class_creation_4__prepared);
            tmp_set_locals_4 = tmp_class_creation_4__prepared;
            locals_aiohttp$web_exceptions$$$class__4_HTTPSuccessful_124 = tmp_set_locals_4;
            Py_INCREF(tmp_set_locals_4);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__4_HTTPSuccessful_124, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto try_except_handler_14;
        }
        tmp_dictset_value = mod_consts[83];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__4_HTTPSuccessful_124, mod_consts[33], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto try_except_handler_14;
        }
        tmp_dictset_value = mod_consts[82];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__4_HTTPSuccessful_124, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto try_except_handler_14;
        }
        {
            nuitka_bool tmp_condition_result_24;
            PyObject *tmp_cmp_expr_left_4;
            PyObject *tmp_cmp_expr_right_4;
            CHECK_OBJECT(tmp_class_creation_4__bases);
            tmp_cmp_expr_left_4 = tmp_class_creation_4__bases;
            CHECK_OBJECT(tmp_class_creation_4__bases_orig);
            tmp_cmp_expr_right_4 = tmp_class_creation_4__bases_orig;
            tmp_condition_result_24 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_4, tmp_cmp_expr_right_4);
            if (tmp_condition_result_24 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 124;

                goto try_except_handler_14;
            }
            if (tmp_condition_result_24 == NUITKA_BOOL_TRUE) {
                goto branch_yes_16;
            } else {
                goto branch_no_16;
            }
            assert(tmp_condition_result_24 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_16:;
        CHECK_OBJECT(tmp_class_creation_4__bases_orig);
        tmp_dictset_value = tmp_class_creation_4__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__4_HTTPSuccessful_124, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto try_except_handler_14;
        }
        branch_no_16:;
        {
            PyObject *tmp_assign_source_49;
            PyObject *tmp_called_value_8;
            PyObject *tmp_args_value_8;
            PyObject *tmp_tuple_element_16;
            PyObject *tmp_kwargs_value_8;
            CHECK_OBJECT(tmp_class_creation_4__metaclass);
            tmp_called_value_8 = tmp_class_creation_4__metaclass;
            tmp_tuple_element_16 = mod_consts[82];
            tmp_args_value_8 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_8, 0, tmp_tuple_element_16);
            CHECK_OBJECT(tmp_class_creation_4__bases);
            tmp_tuple_element_16 = tmp_class_creation_4__bases;
            PyTuple_SET_ITEM0(tmp_args_value_8, 1, tmp_tuple_element_16);
            tmp_tuple_element_16 = locals_aiohttp$web_exceptions$$$class__4_HTTPSuccessful_124;
            PyTuple_SET_ITEM0(tmp_args_value_8, 2, tmp_tuple_element_16);
            CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
            tmp_kwargs_value_8 = tmp_class_creation_4__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 124;
            tmp_assign_source_49 = CALL_FUNCTION(tmp_called_value_8, tmp_args_value_8, tmp_kwargs_value_8);
            Py_DECREF(tmp_args_value_8);
            if (tmp_assign_source_49 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 124;

                goto try_except_handler_14;
            }
            assert(outline_3_var___class__ == NULL);
            outline_3_var___class__ = tmp_assign_source_49;
        }
        CHECK_OBJECT(outline_3_var___class__);
        tmp_assign_source_48 = outline_3_var___class__;
        Py_INCREF(tmp_assign_source_48);
        goto try_return_handler_14;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_14:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__4_HTTPSuccessful_124);
        locals_aiohttp$web_exceptions$$$class__4_HTTPSuccessful_124 = NULL;
        goto try_return_handler_13;
        // Exception handler code:
        try_except_handler_14:;
        exception_keeper_type_12 = exception_type;
        exception_keeper_value_12 = exception_value;
        exception_keeper_tb_12 = exception_tb;
        exception_keeper_lineno_12 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__4_HTTPSuccessful_124);
        locals_aiohttp$web_exceptions$$$class__4_HTTPSuccessful_124 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_12;
        exception_value = exception_keeper_value_12;
        exception_tb = exception_keeper_tb_12;
        exception_lineno = exception_keeper_lineno_12;

        goto try_except_handler_13;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_13:;
        CHECK_OBJECT(outline_3_var___class__);
        Py_DECREF(outline_3_var___class__);
        outline_3_var___class__ = NULL;
        goto outline_result_4;
        // Exception handler code:
        try_except_handler_13:;
        exception_keeper_type_13 = exception_type;
        exception_keeper_value_13 = exception_value;
        exception_keeper_tb_13 = exception_tb;
        exception_keeper_lineno_13 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_13;
        exception_value = exception_keeper_value_13;
        exception_tb = exception_keeper_tb_13;
        exception_lineno = exception_keeper_lineno_13;

        goto outline_exception_4;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_4:;
        exception_lineno = 124;
        goto try_except_handler_12;
        outline_result_4:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[82], tmp_assign_source_48);
    }
    goto try_end_6;
    // Exception handler code:
    try_except_handler_12:;
    exception_keeper_type_14 = exception_type;
    exception_keeper_value_14 = exception_value;
    exception_keeper_tb_14 = exception_tb;
    exception_keeper_lineno_14 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_4__bases_orig);
    tmp_class_creation_4__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_4__bases);
    tmp_class_creation_4__bases = NULL;
    Py_XDECREF(tmp_class_creation_4__class_decl_dict);
    tmp_class_creation_4__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_4__metaclass);
    tmp_class_creation_4__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_4__prepared);
    tmp_class_creation_4__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_14;
    exception_value = exception_keeper_value_14;
    exception_tb = exception_keeper_tb_14;
    exception_lineno = exception_keeper_lineno_14;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    CHECK_OBJECT(tmp_class_creation_4__bases_orig);
    Py_DECREF(tmp_class_creation_4__bases_orig);
    tmp_class_creation_4__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_4__bases);
    Py_DECREF(tmp_class_creation_4__bases);
    tmp_class_creation_4__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
    Py_DECREF(tmp_class_creation_4__class_decl_dict);
    tmp_class_creation_4__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_4__metaclass);
    Py_DECREF(tmp_class_creation_4__metaclass);
    tmp_class_creation_4__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_4__prepared);
    Py_DECREF(tmp_class_creation_4__prepared);
    tmp_class_creation_4__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_50;
        PyObject *tmp_tuple_element_17;
        tmp_tuple_element_17 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[82]);

        if (unlikely(tmp_tuple_element_17 == NULL)) {
            tmp_tuple_element_17 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[82]);
        }

        if (tmp_tuple_element_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto try_except_handler_15;
        }
        tmp_assign_source_50 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_50, 0, tmp_tuple_element_17);
        assert(tmp_class_creation_5__bases_orig == NULL);
        tmp_class_creation_5__bases_orig = tmp_assign_source_50;
    }
    {
        PyObject *tmp_assign_source_51;
        PyObject *tmp_dircall_arg1_5;
        CHECK_OBJECT(tmp_class_creation_5__bases_orig);
        tmp_dircall_arg1_5 = tmp_class_creation_5__bases_orig;
        Py_INCREF(tmp_dircall_arg1_5);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_5};
            tmp_assign_source_51 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto try_except_handler_15;
        }
        assert(tmp_class_creation_5__bases == NULL);
        tmp_class_creation_5__bases = tmp_assign_source_51;
    }
    {
        PyObject *tmp_assign_source_52;
        tmp_assign_source_52 = PyDict_New();
        assert(tmp_class_creation_5__class_decl_dict == NULL);
        tmp_class_creation_5__class_decl_dict = tmp_assign_source_52;
    }
    {
        PyObject *tmp_assign_source_53;
        PyObject *tmp_metaclass_value_5;
        bool tmp_condition_result_25;
        PyObject *tmp_key_value_13;
        PyObject *tmp_dict_arg_value_13;
        PyObject *tmp_dict_arg_value_14;
        PyObject *tmp_key_value_14;
        nuitka_bool tmp_condition_result_26;
        int tmp_truth_name_5;
        PyObject *tmp_type_arg_9;
        PyObject *tmp_expression_value_25;
        PyObject *tmp_subscript_value_9;
        PyObject *tmp_bases_value_5;
        tmp_key_value_13 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_dict_arg_value_13 = tmp_class_creation_5__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_13, tmp_key_value_13);
        assert(!(tmp_res == -1));
        tmp_condition_result_25 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_25 != false) {
            goto condexpr_true_9;
        } else {
            goto condexpr_false_9;
        }
        condexpr_true_9:;
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_dict_arg_value_14 = tmp_class_creation_5__class_decl_dict;
        tmp_key_value_14 = mod_consts[57];
        tmp_metaclass_value_5 = DICT_GET_ITEM0(tmp_dict_arg_value_14, tmp_key_value_14);
        if (tmp_metaclass_value_5 == NULL) {
            tmp_metaclass_value_5 = Py_None;
        }
        assert(!(tmp_metaclass_value_5 == NULL));
        Py_INCREF(tmp_metaclass_value_5);
        goto condexpr_end_9;
        condexpr_false_9:;
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_truth_name_5 = CHECK_IF_TRUE(tmp_class_creation_5__bases);
        if (tmp_truth_name_5 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto try_except_handler_15;
        }
        tmp_condition_result_26 = tmp_truth_name_5 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_26 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_10;
        } else {
            goto condexpr_false_10;
        }
        condexpr_true_10:;
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_expression_value_25 = tmp_class_creation_5__bases;
        tmp_subscript_value_9 = mod_consts[39];
        tmp_type_arg_9 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_25, tmp_subscript_value_9, 0);
        if (tmp_type_arg_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto try_except_handler_15;
        }
        tmp_metaclass_value_5 = BUILTIN_TYPE1(tmp_type_arg_9);
        Py_DECREF(tmp_type_arg_9);
        if (tmp_metaclass_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto try_except_handler_15;
        }
        goto condexpr_end_10;
        condexpr_false_10:;
        tmp_metaclass_value_5 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_5);
        condexpr_end_10:;
        condexpr_end_9:;
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_bases_value_5 = tmp_class_creation_5__bases;
        tmp_assign_source_53 = SELECT_METACLASS(tmp_metaclass_value_5, tmp_bases_value_5);
        Py_DECREF(tmp_metaclass_value_5);
        if (tmp_assign_source_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto try_except_handler_15;
        }
        assert(tmp_class_creation_5__metaclass == NULL);
        tmp_class_creation_5__metaclass = tmp_assign_source_53;
    }
    {
        bool tmp_condition_result_27;
        PyObject *tmp_key_value_15;
        PyObject *tmp_dict_arg_value_15;
        tmp_key_value_15 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_dict_arg_value_15 = tmp_class_creation_5__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_15, tmp_key_value_15);
        assert(!(tmp_res == -1));
        tmp_condition_result_27 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_27 != false) {
            goto branch_yes_17;
        } else {
            goto branch_no_17;
        }
    }
    branch_yes_17:;
    CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_5__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 128;

        goto try_except_handler_15;
    }
    branch_no_17:;
    {
        nuitka_bool tmp_condition_result_28;
        PyObject *tmp_expression_value_26;
        CHECK_OBJECT(tmp_class_creation_5__metaclass);
        tmp_expression_value_26 = tmp_class_creation_5__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_26, mod_consts[58]);
        tmp_condition_result_28 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_28 == NUITKA_BOOL_TRUE) {
            goto branch_yes_18;
        } else {
            goto branch_no_18;
        }
    }
    branch_yes_18:;
    {
        PyObject *tmp_assign_source_54;
        PyObject *tmp_called_value_9;
        PyObject *tmp_expression_value_27;
        PyObject *tmp_args_value_9;
        PyObject *tmp_tuple_element_18;
        PyObject *tmp_kwargs_value_9;
        CHECK_OBJECT(tmp_class_creation_5__metaclass);
        tmp_expression_value_27 = tmp_class_creation_5__metaclass;
        tmp_called_value_9 = LOOKUP_ATTRIBUTE(tmp_expression_value_27, mod_consts[58]);
        if (tmp_called_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto try_except_handler_15;
        }
        tmp_tuple_element_18 = mod_consts[84];
        tmp_args_value_9 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_9, 0, tmp_tuple_element_18);
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_tuple_element_18 = tmp_class_creation_5__bases;
        PyTuple_SET_ITEM0(tmp_args_value_9, 1, tmp_tuple_element_18);
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_kwargs_value_9 = tmp_class_creation_5__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 128;
        tmp_assign_source_54 = CALL_FUNCTION(tmp_called_value_9, tmp_args_value_9, tmp_kwargs_value_9);
        Py_DECREF(tmp_called_value_9);
        Py_DECREF(tmp_args_value_9);
        if (tmp_assign_source_54 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto try_except_handler_15;
        }
        assert(tmp_class_creation_5__prepared == NULL);
        tmp_class_creation_5__prepared = tmp_assign_source_54;
    }
    {
        bool tmp_condition_result_29;
        PyObject *tmp_operand_value_5;
        PyObject *tmp_expression_value_28;
        CHECK_OBJECT(tmp_class_creation_5__prepared);
        tmp_expression_value_28 = tmp_class_creation_5__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_28, mod_consts[60]);
        tmp_operand_value_5 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_5);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto try_except_handler_15;
        }
        tmp_condition_result_29 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_29 != false) {
            goto branch_yes_19;
        } else {
            goto branch_no_19;
        }
    }
    branch_yes_19:;
    {
        PyObject *tmp_raise_type_5;
        PyObject *tmp_raise_value_5;
        PyObject *tmp_left_value_5;
        PyObject *tmp_right_value_5;
        PyObject *tmp_tuple_element_19;
        PyObject *tmp_getattr_target_5;
        PyObject *tmp_getattr_attr_5;
        PyObject *tmp_getattr_default_5;
        tmp_raise_type_5 = PyExc_TypeError;
        tmp_left_value_5 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_5__metaclass);
        tmp_getattr_target_5 = tmp_class_creation_5__metaclass;
        tmp_getattr_attr_5 = mod_consts[62];
        tmp_getattr_default_5 = mod_consts[63];
        tmp_tuple_element_19 = BUILTIN_GETATTR(tmp_getattr_target_5, tmp_getattr_attr_5, tmp_getattr_default_5);
        if (tmp_tuple_element_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto try_except_handler_15;
        }
        tmp_right_value_5 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_29;
            PyObject *tmp_type_arg_10;
            PyTuple_SET_ITEM(tmp_right_value_5, 0, tmp_tuple_element_19);
            CHECK_OBJECT(tmp_class_creation_5__prepared);
            tmp_type_arg_10 = tmp_class_creation_5__prepared;
            tmp_expression_value_29 = BUILTIN_TYPE1(tmp_type_arg_10);
            assert(!(tmp_expression_value_29 == NULL));
            tmp_tuple_element_19 = LOOKUP_ATTRIBUTE(tmp_expression_value_29, mod_consts[62]);
            Py_DECREF(tmp_expression_value_29);
            if (tmp_tuple_element_19 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 128;

                goto tuple_build_exception_5;
            }
            PyTuple_SET_ITEM(tmp_right_value_5, 1, tmp_tuple_element_19);
        }
        goto tuple_build_noexception_5;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_5:;
        Py_DECREF(tmp_right_value_5);
        goto try_except_handler_15;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_5:;
        tmp_raise_value_5 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_5, tmp_right_value_5);
        Py_DECREF(tmp_right_value_5);
        if (tmp_raise_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto try_except_handler_15;
        }
        exception_type = tmp_raise_type_5;
        Py_INCREF(tmp_raise_type_5);
        exception_value = tmp_raise_value_5;
        exception_lineno = 128;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_15;
    }
    branch_no_19:;
    goto branch_end_18;
    branch_no_18:;
    {
        PyObject *tmp_assign_source_55;
        tmp_assign_source_55 = PyDict_New();
        assert(tmp_class_creation_5__prepared == NULL);
        tmp_class_creation_5__prepared = tmp_assign_source_55;
    }
    branch_end_18:;
    {
        PyObject *tmp_assign_source_56;
        {
            PyObject *tmp_set_locals_5;
            CHECK_OBJECT(tmp_class_creation_5__prepared);
            tmp_set_locals_5 = tmp_class_creation_5__prepared;
            locals_aiohttp$web_exceptions$$$class__5_HTTPOk_128 = tmp_set_locals_5;
            Py_INCREF(tmp_set_locals_5);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__5_HTTPOk_128, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto try_except_handler_17;
        }
        tmp_dictset_value = mod_consts[84];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__5_HTTPOk_128, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto try_except_handler_17;
        }
        if (isFrameUnusable(cache_frame_74b4e629fc5f2c812af1ae5f6716af8e_3)) {
            Py_XDECREF(cache_frame_74b4e629fc5f2c812af1ae5f6716af8e_3);

#if _DEBUG_REFCOUNTS
            if (cache_frame_74b4e629fc5f2c812af1ae5f6716af8e_3 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_74b4e629fc5f2c812af1ae5f6716af8e_3 = MAKE_FUNCTION_FRAME(codeobj_74b4e629fc5f2c812af1ae5f6716af8e, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_74b4e629fc5f2c812af1ae5f6716af8e_3->m_type_description == NULL);
        frame_74b4e629fc5f2c812af1ae5f6716af8e_3 = cache_frame_74b4e629fc5f2c812af1ae5f6716af8e_3;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_74b4e629fc5f2c812af1ae5f6716af8e_3);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_74b4e629fc5f2c812af1ae5f6716af8e_3) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[85];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__5_HTTPOk_128, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 129;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_74b4e629fc5f2c812af1ae5f6716af8e_3);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_2;

        frame_exception_exit_3:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_74b4e629fc5f2c812af1ae5f6716af8e_3);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_74b4e629fc5f2c812af1ae5f6716af8e_3, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_74b4e629fc5f2c812af1ae5f6716af8e_3->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_74b4e629fc5f2c812af1ae5f6716af8e_3, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_74b4e629fc5f2c812af1ae5f6716af8e_3,
            type_description_2,
            outline_4_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_74b4e629fc5f2c812af1ae5f6716af8e_3 == cache_frame_74b4e629fc5f2c812af1ae5f6716af8e_3) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_74b4e629fc5f2c812af1ae5f6716af8e_3);
            cache_frame_74b4e629fc5f2c812af1ae5f6716af8e_3 = NULL;
        }

        assertFrameObject(frame_74b4e629fc5f2c812af1ae5f6716af8e_3);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_2;

        frame_no_exception_2:;
        goto skip_nested_handling_2;
        nested_frame_exit_2:;

        goto try_except_handler_17;
        skip_nested_handling_2:;
        {
            nuitka_bool tmp_condition_result_30;
            PyObject *tmp_cmp_expr_left_5;
            PyObject *tmp_cmp_expr_right_5;
            CHECK_OBJECT(tmp_class_creation_5__bases);
            tmp_cmp_expr_left_5 = tmp_class_creation_5__bases;
            CHECK_OBJECT(tmp_class_creation_5__bases_orig);
            tmp_cmp_expr_right_5 = tmp_class_creation_5__bases_orig;
            tmp_condition_result_30 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_5, tmp_cmp_expr_right_5);
            if (tmp_condition_result_30 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 128;

                goto try_except_handler_17;
            }
            if (tmp_condition_result_30 == NUITKA_BOOL_TRUE) {
                goto branch_yes_20;
            } else {
                goto branch_no_20;
            }
            assert(tmp_condition_result_30 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_20:;
        CHECK_OBJECT(tmp_class_creation_5__bases_orig);
        tmp_dictset_value = tmp_class_creation_5__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__5_HTTPOk_128, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto try_except_handler_17;
        }
        branch_no_20:;
        {
            PyObject *tmp_assign_source_57;
            PyObject *tmp_called_value_10;
            PyObject *tmp_args_value_10;
            PyObject *tmp_tuple_element_20;
            PyObject *tmp_kwargs_value_10;
            CHECK_OBJECT(tmp_class_creation_5__metaclass);
            tmp_called_value_10 = tmp_class_creation_5__metaclass;
            tmp_tuple_element_20 = mod_consts[84];
            tmp_args_value_10 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_10, 0, tmp_tuple_element_20);
            CHECK_OBJECT(tmp_class_creation_5__bases);
            tmp_tuple_element_20 = tmp_class_creation_5__bases;
            PyTuple_SET_ITEM0(tmp_args_value_10, 1, tmp_tuple_element_20);
            tmp_tuple_element_20 = locals_aiohttp$web_exceptions$$$class__5_HTTPOk_128;
            PyTuple_SET_ITEM0(tmp_args_value_10, 2, tmp_tuple_element_20);
            CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
            tmp_kwargs_value_10 = tmp_class_creation_5__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 128;
            tmp_assign_source_57 = CALL_FUNCTION(tmp_called_value_10, tmp_args_value_10, tmp_kwargs_value_10);
            Py_DECREF(tmp_args_value_10);
            if (tmp_assign_source_57 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 128;

                goto try_except_handler_17;
            }
            assert(outline_4_var___class__ == NULL);
            outline_4_var___class__ = tmp_assign_source_57;
        }
        CHECK_OBJECT(outline_4_var___class__);
        tmp_assign_source_56 = outline_4_var___class__;
        Py_INCREF(tmp_assign_source_56);
        goto try_return_handler_17;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_17:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__5_HTTPOk_128);
        locals_aiohttp$web_exceptions$$$class__5_HTTPOk_128 = NULL;
        goto try_return_handler_16;
        // Exception handler code:
        try_except_handler_17:;
        exception_keeper_type_15 = exception_type;
        exception_keeper_value_15 = exception_value;
        exception_keeper_tb_15 = exception_tb;
        exception_keeper_lineno_15 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__5_HTTPOk_128);
        locals_aiohttp$web_exceptions$$$class__5_HTTPOk_128 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_15;
        exception_value = exception_keeper_value_15;
        exception_tb = exception_keeper_tb_15;
        exception_lineno = exception_keeper_lineno_15;

        goto try_except_handler_16;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_16:;
        CHECK_OBJECT(outline_4_var___class__);
        Py_DECREF(outline_4_var___class__);
        outline_4_var___class__ = NULL;
        goto outline_result_5;
        // Exception handler code:
        try_except_handler_16:;
        exception_keeper_type_16 = exception_type;
        exception_keeper_value_16 = exception_value;
        exception_keeper_tb_16 = exception_tb;
        exception_keeper_lineno_16 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_16;
        exception_value = exception_keeper_value_16;
        exception_tb = exception_keeper_tb_16;
        exception_lineno = exception_keeper_lineno_16;

        goto outline_exception_5;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_5:;
        exception_lineno = 128;
        goto try_except_handler_15;
        outline_result_5:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[84], tmp_assign_source_56);
    }
    goto try_end_7;
    // Exception handler code:
    try_except_handler_15:;
    exception_keeper_type_17 = exception_type;
    exception_keeper_value_17 = exception_value;
    exception_keeper_tb_17 = exception_tb;
    exception_keeper_lineno_17 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_5__bases_orig);
    tmp_class_creation_5__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_5__bases);
    tmp_class_creation_5__bases = NULL;
    Py_XDECREF(tmp_class_creation_5__class_decl_dict);
    tmp_class_creation_5__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_5__metaclass);
    tmp_class_creation_5__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_5__prepared);
    tmp_class_creation_5__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_17;
    exception_value = exception_keeper_value_17;
    exception_tb = exception_keeper_tb_17;
    exception_lineno = exception_keeper_lineno_17;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;
    CHECK_OBJECT(tmp_class_creation_5__bases_orig);
    Py_DECREF(tmp_class_creation_5__bases_orig);
    tmp_class_creation_5__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_5__bases);
    Py_DECREF(tmp_class_creation_5__bases);
    tmp_class_creation_5__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
    Py_DECREF(tmp_class_creation_5__class_decl_dict);
    tmp_class_creation_5__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_5__metaclass);
    Py_DECREF(tmp_class_creation_5__metaclass);
    tmp_class_creation_5__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_5__prepared);
    Py_DECREF(tmp_class_creation_5__prepared);
    tmp_class_creation_5__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_58;
        PyObject *tmp_tuple_element_21;
        tmp_tuple_element_21 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[82]);

        if (unlikely(tmp_tuple_element_21 == NULL)) {
            tmp_tuple_element_21 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[82]);
        }

        if (tmp_tuple_element_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 132;

            goto try_except_handler_18;
        }
        tmp_assign_source_58 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_58, 0, tmp_tuple_element_21);
        assert(tmp_class_creation_6__bases_orig == NULL);
        tmp_class_creation_6__bases_orig = tmp_assign_source_58;
    }
    {
        PyObject *tmp_assign_source_59;
        PyObject *tmp_dircall_arg1_6;
        CHECK_OBJECT(tmp_class_creation_6__bases_orig);
        tmp_dircall_arg1_6 = tmp_class_creation_6__bases_orig;
        Py_INCREF(tmp_dircall_arg1_6);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_6};
            tmp_assign_source_59 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_59 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 132;

            goto try_except_handler_18;
        }
        assert(tmp_class_creation_6__bases == NULL);
        tmp_class_creation_6__bases = tmp_assign_source_59;
    }
    {
        PyObject *tmp_assign_source_60;
        tmp_assign_source_60 = PyDict_New();
        assert(tmp_class_creation_6__class_decl_dict == NULL);
        tmp_class_creation_6__class_decl_dict = tmp_assign_source_60;
    }
    {
        PyObject *tmp_assign_source_61;
        PyObject *tmp_metaclass_value_6;
        bool tmp_condition_result_31;
        PyObject *tmp_key_value_16;
        PyObject *tmp_dict_arg_value_16;
        PyObject *tmp_dict_arg_value_17;
        PyObject *tmp_key_value_17;
        nuitka_bool tmp_condition_result_32;
        int tmp_truth_name_6;
        PyObject *tmp_type_arg_11;
        PyObject *tmp_expression_value_30;
        PyObject *tmp_subscript_value_10;
        PyObject *tmp_bases_value_6;
        tmp_key_value_16 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_dict_arg_value_16 = tmp_class_creation_6__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_16, tmp_key_value_16);
        assert(!(tmp_res == -1));
        tmp_condition_result_31 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_31 != false) {
            goto condexpr_true_11;
        } else {
            goto condexpr_false_11;
        }
        condexpr_true_11:;
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_dict_arg_value_17 = tmp_class_creation_6__class_decl_dict;
        tmp_key_value_17 = mod_consts[57];
        tmp_metaclass_value_6 = DICT_GET_ITEM0(tmp_dict_arg_value_17, tmp_key_value_17);
        if (tmp_metaclass_value_6 == NULL) {
            tmp_metaclass_value_6 = Py_None;
        }
        assert(!(tmp_metaclass_value_6 == NULL));
        Py_INCREF(tmp_metaclass_value_6);
        goto condexpr_end_11;
        condexpr_false_11:;
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_truth_name_6 = CHECK_IF_TRUE(tmp_class_creation_6__bases);
        if (tmp_truth_name_6 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 132;

            goto try_except_handler_18;
        }
        tmp_condition_result_32 = tmp_truth_name_6 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_32 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_12;
        } else {
            goto condexpr_false_12;
        }
        condexpr_true_12:;
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_expression_value_30 = tmp_class_creation_6__bases;
        tmp_subscript_value_10 = mod_consts[39];
        tmp_type_arg_11 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_30, tmp_subscript_value_10, 0);
        if (tmp_type_arg_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 132;

            goto try_except_handler_18;
        }
        tmp_metaclass_value_6 = BUILTIN_TYPE1(tmp_type_arg_11);
        Py_DECREF(tmp_type_arg_11);
        if (tmp_metaclass_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 132;

            goto try_except_handler_18;
        }
        goto condexpr_end_12;
        condexpr_false_12:;
        tmp_metaclass_value_6 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_6);
        condexpr_end_12:;
        condexpr_end_11:;
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_bases_value_6 = tmp_class_creation_6__bases;
        tmp_assign_source_61 = SELECT_METACLASS(tmp_metaclass_value_6, tmp_bases_value_6);
        Py_DECREF(tmp_metaclass_value_6);
        if (tmp_assign_source_61 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 132;

            goto try_except_handler_18;
        }
        assert(tmp_class_creation_6__metaclass == NULL);
        tmp_class_creation_6__metaclass = tmp_assign_source_61;
    }
    {
        bool tmp_condition_result_33;
        PyObject *tmp_key_value_18;
        PyObject *tmp_dict_arg_value_18;
        tmp_key_value_18 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_dict_arg_value_18 = tmp_class_creation_6__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_18, tmp_key_value_18);
        assert(!(tmp_res == -1));
        tmp_condition_result_33 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_33 != false) {
            goto branch_yes_21;
        } else {
            goto branch_no_21;
        }
    }
    branch_yes_21:;
    CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_6__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 132;

        goto try_except_handler_18;
    }
    branch_no_21:;
    {
        nuitka_bool tmp_condition_result_34;
        PyObject *tmp_expression_value_31;
        CHECK_OBJECT(tmp_class_creation_6__metaclass);
        tmp_expression_value_31 = tmp_class_creation_6__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_31, mod_consts[58]);
        tmp_condition_result_34 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_34 == NUITKA_BOOL_TRUE) {
            goto branch_yes_22;
        } else {
            goto branch_no_22;
        }
    }
    branch_yes_22:;
    {
        PyObject *tmp_assign_source_62;
        PyObject *tmp_called_value_11;
        PyObject *tmp_expression_value_32;
        PyObject *tmp_args_value_11;
        PyObject *tmp_tuple_element_22;
        PyObject *tmp_kwargs_value_11;
        CHECK_OBJECT(tmp_class_creation_6__metaclass);
        tmp_expression_value_32 = tmp_class_creation_6__metaclass;
        tmp_called_value_11 = LOOKUP_ATTRIBUTE(tmp_expression_value_32, mod_consts[58]);
        if (tmp_called_value_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 132;

            goto try_except_handler_18;
        }
        tmp_tuple_element_22 = mod_consts[86];
        tmp_args_value_11 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_11, 0, tmp_tuple_element_22);
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_tuple_element_22 = tmp_class_creation_6__bases;
        PyTuple_SET_ITEM0(tmp_args_value_11, 1, tmp_tuple_element_22);
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_kwargs_value_11 = tmp_class_creation_6__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 132;
        tmp_assign_source_62 = CALL_FUNCTION(tmp_called_value_11, tmp_args_value_11, tmp_kwargs_value_11);
        Py_DECREF(tmp_called_value_11);
        Py_DECREF(tmp_args_value_11);
        if (tmp_assign_source_62 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 132;

            goto try_except_handler_18;
        }
        assert(tmp_class_creation_6__prepared == NULL);
        tmp_class_creation_6__prepared = tmp_assign_source_62;
    }
    {
        bool tmp_condition_result_35;
        PyObject *tmp_operand_value_6;
        PyObject *tmp_expression_value_33;
        CHECK_OBJECT(tmp_class_creation_6__prepared);
        tmp_expression_value_33 = tmp_class_creation_6__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_33, mod_consts[60]);
        tmp_operand_value_6 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_6);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 132;

            goto try_except_handler_18;
        }
        tmp_condition_result_35 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_35 != false) {
            goto branch_yes_23;
        } else {
            goto branch_no_23;
        }
    }
    branch_yes_23:;
    {
        PyObject *tmp_raise_type_6;
        PyObject *tmp_raise_value_6;
        PyObject *tmp_left_value_6;
        PyObject *tmp_right_value_6;
        PyObject *tmp_tuple_element_23;
        PyObject *tmp_getattr_target_6;
        PyObject *tmp_getattr_attr_6;
        PyObject *tmp_getattr_default_6;
        tmp_raise_type_6 = PyExc_TypeError;
        tmp_left_value_6 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_6__metaclass);
        tmp_getattr_target_6 = tmp_class_creation_6__metaclass;
        tmp_getattr_attr_6 = mod_consts[62];
        tmp_getattr_default_6 = mod_consts[63];
        tmp_tuple_element_23 = BUILTIN_GETATTR(tmp_getattr_target_6, tmp_getattr_attr_6, tmp_getattr_default_6);
        if (tmp_tuple_element_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 132;

            goto try_except_handler_18;
        }
        tmp_right_value_6 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_34;
            PyObject *tmp_type_arg_12;
            PyTuple_SET_ITEM(tmp_right_value_6, 0, tmp_tuple_element_23);
            CHECK_OBJECT(tmp_class_creation_6__prepared);
            tmp_type_arg_12 = tmp_class_creation_6__prepared;
            tmp_expression_value_34 = BUILTIN_TYPE1(tmp_type_arg_12);
            assert(!(tmp_expression_value_34 == NULL));
            tmp_tuple_element_23 = LOOKUP_ATTRIBUTE(tmp_expression_value_34, mod_consts[62]);
            Py_DECREF(tmp_expression_value_34);
            if (tmp_tuple_element_23 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 132;

                goto tuple_build_exception_6;
            }
            PyTuple_SET_ITEM(tmp_right_value_6, 1, tmp_tuple_element_23);
        }
        goto tuple_build_noexception_6;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_6:;
        Py_DECREF(tmp_right_value_6);
        goto try_except_handler_18;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_6:;
        tmp_raise_value_6 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_6, tmp_right_value_6);
        Py_DECREF(tmp_right_value_6);
        if (tmp_raise_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 132;

            goto try_except_handler_18;
        }
        exception_type = tmp_raise_type_6;
        Py_INCREF(tmp_raise_type_6);
        exception_value = tmp_raise_value_6;
        exception_lineno = 132;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_18;
    }
    branch_no_23:;
    goto branch_end_22;
    branch_no_22:;
    {
        PyObject *tmp_assign_source_63;
        tmp_assign_source_63 = PyDict_New();
        assert(tmp_class_creation_6__prepared == NULL);
        tmp_class_creation_6__prepared = tmp_assign_source_63;
    }
    branch_end_22:;
    {
        PyObject *tmp_assign_source_64;
        {
            PyObject *tmp_set_locals_6;
            CHECK_OBJECT(tmp_class_creation_6__prepared);
            tmp_set_locals_6 = tmp_class_creation_6__prepared;
            locals_aiohttp$web_exceptions$$$class__6_HTTPCreated_132 = tmp_set_locals_6;
            Py_INCREF(tmp_set_locals_6);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__6_HTTPCreated_132, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 132;

            goto try_except_handler_20;
        }
        tmp_dictset_value = mod_consts[86];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__6_HTTPCreated_132, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 132;

            goto try_except_handler_20;
        }
        if (isFrameUnusable(cache_frame_272e0c92cba6f37a767cf6fb362468c0_4)) {
            Py_XDECREF(cache_frame_272e0c92cba6f37a767cf6fb362468c0_4);

#if _DEBUG_REFCOUNTS
            if (cache_frame_272e0c92cba6f37a767cf6fb362468c0_4 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_272e0c92cba6f37a767cf6fb362468c0_4 = MAKE_FUNCTION_FRAME(codeobj_272e0c92cba6f37a767cf6fb362468c0, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_272e0c92cba6f37a767cf6fb362468c0_4->m_type_description == NULL);
        frame_272e0c92cba6f37a767cf6fb362468c0_4 = cache_frame_272e0c92cba6f37a767cf6fb362468c0_4;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_272e0c92cba6f37a767cf6fb362468c0_4);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_272e0c92cba6f37a767cf6fb362468c0_4) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[87];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__6_HTTPCreated_132, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 133;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_272e0c92cba6f37a767cf6fb362468c0_4);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_3;

        frame_exception_exit_4:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_272e0c92cba6f37a767cf6fb362468c0_4);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_272e0c92cba6f37a767cf6fb362468c0_4, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_272e0c92cba6f37a767cf6fb362468c0_4->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_272e0c92cba6f37a767cf6fb362468c0_4, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_272e0c92cba6f37a767cf6fb362468c0_4,
            type_description_2,
            outline_5_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_272e0c92cba6f37a767cf6fb362468c0_4 == cache_frame_272e0c92cba6f37a767cf6fb362468c0_4) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_272e0c92cba6f37a767cf6fb362468c0_4);
            cache_frame_272e0c92cba6f37a767cf6fb362468c0_4 = NULL;
        }

        assertFrameObject(frame_272e0c92cba6f37a767cf6fb362468c0_4);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_3;

        frame_no_exception_3:;
        goto skip_nested_handling_3;
        nested_frame_exit_3:;

        goto try_except_handler_20;
        skip_nested_handling_3:;
        {
            nuitka_bool tmp_condition_result_36;
            PyObject *tmp_cmp_expr_left_6;
            PyObject *tmp_cmp_expr_right_6;
            CHECK_OBJECT(tmp_class_creation_6__bases);
            tmp_cmp_expr_left_6 = tmp_class_creation_6__bases;
            CHECK_OBJECT(tmp_class_creation_6__bases_orig);
            tmp_cmp_expr_right_6 = tmp_class_creation_6__bases_orig;
            tmp_condition_result_36 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_6, tmp_cmp_expr_right_6);
            if (tmp_condition_result_36 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 132;

                goto try_except_handler_20;
            }
            if (tmp_condition_result_36 == NUITKA_BOOL_TRUE) {
                goto branch_yes_24;
            } else {
                goto branch_no_24;
            }
            assert(tmp_condition_result_36 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_24:;
        CHECK_OBJECT(tmp_class_creation_6__bases_orig);
        tmp_dictset_value = tmp_class_creation_6__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__6_HTTPCreated_132, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 132;

            goto try_except_handler_20;
        }
        branch_no_24:;
        {
            PyObject *tmp_assign_source_65;
            PyObject *tmp_called_value_12;
            PyObject *tmp_args_value_12;
            PyObject *tmp_tuple_element_24;
            PyObject *tmp_kwargs_value_12;
            CHECK_OBJECT(tmp_class_creation_6__metaclass);
            tmp_called_value_12 = tmp_class_creation_6__metaclass;
            tmp_tuple_element_24 = mod_consts[86];
            tmp_args_value_12 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_12, 0, tmp_tuple_element_24);
            CHECK_OBJECT(tmp_class_creation_6__bases);
            tmp_tuple_element_24 = tmp_class_creation_6__bases;
            PyTuple_SET_ITEM0(tmp_args_value_12, 1, tmp_tuple_element_24);
            tmp_tuple_element_24 = locals_aiohttp$web_exceptions$$$class__6_HTTPCreated_132;
            PyTuple_SET_ITEM0(tmp_args_value_12, 2, tmp_tuple_element_24);
            CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
            tmp_kwargs_value_12 = tmp_class_creation_6__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 132;
            tmp_assign_source_65 = CALL_FUNCTION(tmp_called_value_12, tmp_args_value_12, tmp_kwargs_value_12);
            Py_DECREF(tmp_args_value_12);
            if (tmp_assign_source_65 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 132;

                goto try_except_handler_20;
            }
            assert(outline_5_var___class__ == NULL);
            outline_5_var___class__ = tmp_assign_source_65;
        }
        CHECK_OBJECT(outline_5_var___class__);
        tmp_assign_source_64 = outline_5_var___class__;
        Py_INCREF(tmp_assign_source_64);
        goto try_return_handler_20;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_20:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__6_HTTPCreated_132);
        locals_aiohttp$web_exceptions$$$class__6_HTTPCreated_132 = NULL;
        goto try_return_handler_19;
        // Exception handler code:
        try_except_handler_20:;
        exception_keeper_type_18 = exception_type;
        exception_keeper_value_18 = exception_value;
        exception_keeper_tb_18 = exception_tb;
        exception_keeper_lineno_18 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__6_HTTPCreated_132);
        locals_aiohttp$web_exceptions$$$class__6_HTTPCreated_132 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_18;
        exception_value = exception_keeper_value_18;
        exception_tb = exception_keeper_tb_18;
        exception_lineno = exception_keeper_lineno_18;

        goto try_except_handler_19;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_19:;
        CHECK_OBJECT(outline_5_var___class__);
        Py_DECREF(outline_5_var___class__);
        outline_5_var___class__ = NULL;
        goto outline_result_6;
        // Exception handler code:
        try_except_handler_19:;
        exception_keeper_type_19 = exception_type;
        exception_keeper_value_19 = exception_value;
        exception_keeper_tb_19 = exception_tb;
        exception_keeper_lineno_19 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_19;
        exception_value = exception_keeper_value_19;
        exception_tb = exception_keeper_tb_19;
        exception_lineno = exception_keeper_lineno_19;

        goto outline_exception_6;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_6:;
        exception_lineno = 132;
        goto try_except_handler_18;
        outline_result_6:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[86], tmp_assign_source_64);
    }
    goto try_end_8;
    // Exception handler code:
    try_except_handler_18:;
    exception_keeper_type_20 = exception_type;
    exception_keeper_value_20 = exception_value;
    exception_keeper_tb_20 = exception_tb;
    exception_keeper_lineno_20 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_6__bases_orig);
    tmp_class_creation_6__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_6__bases);
    tmp_class_creation_6__bases = NULL;
    Py_XDECREF(tmp_class_creation_6__class_decl_dict);
    tmp_class_creation_6__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_6__metaclass);
    tmp_class_creation_6__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_6__prepared);
    tmp_class_creation_6__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_20;
    exception_value = exception_keeper_value_20;
    exception_tb = exception_keeper_tb_20;
    exception_lineno = exception_keeper_lineno_20;

    goto frame_exception_exit_1;
    // End of try:
    try_end_8:;
    CHECK_OBJECT(tmp_class_creation_6__bases_orig);
    Py_DECREF(tmp_class_creation_6__bases_orig);
    tmp_class_creation_6__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_6__bases);
    Py_DECREF(tmp_class_creation_6__bases);
    tmp_class_creation_6__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
    Py_DECREF(tmp_class_creation_6__class_decl_dict);
    tmp_class_creation_6__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_6__metaclass);
    Py_DECREF(tmp_class_creation_6__metaclass);
    tmp_class_creation_6__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_6__prepared);
    Py_DECREF(tmp_class_creation_6__prepared);
    tmp_class_creation_6__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_66;
        PyObject *tmp_tuple_element_25;
        tmp_tuple_element_25 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[82]);

        if (unlikely(tmp_tuple_element_25 == NULL)) {
            tmp_tuple_element_25 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[82]);
        }

        if (tmp_tuple_element_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 136;

            goto try_except_handler_21;
        }
        tmp_assign_source_66 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_66, 0, tmp_tuple_element_25);
        assert(tmp_class_creation_7__bases_orig == NULL);
        tmp_class_creation_7__bases_orig = tmp_assign_source_66;
    }
    {
        PyObject *tmp_assign_source_67;
        PyObject *tmp_dircall_arg1_7;
        CHECK_OBJECT(tmp_class_creation_7__bases_orig);
        tmp_dircall_arg1_7 = tmp_class_creation_7__bases_orig;
        Py_INCREF(tmp_dircall_arg1_7);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_7};
            tmp_assign_source_67 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_67 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 136;

            goto try_except_handler_21;
        }
        assert(tmp_class_creation_7__bases == NULL);
        tmp_class_creation_7__bases = tmp_assign_source_67;
    }
    {
        PyObject *tmp_assign_source_68;
        tmp_assign_source_68 = PyDict_New();
        assert(tmp_class_creation_7__class_decl_dict == NULL);
        tmp_class_creation_7__class_decl_dict = tmp_assign_source_68;
    }
    {
        PyObject *tmp_assign_source_69;
        PyObject *tmp_metaclass_value_7;
        bool tmp_condition_result_37;
        PyObject *tmp_key_value_19;
        PyObject *tmp_dict_arg_value_19;
        PyObject *tmp_dict_arg_value_20;
        PyObject *tmp_key_value_20;
        nuitka_bool tmp_condition_result_38;
        int tmp_truth_name_7;
        PyObject *tmp_type_arg_13;
        PyObject *tmp_expression_value_35;
        PyObject *tmp_subscript_value_11;
        PyObject *tmp_bases_value_7;
        tmp_key_value_19 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
        tmp_dict_arg_value_19 = tmp_class_creation_7__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_19, tmp_key_value_19);
        assert(!(tmp_res == -1));
        tmp_condition_result_37 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_37 != false) {
            goto condexpr_true_13;
        } else {
            goto condexpr_false_13;
        }
        condexpr_true_13:;
        CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
        tmp_dict_arg_value_20 = tmp_class_creation_7__class_decl_dict;
        tmp_key_value_20 = mod_consts[57];
        tmp_metaclass_value_7 = DICT_GET_ITEM0(tmp_dict_arg_value_20, tmp_key_value_20);
        if (tmp_metaclass_value_7 == NULL) {
            tmp_metaclass_value_7 = Py_None;
        }
        assert(!(tmp_metaclass_value_7 == NULL));
        Py_INCREF(tmp_metaclass_value_7);
        goto condexpr_end_13;
        condexpr_false_13:;
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_truth_name_7 = CHECK_IF_TRUE(tmp_class_creation_7__bases);
        if (tmp_truth_name_7 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 136;

            goto try_except_handler_21;
        }
        tmp_condition_result_38 = tmp_truth_name_7 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_38 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_14;
        } else {
            goto condexpr_false_14;
        }
        condexpr_true_14:;
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_expression_value_35 = tmp_class_creation_7__bases;
        tmp_subscript_value_11 = mod_consts[39];
        tmp_type_arg_13 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_35, tmp_subscript_value_11, 0);
        if (tmp_type_arg_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 136;

            goto try_except_handler_21;
        }
        tmp_metaclass_value_7 = BUILTIN_TYPE1(tmp_type_arg_13);
        Py_DECREF(tmp_type_arg_13);
        if (tmp_metaclass_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 136;

            goto try_except_handler_21;
        }
        goto condexpr_end_14;
        condexpr_false_14:;
        tmp_metaclass_value_7 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_7);
        condexpr_end_14:;
        condexpr_end_13:;
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_bases_value_7 = tmp_class_creation_7__bases;
        tmp_assign_source_69 = SELECT_METACLASS(tmp_metaclass_value_7, tmp_bases_value_7);
        Py_DECREF(tmp_metaclass_value_7);
        if (tmp_assign_source_69 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 136;

            goto try_except_handler_21;
        }
        assert(tmp_class_creation_7__metaclass == NULL);
        tmp_class_creation_7__metaclass = tmp_assign_source_69;
    }
    {
        bool tmp_condition_result_39;
        PyObject *tmp_key_value_21;
        PyObject *tmp_dict_arg_value_21;
        tmp_key_value_21 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
        tmp_dict_arg_value_21 = tmp_class_creation_7__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_21, tmp_key_value_21);
        assert(!(tmp_res == -1));
        tmp_condition_result_39 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_39 != false) {
            goto branch_yes_25;
        } else {
            goto branch_no_25;
        }
    }
    branch_yes_25:;
    CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_7__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 136;

        goto try_except_handler_21;
    }
    branch_no_25:;
    {
        nuitka_bool tmp_condition_result_40;
        PyObject *tmp_expression_value_36;
        CHECK_OBJECT(tmp_class_creation_7__metaclass);
        tmp_expression_value_36 = tmp_class_creation_7__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_36, mod_consts[58]);
        tmp_condition_result_40 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_40 == NUITKA_BOOL_TRUE) {
            goto branch_yes_26;
        } else {
            goto branch_no_26;
        }
    }
    branch_yes_26:;
    {
        PyObject *tmp_assign_source_70;
        PyObject *tmp_called_value_13;
        PyObject *tmp_expression_value_37;
        PyObject *tmp_args_value_13;
        PyObject *tmp_tuple_element_26;
        PyObject *tmp_kwargs_value_13;
        CHECK_OBJECT(tmp_class_creation_7__metaclass);
        tmp_expression_value_37 = tmp_class_creation_7__metaclass;
        tmp_called_value_13 = LOOKUP_ATTRIBUTE(tmp_expression_value_37, mod_consts[58]);
        if (tmp_called_value_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 136;

            goto try_except_handler_21;
        }
        tmp_tuple_element_26 = mod_consts[88];
        tmp_args_value_13 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_13, 0, tmp_tuple_element_26);
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_tuple_element_26 = tmp_class_creation_7__bases;
        PyTuple_SET_ITEM0(tmp_args_value_13, 1, tmp_tuple_element_26);
        CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
        tmp_kwargs_value_13 = tmp_class_creation_7__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 136;
        tmp_assign_source_70 = CALL_FUNCTION(tmp_called_value_13, tmp_args_value_13, tmp_kwargs_value_13);
        Py_DECREF(tmp_called_value_13);
        Py_DECREF(tmp_args_value_13);
        if (tmp_assign_source_70 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 136;

            goto try_except_handler_21;
        }
        assert(tmp_class_creation_7__prepared == NULL);
        tmp_class_creation_7__prepared = tmp_assign_source_70;
    }
    {
        bool tmp_condition_result_41;
        PyObject *tmp_operand_value_7;
        PyObject *tmp_expression_value_38;
        CHECK_OBJECT(tmp_class_creation_7__prepared);
        tmp_expression_value_38 = tmp_class_creation_7__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_38, mod_consts[60]);
        tmp_operand_value_7 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_7);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 136;

            goto try_except_handler_21;
        }
        tmp_condition_result_41 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_41 != false) {
            goto branch_yes_27;
        } else {
            goto branch_no_27;
        }
    }
    branch_yes_27:;
    {
        PyObject *tmp_raise_type_7;
        PyObject *tmp_raise_value_7;
        PyObject *tmp_left_value_7;
        PyObject *tmp_right_value_7;
        PyObject *tmp_tuple_element_27;
        PyObject *tmp_getattr_target_7;
        PyObject *tmp_getattr_attr_7;
        PyObject *tmp_getattr_default_7;
        tmp_raise_type_7 = PyExc_TypeError;
        tmp_left_value_7 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_7__metaclass);
        tmp_getattr_target_7 = tmp_class_creation_7__metaclass;
        tmp_getattr_attr_7 = mod_consts[62];
        tmp_getattr_default_7 = mod_consts[63];
        tmp_tuple_element_27 = BUILTIN_GETATTR(tmp_getattr_target_7, tmp_getattr_attr_7, tmp_getattr_default_7);
        if (tmp_tuple_element_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 136;

            goto try_except_handler_21;
        }
        tmp_right_value_7 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_39;
            PyObject *tmp_type_arg_14;
            PyTuple_SET_ITEM(tmp_right_value_7, 0, tmp_tuple_element_27);
            CHECK_OBJECT(tmp_class_creation_7__prepared);
            tmp_type_arg_14 = tmp_class_creation_7__prepared;
            tmp_expression_value_39 = BUILTIN_TYPE1(tmp_type_arg_14);
            assert(!(tmp_expression_value_39 == NULL));
            tmp_tuple_element_27 = LOOKUP_ATTRIBUTE(tmp_expression_value_39, mod_consts[62]);
            Py_DECREF(tmp_expression_value_39);
            if (tmp_tuple_element_27 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 136;

                goto tuple_build_exception_7;
            }
            PyTuple_SET_ITEM(tmp_right_value_7, 1, tmp_tuple_element_27);
        }
        goto tuple_build_noexception_7;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_7:;
        Py_DECREF(tmp_right_value_7);
        goto try_except_handler_21;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_7:;
        tmp_raise_value_7 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_7, tmp_right_value_7);
        Py_DECREF(tmp_right_value_7);
        if (tmp_raise_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 136;

            goto try_except_handler_21;
        }
        exception_type = tmp_raise_type_7;
        Py_INCREF(tmp_raise_type_7);
        exception_value = tmp_raise_value_7;
        exception_lineno = 136;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_21;
    }
    branch_no_27:;
    goto branch_end_26;
    branch_no_26:;
    {
        PyObject *tmp_assign_source_71;
        tmp_assign_source_71 = PyDict_New();
        assert(tmp_class_creation_7__prepared == NULL);
        tmp_class_creation_7__prepared = tmp_assign_source_71;
    }
    branch_end_26:;
    {
        PyObject *tmp_assign_source_72;
        {
            PyObject *tmp_set_locals_7;
            CHECK_OBJECT(tmp_class_creation_7__prepared);
            tmp_set_locals_7 = tmp_class_creation_7__prepared;
            locals_aiohttp$web_exceptions$$$class__7_HTTPAccepted_136 = tmp_set_locals_7;
            Py_INCREF(tmp_set_locals_7);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__7_HTTPAccepted_136, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 136;

            goto try_except_handler_23;
        }
        tmp_dictset_value = mod_consts[88];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__7_HTTPAccepted_136, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 136;

            goto try_except_handler_23;
        }
        if (isFrameUnusable(cache_frame_10553aca1b0baa9d6fe22af4cd7eda67_5)) {
            Py_XDECREF(cache_frame_10553aca1b0baa9d6fe22af4cd7eda67_5);

#if _DEBUG_REFCOUNTS
            if (cache_frame_10553aca1b0baa9d6fe22af4cd7eda67_5 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_10553aca1b0baa9d6fe22af4cd7eda67_5 = MAKE_FUNCTION_FRAME(codeobj_10553aca1b0baa9d6fe22af4cd7eda67, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_10553aca1b0baa9d6fe22af4cd7eda67_5->m_type_description == NULL);
        frame_10553aca1b0baa9d6fe22af4cd7eda67_5 = cache_frame_10553aca1b0baa9d6fe22af4cd7eda67_5;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_10553aca1b0baa9d6fe22af4cd7eda67_5);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_10553aca1b0baa9d6fe22af4cd7eda67_5) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[89];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__7_HTTPAccepted_136, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 137;
            type_description_2 = "o";
            goto frame_exception_exit_5;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_10553aca1b0baa9d6fe22af4cd7eda67_5);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_4;

        frame_exception_exit_5:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_10553aca1b0baa9d6fe22af4cd7eda67_5);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_10553aca1b0baa9d6fe22af4cd7eda67_5, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_10553aca1b0baa9d6fe22af4cd7eda67_5->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_10553aca1b0baa9d6fe22af4cd7eda67_5, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_10553aca1b0baa9d6fe22af4cd7eda67_5,
            type_description_2,
            outline_6_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_10553aca1b0baa9d6fe22af4cd7eda67_5 == cache_frame_10553aca1b0baa9d6fe22af4cd7eda67_5) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_10553aca1b0baa9d6fe22af4cd7eda67_5);
            cache_frame_10553aca1b0baa9d6fe22af4cd7eda67_5 = NULL;
        }

        assertFrameObject(frame_10553aca1b0baa9d6fe22af4cd7eda67_5);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_4;

        frame_no_exception_4:;
        goto skip_nested_handling_4;
        nested_frame_exit_4:;

        goto try_except_handler_23;
        skip_nested_handling_4:;
        {
            nuitka_bool tmp_condition_result_42;
            PyObject *tmp_cmp_expr_left_7;
            PyObject *tmp_cmp_expr_right_7;
            CHECK_OBJECT(tmp_class_creation_7__bases);
            tmp_cmp_expr_left_7 = tmp_class_creation_7__bases;
            CHECK_OBJECT(tmp_class_creation_7__bases_orig);
            tmp_cmp_expr_right_7 = tmp_class_creation_7__bases_orig;
            tmp_condition_result_42 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_7, tmp_cmp_expr_right_7);
            if (tmp_condition_result_42 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 136;

                goto try_except_handler_23;
            }
            if (tmp_condition_result_42 == NUITKA_BOOL_TRUE) {
                goto branch_yes_28;
            } else {
                goto branch_no_28;
            }
            assert(tmp_condition_result_42 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_28:;
        CHECK_OBJECT(tmp_class_creation_7__bases_orig);
        tmp_dictset_value = tmp_class_creation_7__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__7_HTTPAccepted_136, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 136;

            goto try_except_handler_23;
        }
        branch_no_28:;
        {
            PyObject *tmp_assign_source_73;
            PyObject *tmp_called_value_14;
            PyObject *tmp_args_value_14;
            PyObject *tmp_tuple_element_28;
            PyObject *tmp_kwargs_value_14;
            CHECK_OBJECT(tmp_class_creation_7__metaclass);
            tmp_called_value_14 = tmp_class_creation_7__metaclass;
            tmp_tuple_element_28 = mod_consts[88];
            tmp_args_value_14 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_14, 0, tmp_tuple_element_28);
            CHECK_OBJECT(tmp_class_creation_7__bases);
            tmp_tuple_element_28 = tmp_class_creation_7__bases;
            PyTuple_SET_ITEM0(tmp_args_value_14, 1, tmp_tuple_element_28);
            tmp_tuple_element_28 = locals_aiohttp$web_exceptions$$$class__7_HTTPAccepted_136;
            PyTuple_SET_ITEM0(tmp_args_value_14, 2, tmp_tuple_element_28);
            CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
            tmp_kwargs_value_14 = tmp_class_creation_7__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 136;
            tmp_assign_source_73 = CALL_FUNCTION(tmp_called_value_14, tmp_args_value_14, tmp_kwargs_value_14);
            Py_DECREF(tmp_args_value_14);
            if (tmp_assign_source_73 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 136;

                goto try_except_handler_23;
            }
            assert(outline_6_var___class__ == NULL);
            outline_6_var___class__ = tmp_assign_source_73;
        }
        CHECK_OBJECT(outline_6_var___class__);
        tmp_assign_source_72 = outline_6_var___class__;
        Py_INCREF(tmp_assign_source_72);
        goto try_return_handler_23;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_23:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__7_HTTPAccepted_136);
        locals_aiohttp$web_exceptions$$$class__7_HTTPAccepted_136 = NULL;
        goto try_return_handler_22;
        // Exception handler code:
        try_except_handler_23:;
        exception_keeper_type_21 = exception_type;
        exception_keeper_value_21 = exception_value;
        exception_keeper_tb_21 = exception_tb;
        exception_keeper_lineno_21 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__7_HTTPAccepted_136);
        locals_aiohttp$web_exceptions$$$class__7_HTTPAccepted_136 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_21;
        exception_value = exception_keeper_value_21;
        exception_tb = exception_keeper_tb_21;
        exception_lineno = exception_keeper_lineno_21;

        goto try_except_handler_22;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_22:;
        CHECK_OBJECT(outline_6_var___class__);
        Py_DECREF(outline_6_var___class__);
        outline_6_var___class__ = NULL;
        goto outline_result_7;
        // Exception handler code:
        try_except_handler_22:;
        exception_keeper_type_22 = exception_type;
        exception_keeper_value_22 = exception_value;
        exception_keeper_tb_22 = exception_tb;
        exception_keeper_lineno_22 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_22;
        exception_value = exception_keeper_value_22;
        exception_tb = exception_keeper_tb_22;
        exception_lineno = exception_keeper_lineno_22;

        goto outline_exception_7;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_7:;
        exception_lineno = 136;
        goto try_except_handler_21;
        outline_result_7:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[88], tmp_assign_source_72);
    }
    goto try_end_9;
    // Exception handler code:
    try_except_handler_21:;
    exception_keeper_type_23 = exception_type;
    exception_keeper_value_23 = exception_value;
    exception_keeper_tb_23 = exception_tb;
    exception_keeper_lineno_23 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_7__bases_orig);
    tmp_class_creation_7__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_7__bases);
    tmp_class_creation_7__bases = NULL;
    Py_XDECREF(tmp_class_creation_7__class_decl_dict);
    tmp_class_creation_7__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_7__metaclass);
    tmp_class_creation_7__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_7__prepared);
    tmp_class_creation_7__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_23;
    exception_value = exception_keeper_value_23;
    exception_tb = exception_keeper_tb_23;
    exception_lineno = exception_keeper_lineno_23;

    goto frame_exception_exit_1;
    // End of try:
    try_end_9:;
    CHECK_OBJECT(tmp_class_creation_7__bases_orig);
    Py_DECREF(tmp_class_creation_7__bases_orig);
    tmp_class_creation_7__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_7__bases);
    Py_DECREF(tmp_class_creation_7__bases);
    tmp_class_creation_7__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
    Py_DECREF(tmp_class_creation_7__class_decl_dict);
    tmp_class_creation_7__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_7__metaclass);
    Py_DECREF(tmp_class_creation_7__metaclass);
    tmp_class_creation_7__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_7__prepared);
    Py_DECREF(tmp_class_creation_7__prepared);
    tmp_class_creation_7__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_74;
        PyObject *tmp_tuple_element_29;
        tmp_tuple_element_29 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[82]);

        if (unlikely(tmp_tuple_element_29 == NULL)) {
            tmp_tuple_element_29 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[82]);
        }

        if (tmp_tuple_element_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 140;

            goto try_except_handler_24;
        }
        tmp_assign_source_74 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_74, 0, tmp_tuple_element_29);
        assert(tmp_class_creation_8__bases_orig == NULL);
        tmp_class_creation_8__bases_orig = tmp_assign_source_74;
    }
    {
        PyObject *tmp_assign_source_75;
        PyObject *tmp_dircall_arg1_8;
        CHECK_OBJECT(tmp_class_creation_8__bases_orig);
        tmp_dircall_arg1_8 = tmp_class_creation_8__bases_orig;
        Py_INCREF(tmp_dircall_arg1_8);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_8};
            tmp_assign_source_75 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_75 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 140;

            goto try_except_handler_24;
        }
        assert(tmp_class_creation_8__bases == NULL);
        tmp_class_creation_8__bases = tmp_assign_source_75;
    }
    {
        PyObject *tmp_assign_source_76;
        tmp_assign_source_76 = PyDict_New();
        assert(tmp_class_creation_8__class_decl_dict == NULL);
        tmp_class_creation_8__class_decl_dict = tmp_assign_source_76;
    }
    {
        PyObject *tmp_assign_source_77;
        PyObject *tmp_metaclass_value_8;
        bool tmp_condition_result_43;
        PyObject *tmp_key_value_22;
        PyObject *tmp_dict_arg_value_22;
        PyObject *tmp_dict_arg_value_23;
        PyObject *tmp_key_value_23;
        nuitka_bool tmp_condition_result_44;
        int tmp_truth_name_8;
        PyObject *tmp_type_arg_15;
        PyObject *tmp_expression_value_40;
        PyObject *tmp_subscript_value_12;
        PyObject *tmp_bases_value_8;
        tmp_key_value_22 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
        tmp_dict_arg_value_22 = tmp_class_creation_8__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_22, tmp_key_value_22);
        assert(!(tmp_res == -1));
        tmp_condition_result_43 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_43 != false) {
            goto condexpr_true_15;
        } else {
            goto condexpr_false_15;
        }
        condexpr_true_15:;
        CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
        tmp_dict_arg_value_23 = tmp_class_creation_8__class_decl_dict;
        tmp_key_value_23 = mod_consts[57];
        tmp_metaclass_value_8 = DICT_GET_ITEM0(tmp_dict_arg_value_23, tmp_key_value_23);
        if (tmp_metaclass_value_8 == NULL) {
            tmp_metaclass_value_8 = Py_None;
        }
        assert(!(tmp_metaclass_value_8 == NULL));
        Py_INCREF(tmp_metaclass_value_8);
        goto condexpr_end_15;
        condexpr_false_15:;
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_truth_name_8 = CHECK_IF_TRUE(tmp_class_creation_8__bases);
        if (tmp_truth_name_8 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 140;

            goto try_except_handler_24;
        }
        tmp_condition_result_44 = tmp_truth_name_8 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_44 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_16;
        } else {
            goto condexpr_false_16;
        }
        condexpr_true_16:;
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_expression_value_40 = tmp_class_creation_8__bases;
        tmp_subscript_value_12 = mod_consts[39];
        tmp_type_arg_15 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_40, tmp_subscript_value_12, 0);
        if (tmp_type_arg_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 140;

            goto try_except_handler_24;
        }
        tmp_metaclass_value_8 = BUILTIN_TYPE1(tmp_type_arg_15);
        Py_DECREF(tmp_type_arg_15);
        if (tmp_metaclass_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 140;

            goto try_except_handler_24;
        }
        goto condexpr_end_16;
        condexpr_false_16:;
        tmp_metaclass_value_8 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_8);
        condexpr_end_16:;
        condexpr_end_15:;
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_bases_value_8 = tmp_class_creation_8__bases;
        tmp_assign_source_77 = SELECT_METACLASS(tmp_metaclass_value_8, tmp_bases_value_8);
        Py_DECREF(tmp_metaclass_value_8);
        if (tmp_assign_source_77 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 140;

            goto try_except_handler_24;
        }
        assert(tmp_class_creation_8__metaclass == NULL);
        tmp_class_creation_8__metaclass = tmp_assign_source_77;
    }
    {
        bool tmp_condition_result_45;
        PyObject *tmp_key_value_24;
        PyObject *tmp_dict_arg_value_24;
        tmp_key_value_24 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
        tmp_dict_arg_value_24 = tmp_class_creation_8__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_24, tmp_key_value_24);
        assert(!(tmp_res == -1));
        tmp_condition_result_45 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_45 != false) {
            goto branch_yes_29;
        } else {
            goto branch_no_29;
        }
    }
    branch_yes_29:;
    CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_8__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 140;

        goto try_except_handler_24;
    }
    branch_no_29:;
    {
        nuitka_bool tmp_condition_result_46;
        PyObject *tmp_expression_value_41;
        CHECK_OBJECT(tmp_class_creation_8__metaclass);
        tmp_expression_value_41 = tmp_class_creation_8__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_41, mod_consts[58]);
        tmp_condition_result_46 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_46 == NUITKA_BOOL_TRUE) {
            goto branch_yes_30;
        } else {
            goto branch_no_30;
        }
    }
    branch_yes_30:;
    {
        PyObject *tmp_assign_source_78;
        PyObject *tmp_called_value_15;
        PyObject *tmp_expression_value_42;
        PyObject *tmp_args_value_15;
        PyObject *tmp_tuple_element_30;
        PyObject *tmp_kwargs_value_15;
        CHECK_OBJECT(tmp_class_creation_8__metaclass);
        tmp_expression_value_42 = tmp_class_creation_8__metaclass;
        tmp_called_value_15 = LOOKUP_ATTRIBUTE(tmp_expression_value_42, mod_consts[58]);
        if (tmp_called_value_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 140;

            goto try_except_handler_24;
        }
        tmp_tuple_element_30 = mod_consts[90];
        tmp_args_value_15 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_15, 0, tmp_tuple_element_30);
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_tuple_element_30 = tmp_class_creation_8__bases;
        PyTuple_SET_ITEM0(tmp_args_value_15, 1, tmp_tuple_element_30);
        CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
        tmp_kwargs_value_15 = tmp_class_creation_8__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 140;
        tmp_assign_source_78 = CALL_FUNCTION(tmp_called_value_15, tmp_args_value_15, tmp_kwargs_value_15);
        Py_DECREF(tmp_called_value_15);
        Py_DECREF(tmp_args_value_15);
        if (tmp_assign_source_78 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 140;

            goto try_except_handler_24;
        }
        assert(tmp_class_creation_8__prepared == NULL);
        tmp_class_creation_8__prepared = tmp_assign_source_78;
    }
    {
        bool tmp_condition_result_47;
        PyObject *tmp_operand_value_8;
        PyObject *tmp_expression_value_43;
        CHECK_OBJECT(tmp_class_creation_8__prepared);
        tmp_expression_value_43 = tmp_class_creation_8__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_43, mod_consts[60]);
        tmp_operand_value_8 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_8);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 140;

            goto try_except_handler_24;
        }
        tmp_condition_result_47 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_47 != false) {
            goto branch_yes_31;
        } else {
            goto branch_no_31;
        }
    }
    branch_yes_31:;
    {
        PyObject *tmp_raise_type_8;
        PyObject *tmp_raise_value_8;
        PyObject *tmp_left_value_8;
        PyObject *tmp_right_value_8;
        PyObject *tmp_tuple_element_31;
        PyObject *tmp_getattr_target_8;
        PyObject *tmp_getattr_attr_8;
        PyObject *tmp_getattr_default_8;
        tmp_raise_type_8 = PyExc_TypeError;
        tmp_left_value_8 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_8__metaclass);
        tmp_getattr_target_8 = tmp_class_creation_8__metaclass;
        tmp_getattr_attr_8 = mod_consts[62];
        tmp_getattr_default_8 = mod_consts[63];
        tmp_tuple_element_31 = BUILTIN_GETATTR(tmp_getattr_target_8, tmp_getattr_attr_8, tmp_getattr_default_8);
        if (tmp_tuple_element_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 140;

            goto try_except_handler_24;
        }
        tmp_right_value_8 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_44;
            PyObject *tmp_type_arg_16;
            PyTuple_SET_ITEM(tmp_right_value_8, 0, tmp_tuple_element_31);
            CHECK_OBJECT(tmp_class_creation_8__prepared);
            tmp_type_arg_16 = tmp_class_creation_8__prepared;
            tmp_expression_value_44 = BUILTIN_TYPE1(tmp_type_arg_16);
            assert(!(tmp_expression_value_44 == NULL));
            tmp_tuple_element_31 = LOOKUP_ATTRIBUTE(tmp_expression_value_44, mod_consts[62]);
            Py_DECREF(tmp_expression_value_44);
            if (tmp_tuple_element_31 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 140;

                goto tuple_build_exception_8;
            }
            PyTuple_SET_ITEM(tmp_right_value_8, 1, tmp_tuple_element_31);
        }
        goto tuple_build_noexception_8;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_8:;
        Py_DECREF(tmp_right_value_8);
        goto try_except_handler_24;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_8:;
        tmp_raise_value_8 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_8, tmp_right_value_8);
        Py_DECREF(tmp_right_value_8);
        if (tmp_raise_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 140;

            goto try_except_handler_24;
        }
        exception_type = tmp_raise_type_8;
        Py_INCREF(tmp_raise_type_8);
        exception_value = tmp_raise_value_8;
        exception_lineno = 140;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_24;
    }
    branch_no_31:;
    goto branch_end_30;
    branch_no_30:;
    {
        PyObject *tmp_assign_source_79;
        tmp_assign_source_79 = PyDict_New();
        assert(tmp_class_creation_8__prepared == NULL);
        tmp_class_creation_8__prepared = tmp_assign_source_79;
    }
    branch_end_30:;
    {
        PyObject *tmp_assign_source_80;
        {
            PyObject *tmp_set_locals_8;
            CHECK_OBJECT(tmp_class_creation_8__prepared);
            tmp_set_locals_8 = tmp_class_creation_8__prepared;
            locals_aiohttp$web_exceptions$$$class__8_HTTPNonAuthoritativeInformation_140 = tmp_set_locals_8;
            Py_INCREF(tmp_set_locals_8);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__8_HTTPNonAuthoritativeInformation_140, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 140;

            goto try_except_handler_26;
        }
        tmp_dictset_value = mod_consts[90];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__8_HTTPNonAuthoritativeInformation_140, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 140;

            goto try_except_handler_26;
        }
        if (isFrameUnusable(cache_frame_4cb3b9a2c3afe1b42b3f310e2b86ac47_6)) {
            Py_XDECREF(cache_frame_4cb3b9a2c3afe1b42b3f310e2b86ac47_6);

#if _DEBUG_REFCOUNTS
            if (cache_frame_4cb3b9a2c3afe1b42b3f310e2b86ac47_6 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_4cb3b9a2c3afe1b42b3f310e2b86ac47_6 = MAKE_FUNCTION_FRAME(codeobj_4cb3b9a2c3afe1b42b3f310e2b86ac47, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_4cb3b9a2c3afe1b42b3f310e2b86ac47_6->m_type_description == NULL);
        frame_4cb3b9a2c3afe1b42b3f310e2b86ac47_6 = cache_frame_4cb3b9a2c3afe1b42b3f310e2b86ac47_6;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_4cb3b9a2c3afe1b42b3f310e2b86ac47_6);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_4cb3b9a2c3afe1b42b3f310e2b86ac47_6) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[91];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__8_HTTPNonAuthoritativeInformation_140, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 141;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_4cb3b9a2c3afe1b42b3f310e2b86ac47_6);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_5;

        frame_exception_exit_6:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_4cb3b9a2c3afe1b42b3f310e2b86ac47_6);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_4cb3b9a2c3afe1b42b3f310e2b86ac47_6, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_4cb3b9a2c3afe1b42b3f310e2b86ac47_6->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_4cb3b9a2c3afe1b42b3f310e2b86ac47_6, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_4cb3b9a2c3afe1b42b3f310e2b86ac47_6,
            type_description_2,
            outline_7_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_4cb3b9a2c3afe1b42b3f310e2b86ac47_6 == cache_frame_4cb3b9a2c3afe1b42b3f310e2b86ac47_6) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_4cb3b9a2c3afe1b42b3f310e2b86ac47_6);
            cache_frame_4cb3b9a2c3afe1b42b3f310e2b86ac47_6 = NULL;
        }

        assertFrameObject(frame_4cb3b9a2c3afe1b42b3f310e2b86ac47_6);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_5;

        frame_no_exception_5:;
        goto skip_nested_handling_5;
        nested_frame_exit_5:;

        goto try_except_handler_26;
        skip_nested_handling_5:;
        {
            nuitka_bool tmp_condition_result_48;
            PyObject *tmp_cmp_expr_left_8;
            PyObject *tmp_cmp_expr_right_8;
            CHECK_OBJECT(tmp_class_creation_8__bases);
            tmp_cmp_expr_left_8 = tmp_class_creation_8__bases;
            CHECK_OBJECT(tmp_class_creation_8__bases_orig);
            tmp_cmp_expr_right_8 = tmp_class_creation_8__bases_orig;
            tmp_condition_result_48 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_8, tmp_cmp_expr_right_8);
            if (tmp_condition_result_48 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 140;

                goto try_except_handler_26;
            }
            if (tmp_condition_result_48 == NUITKA_BOOL_TRUE) {
                goto branch_yes_32;
            } else {
                goto branch_no_32;
            }
            assert(tmp_condition_result_48 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_32:;
        CHECK_OBJECT(tmp_class_creation_8__bases_orig);
        tmp_dictset_value = tmp_class_creation_8__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__8_HTTPNonAuthoritativeInformation_140, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 140;

            goto try_except_handler_26;
        }
        branch_no_32:;
        {
            PyObject *tmp_assign_source_81;
            PyObject *tmp_called_value_16;
            PyObject *tmp_args_value_16;
            PyObject *tmp_tuple_element_32;
            PyObject *tmp_kwargs_value_16;
            CHECK_OBJECT(tmp_class_creation_8__metaclass);
            tmp_called_value_16 = tmp_class_creation_8__metaclass;
            tmp_tuple_element_32 = mod_consts[90];
            tmp_args_value_16 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_16, 0, tmp_tuple_element_32);
            CHECK_OBJECT(tmp_class_creation_8__bases);
            tmp_tuple_element_32 = tmp_class_creation_8__bases;
            PyTuple_SET_ITEM0(tmp_args_value_16, 1, tmp_tuple_element_32);
            tmp_tuple_element_32 = locals_aiohttp$web_exceptions$$$class__8_HTTPNonAuthoritativeInformation_140;
            PyTuple_SET_ITEM0(tmp_args_value_16, 2, tmp_tuple_element_32);
            CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
            tmp_kwargs_value_16 = tmp_class_creation_8__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 140;
            tmp_assign_source_81 = CALL_FUNCTION(tmp_called_value_16, tmp_args_value_16, tmp_kwargs_value_16);
            Py_DECREF(tmp_args_value_16);
            if (tmp_assign_source_81 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 140;

                goto try_except_handler_26;
            }
            assert(outline_7_var___class__ == NULL);
            outline_7_var___class__ = tmp_assign_source_81;
        }
        CHECK_OBJECT(outline_7_var___class__);
        tmp_assign_source_80 = outline_7_var___class__;
        Py_INCREF(tmp_assign_source_80);
        goto try_return_handler_26;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_26:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__8_HTTPNonAuthoritativeInformation_140);
        locals_aiohttp$web_exceptions$$$class__8_HTTPNonAuthoritativeInformation_140 = NULL;
        goto try_return_handler_25;
        // Exception handler code:
        try_except_handler_26:;
        exception_keeper_type_24 = exception_type;
        exception_keeper_value_24 = exception_value;
        exception_keeper_tb_24 = exception_tb;
        exception_keeper_lineno_24 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__8_HTTPNonAuthoritativeInformation_140);
        locals_aiohttp$web_exceptions$$$class__8_HTTPNonAuthoritativeInformation_140 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_24;
        exception_value = exception_keeper_value_24;
        exception_tb = exception_keeper_tb_24;
        exception_lineno = exception_keeper_lineno_24;

        goto try_except_handler_25;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_25:;
        CHECK_OBJECT(outline_7_var___class__);
        Py_DECREF(outline_7_var___class__);
        outline_7_var___class__ = NULL;
        goto outline_result_8;
        // Exception handler code:
        try_except_handler_25:;
        exception_keeper_type_25 = exception_type;
        exception_keeper_value_25 = exception_value;
        exception_keeper_tb_25 = exception_tb;
        exception_keeper_lineno_25 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_25;
        exception_value = exception_keeper_value_25;
        exception_tb = exception_keeper_tb_25;
        exception_lineno = exception_keeper_lineno_25;

        goto outline_exception_8;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_8:;
        exception_lineno = 140;
        goto try_except_handler_24;
        outline_result_8:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[90], tmp_assign_source_80);
    }
    goto try_end_10;
    // Exception handler code:
    try_except_handler_24:;
    exception_keeper_type_26 = exception_type;
    exception_keeper_value_26 = exception_value;
    exception_keeper_tb_26 = exception_tb;
    exception_keeper_lineno_26 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_8__bases_orig);
    tmp_class_creation_8__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_8__bases);
    tmp_class_creation_8__bases = NULL;
    Py_XDECREF(tmp_class_creation_8__class_decl_dict);
    tmp_class_creation_8__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_8__metaclass);
    tmp_class_creation_8__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_8__prepared);
    tmp_class_creation_8__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_26;
    exception_value = exception_keeper_value_26;
    exception_tb = exception_keeper_tb_26;
    exception_lineno = exception_keeper_lineno_26;

    goto frame_exception_exit_1;
    // End of try:
    try_end_10:;
    CHECK_OBJECT(tmp_class_creation_8__bases_orig);
    Py_DECREF(tmp_class_creation_8__bases_orig);
    tmp_class_creation_8__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_8__bases);
    Py_DECREF(tmp_class_creation_8__bases);
    tmp_class_creation_8__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
    Py_DECREF(tmp_class_creation_8__class_decl_dict);
    tmp_class_creation_8__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_8__metaclass);
    Py_DECREF(tmp_class_creation_8__metaclass);
    tmp_class_creation_8__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_8__prepared);
    Py_DECREF(tmp_class_creation_8__prepared);
    tmp_class_creation_8__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_82;
        PyObject *tmp_tuple_element_33;
        tmp_tuple_element_33 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[82]);

        if (unlikely(tmp_tuple_element_33 == NULL)) {
            tmp_tuple_element_33 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[82]);
        }

        if (tmp_tuple_element_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 144;

            goto try_except_handler_27;
        }
        tmp_assign_source_82 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_82, 0, tmp_tuple_element_33);
        assert(tmp_class_creation_9__bases_orig == NULL);
        tmp_class_creation_9__bases_orig = tmp_assign_source_82;
    }
    {
        PyObject *tmp_assign_source_83;
        PyObject *tmp_dircall_arg1_9;
        CHECK_OBJECT(tmp_class_creation_9__bases_orig);
        tmp_dircall_arg1_9 = tmp_class_creation_9__bases_orig;
        Py_INCREF(tmp_dircall_arg1_9);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_9};
            tmp_assign_source_83 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_83 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 144;

            goto try_except_handler_27;
        }
        assert(tmp_class_creation_9__bases == NULL);
        tmp_class_creation_9__bases = tmp_assign_source_83;
    }
    {
        PyObject *tmp_assign_source_84;
        tmp_assign_source_84 = PyDict_New();
        assert(tmp_class_creation_9__class_decl_dict == NULL);
        tmp_class_creation_9__class_decl_dict = tmp_assign_source_84;
    }
    {
        PyObject *tmp_assign_source_85;
        PyObject *tmp_metaclass_value_9;
        bool tmp_condition_result_49;
        PyObject *tmp_key_value_25;
        PyObject *tmp_dict_arg_value_25;
        PyObject *tmp_dict_arg_value_26;
        PyObject *tmp_key_value_26;
        nuitka_bool tmp_condition_result_50;
        int tmp_truth_name_9;
        PyObject *tmp_type_arg_17;
        PyObject *tmp_expression_value_45;
        PyObject *tmp_subscript_value_13;
        PyObject *tmp_bases_value_9;
        tmp_key_value_25 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
        tmp_dict_arg_value_25 = tmp_class_creation_9__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_25, tmp_key_value_25);
        assert(!(tmp_res == -1));
        tmp_condition_result_49 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_49 != false) {
            goto condexpr_true_17;
        } else {
            goto condexpr_false_17;
        }
        condexpr_true_17:;
        CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
        tmp_dict_arg_value_26 = tmp_class_creation_9__class_decl_dict;
        tmp_key_value_26 = mod_consts[57];
        tmp_metaclass_value_9 = DICT_GET_ITEM0(tmp_dict_arg_value_26, tmp_key_value_26);
        if (tmp_metaclass_value_9 == NULL) {
            tmp_metaclass_value_9 = Py_None;
        }
        assert(!(tmp_metaclass_value_9 == NULL));
        Py_INCREF(tmp_metaclass_value_9);
        goto condexpr_end_17;
        condexpr_false_17:;
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_truth_name_9 = CHECK_IF_TRUE(tmp_class_creation_9__bases);
        if (tmp_truth_name_9 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 144;

            goto try_except_handler_27;
        }
        tmp_condition_result_50 = tmp_truth_name_9 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_50 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_18;
        } else {
            goto condexpr_false_18;
        }
        condexpr_true_18:;
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_expression_value_45 = tmp_class_creation_9__bases;
        tmp_subscript_value_13 = mod_consts[39];
        tmp_type_arg_17 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_45, tmp_subscript_value_13, 0);
        if (tmp_type_arg_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 144;

            goto try_except_handler_27;
        }
        tmp_metaclass_value_9 = BUILTIN_TYPE1(tmp_type_arg_17);
        Py_DECREF(tmp_type_arg_17);
        if (tmp_metaclass_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 144;

            goto try_except_handler_27;
        }
        goto condexpr_end_18;
        condexpr_false_18:;
        tmp_metaclass_value_9 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_9);
        condexpr_end_18:;
        condexpr_end_17:;
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_bases_value_9 = tmp_class_creation_9__bases;
        tmp_assign_source_85 = SELECT_METACLASS(tmp_metaclass_value_9, tmp_bases_value_9);
        Py_DECREF(tmp_metaclass_value_9);
        if (tmp_assign_source_85 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 144;

            goto try_except_handler_27;
        }
        assert(tmp_class_creation_9__metaclass == NULL);
        tmp_class_creation_9__metaclass = tmp_assign_source_85;
    }
    {
        bool tmp_condition_result_51;
        PyObject *tmp_key_value_27;
        PyObject *tmp_dict_arg_value_27;
        tmp_key_value_27 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
        tmp_dict_arg_value_27 = tmp_class_creation_9__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_27, tmp_key_value_27);
        assert(!(tmp_res == -1));
        tmp_condition_result_51 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_51 != false) {
            goto branch_yes_33;
        } else {
            goto branch_no_33;
        }
    }
    branch_yes_33:;
    CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_9__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 144;

        goto try_except_handler_27;
    }
    branch_no_33:;
    {
        nuitka_bool tmp_condition_result_52;
        PyObject *tmp_expression_value_46;
        CHECK_OBJECT(tmp_class_creation_9__metaclass);
        tmp_expression_value_46 = tmp_class_creation_9__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_46, mod_consts[58]);
        tmp_condition_result_52 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_52 == NUITKA_BOOL_TRUE) {
            goto branch_yes_34;
        } else {
            goto branch_no_34;
        }
    }
    branch_yes_34:;
    {
        PyObject *tmp_assign_source_86;
        PyObject *tmp_called_value_17;
        PyObject *tmp_expression_value_47;
        PyObject *tmp_args_value_17;
        PyObject *tmp_tuple_element_34;
        PyObject *tmp_kwargs_value_17;
        CHECK_OBJECT(tmp_class_creation_9__metaclass);
        tmp_expression_value_47 = tmp_class_creation_9__metaclass;
        tmp_called_value_17 = LOOKUP_ATTRIBUTE(tmp_expression_value_47, mod_consts[58]);
        if (tmp_called_value_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 144;

            goto try_except_handler_27;
        }
        tmp_tuple_element_34 = mod_consts[92];
        tmp_args_value_17 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_17, 0, tmp_tuple_element_34);
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_tuple_element_34 = tmp_class_creation_9__bases;
        PyTuple_SET_ITEM0(tmp_args_value_17, 1, tmp_tuple_element_34);
        CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
        tmp_kwargs_value_17 = tmp_class_creation_9__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 144;
        tmp_assign_source_86 = CALL_FUNCTION(tmp_called_value_17, tmp_args_value_17, tmp_kwargs_value_17);
        Py_DECREF(tmp_called_value_17);
        Py_DECREF(tmp_args_value_17);
        if (tmp_assign_source_86 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 144;

            goto try_except_handler_27;
        }
        assert(tmp_class_creation_9__prepared == NULL);
        tmp_class_creation_9__prepared = tmp_assign_source_86;
    }
    {
        bool tmp_condition_result_53;
        PyObject *tmp_operand_value_9;
        PyObject *tmp_expression_value_48;
        CHECK_OBJECT(tmp_class_creation_9__prepared);
        tmp_expression_value_48 = tmp_class_creation_9__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_48, mod_consts[60]);
        tmp_operand_value_9 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_9);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 144;

            goto try_except_handler_27;
        }
        tmp_condition_result_53 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_53 != false) {
            goto branch_yes_35;
        } else {
            goto branch_no_35;
        }
    }
    branch_yes_35:;
    {
        PyObject *tmp_raise_type_9;
        PyObject *tmp_raise_value_9;
        PyObject *tmp_left_value_9;
        PyObject *tmp_right_value_9;
        PyObject *tmp_tuple_element_35;
        PyObject *tmp_getattr_target_9;
        PyObject *tmp_getattr_attr_9;
        PyObject *tmp_getattr_default_9;
        tmp_raise_type_9 = PyExc_TypeError;
        tmp_left_value_9 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_9__metaclass);
        tmp_getattr_target_9 = tmp_class_creation_9__metaclass;
        tmp_getattr_attr_9 = mod_consts[62];
        tmp_getattr_default_9 = mod_consts[63];
        tmp_tuple_element_35 = BUILTIN_GETATTR(tmp_getattr_target_9, tmp_getattr_attr_9, tmp_getattr_default_9);
        if (tmp_tuple_element_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 144;

            goto try_except_handler_27;
        }
        tmp_right_value_9 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_49;
            PyObject *tmp_type_arg_18;
            PyTuple_SET_ITEM(tmp_right_value_9, 0, tmp_tuple_element_35);
            CHECK_OBJECT(tmp_class_creation_9__prepared);
            tmp_type_arg_18 = tmp_class_creation_9__prepared;
            tmp_expression_value_49 = BUILTIN_TYPE1(tmp_type_arg_18);
            assert(!(tmp_expression_value_49 == NULL));
            tmp_tuple_element_35 = LOOKUP_ATTRIBUTE(tmp_expression_value_49, mod_consts[62]);
            Py_DECREF(tmp_expression_value_49);
            if (tmp_tuple_element_35 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 144;

                goto tuple_build_exception_9;
            }
            PyTuple_SET_ITEM(tmp_right_value_9, 1, tmp_tuple_element_35);
        }
        goto tuple_build_noexception_9;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_9:;
        Py_DECREF(tmp_right_value_9);
        goto try_except_handler_27;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_9:;
        tmp_raise_value_9 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_9, tmp_right_value_9);
        Py_DECREF(tmp_right_value_9);
        if (tmp_raise_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 144;

            goto try_except_handler_27;
        }
        exception_type = tmp_raise_type_9;
        Py_INCREF(tmp_raise_type_9);
        exception_value = tmp_raise_value_9;
        exception_lineno = 144;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_27;
    }
    branch_no_35:;
    goto branch_end_34;
    branch_no_34:;
    {
        PyObject *tmp_assign_source_87;
        tmp_assign_source_87 = PyDict_New();
        assert(tmp_class_creation_9__prepared == NULL);
        tmp_class_creation_9__prepared = tmp_assign_source_87;
    }
    branch_end_34:;
    {
        PyObject *tmp_assign_source_88;
        {
            PyObject *tmp_set_locals_9;
            CHECK_OBJECT(tmp_class_creation_9__prepared);
            tmp_set_locals_9 = tmp_class_creation_9__prepared;
            locals_aiohttp$web_exceptions$$$class__9_HTTPNoContent_144 = tmp_set_locals_9;
            Py_INCREF(tmp_set_locals_9);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__9_HTTPNoContent_144, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 144;

            goto try_except_handler_29;
        }
        tmp_dictset_value = mod_consts[92];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__9_HTTPNoContent_144, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 144;

            goto try_except_handler_29;
        }
        if (isFrameUnusable(cache_frame_3333be612be9b91290a6820617d3aff9_7)) {
            Py_XDECREF(cache_frame_3333be612be9b91290a6820617d3aff9_7);

#if _DEBUG_REFCOUNTS
            if (cache_frame_3333be612be9b91290a6820617d3aff9_7 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_3333be612be9b91290a6820617d3aff9_7 = MAKE_FUNCTION_FRAME(codeobj_3333be612be9b91290a6820617d3aff9, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_3333be612be9b91290a6820617d3aff9_7->m_type_description == NULL);
        frame_3333be612be9b91290a6820617d3aff9_7 = cache_frame_3333be612be9b91290a6820617d3aff9_7;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_3333be612be9b91290a6820617d3aff9_7);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_3333be612be9b91290a6820617d3aff9_7) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[93];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__9_HTTPNoContent_144, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 145;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = Py_True;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__9_HTTPNoContent_144, mod_consts[10], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 146;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_3333be612be9b91290a6820617d3aff9_7);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_6;

        frame_exception_exit_7:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_3333be612be9b91290a6820617d3aff9_7);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_3333be612be9b91290a6820617d3aff9_7, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_3333be612be9b91290a6820617d3aff9_7->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_3333be612be9b91290a6820617d3aff9_7, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_3333be612be9b91290a6820617d3aff9_7,
            type_description_2,
            outline_8_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_3333be612be9b91290a6820617d3aff9_7 == cache_frame_3333be612be9b91290a6820617d3aff9_7) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_3333be612be9b91290a6820617d3aff9_7);
            cache_frame_3333be612be9b91290a6820617d3aff9_7 = NULL;
        }

        assertFrameObject(frame_3333be612be9b91290a6820617d3aff9_7);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_6;

        frame_no_exception_6:;
        goto skip_nested_handling_6;
        nested_frame_exit_6:;

        goto try_except_handler_29;
        skip_nested_handling_6:;
        {
            nuitka_bool tmp_condition_result_54;
            PyObject *tmp_cmp_expr_left_9;
            PyObject *tmp_cmp_expr_right_9;
            CHECK_OBJECT(tmp_class_creation_9__bases);
            tmp_cmp_expr_left_9 = tmp_class_creation_9__bases;
            CHECK_OBJECT(tmp_class_creation_9__bases_orig);
            tmp_cmp_expr_right_9 = tmp_class_creation_9__bases_orig;
            tmp_condition_result_54 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_9, tmp_cmp_expr_right_9);
            if (tmp_condition_result_54 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 144;

                goto try_except_handler_29;
            }
            if (tmp_condition_result_54 == NUITKA_BOOL_TRUE) {
                goto branch_yes_36;
            } else {
                goto branch_no_36;
            }
            assert(tmp_condition_result_54 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_36:;
        CHECK_OBJECT(tmp_class_creation_9__bases_orig);
        tmp_dictset_value = tmp_class_creation_9__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__9_HTTPNoContent_144, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 144;

            goto try_except_handler_29;
        }
        branch_no_36:;
        {
            PyObject *tmp_assign_source_89;
            PyObject *tmp_called_value_18;
            PyObject *tmp_args_value_18;
            PyObject *tmp_tuple_element_36;
            PyObject *tmp_kwargs_value_18;
            CHECK_OBJECT(tmp_class_creation_9__metaclass);
            tmp_called_value_18 = tmp_class_creation_9__metaclass;
            tmp_tuple_element_36 = mod_consts[92];
            tmp_args_value_18 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_18, 0, tmp_tuple_element_36);
            CHECK_OBJECT(tmp_class_creation_9__bases);
            tmp_tuple_element_36 = tmp_class_creation_9__bases;
            PyTuple_SET_ITEM0(tmp_args_value_18, 1, tmp_tuple_element_36);
            tmp_tuple_element_36 = locals_aiohttp$web_exceptions$$$class__9_HTTPNoContent_144;
            PyTuple_SET_ITEM0(tmp_args_value_18, 2, tmp_tuple_element_36);
            CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
            tmp_kwargs_value_18 = tmp_class_creation_9__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 144;
            tmp_assign_source_89 = CALL_FUNCTION(tmp_called_value_18, tmp_args_value_18, tmp_kwargs_value_18);
            Py_DECREF(tmp_args_value_18);
            if (tmp_assign_source_89 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 144;

                goto try_except_handler_29;
            }
            assert(outline_8_var___class__ == NULL);
            outline_8_var___class__ = tmp_assign_source_89;
        }
        CHECK_OBJECT(outline_8_var___class__);
        tmp_assign_source_88 = outline_8_var___class__;
        Py_INCREF(tmp_assign_source_88);
        goto try_return_handler_29;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_29:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__9_HTTPNoContent_144);
        locals_aiohttp$web_exceptions$$$class__9_HTTPNoContent_144 = NULL;
        goto try_return_handler_28;
        // Exception handler code:
        try_except_handler_29:;
        exception_keeper_type_27 = exception_type;
        exception_keeper_value_27 = exception_value;
        exception_keeper_tb_27 = exception_tb;
        exception_keeper_lineno_27 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__9_HTTPNoContent_144);
        locals_aiohttp$web_exceptions$$$class__9_HTTPNoContent_144 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_27;
        exception_value = exception_keeper_value_27;
        exception_tb = exception_keeper_tb_27;
        exception_lineno = exception_keeper_lineno_27;

        goto try_except_handler_28;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_28:;
        CHECK_OBJECT(outline_8_var___class__);
        Py_DECREF(outline_8_var___class__);
        outline_8_var___class__ = NULL;
        goto outline_result_9;
        // Exception handler code:
        try_except_handler_28:;
        exception_keeper_type_28 = exception_type;
        exception_keeper_value_28 = exception_value;
        exception_keeper_tb_28 = exception_tb;
        exception_keeper_lineno_28 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_28;
        exception_value = exception_keeper_value_28;
        exception_tb = exception_keeper_tb_28;
        exception_lineno = exception_keeper_lineno_28;

        goto outline_exception_9;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_9:;
        exception_lineno = 144;
        goto try_except_handler_27;
        outline_result_9:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[92], tmp_assign_source_88);
    }
    goto try_end_11;
    // Exception handler code:
    try_except_handler_27:;
    exception_keeper_type_29 = exception_type;
    exception_keeper_value_29 = exception_value;
    exception_keeper_tb_29 = exception_tb;
    exception_keeper_lineno_29 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_9__bases_orig);
    tmp_class_creation_9__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_9__bases);
    tmp_class_creation_9__bases = NULL;
    Py_XDECREF(tmp_class_creation_9__class_decl_dict);
    tmp_class_creation_9__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_9__metaclass);
    tmp_class_creation_9__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_9__prepared);
    tmp_class_creation_9__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_29;
    exception_value = exception_keeper_value_29;
    exception_tb = exception_keeper_tb_29;
    exception_lineno = exception_keeper_lineno_29;

    goto frame_exception_exit_1;
    // End of try:
    try_end_11:;
    CHECK_OBJECT(tmp_class_creation_9__bases_orig);
    Py_DECREF(tmp_class_creation_9__bases_orig);
    tmp_class_creation_9__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_9__bases);
    Py_DECREF(tmp_class_creation_9__bases);
    tmp_class_creation_9__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
    Py_DECREF(tmp_class_creation_9__class_decl_dict);
    tmp_class_creation_9__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_9__metaclass);
    Py_DECREF(tmp_class_creation_9__metaclass);
    tmp_class_creation_9__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_9__prepared);
    Py_DECREF(tmp_class_creation_9__prepared);
    tmp_class_creation_9__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_90;
        PyObject *tmp_tuple_element_37;
        tmp_tuple_element_37 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[82]);

        if (unlikely(tmp_tuple_element_37 == NULL)) {
            tmp_tuple_element_37 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[82]);
        }

        if (tmp_tuple_element_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 149;

            goto try_except_handler_30;
        }
        tmp_assign_source_90 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_90, 0, tmp_tuple_element_37);
        assert(tmp_class_creation_10__bases_orig == NULL);
        tmp_class_creation_10__bases_orig = tmp_assign_source_90;
    }
    {
        PyObject *tmp_assign_source_91;
        PyObject *tmp_dircall_arg1_10;
        CHECK_OBJECT(tmp_class_creation_10__bases_orig);
        tmp_dircall_arg1_10 = tmp_class_creation_10__bases_orig;
        Py_INCREF(tmp_dircall_arg1_10);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_10};
            tmp_assign_source_91 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_91 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 149;

            goto try_except_handler_30;
        }
        assert(tmp_class_creation_10__bases == NULL);
        tmp_class_creation_10__bases = tmp_assign_source_91;
    }
    {
        PyObject *tmp_assign_source_92;
        tmp_assign_source_92 = PyDict_New();
        assert(tmp_class_creation_10__class_decl_dict == NULL);
        tmp_class_creation_10__class_decl_dict = tmp_assign_source_92;
    }
    {
        PyObject *tmp_assign_source_93;
        PyObject *tmp_metaclass_value_10;
        bool tmp_condition_result_55;
        PyObject *tmp_key_value_28;
        PyObject *tmp_dict_arg_value_28;
        PyObject *tmp_dict_arg_value_29;
        PyObject *tmp_key_value_29;
        nuitka_bool tmp_condition_result_56;
        int tmp_truth_name_10;
        PyObject *tmp_type_arg_19;
        PyObject *tmp_expression_value_50;
        PyObject *tmp_subscript_value_14;
        PyObject *tmp_bases_value_10;
        tmp_key_value_28 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
        tmp_dict_arg_value_28 = tmp_class_creation_10__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_28, tmp_key_value_28);
        assert(!(tmp_res == -1));
        tmp_condition_result_55 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_55 != false) {
            goto condexpr_true_19;
        } else {
            goto condexpr_false_19;
        }
        condexpr_true_19:;
        CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
        tmp_dict_arg_value_29 = tmp_class_creation_10__class_decl_dict;
        tmp_key_value_29 = mod_consts[57];
        tmp_metaclass_value_10 = DICT_GET_ITEM0(tmp_dict_arg_value_29, tmp_key_value_29);
        if (tmp_metaclass_value_10 == NULL) {
            tmp_metaclass_value_10 = Py_None;
        }
        assert(!(tmp_metaclass_value_10 == NULL));
        Py_INCREF(tmp_metaclass_value_10);
        goto condexpr_end_19;
        condexpr_false_19:;
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_truth_name_10 = CHECK_IF_TRUE(tmp_class_creation_10__bases);
        if (tmp_truth_name_10 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 149;

            goto try_except_handler_30;
        }
        tmp_condition_result_56 = tmp_truth_name_10 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_56 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_20;
        } else {
            goto condexpr_false_20;
        }
        condexpr_true_20:;
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_expression_value_50 = tmp_class_creation_10__bases;
        tmp_subscript_value_14 = mod_consts[39];
        tmp_type_arg_19 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_50, tmp_subscript_value_14, 0);
        if (tmp_type_arg_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 149;

            goto try_except_handler_30;
        }
        tmp_metaclass_value_10 = BUILTIN_TYPE1(tmp_type_arg_19);
        Py_DECREF(tmp_type_arg_19);
        if (tmp_metaclass_value_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 149;

            goto try_except_handler_30;
        }
        goto condexpr_end_20;
        condexpr_false_20:;
        tmp_metaclass_value_10 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_10);
        condexpr_end_20:;
        condexpr_end_19:;
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_bases_value_10 = tmp_class_creation_10__bases;
        tmp_assign_source_93 = SELECT_METACLASS(tmp_metaclass_value_10, tmp_bases_value_10);
        Py_DECREF(tmp_metaclass_value_10);
        if (tmp_assign_source_93 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 149;

            goto try_except_handler_30;
        }
        assert(tmp_class_creation_10__metaclass == NULL);
        tmp_class_creation_10__metaclass = tmp_assign_source_93;
    }
    {
        bool tmp_condition_result_57;
        PyObject *tmp_key_value_30;
        PyObject *tmp_dict_arg_value_30;
        tmp_key_value_30 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
        tmp_dict_arg_value_30 = tmp_class_creation_10__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_30, tmp_key_value_30);
        assert(!(tmp_res == -1));
        tmp_condition_result_57 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_57 != false) {
            goto branch_yes_37;
        } else {
            goto branch_no_37;
        }
    }
    branch_yes_37:;
    CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_10__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 149;

        goto try_except_handler_30;
    }
    branch_no_37:;
    {
        nuitka_bool tmp_condition_result_58;
        PyObject *tmp_expression_value_51;
        CHECK_OBJECT(tmp_class_creation_10__metaclass);
        tmp_expression_value_51 = tmp_class_creation_10__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_51, mod_consts[58]);
        tmp_condition_result_58 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_58 == NUITKA_BOOL_TRUE) {
            goto branch_yes_38;
        } else {
            goto branch_no_38;
        }
    }
    branch_yes_38:;
    {
        PyObject *tmp_assign_source_94;
        PyObject *tmp_called_value_19;
        PyObject *tmp_expression_value_52;
        PyObject *tmp_args_value_19;
        PyObject *tmp_tuple_element_38;
        PyObject *tmp_kwargs_value_19;
        CHECK_OBJECT(tmp_class_creation_10__metaclass);
        tmp_expression_value_52 = tmp_class_creation_10__metaclass;
        tmp_called_value_19 = LOOKUP_ATTRIBUTE(tmp_expression_value_52, mod_consts[58]);
        if (tmp_called_value_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 149;

            goto try_except_handler_30;
        }
        tmp_tuple_element_38 = mod_consts[94];
        tmp_args_value_19 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_19, 0, tmp_tuple_element_38);
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_tuple_element_38 = tmp_class_creation_10__bases;
        PyTuple_SET_ITEM0(tmp_args_value_19, 1, tmp_tuple_element_38);
        CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
        tmp_kwargs_value_19 = tmp_class_creation_10__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 149;
        tmp_assign_source_94 = CALL_FUNCTION(tmp_called_value_19, tmp_args_value_19, tmp_kwargs_value_19);
        Py_DECREF(tmp_called_value_19);
        Py_DECREF(tmp_args_value_19);
        if (tmp_assign_source_94 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 149;

            goto try_except_handler_30;
        }
        assert(tmp_class_creation_10__prepared == NULL);
        tmp_class_creation_10__prepared = tmp_assign_source_94;
    }
    {
        bool tmp_condition_result_59;
        PyObject *tmp_operand_value_10;
        PyObject *tmp_expression_value_53;
        CHECK_OBJECT(tmp_class_creation_10__prepared);
        tmp_expression_value_53 = tmp_class_creation_10__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_53, mod_consts[60]);
        tmp_operand_value_10 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_10);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 149;

            goto try_except_handler_30;
        }
        tmp_condition_result_59 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_59 != false) {
            goto branch_yes_39;
        } else {
            goto branch_no_39;
        }
    }
    branch_yes_39:;
    {
        PyObject *tmp_raise_type_10;
        PyObject *tmp_raise_value_10;
        PyObject *tmp_left_value_10;
        PyObject *tmp_right_value_10;
        PyObject *tmp_tuple_element_39;
        PyObject *tmp_getattr_target_10;
        PyObject *tmp_getattr_attr_10;
        PyObject *tmp_getattr_default_10;
        tmp_raise_type_10 = PyExc_TypeError;
        tmp_left_value_10 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_10__metaclass);
        tmp_getattr_target_10 = tmp_class_creation_10__metaclass;
        tmp_getattr_attr_10 = mod_consts[62];
        tmp_getattr_default_10 = mod_consts[63];
        tmp_tuple_element_39 = BUILTIN_GETATTR(tmp_getattr_target_10, tmp_getattr_attr_10, tmp_getattr_default_10);
        if (tmp_tuple_element_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 149;

            goto try_except_handler_30;
        }
        tmp_right_value_10 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_54;
            PyObject *tmp_type_arg_20;
            PyTuple_SET_ITEM(tmp_right_value_10, 0, tmp_tuple_element_39);
            CHECK_OBJECT(tmp_class_creation_10__prepared);
            tmp_type_arg_20 = tmp_class_creation_10__prepared;
            tmp_expression_value_54 = BUILTIN_TYPE1(tmp_type_arg_20);
            assert(!(tmp_expression_value_54 == NULL));
            tmp_tuple_element_39 = LOOKUP_ATTRIBUTE(tmp_expression_value_54, mod_consts[62]);
            Py_DECREF(tmp_expression_value_54);
            if (tmp_tuple_element_39 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 149;

                goto tuple_build_exception_10;
            }
            PyTuple_SET_ITEM(tmp_right_value_10, 1, tmp_tuple_element_39);
        }
        goto tuple_build_noexception_10;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_10:;
        Py_DECREF(tmp_right_value_10);
        goto try_except_handler_30;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_10:;
        tmp_raise_value_10 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_10, tmp_right_value_10);
        Py_DECREF(tmp_right_value_10);
        if (tmp_raise_value_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 149;

            goto try_except_handler_30;
        }
        exception_type = tmp_raise_type_10;
        Py_INCREF(tmp_raise_type_10);
        exception_value = tmp_raise_value_10;
        exception_lineno = 149;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_30;
    }
    branch_no_39:;
    goto branch_end_38;
    branch_no_38:;
    {
        PyObject *tmp_assign_source_95;
        tmp_assign_source_95 = PyDict_New();
        assert(tmp_class_creation_10__prepared == NULL);
        tmp_class_creation_10__prepared = tmp_assign_source_95;
    }
    branch_end_38:;
    {
        PyObject *tmp_assign_source_96;
        {
            PyObject *tmp_set_locals_10;
            CHECK_OBJECT(tmp_class_creation_10__prepared);
            tmp_set_locals_10 = tmp_class_creation_10__prepared;
            locals_aiohttp$web_exceptions$$$class__10_HTTPResetContent_149 = tmp_set_locals_10;
            Py_INCREF(tmp_set_locals_10);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__10_HTTPResetContent_149, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 149;

            goto try_except_handler_32;
        }
        tmp_dictset_value = mod_consts[94];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__10_HTTPResetContent_149, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 149;

            goto try_except_handler_32;
        }
        if (isFrameUnusable(cache_frame_75d3281b65ea0c378ef76e6ee9f1344e_8)) {
            Py_XDECREF(cache_frame_75d3281b65ea0c378ef76e6ee9f1344e_8);

#if _DEBUG_REFCOUNTS
            if (cache_frame_75d3281b65ea0c378ef76e6ee9f1344e_8 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_75d3281b65ea0c378ef76e6ee9f1344e_8 = MAKE_FUNCTION_FRAME(codeobj_75d3281b65ea0c378ef76e6ee9f1344e, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_75d3281b65ea0c378ef76e6ee9f1344e_8->m_type_description == NULL);
        frame_75d3281b65ea0c378ef76e6ee9f1344e_8 = cache_frame_75d3281b65ea0c378ef76e6ee9f1344e_8;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_75d3281b65ea0c378ef76e6ee9f1344e_8);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_75d3281b65ea0c378ef76e6ee9f1344e_8) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[95];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__10_HTTPResetContent_149, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 150;
            type_description_2 = "o";
            goto frame_exception_exit_8;
        }
        tmp_dictset_value = Py_True;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__10_HTTPResetContent_149, mod_consts[10], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 151;
            type_description_2 = "o";
            goto frame_exception_exit_8;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_75d3281b65ea0c378ef76e6ee9f1344e_8);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_7;

        frame_exception_exit_8:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_75d3281b65ea0c378ef76e6ee9f1344e_8);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_75d3281b65ea0c378ef76e6ee9f1344e_8, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_75d3281b65ea0c378ef76e6ee9f1344e_8->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_75d3281b65ea0c378ef76e6ee9f1344e_8, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_75d3281b65ea0c378ef76e6ee9f1344e_8,
            type_description_2,
            outline_9_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_75d3281b65ea0c378ef76e6ee9f1344e_8 == cache_frame_75d3281b65ea0c378ef76e6ee9f1344e_8) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_75d3281b65ea0c378ef76e6ee9f1344e_8);
            cache_frame_75d3281b65ea0c378ef76e6ee9f1344e_8 = NULL;
        }

        assertFrameObject(frame_75d3281b65ea0c378ef76e6ee9f1344e_8);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_7;

        frame_no_exception_7:;
        goto skip_nested_handling_7;
        nested_frame_exit_7:;

        goto try_except_handler_32;
        skip_nested_handling_7:;
        {
            nuitka_bool tmp_condition_result_60;
            PyObject *tmp_cmp_expr_left_10;
            PyObject *tmp_cmp_expr_right_10;
            CHECK_OBJECT(tmp_class_creation_10__bases);
            tmp_cmp_expr_left_10 = tmp_class_creation_10__bases;
            CHECK_OBJECT(tmp_class_creation_10__bases_orig);
            tmp_cmp_expr_right_10 = tmp_class_creation_10__bases_orig;
            tmp_condition_result_60 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_10, tmp_cmp_expr_right_10);
            if (tmp_condition_result_60 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 149;

                goto try_except_handler_32;
            }
            if (tmp_condition_result_60 == NUITKA_BOOL_TRUE) {
                goto branch_yes_40;
            } else {
                goto branch_no_40;
            }
            assert(tmp_condition_result_60 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_40:;
        CHECK_OBJECT(tmp_class_creation_10__bases_orig);
        tmp_dictset_value = tmp_class_creation_10__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__10_HTTPResetContent_149, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 149;

            goto try_except_handler_32;
        }
        branch_no_40:;
        {
            PyObject *tmp_assign_source_97;
            PyObject *tmp_called_value_20;
            PyObject *tmp_args_value_20;
            PyObject *tmp_tuple_element_40;
            PyObject *tmp_kwargs_value_20;
            CHECK_OBJECT(tmp_class_creation_10__metaclass);
            tmp_called_value_20 = tmp_class_creation_10__metaclass;
            tmp_tuple_element_40 = mod_consts[94];
            tmp_args_value_20 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_20, 0, tmp_tuple_element_40);
            CHECK_OBJECT(tmp_class_creation_10__bases);
            tmp_tuple_element_40 = tmp_class_creation_10__bases;
            PyTuple_SET_ITEM0(tmp_args_value_20, 1, tmp_tuple_element_40);
            tmp_tuple_element_40 = locals_aiohttp$web_exceptions$$$class__10_HTTPResetContent_149;
            PyTuple_SET_ITEM0(tmp_args_value_20, 2, tmp_tuple_element_40);
            CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
            tmp_kwargs_value_20 = tmp_class_creation_10__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 149;
            tmp_assign_source_97 = CALL_FUNCTION(tmp_called_value_20, tmp_args_value_20, tmp_kwargs_value_20);
            Py_DECREF(tmp_args_value_20);
            if (tmp_assign_source_97 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 149;

                goto try_except_handler_32;
            }
            assert(outline_9_var___class__ == NULL);
            outline_9_var___class__ = tmp_assign_source_97;
        }
        CHECK_OBJECT(outline_9_var___class__);
        tmp_assign_source_96 = outline_9_var___class__;
        Py_INCREF(tmp_assign_source_96);
        goto try_return_handler_32;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_32:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__10_HTTPResetContent_149);
        locals_aiohttp$web_exceptions$$$class__10_HTTPResetContent_149 = NULL;
        goto try_return_handler_31;
        // Exception handler code:
        try_except_handler_32:;
        exception_keeper_type_30 = exception_type;
        exception_keeper_value_30 = exception_value;
        exception_keeper_tb_30 = exception_tb;
        exception_keeper_lineno_30 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__10_HTTPResetContent_149);
        locals_aiohttp$web_exceptions$$$class__10_HTTPResetContent_149 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_30;
        exception_value = exception_keeper_value_30;
        exception_tb = exception_keeper_tb_30;
        exception_lineno = exception_keeper_lineno_30;

        goto try_except_handler_31;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_31:;
        CHECK_OBJECT(outline_9_var___class__);
        Py_DECREF(outline_9_var___class__);
        outline_9_var___class__ = NULL;
        goto outline_result_10;
        // Exception handler code:
        try_except_handler_31:;
        exception_keeper_type_31 = exception_type;
        exception_keeper_value_31 = exception_value;
        exception_keeper_tb_31 = exception_tb;
        exception_keeper_lineno_31 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_31;
        exception_value = exception_keeper_value_31;
        exception_tb = exception_keeper_tb_31;
        exception_lineno = exception_keeper_lineno_31;

        goto outline_exception_10;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_10:;
        exception_lineno = 149;
        goto try_except_handler_30;
        outline_result_10:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[94], tmp_assign_source_96);
    }
    goto try_end_12;
    // Exception handler code:
    try_except_handler_30:;
    exception_keeper_type_32 = exception_type;
    exception_keeper_value_32 = exception_value;
    exception_keeper_tb_32 = exception_tb;
    exception_keeper_lineno_32 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_10__bases_orig);
    tmp_class_creation_10__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_10__bases);
    tmp_class_creation_10__bases = NULL;
    Py_XDECREF(tmp_class_creation_10__class_decl_dict);
    tmp_class_creation_10__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_10__metaclass);
    tmp_class_creation_10__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_10__prepared);
    tmp_class_creation_10__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_32;
    exception_value = exception_keeper_value_32;
    exception_tb = exception_keeper_tb_32;
    exception_lineno = exception_keeper_lineno_32;

    goto frame_exception_exit_1;
    // End of try:
    try_end_12:;
    CHECK_OBJECT(tmp_class_creation_10__bases_orig);
    Py_DECREF(tmp_class_creation_10__bases_orig);
    tmp_class_creation_10__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_10__bases);
    Py_DECREF(tmp_class_creation_10__bases);
    tmp_class_creation_10__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
    Py_DECREF(tmp_class_creation_10__class_decl_dict);
    tmp_class_creation_10__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_10__metaclass);
    Py_DECREF(tmp_class_creation_10__metaclass);
    tmp_class_creation_10__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_10__prepared);
    Py_DECREF(tmp_class_creation_10__prepared);
    tmp_class_creation_10__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_98;
        PyObject *tmp_tuple_element_41;
        tmp_tuple_element_41 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[82]);

        if (unlikely(tmp_tuple_element_41 == NULL)) {
            tmp_tuple_element_41 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[82]);
        }

        if (tmp_tuple_element_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 154;

            goto try_except_handler_33;
        }
        tmp_assign_source_98 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_98, 0, tmp_tuple_element_41);
        assert(tmp_class_creation_11__bases_orig == NULL);
        tmp_class_creation_11__bases_orig = tmp_assign_source_98;
    }
    {
        PyObject *tmp_assign_source_99;
        PyObject *tmp_dircall_arg1_11;
        CHECK_OBJECT(tmp_class_creation_11__bases_orig);
        tmp_dircall_arg1_11 = tmp_class_creation_11__bases_orig;
        Py_INCREF(tmp_dircall_arg1_11);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_11};
            tmp_assign_source_99 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_99 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 154;

            goto try_except_handler_33;
        }
        assert(tmp_class_creation_11__bases == NULL);
        tmp_class_creation_11__bases = tmp_assign_source_99;
    }
    {
        PyObject *tmp_assign_source_100;
        tmp_assign_source_100 = PyDict_New();
        assert(tmp_class_creation_11__class_decl_dict == NULL);
        tmp_class_creation_11__class_decl_dict = tmp_assign_source_100;
    }
    {
        PyObject *tmp_assign_source_101;
        PyObject *tmp_metaclass_value_11;
        bool tmp_condition_result_61;
        PyObject *tmp_key_value_31;
        PyObject *tmp_dict_arg_value_31;
        PyObject *tmp_dict_arg_value_32;
        PyObject *tmp_key_value_32;
        nuitka_bool tmp_condition_result_62;
        int tmp_truth_name_11;
        PyObject *tmp_type_arg_21;
        PyObject *tmp_expression_value_55;
        PyObject *tmp_subscript_value_15;
        PyObject *tmp_bases_value_11;
        tmp_key_value_31 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
        tmp_dict_arg_value_31 = tmp_class_creation_11__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_31, tmp_key_value_31);
        assert(!(tmp_res == -1));
        tmp_condition_result_61 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_61 != false) {
            goto condexpr_true_21;
        } else {
            goto condexpr_false_21;
        }
        condexpr_true_21:;
        CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
        tmp_dict_arg_value_32 = tmp_class_creation_11__class_decl_dict;
        tmp_key_value_32 = mod_consts[57];
        tmp_metaclass_value_11 = DICT_GET_ITEM0(tmp_dict_arg_value_32, tmp_key_value_32);
        if (tmp_metaclass_value_11 == NULL) {
            tmp_metaclass_value_11 = Py_None;
        }
        assert(!(tmp_metaclass_value_11 == NULL));
        Py_INCREF(tmp_metaclass_value_11);
        goto condexpr_end_21;
        condexpr_false_21:;
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_truth_name_11 = CHECK_IF_TRUE(tmp_class_creation_11__bases);
        if (tmp_truth_name_11 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 154;

            goto try_except_handler_33;
        }
        tmp_condition_result_62 = tmp_truth_name_11 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_62 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_22;
        } else {
            goto condexpr_false_22;
        }
        condexpr_true_22:;
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_expression_value_55 = tmp_class_creation_11__bases;
        tmp_subscript_value_15 = mod_consts[39];
        tmp_type_arg_21 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_55, tmp_subscript_value_15, 0);
        if (tmp_type_arg_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 154;

            goto try_except_handler_33;
        }
        tmp_metaclass_value_11 = BUILTIN_TYPE1(tmp_type_arg_21);
        Py_DECREF(tmp_type_arg_21);
        if (tmp_metaclass_value_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 154;

            goto try_except_handler_33;
        }
        goto condexpr_end_22;
        condexpr_false_22:;
        tmp_metaclass_value_11 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_11);
        condexpr_end_22:;
        condexpr_end_21:;
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_bases_value_11 = tmp_class_creation_11__bases;
        tmp_assign_source_101 = SELECT_METACLASS(tmp_metaclass_value_11, tmp_bases_value_11);
        Py_DECREF(tmp_metaclass_value_11);
        if (tmp_assign_source_101 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 154;

            goto try_except_handler_33;
        }
        assert(tmp_class_creation_11__metaclass == NULL);
        tmp_class_creation_11__metaclass = tmp_assign_source_101;
    }
    {
        bool tmp_condition_result_63;
        PyObject *tmp_key_value_33;
        PyObject *tmp_dict_arg_value_33;
        tmp_key_value_33 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
        tmp_dict_arg_value_33 = tmp_class_creation_11__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_33, tmp_key_value_33);
        assert(!(tmp_res == -1));
        tmp_condition_result_63 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_63 != false) {
            goto branch_yes_41;
        } else {
            goto branch_no_41;
        }
    }
    branch_yes_41:;
    CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_11__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 154;

        goto try_except_handler_33;
    }
    branch_no_41:;
    {
        nuitka_bool tmp_condition_result_64;
        PyObject *tmp_expression_value_56;
        CHECK_OBJECT(tmp_class_creation_11__metaclass);
        tmp_expression_value_56 = tmp_class_creation_11__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_56, mod_consts[58]);
        tmp_condition_result_64 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_64 == NUITKA_BOOL_TRUE) {
            goto branch_yes_42;
        } else {
            goto branch_no_42;
        }
    }
    branch_yes_42:;
    {
        PyObject *tmp_assign_source_102;
        PyObject *tmp_called_value_21;
        PyObject *tmp_expression_value_57;
        PyObject *tmp_args_value_21;
        PyObject *tmp_tuple_element_42;
        PyObject *tmp_kwargs_value_21;
        CHECK_OBJECT(tmp_class_creation_11__metaclass);
        tmp_expression_value_57 = tmp_class_creation_11__metaclass;
        tmp_called_value_21 = LOOKUP_ATTRIBUTE(tmp_expression_value_57, mod_consts[58]);
        if (tmp_called_value_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 154;

            goto try_except_handler_33;
        }
        tmp_tuple_element_42 = mod_consts[96];
        tmp_args_value_21 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_21, 0, tmp_tuple_element_42);
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_tuple_element_42 = tmp_class_creation_11__bases;
        PyTuple_SET_ITEM0(tmp_args_value_21, 1, tmp_tuple_element_42);
        CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
        tmp_kwargs_value_21 = tmp_class_creation_11__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 154;
        tmp_assign_source_102 = CALL_FUNCTION(tmp_called_value_21, tmp_args_value_21, tmp_kwargs_value_21);
        Py_DECREF(tmp_called_value_21);
        Py_DECREF(tmp_args_value_21);
        if (tmp_assign_source_102 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 154;

            goto try_except_handler_33;
        }
        assert(tmp_class_creation_11__prepared == NULL);
        tmp_class_creation_11__prepared = tmp_assign_source_102;
    }
    {
        bool tmp_condition_result_65;
        PyObject *tmp_operand_value_11;
        PyObject *tmp_expression_value_58;
        CHECK_OBJECT(tmp_class_creation_11__prepared);
        tmp_expression_value_58 = tmp_class_creation_11__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_58, mod_consts[60]);
        tmp_operand_value_11 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_11);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 154;

            goto try_except_handler_33;
        }
        tmp_condition_result_65 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_65 != false) {
            goto branch_yes_43;
        } else {
            goto branch_no_43;
        }
    }
    branch_yes_43:;
    {
        PyObject *tmp_raise_type_11;
        PyObject *tmp_raise_value_11;
        PyObject *tmp_left_value_11;
        PyObject *tmp_right_value_11;
        PyObject *tmp_tuple_element_43;
        PyObject *tmp_getattr_target_11;
        PyObject *tmp_getattr_attr_11;
        PyObject *tmp_getattr_default_11;
        tmp_raise_type_11 = PyExc_TypeError;
        tmp_left_value_11 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_11__metaclass);
        tmp_getattr_target_11 = tmp_class_creation_11__metaclass;
        tmp_getattr_attr_11 = mod_consts[62];
        tmp_getattr_default_11 = mod_consts[63];
        tmp_tuple_element_43 = BUILTIN_GETATTR(tmp_getattr_target_11, tmp_getattr_attr_11, tmp_getattr_default_11);
        if (tmp_tuple_element_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 154;

            goto try_except_handler_33;
        }
        tmp_right_value_11 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_59;
            PyObject *tmp_type_arg_22;
            PyTuple_SET_ITEM(tmp_right_value_11, 0, tmp_tuple_element_43);
            CHECK_OBJECT(tmp_class_creation_11__prepared);
            tmp_type_arg_22 = tmp_class_creation_11__prepared;
            tmp_expression_value_59 = BUILTIN_TYPE1(tmp_type_arg_22);
            assert(!(tmp_expression_value_59 == NULL));
            tmp_tuple_element_43 = LOOKUP_ATTRIBUTE(tmp_expression_value_59, mod_consts[62]);
            Py_DECREF(tmp_expression_value_59);
            if (tmp_tuple_element_43 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 154;

                goto tuple_build_exception_11;
            }
            PyTuple_SET_ITEM(tmp_right_value_11, 1, tmp_tuple_element_43);
        }
        goto tuple_build_noexception_11;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_11:;
        Py_DECREF(tmp_right_value_11);
        goto try_except_handler_33;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_11:;
        tmp_raise_value_11 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_11, tmp_right_value_11);
        Py_DECREF(tmp_right_value_11);
        if (tmp_raise_value_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 154;

            goto try_except_handler_33;
        }
        exception_type = tmp_raise_type_11;
        Py_INCREF(tmp_raise_type_11);
        exception_value = tmp_raise_value_11;
        exception_lineno = 154;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_33;
    }
    branch_no_43:;
    goto branch_end_42;
    branch_no_42:;
    {
        PyObject *tmp_assign_source_103;
        tmp_assign_source_103 = PyDict_New();
        assert(tmp_class_creation_11__prepared == NULL);
        tmp_class_creation_11__prepared = tmp_assign_source_103;
    }
    branch_end_42:;
    {
        PyObject *tmp_assign_source_104;
        {
            PyObject *tmp_set_locals_11;
            CHECK_OBJECT(tmp_class_creation_11__prepared);
            tmp_set_locals_11 = tmp_class_creation_11__prepared;
            locals_aiohttp$web_exceptions$$$class__11_HTTPPartialContent_154 = tmp_set_locals_11;
            Py_INCREF(tmp_set_locals_11);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__11_HTTPPartialContent_154, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 154;

            goto try_except_handler_35;
        }
        tmp_dictset_value = mod_consts[96];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__11_HTTPPartialContent_154, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 154;

            goto try_except_handler_35;
        }
        if (isFrameUnusable(cache_frame_ffb3a9d961fd2f41fbb1a5f6b70ad010_9)) {
            Py_XDECREF(cache_frame_ffb3a9d961fd2f41fbb1a5f6b70ad010_9);

#if _DEBUG_REFCOUNTS
            if (cache_frame_ffb3a9d961fd2f41fbb1a5f6b70ad010_9 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_ffb3a9d961fd2f41fbb1a5f6b70ad010_9 = MAKE_FUNCTION_FRAME(codeobj_ffb3a9d961fd2f41fbb1a5f6b70ad010, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_ffb3a9d961fd2f41fbb1a5f6b70ad010_9->m_type_description == NULL);
        frame_ffb3a9d961fd2f41fbb1a5f6b70ad010_9 = cache_frame_ffb3a9d961fd2f41fbb1a5f6b70ad010_9;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_ffb3a9d961fd2f41fbb1a5f6b70ad010_9);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_ffb3a9d961fd2f41fbb1a5f6b70ad010_9) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[97];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__11_HTTPPartialContent_154, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;
            type_description_2 = "o";
            goto frame_exception_exit_9;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_ffb3a9d961fd2f41fbb1a5f6b70ad010_9);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_8;

        frame_exception_exit_9:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_ffb3a9d961fd2f41fbb1a5f6b70ad010_9);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_ffb3a9d961fd2f41fbb1a5f6b70ad010_9, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_ffb3a9d961fd2f41fbb1a5f6b70ad010_9->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_ffb3a9d961fd2f41fbb1a5f6b70ad010_9, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_ffb3a9d961fd2f41fbb1a5f6b70ad010_9,
            type_description_2,
            outline_10_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_ffb3a9d961fd2f41fbb1a5f6b70ad010_9 == cache_frame_ffb3a9d961fd2f41fbb1a5f6b70ad010_9) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_ffb3a9d961fd2f41fbb1a5f6b70ad010_9);
            cache_frame_ffb3a9d961fd2f41fbb1a5f6b70ad010_9 = NULL;
        }

        assertFrameObject(frame_ffb3a9d961fd2f41fbb1a5f6b70ad010_9);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_8;

        frame_no_exception_8:;
        goto skip_nested_handling_8;
        nested_frame_exit_8:;

        goto try_except_handler_35;
        skip_nested_handling_8:;
        {
            nuitka_bool tmp_condition_result_66;
            PyObject *tmp_cmp_expr_left_11;
            PyObject *tmp_cmp_expr_right_11;
            CHECK_OBJECT(tmp_class_creation_11__bases);
            tmp_cmp_expr_left_11 = tmp_class_creation_11__bases;
            CHECK_OBJECT(tmp_class_creation_11__bases_orig);
            tmp_cmp_expr_right_11 = tmp_class_creation_11__bases_orig;
            tmp_condition_result_66 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_11, tmp_cmp_expr_right_11);
            if (tmp_condition_result_66 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 154;

                goto try_except_handler_35;
            }
            if (tmp_condition_result_66 == NUITKA_BOOL_TRUE) {
                goto branch_yes_44;
            } else {
                goto branch_no_44;
            }
            assert(tmp_condition_result_66 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_44:;
        CHECK_OBJECT(tmp_class_creation_11__bases_orig);
        tmp_dictset_value = tmp_class_creation_11__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__11_HTTPPartialContent_154, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 154;

            goto try_except_handler_35;
        }
        branch_no_44:;
        {
            PyObject *tmp_assign_source_105;
            PyObject *tmp_called_value_22;
            PyObject *tmp_args_value_22;
            PyObject *tmp_tuple_element_44;
            PyObject *tmp_kwargs_value_22;
            CHECK_OBJECT(tmp_class_creation_11__metaclass);
            tmp_called_value_22 = tmp_class_creation_11__metaclass;
            tmp_tuple_element_44 = mod_consts[96];
            tmp_args_value_22 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_22, 0, tmp_tuple_element_44);
            CHECK_OBJECT(tmp_class_creation_11__bases);
            tmp_tuple_element_44 = tmp_class_creation_11__bases;
            PyTuple_SET_ITEM0(tmp_args_value_22, 1, tmp_tuple_element_44);
            tmp_tuple_element_44 = locals_aiohttp$web_exceptions$$$class__11_HTTPPartialContent_154;
            PyTuple_SET_ITEM0(tmp_args_value_22, 2, tmp_tuple_element_44);
            CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
            tmp_kwargs_value_22 = tmp_class_creation_11__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 154;
            tmp_assign_source_105 = CALL_FUNCTION(tmp_called_value_22, tmp_args_value_22, tmp_kwargs_value_22);
            Py_DECREF(tmp_args_value_22);
            if (tmp_assign_source_105 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 154;

                goto try_except_handler_35;
            }
            assert(outline_10_var___class__ == NULL);
            outline_10_var___class__ = tmp_assign_source_105;
        }
        CHECK_OBJECT(outline_10_var___class__);
        tmp_assign_source_104 = outline_10_var___class__;
        Py_INCREF(tmp_assign_source_104);
        goto try_return_handler_35;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_35:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__11_HTTPPartialContent_154);
        locals_aiohttp$web_exceptions$$$class__11_HTTPPartialContent_154 = NULL;
        goto try_return_handler_34;
        // Exception handler code:
        try_except_handler_35:;
        exception_keeper_type_33 = exception_type;
        exception_keeper_value_33 = exception_value;
        exception_keeper_tb_33 = exception_tb;
        exception_keeper_lineno_33 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__11_HTTPPartialContent_154);
        locals_aiohttp$web_exceptions$$$class__11_HTTPPartialContent_154 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_33;
        exception_value = exception_keeper_value_33;
        exception_tb = exception_keeper_tb_33;
        exception_lineno = exception_keeper_lineno_33;

        goto try_except_handler_34;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_34:;
        CHECK_OBJECT(outline_10_var___class__);
        Py_DECREF(outline_10_var___class__);
        outline_10_var___class__ = NULL;
        goto outline_result_11;
        // Exception handler code:
        try_except_handler_34:;
        exception_keeper_type_34 = exception_type;
        exception_keeper_value_34 = exception_value;
        exception_keeper_tb_34 = exception_tb;
        exception_keeper_lineno_34 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_34;
        exception_value = exception_keeper_value_34;
        exception_tb = exception_keeper_tb_34;
        exception_lineno = exception_keeper_lineno_34;

        goto outline_exception_11;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_11:;
        exception_lineno = 154;
        goto try_except_handler_33;
        outline_result_11:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[96], tmp_assign_source_104);
    }
    goto try_end_13;
    // Exception handler code:
    try_except_handler_33:;
    exception_keeper_type_35 = exception_type;
    exception_keeper_value_35 = exception_value;
    exception_keeper_tb_35 = exception_tb;
    exception_keeper_lineno_35 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_11__bases_orig);
    tmp_class_creation_11__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_11__bases);
    tmp_class_creation_11__bases = NULL;
    Py_XDECREF(tmp_class_creation_11__class_decl_dict);
    tmp_class_creation_11__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_11__metaclass);
    tmp_class_creation_11__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_11__prepared);
    tmp_class_creation_11__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_35;
    exception_value = exception_keeper_value_35;
    exception_tb = exception_keeper_tb_35;
    exception_lineno = exception_keeper_lineno_35;

    goto frame_exception_exit_1;
    // End of try:
    try_end_13:;
    CHECK_OBJECT(tmp_class_creation_11__bases_orig);
    Py_DECREF(tmp_class_creation_11__bases_orig);
    tmp_class_creation_11__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_11__bases);
    Py_DECREF(tmp_class_creation_11__bases);
    tmp_class_creation_11__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
    Py_DECREF(tmp_class_creation_11__class_decl_dict);
    tmp_class_creation_11__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_11__metaclass);
    Py_DECREF(tmp_class_creation_11__metaclass);
    tmp_class_creation_11__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_11__prepared);
    Py_DECREF(tmp_class_creation_11__prepared);
    tmp_class_creation_11__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_106;
        PyObject *tmp_tuple_element_45;
        tmp_tuple_element_45 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_tuple_element_45 == NULL)) {
            tmp_tuple_element_45 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_tuple_element_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 163;

            goto try_except_handler_36;
        }
        tmp_assign_source_106 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_106, 0, tmp_tuple_element_45);
        assert(tmp_class_creation_12__bases_orig == NULL);
        tmp_class_creation_12__bases_orig = tmp_assign_source_106;
    }
    {
        PyObject *tmp_assign_source_107;
        PyObject *tmp_dircall_arg1_12;
        CHECK_OBJECT(tmp_class_creation_12__bases_orig);
        tmp_dircall_arg1_12 = tmp_class_creation_12__bases_orig;
        Py_INCREF(tmp_dircall_arg1_12);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_12};
            tmp_assign_source_107 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_107 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 163;

            goto try_except_handler_36;
        }
        assert(tmp_class_creation_12__bases == NULL);
        tmp_class_creation_12__bases = tmp_assign_source_107;
    }
    {
        PyObject *tmp_assign_source_108;
        tmp_assign_source_108 = PyDict_New();
        assert(tmp_class_creation_12__class_decl_dict == NULL);
        tmp_class_creation_12__class_decl_dict = tmp_assign_source_108;
    }
    {
        PyObject *tmp_assign_source_109;
        PyObject *tmp_metaclass_value_12;
        bool tmp_condition_result_67;
        PyObject *tmp_key_value_34;
        PyObject *tmp_dict_arg_value_34;
        PyObject *tmp_dict_arg_value_35;
        PyObject *tmp_key_value_35;
        nuitka_bool tmp_condition_result_68;
        int tmp_truth_name_12;
        PyObject *tmp_type_arg_23;
        PyObject *tmp_expression_value_60;
        PyObject *tmp_subscript_value_16;
        PyObject *tmp_bases_value_12;
        tmp_key_value_34 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
        tmp_dict_arg_value_34 = tmp_class_creation_12__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_34, tmp_key_value_34);
        assert(!(tmp_res == -1));
        tmp_condition_result_67 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_67 != false) {
            goto condexpr_true_23;
        } else {
            goto condexpr_false_23;
        }
        condexpr_true_23:;
        CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
        tmp_dict_arg_value_35 = tmp_class_creation_12__class_decl_dict;
        tmp_key_value_35 = mod_consts[57];
        tmp_metaclass_value_12 = DICT_GET_ITEM0(tmp_dict_arg_value_35, tmp_key_value_35);
        if (tmp_metaclass_value_12 == NULL) {
            tmp_metaclass_value_12 = Py_None;
        }
        assert(!(tmp_metaclass_value_12 == NULL));
        Py_INCREF(tmp_metaclass_value_12);
        goto condexpr_end_23;
        condexpr_false_23:;
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_truth_name_12 = CHECK_IF_TRUE(tmp_class_creation_12__bases);
        if (tmp_truth_name_12 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 163;

            goto try_except_handler_36;
        }
        tmp_condition_result_68 = tmp_truth_name_12 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_68 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_24;
        } else {
            goto condexpr_false_24;
        }
        condexpr_true_24:;
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_expression_value_60 = tmp_class_creation_12__bases;
        tmp_subscript_value_16 = mod_consts[39];
        tmp_type_arg_23 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_60, tmp_subscript_value_16, 0);
        if (tmp_type_arg_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 163;

            goto try_except_handler_36;
        }
        tmp_metaclass_value_12 = BUILTIN_TYPE1(tmp_type_arg_23);
        Py_DECREF(tmp_type_arg_23);
        if (tmp_metaclass_value_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 163;

            goto try_except_handler_36;
        }
        goto condexpr_end_24;
        condexpr_false_24:;
        tmp_metaclass_value_12 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_12);
        condexpr_end_24:;
        condexpr_end_23:;
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_bases_value_12 = tmp_class_creation_12__bases;
        tmp_assign_source_109 = SELECT_METACLASS(tmp_metaclass_value_12, tmp_bases_value_12);
        Py_DECREF(tmp_metaclass_value_12);
        if (tmp_assign_source_109 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 163;

            goto try_except_handler_36;
        }
        assert(tmp_class_creation_12__metaclass == NULL);
        tmp_class_creation_12__metaclass = tmp_assign_source_109;
    }
    {
        bool tmp_condition_result_69;
        PyObject *tmp_key_value_36;
        PyObject *tmp_dict_arg_value_36;
        tmp_key_value_36 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
        tmp_dict_arg_value_36 = tmp_class_creation_12__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_36, tmp_key_value_36);
        assert(!(tmp_res == -1));
        tmp_condition_result_69 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_69 != false) {
            goto branch_yes_45;
        } else {
            goto branch_no_45;
        }
    }
    branch_yes_45:;
    CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_12__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 163;

        goto try_except_handler_36;
    }
    branch_no_45:;
    {
        nuitka_bool tmp_condition_result_70;
        PyObject *tmp_expression_value_61;
        CHECK_OBJECT(tmp_class_creation_12__metaclass);
        tmp_expression_value_61 = tmp_class_creation_12__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_61, mod_consts[58]);
        tmp_condition_result_70 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_70 == NUITKA_BOOL_TRUE) {
            goto branch_yes_46;
        } else {
            goto branch_no_46;
        }
    }
    branch_yes_46:;
    {
        PyObject *tmp_assign_source_110;
        PyObject *tmp_called_value_23;
        PyObject *tmp_expression_value_62;
        PyObject *tmp_args_value_23;
        PyObject *tmp_tuple_element_46;
        PyObject *tmp_kwargs_value_23;
        CHECK_OBJECT(tmp_class_creation_12__metaclass);
        tmp_expression_value_62 = tmp_class_creation_12__metaclass;
        tmp_called_value_23 = LOOKUP_ATTRIBUTE(tmp_expression_value_62, mod_consts[58]);
        if (tmp_called_value_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 163;

            goto try_except_handler_36;
        }
        tmp_tuple_element_46 = mod_consts[98];
        tmp_args_value_23 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_23, 0, tmp_tuple_element_46);
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_tuple_element_46 = tmp_class_creation_12__bases;
        PyTuple_SET_ITEM0(tmp_args_value_23, 1, tmp_tuple_element_46);
        CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
        tmp_kwargs_value_23 = tmp_class_creation_12__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 163;
        tmp_assign_source_110 = CALL_FUNCTION(tmp_called_value_23, tmp_args_value_23, tmp_kwargs_value_23);
        Py_DECREF(tmp_called_value_23);
        Py_DECREF(tmp_args_value_23);
        if (tmp_assign_source_110 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 163;

            goto try_except_handler_36;
        }
        assert(tmp_class_creation_12__prepared == NULL);
        tmp_class_creation_12__prepared = tmp_assign_source_110;
    }
    {
        bool tmp_condition_result_71;
        PyObject *tmp_operand_value_12;
        PyObject *tmp_expression_value_63;
        CHECK_OBJECT(tmp_class_creation_12__prepared);
        tmp_expression_value_63 = tmp_class_creation_12__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_63, mod_consts[60]);
        tmp_operand_value_12 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_12);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 163;

            goto try_except_handler_36;
        }
        tmp_condition_result_71 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_71 != false) {
            goto branch_yes_47;
        } else {
            goto branch_no_47;
        }
    }
    branch_yes_47:;
    {
        PyObject *tmp_raise_type_12;
        PyObject *tmp_raise_value_12;
        PyObject *tmp_left_value_12;
        PyObject *tmp_right_value_12;
        PyObject *tmp_tuple_element_47;
        PyObject *tmp_getattr_target_12;
        PyObject *tmp_getattr_attr_12;
        PyObject *tmp_getattr_default_12;
        tmp_raise_type_12 = PyExc_TypeError;
        tmp_left_value_12 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_12__metaclass);
        tmp_getattr_target_12 = tmp_class_creation_12__metaclass;
        tmp_getattr_attr_12 = mod_consts[62];
        tmp_getattr_default_12 = mod_consts[63];
        tmp_tuple_element_47 = BUILTIN_GETATTR(tmp_getattr_target_12, tmp_getattr_attr_12, tmp_getattr_default_12);
        if (tmp_tuple_element_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 163;

            goto try_except_handler_36;
        }
        tmp_right_value_12 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_64;
            PyObject *tmp_type_arg_24;
            PyTuple_SET_ITEM(tmp_right_value_12, 0, tmp_tuple_element_47);
            CHECK_OBJECT(tmp_class_creation_12__prepared);
            tmp_type_arg_24 = tmp_class_creation_12__prepared;
            tmp_expression_value_64 = BUILTIN_TYPE1(tmp_type_arg_24);
            assert(!(tmp_expression_value_64 == NULL));
            tmp_tuple_element_47 = LOOKUP_ATTRIBUTE(tmp_expression_value_64, mod_consts[62]);
            Py_DECREF(tmp_expression_value_64);
            if (tmp_tuple_element_47 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 163;

                goto tuple_build_exception_12;
            }
            PyTuple_SET_ITEM(tmp_right_value_12, 1, tmp_tuple_element_47);
        }
        goto tuple_build_noexception_12;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_12:;
        Py_DECREF(tmp_right_value_12);
        goto try_except_handler_36;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_12:;
        tmp_raise_value_12 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_12, tmp_right_value_12);
        Py_DECREF(tmp_right_value_12);
        if (tmp_raise_value_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 163;

            goto try_except_handler_36;
        }
        exception_type = tmp_raise_type_12;
        Py_INCREF(tmp_raise_type_12);
        exception_value = tmp_raise_value_12;
        exception_lineno = 163;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_36;
    }
    branch_no_47:;
    goto branch_end_46;
    branch_no_46:;
    {
        PyObject *tmp_assign_source_111;
        tmp_assign_source_111 = PyDict_New();
        assert(tmp_class_creation_12__prepared == NULL);
        tmp_class_creation_12__prepared = tmp_assign_source_111;
    }
    branch_end_46:;
    {
        PyObject *tmp_assign_source_112;
        {
            PyObject *tmp_set_locals_12;
            CHECK_OBJECT(tmp_class_creation_12__prepared);
            tmp_set_locals_12 = tmp_class_creation_12__prepared;
            locals_aiohttp$web_exceptions$$$class__12__HTTPMove_163 = tmp_set_locals_12;
            Py_INCREF(tmp_set_locals_12);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__12__HTTPMove_163, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 163;

            goto try_except_handler_38;
        }
        tmp_dictset_value = mod_consts[98];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__12__HTTPMove_163, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 163;

            goto try_except_handler_38;
        }
        if (isFrameUnusable(cache_frame_d722b1eaa4a23b797a931284584d8257_10)) {
            Py_XDECREF(cache_frame_d722b1eaa4a23b797a931284584d8257_10);

#if _DEBUG_REFCOUNTS
            if (cache_frame_d722b1eaa4a23b797a931284584d8257_10 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_d722b1eaa4a23b797a931284584d8257_10 = MAKE_FUNCTION_FRAME(codeobj_d722b1eaa4a23b797a931284584d8257, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_d722b1eaa4a23b797a931284584d8257_10->m_type_description == NULL);
        frame_d722b1eaa4a23b797a931284584d8257_10 = cache_frame_d722b1eaa4a23b797a931284584d8257_10;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_d722b1eaa4a23b797a931284584d8257_10);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_d722b1eaa4a23b797a931284584d8257_10) == 2); // Frame stack

        // Framed code:
        {
            PyObject *tmp_kw_defaults_2;
            PyObject *tmp_annotations_3;
            PyObject *tmp_dict_key_3;
            PyObject *tmp_dict_value_3;
            struct Nuitka_CellObject *tmp_closure_1[1];
            tmp_kw_defaults_2 = PyDict_Copy(mod_consts[69]);
            tmp_dict_key_3 = mod_consts[21];
            tmp_dict_value_3 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__12__HTTPMove_163, mod_consts[52]);

            if (tmp_dict_value_3 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_dict_value_3 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[52]);

                    if (unlikely(tmp_dict_value_3 == NULL)) {
                        tmp_dict_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[52]);
                    }

                    if (tmp_dict_value_3 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_kw_defaults_2);

                        exception_lineno = 166;
                        type_description_2 = "c";
                        goto frame_exception_exit_10;
                    }
                    Py_INCREF(tmp_dict_value_3);
                } else {
                    goto frame_exception_exit_10;
                }
            }

            tmp_annotations_3 = _PyDict_NewPresized( 7 );
            {
                PyObject *tmp_expression_value_65;
                PyObject *tmp_subscript_value_17;
                PyObject *tmp_expression_value_66;
                PyObject *tmp_subscript_value_18;
                PyObject *tmp_expression_value_67;
                PyObject *tmp_subscript_value_19;
                PyObject *tmp_expression_value_68;
                PyObject *tmp_subscript_value_20;
                tmp_res = PyDict_SetItem(tmp_annotations_3, tmp_dict_key_3, tmp_dict_value_3);
                Py_DECREF(tmp_dict_value_3);
                assert(!(tmp_res != 0));
                tmp_dict_key_3 = mod_consts[19];
                tmp_expression_value_65 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__12__HTTPMove_163, mod_consts[44]);

                if (tmp_expression_value_65 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_65 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[44]);

                        if (unlikely(tmp_expression_value_65 == NULL)) {
                            tmp_expression_value_65 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[44]);
                        }

                        if (tmp_expression_value_65 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 168;
                            type_description_2 = "c";
                            goto dict_build_exception_2;
                        }
                        Py_INCREF(tmp_expression_value_65);
                    } else {
                        goto dict_build_exception_2;
                    }
                }

                tmp_subscript_value_17 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__12__HTTPMove_163, mod_consts[51]);

                if (tmp_subscript_value_17 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_subscript_value_17 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[51]);

                        if (unlikely(tmp_subscript_value_17 == NULL)) {
                            tmp_subscript_value_17 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[51]);
                        }

                        if (tmp_subscript_value_17 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_expression_value_65);

                            exception_lineno = 168;
                            type_description_2 = "c";
                            goto dict_build_exception_2;
                        }
                        Py_INCREF(tmp_subscript_value_17);
                    } else {
                        goto dict_build_exception_2;
                    }
                }

                tmp_dict_value_3 = LOOKUP_SUBSCRIPT(tmp_expression_value_65, tmp_subscript_value_17);
                Py_DECREF(tmp_expression_value_65);
                Py_DECREF(tmp_subscript_value_17);
                if (tmp_dict_value_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 168;
                    type_description_2 = "c";
                    goto dict_build_exception_2;
                }
                tmp_res = PyDict_SetItem(tmp_annotations_3, tmp_dict_key_3, tmp_dict_value_3);
                Py_DECREF(tmp_dict_value_3);
                assert(!(tmp_res != 0));
                tmp_dict_key_3 = mod_consts[8];
                tmp_expression_value_66 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__12__HTTPMove_163, mod_consts[44]);

                if (tmp_expression_value_66 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_66 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[44]);

                        if (unlikely(tmp_expression_value_66 == NULL)) {
                            tmp_expression_value_66 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[44]);
                        }

                        if (tmp_expression_value_66 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 169;
                            type_description_2 = "c";
                            goto dict_build_exception_2;
                        }
                        Py_INCREF(tmp_expression_value_66);
                    } else {
                        goto dict_build_exception_2;
                    }
                }

                tmp_subscript_value_18 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__12__HTTPMove_163, mod_consts[70]);

                if (tmp_subscript_value_18 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_subscript_value_18 = (PyObject *)&PyUnicode_Type;
                        Py_INCREF(tmp_subscript_value_18);
                    } else {
                        goto dict_build_exception_2;
                    }
                }

                tmp_dict_value_3 = LOOKUP_SUBSCRIPT(tmp_expression_value_66, tmp_subscript_value_18);
                Py_DECREF(tmp_expression_value_66);
                Py_DECREF(tmp_subscript_value_18);
                if (tmp_dict_value_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 169;
                    type_description_2 = "c";
                    goto dict_build_exception_2;
                }
                tmp_res = PyDict_SetItem(tmp_annotations_3, tmp_dict_key_3, tmp_dict_value_3);
                Py_DECREF(tmp_dict_value_3);
                assert(!(tmp_res != 0));
                tmp_dict_key_3 = mod_consts[9];
                tmp_dict_value_3 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__12__HTTPMove_163, mod_consts[40]);

                if (tmp_dict_value_3 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_dict_value_3 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[40]);

                        if (unlikely(tmp_dict_value_3 == NULL)) {
                            tmp_dict_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[40]);
                        }

                        if (tmp_dict_value_3 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 170;
                            type_description_2 = "c";
                            goto dict_build_exception_2;
                        }
                        Py_INCREF(tmp_dict_value_3);
                    } else {
                        goto dict_build_exception_2;
                    }
                }

                tmp_res = PyDict_SetItem(tmp_annotations_3, tmp_dict_key_3, tmp_dict_value_3);
                Py_DECREF(tmp_dict_value_3);
                assert(!(tmp_res != 0));
                tmp_dict_key_3 = mod_consts[14];
                tmp_expression_value_67 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__12__HTTPMove_163, mod_consts[44]);

                if (tmp_expression_value_67 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_67 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[44]);

                        if (unlikely(tmp_expression_value_67 == NULL)) {
                            tmp_expression_value_67 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[44]);
                        }

                        if (tmp_expression_value_67 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 171;
                            type_description_2 = "c";
                            goto dict_build_exception_2;
                        }
                        Py_INCREF(tmp_expression_value_67);
                    } else {
                        goto dict_build_exception_2;
                    }
                }

                tmp_subscript_value_19 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__12__HTTPMove_163, mod_consts[70]);

                if (tmp_subscript_value_19 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_subscript_value_19 = (PyObject *)&PyUnicode_Type;
                        Py_INCREF(tmp_subscript_value_19);
                    } else {
                        goto dict_build_exception_2;
                    }
                }

                tmp_dict_value_3 = LOOKUP_SUBSCRIPT(tmp_expression_value_67, tmp_subscript_value_19);
                Py_DECREF(tmp_expression_value_67);
                Py_DECREF(tmp_subscript_value_19);
                if (tmp_dict_value_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 171;
                    type_description_2 = "c";
                    goto dict_build_exception_2;
                }
                tmp_res = PyDict_SetItem(tmp_annotations_3, tmp_dict_key_3, tmp_dict_value_3);
                Py_DECREF(tmp_dict_value_3);
                assert(!(tmp_res != 0));
                tmp_dict_key_3 = mod_consts[71];
                tmp_expression_value_68 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__12__HTTPMove_163, mod_consts[44]);

                if (tmp_expression_value_68 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_68 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[44]);

                        if (unlikely(tmp_expression_value_68 == NULL)) {
                            tmp_expression_value_68 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[44]);
                        }

                        if (tmp_expression_value_68 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 172;
                            type_description_2 = "c";
                            goto dict_build_exception_2;
                        }
                        Py_INCREF(tmp_expression_value_68);
                    } else {
                        goto dict_build_exception_2;
                    }
                }

                tmp_subscript_value_20 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__12__HTTPMove_163, mod_consts[70]);

                if (tmp_subscript_value_20 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_subscript_value_20 = (PyObject *)&PyUnicode_Type;
                        Py_INCREF(tmp_subscript_value_20);
                    } else {
                        goto dict_build_exception_2;
                    }
                }

                tmp_dict_value_3 = LOOKUP_SUBSCRIPT(tmp_expression_value_68, tmp_subscript_value_20);
                Py_DECREF(tmp_expression_value_68);
                Py_DECREF(tmp_subscript_value_20);
                if (tmp_dict_value_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 172;
                    type_description_2 = "c";
                    goto dict_build_exception_2;
                }
                tmp_res = PyDict_SetItem(tmp_annotations_3, tmp_dict_key_3, tmp_dict_value_3);
                Py_DECREF(tmp_dict_value_3);
                assert(!(tmp_res != 0));
                tmp_dict_key_3 = mod_consts[72];
                tmp_dict_value_3 = Py_None;
                tmp_res = PyDict_SetItem(tmp_annotations_3, tmp_dict_key_3, tmp_dict_value_3);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_2;
            // Exception handling pass through code for dict_build:
            dict_build_exception_2:;
            Py_DECREF(tmp_kw_defaults_2);
            Py_DECREF(tmp_annotations_3);
            goto frame_exception_exit_10;
            // Finished with no exception for dict_build:
            dict_build_noexception_2:;

            tmp_closure_1[0] = outline_11_var___class__;
            Py_INCREF(tmp_closure_1[0]);

            tmp_dictset_value = MAKE_FUNCTION_aiohttp$web_exceptions$$$function__3___init__(tmp_kw_defaults_2, tmp_annotations_3, tmp_closure_1);

            tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__12__HTTPMove_163, mod_consts[5], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 164;
                type_description_2 = "c";
                goto frame_exception_exit_10;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_d722b1eaa4a23b797a931284584d8257_10);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_9;

        frame_exception_exit_10:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_d722b1eaa4a23b797a931284584d8257_10);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_d722b1eaa4a23b797a931284584d8257_10, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_d722b1eaa4a23b797a931284584d8257_10->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_d722b1eaa4a23b797a931284584d8257_10, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_d722b1eaa4a23b797a931284584d8257_10,
            type_description_2,
            outline_11_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_d722b1eaa4a23b797a931284584d8257_10 == cache_frame_d722b1eaa4a23b797a931284584d8257_10) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_d722b1eaa4a23b797a931284584d8257_10);
            cache_frame_d722b1eaa4a23b797a931284584d8257_10 = NULL;
        }

        assertFrameObject(frame_d722b1eaa4a23b797a931284584d8257_10);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_9;

        frame_no_exception_9:;
        goto skip_nested_handling_9;
        nested_frame_exit_9:;

        goto try_except_handler_38;
        skip_nested_handling_9:;
        {
            nuitka_bool tmp_condition_result_72;
            PyObject *tmp_cmp_expr_left_12;
            PyObject *tmp_cmp_expr_right_12;
            CHECK_OBJECT(tmp_class_creation_12__bases);
            tmp_cmp_expr_left_12 = tmp_class_creation_12__bases;
            CHECK_OBJECT(tmp_class_creation_12__bases_orig);
            tmp_cmp_expr_right_12 = tmp_class_creation_12__bases_orig;
            tmp_condition_result_72 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_12, tmp_cmp_expr_right_12);
            if (tmp_condition_result_72 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 163;

                goto try_except_handler_38;
            }
            if (tmp_condition_result_72 == NUITKA_BOOL_TRUE) {
                goto branch_yes_48;
            } else {
                goto branch_no_48;
            }
            assert(tmp_condition_result_72 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_48:;
        CHECK_OBJECT(tmp_class_creation_12__bases_orig);
        tmp_dictset_value = tmp_class_creation_12__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__12__HTTPMove_163, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 163;

            goto try_except_handler_38;
        }
        branch_no_48:;
        {
            PyObject *tmp_assign_source_113;
            PyObject *tmp_called_value_24;
            PyObject *tmp_args_value_24;
            PyObject *tmp_tuple_element_48;
            PyObject *tmp_kwargs_value_24;
            CHECK_OBJECT(tmp_class_creation_12__metaclass);
            tmp_called_value_24 = tmp_class_creation_12__metaclass;
            tmp_tuple_element_48 = mod_consts[98];
            tmp_args_value_24 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_24, 0, tmp_tuple_element_48);
            CHECK_OBJECT(tmp_class_creation_12__bases);
            tmp_tuple_element_48 = tmp_class_creation_12__bases;
            PyTuple_SET_ITEM0(tmp_args_value_24, 1, tmp_tuple_element_48);
            tmp_tuple_element_48 = locals_aiohttp$web_exceptions$$$class__12__HTTPMove_163;
            PyTuple_SET_ITEM0(tmp_args_value_24, 2, tmp_tuple_element_48);
            CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
            tmp_kwargs_value_24 = tmp_class_creation_12__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 163;
            tmp_assign_source_113 = CALL_FUNCTION(tmp_called_value_24, tmp_args_value_24, tmp_kwargs_value_24);
            Py_DECREF(tmp_args_value_24);
            if (tmp_assign_source_113 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 163;

                goto try_except_handler_38;
            }
            assert(Nuitka_Cell_GET(outline_11_var___class__) == NULL);
            PyCell_SET(outline_11_var___class__, tmp_assign_source_113);

        }
        CHECK_OBJECT(Nuitka_Cell_GET(outline_11_var___class__));
        tmp_assign_source_112 = Nuitka_Cell_GET(outline_11_var___class__);
        Py_INCREF(tmp_assign_source_112);
        goto try_return_handler_38;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_38:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__12__HTTPMove_163);
        locals_aiohttp$web_exceptions$$$class__12__HTTPMove_163 = NULL;
        goto try_return_handler_37;
        // Exception handler code:
        try_except_handler_38:;
        exception_keeper_type_36 = exception_type;
        exception_keeper_value_36 = exception_value;
        exception_keeper_tb_36 = exception_tb;
        exception_keeper_lineno_36 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__12__HTTPMove_163);
        locals_aiohttp$web_exceptions$$$class__12__HTTPMove_163 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_36;
        exception_value = exception_keeper_value_36;
        exception_tb = exception_keeper_tb_36;
        exception_lineno = exception_keeper_lineno_36;

        goto try_except_handler_37;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_37:;
        CHECK_OBJECT(outline_11_var___class__);
        Py_DECREF(outline_11_var___class__);
        outline_11_var___class__ = NULL;
        goto outline_result_12;
        // Exception handler code:
        try_except_handler_37:;
        exception_keeper_type_37 = exception_type;
        exception_keeper_value_37 = exception_value;
        exception_keeper_tb_37 = exception_tb;
        exception_keeper_lineno_37 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_37;
        exception_value = exception_keeper_value_37;
        exception_tb = exception_keeper_tb_37;
        exception_lineno = exception_keeper_lineno_37;

        goto outline_exception_12;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_12:;
        exception_lineno = 163;
        goto try_except_handler_36;
        outline_result_12:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[98], tmp_assign_source_112);
    }
    goto try_end_14;
    // Exception handler code:
    try_except_handler_36:;
    exception_keeper_type_38 = exception_type;
    exception_keeper_value_38 = exception_value;
    exception_keeper_tb_38 = exception_tb;
    exception_keeper_lineno_38 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_12__bases_orig);
    tmp_class_creation_12__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_12__bases);
    tmp_class_creation_12__bases = NULL;
    Py_XDECREF(tmp_class_creation_12__class_decl_dict);
    tmp_class_creation_12__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_12__metaclass);
    tmp_class_creation_12__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_12__prepared);
    tmp_class_creation_12__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_38;
    exception_value = exception_keeper_value_38;
    exception_tb = exception_keeper_tb_38;
    exception_lineno = exception_keeper_lineno_38;

    goto frame_exception_exit_1;
    // End of try:
    try_end_14:;
    CHECK_OBJECT(tmp_class_creation_12__bases_orig);
    Py_DECREF(tmp_class_creation_12__bases_orig);
    tmp_class_creation_12__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_12__bases);
    Py_DECREF(tmp_class_creation_12__bases);
    tmp_class_creation_12__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
    Py_DECREF(tmp_class_creation_12__class_decl_dict);
    tmp_class_creation_12__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_12__metaclass);
    Py_DECREF(tmp_class_creation_12__metaclass);
    tmp_class_creation_12__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_12__prepared);
    Py_DECREF(tmp_class_creation_12__prepared);
    tmp_class_creation_12__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_114;
        PyObject *tmp_tuple_element_49;
        tmp_tuple_element_49 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[98]);

        if (unlikely(tmp_tuple_element_49 == NULL)) {
            tmp_tuple_element_49 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[98]);
        }

        if (tmp_tuple_element_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 187;

            goto try_except_handler_39;
        }
        tmp_assign_source_114 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_114, 0, tmp_tuple_element_49);
        assert(tmp_class_creation_13__bases_orig == NULL);
        tmp_class_creation_13__bases_orig = tmp_assign_source_114;
    }
    {
        PyObject *tmp_assign_source_115;
        PyObject *tmp_dircall_arg1_13;
        CHECK_OBJECT(tmp_class_creation_13__bases_orig);
        tmp_dircall_arg1_13 = tmp_class_creation_13__bases_orig;
        Py_INCREF(tmp_dircall_arg1_13);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_13};
            tmp_assign_source_115 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_115 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 187;

            goto try_except_handler_39;
        }
        assert(tmp_class_creation_13__bases == NULL);
        tmp_class_creation_13__bases = tmp_assign_source_115;
    }
    {
        PyObject *tmp_assign_source_116;
        tmp_assign_source_116 = PyDict_New();
        assert(tmp_class_creation_13__class_decl_dict == NULL);
        tmp_class_creation_13__class_decl_dict = tmp_assign_source_116;
    }
    {
        PyObject *tmp_assign_source_117;
        PyObject *tmp_metaclass_value_13;
        bool tmp_condition_result_73;
        PyObject *tmp_key_value_37;
        PyObject *tmp_dict_arg_value_37;
        PyObject *tmp_dict_arg_value_38;
        PyObject *tmp_key_value_38;
        nuitka_bool tmp_condition_result_74;
        int tmp_truth_name_13;
        PyObject *tmp_type_arg_25;
        PyObject *tmp_expression_value_69;
        PyObject *tmp_subscript_value_21;
        PyObject *tmp_bases_value_13;
        tmp_key_value_37 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
        tmp_dict_arg_value_37 = tmp_class_creation_13__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_37, tmp_key_value_37);
        assert(!(tmp_res == -1));
        tmp_condition_result_73 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_73 != false) {
            goto condexpr_true_25;
        } else {
            goto condexpr_false_25;
        }
        condexpr_true_25:;
        CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
        tmp_dict_arg_value_38 = tmp_class_creation_13__class_decl_dict;
        tmp_key_value_38 = mod_consts[57];
        tmp_metaclass_value_13 = DICT_GET_ITEM0(tmp_dict_arg_value_38, tmp_key_value_38);
        if (tmp_metaclass_value_13 == NULL) {
            tmp_metaclass_value_13 = Py_None;
        }
        assert(!(tmp_metaclass_value_13 == NULL));
        Py_INCREF(tmp_metaclass_value_13);
        goto condexpr_end_25;
        condexpr_false_25:;
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_truth_name_13 = CHECK_IF_TRUE(tmp_class_creation_13__bases);
        if (tmp_truth_name_13 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 187;

            goto try_except_handler_39;
        }
        tmp_condition_result_74 = tmp_truth_name_13 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_74 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_26;
        } else {
            goto condexpr_false_26;
        }
        condexpr_true_26:;
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_expression_value_69 = tmp_class_creation_13__bases;
        tmp_subscript_value_21 = mod_consts[39];
        tmp_type_arg_25 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_69, tmp_subscript_value_21, 0);
        if (tmp_type_arg_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 187;

            goto try_except_handler_39;
        }
        tmp_metaclass_value_13 = BUILTIN_TYPE1(tmp_type_arg_25);
        Py_DECREF(tmp_type_arg_25);
        if (tmp_metaclass_value_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 187;

            goto try_except_handler_39;
        }
        goto condexpr_end_26;
        condexpr_false_26:;
        tmp_metaclass_value_13 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_13);
        condexpr_end_26:;
        condexpr_end_25:;
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_bases_value_13 = tmp_class_creation_13__bases;
        tmp_assign_source_117 = SELECT_METACLASS(tmp_metaclass_value_13, tmp_bases_value_13);
        Py_DECREF(tmp_metaclass_value_13);
        if (tmp_assign_source_117 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 187;

            goto try_except_handler_39;
        }
        assert(tmp_class_creation_13__metaclass == NULL);
        tmp_class_creation_13__metaclass = tmp_assign_source_117;
    }
    {
        bool tmp_condition_result_75;
        PyObject *tmp_key_value_39;
        PyObject *tmp_dict_arg_value_39;
        tmp_key_value_39 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
        tmp_dict_arg_value_39 = tmp_class_creation_13__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_39, tmp_key_value_39);
        assert(!(tmp_res == -1));
        tmp_condition_result_75 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_75 != false) {
            goto branch_yes_49;
        } else {
            goto branch_no_49;
        }
    }
    branch_yes_49:;
    CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_13__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 187;

        goto try_except_handler_39;
    }
    branch_no_49:;
    {
        nuitka_bool tmp_condition_result_76;
        PyObject *tmp_expression_value_70;
        CHECK_OBJECT(tmp_class_creation_13__metaclass);
        tmp_expression_value_70 = tmp_class_creation_13__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_70, mod_consts[58]);
        tmp_condition_result_76 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_76 == NUITKA_BOOL_TRUE) {
            goto branch_yes_50;
        } else {
            goto branch_no_50;
        }
    }
    branch_yes_50:;
    {
        PyObject *tmp_assign_source_118;
        PyObject *tmp_called_value_25;
        PyObject *tmp_expression_value_71;
        PyObject *tmp_args_value_25;
        PyObject *tmp_tuple_element_50;
        PyObject *tmp_kwargs_value_25;
        CHECK_OBJECT(tmp_class_creation_13__metaclass);
        tmp_expression_value_71 = tmp_class_creation_13__metaclass;
        tmp_called_value_25 = LOOKUP_ATTRIBUTE(tmp_expression_value_71, mod_consts[58]);
        if (tmp_called_value_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 187;

            goto try_except_handler_39;
        }
        tmp_tuple_element_50 = mod_consts[100];
        tmp_args_value_25 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_25, 0, tmp_tuple_element_50);
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_tuple_element_50 = tmp_class_creation_13__bases;
        PyTuple_SET_ITEM0(tmp_args_value_25, 1, tmp_tuple_element_50);
        CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
        tmp_kwargs_value_25 = tmp_class_creation_13__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 187;
        tmp_assign_source_118 = CALL_FUNCTION(tmp_called_value_25, tmp_args_value_25, tmp_kwargs_value_25);
        Py_DECREF(tmp_called_value_25);
        Py_DECREF(tmp_args_value_25);
        if (tmp_assign_source_118 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 187;

            goto try_except_handler_39;
        }
        assert(tmp_class_creation_13__prepared == NULL);
        tmp_class_creation_13__prepared = tmp_assign_source_118;
    }
    {
        bool tmp_condition_result_77;
        PyObject *tmp_operand_value_13;
        PyObject *tmp_expression_value_72;
        CHECK_OBJECT(tmp_class_creation_13__prepared);
        tmp_expression_value_72 = tmp_class_creation_13__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_72, mod_consts[60]);
        tmp_operand_value_13 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_13);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 187;

            goto try_except_handler_39;
        }
        tmp_condition_result_77 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_77 != false) {
            goto branch_yes_51;
        } else {
            goto branch_no_51;
        }
    }
    branch_yes_51:;
    {
        PyObject *tmp_raise_type_13;
        PyObject *tmp_raise_value_13;
        PyObject *tmp_left_value_13;
        PyObject *tmp_right_value_13;
        PyObject *tmp_tuple_element_51;
        PyObject *tmp_getattr_target_13;
        PyObject *tmp_getattr_attr_13;
        PyObject *tmp_getattr_default_13;
        tmp_raise_type_13 = PyExc_TypeError;
        tmp_left_value_13 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_13__metaclass);
        tmp_getattr_target_13 = tmp_class_creation_13__metaclass;
        tmp_getattr_attr_13 = mod_consts[62];
        tmp_getattr_default_13 = mod_consts[63];
        tmp_tuple_element_51 = BUILTIN_GETATTR(tmp_getattr_target_13, tmp_getattr_attr_13, tmp_getattr_default_13);
        if (tmp_tuple_element_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 187;

            goto try_except_handler_39;
        }
        tmp_right_value_13 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_73;
            PyObject *tmp_type_arg_26;
            PyTuple_SET_ITEM(tmp_right_value_13, 0, tmp_tuple_element_51);
            CHECK_OBJECT(tmp_class_creation_13__prepared);
            tmp_type_arg_26 = tmp_class_creation_13__prepared;
            tmp_expression_value_73 = BUILTIN_TYPE1(tmp_type_arg_26);
            assert(!(tmp_expression_value_73 == NULL));
            tmp_tuple_element_51 = LOOKUP_ATTRIBUTE(tmp_expression_value_73, mod_consts[62]);
            Py_DECREF(tmp_expression_value_73);
            if (tmp_tuple_element_51 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 187;

                goto tuple_build_exception_13;
            }
            PyTuple_SET_ITEM(tmp_right_value_13, 1, tmp_tuple_element_51);
        }
        goto tuple_build_noexception_13;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_13:;
        Py_DECREF(tmp_right_value_13);
        goto try_except_handler_39;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_13:;
        tmp_raise_value_13 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_13, tmp_right_value_13);
        Py_DECREF(tmp_right_value_13);
        if (tmp_raise_value_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 187;

            goto try_except_handler_39;
        }
        exception_type = tmp_raise_type_13;
        Py_INCREF(tmp_raise_type_13);
        exception_value = tmp_raise_value_13;
        exception_lineno = 187;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_39;
    }
    branch_no_51:;
    goto branch_end_50;
    branch_no_50:;
    {
        PyObject *tmp_assign_source_119;
        tmp_assign_source_119 = PyDict_New();
        assert(tmp_class_creation_13__prepared == NULL);
        tmp_class_creation_13__prepared = tmp_assign_source_119;
    }
    branch_end_50:;
    {
        PyObject *tmp_assign_source_120;
        {
            PyObject *tmp_set_locals_13;
            CHECK_OBJECT(tmp_class_creation_13__prepared);
            tmp_set_locals_13 = tmp_class_creation_13__prepared;
            locals_aiohttp$web_exceptions$$$class__13_HTTPMultipleChoices_187 = tmp_set_locals_13;
            Py_INCREF(tmp_set_locals_13);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__13_HTTPMultipleChoices_187, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 187;

            goto try_except_handler_41;
        }
        tmp_dictset_value = mod_consts[100];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__13_HTTPMultipleChoices_187, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 187;

            goto try_except_handler_41;
        }
        if (isFrameUnusable(cache_frame_e0612cdca98a9eeb4c5daf89b6b9d70a_11)) {
            Py_XDECREF(cache_frame_e0612cdca98a9eeb4c5daf89b6b9d70a_11);

#if _DEBUG_REFCOUNTS
            if (cache_frame_e0612cdca98a9eeb4c5daf89b6b9d70a_11 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_e0612cdca98a9eeb4c5daf89b6b9d70a_11 = MAKE_FUNCTION_FRAME(codeobj_e0612cdca98a9eeb4c5daf89b6b9d70a, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_e0612cdca98a9eeb4c5daf89b6b9d70a_11->m_type_description == NULL);
        frame_e0612cdca98a9eeb4c5daf89b6b9d70a_11 = cache_frame_e0612cdca98a9eeb4c5daf89b6b9d70a_11;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_e0612cdca98a9eeb4c5daf89b6b9d70a_11);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_e0612cdca98a9eeb4c5daf89b6b9d70a_11) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[101];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__13_HTTPMultipleChoices_187, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 188;
            type_description_2 = "o";
            goto frame_exception_exit_11;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e0612cdca98a9eeb4c5daf89b6b9d70a_11);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_10;

        frame_exception_exit_11:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e0612cdca98a9eeb4c5daf89b6b9d70a_11);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_e0612cdca98a9eeb4c5daf89b6b9d70a_11, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_e0612cdca98a9eeb4c5daf89b6b9d70a_11->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_e0612cdca98a9eeb4c5daf89b6b9d70a_11, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_e0612cdca98a9eeb4c5daf89b6b9d70a_11,
            type_description_2,
            outline_12_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_e0612cdca98a9eeb4c5daf89b6b9d70a_11 == cache_frame_e0612cdca98a9eeb4c5daf89b6b9d70a_11) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_e0612cdca98a9eeb4c5daf89b6b9d70a_11);
            cache_frame_e0612cdca98a9eeb4c5daf89b6b9d70a_11 = NULL;
        }

        assertFrameObject(frame_e0612cdca98a9eeb4c5daf89b6b9d70a_11);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_10;

        frame_no_exception_10:;
        goto skip_nested_handling_10;
        nested_frame_exit_10:;

        goto try_except_handler_41;
        skip_nested_handling_10:;
        {
            nuitka_bool tmp_condition_result_78;
            PyObject *tmp_cmp_expr_left_13;
            PyObject *tmp_cmp_expr_right_13;
            CHECK_OBJECT(tmp_class_creation_13__bases);
            tmp_cmp_expr_left_13 = tmp_class_creation_13__bases;
            CHECK_OBJECT(tmp_class_creation_13__bases_orig);
            tmp_cmp_expr_right_13 = tmp_class_creation_13__bases_orig;
            tmp_condition_result_78 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_13, tmp_cmp_expr_right_13);
            if (tmp_condition_result_78 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 187;

                goto try_except_handler_41;
            }
            if (tmp_condition_result_78 == NUITKA_BOOL_TRUE) {
                goto branch_yes_52;
            } else {
                goto branch_no_52;
            }
            assert(tmp_condition_result_78 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_52:;
        CHECK_OBJECT(tmp_class_creation_13__bases_orig);
        tmp_dictset_value = tmp_class_creation_13__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__13_HTTPMultipleChoices_187, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 187;

            goto try_except_handler_41;
        }
        branch_no_52:;
        {
            PyObject *tmp_assign_source_121;
            PyObject *tmp_called_value_26;
            PyObject *tmp_args_value_26;
            PyObject *tmp_tuple_element_52;
            PyObject *tmp_kwargs_value_26;
            CHECK_OBJECT(tmp_class_creation_13__metaclass);
            tmp_called_value_26 = tmp_class_creation_13__metaclass;
            tmp_tuple_element_52 = mod_consts[100];
            tmp_args_value_26 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_26, 0, tmp_tuple_element_52);
            CHECK_OBJECT(tmp_class_creation_13__bases);
            tmp_tuple_element_52 = tmp_class_creation_13__bases;
            PyTuple_SET_ITEM0(tmp_args_value_26, 1, tmp_tuple_element_52);
            tmp_tuple_element_52 = locals_aiohttp$web_exceptions$$$class__13_HTTPMultipleChoices_187;
            PyTuple_SET_ITEM0(tmp_args_value_26, 2, tmp_tuple_element_52);
            CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
            tmp_kwargs_value_26 = tmp_class_creation_13__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 187;
            tmp_assign_source_121 = CALL_FUNCTION(tmp_called_value_26, tmp_args_value_26, tmp_kwargs_value_26);
            Py_DECREF(tmp_args_value_26);
            if (tmp_assign_source_121 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 187;

                goto try_except_handler_41;
            }
            assert(outline_12_var___class__ == NULL);
            outline_12_var___class__ = tmp_assign_source_121;
        }
        CHECK_OBJECT(outline_12_var___class__);
        tmp_assign_source_120 = outline_12_var___class__;
        Py_INCREF(tmp_assign_source_120);
        goto try_return_handler_41;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_41:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__13_HTTPMultipleChoices_187);
        locals_aiohttp$web_exceptions$$$class__13_HTTPMultipleChoices_187 = NULL;
        goto try_return_handler_40;
        // Exception handler code:
        try_except_handler_41:;
        exception_keeper_type_39 = exception_type;
        exception_keeper_value_39 = exception_value;
        exception_keeper_tb_39 = exception_tb;
        exception_keeper_lineno_39 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__13_HTTPMultipleChoices_187);
        locals_aiohttp$web_exceptions$$$class__13_HTTPMultipleChoices_187 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_39;
        exception_value = exception_keeper_value_39;
        exception_tb = exception_keeper_tb_39;
        exception_lineno = exception_keeper_lineno_39;

        goto try_except_handler_40;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_40:;
        CHECK_OBJECT(outline_12_var___class__);
        Py_DECREF(outline_12_var___class__);
        outline_12_var___class__ = NULL;
        goto outline_result_13;
        // Exception handler code:
        try_except_handler_40:;
        exception_keeper_type_40 = exception_type;
        exception_keeper_value_40 = exception_value;
        exception_keeper_tb_40 = exception_tb;
        exception_keeper_lineno_40 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_40;
        exception_value = exception_keeper_value_40;
        exception_tb = exception_keeper_tb_40;
        exception_lineno = exception_keeper_lineno_40;

        goto outline_exception_13;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_13:;
        exception_lineno = 187;
        goto try_except_handler_39;
        outline_result_13:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[100], tmp_assign_source_120);
    }
    goto try_end_15;
    // Exception handler code:
    try_except_handler_39:;
    exception_keeper_type_41 = exception_type;
    exception_keeper_value_41 = exception_value;
    exception_keeper_tb_41 = exception_tb;
    exception_keeper_lineno_41 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_13__bases_orig);
    tmp_class_creation_13__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_13__bases);
    tmp_class_creation_13__bases = NULL;
    Py_XDECREF(tmp_class_creation_13__class_decl_dict);
    tmp_class_creation_13__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_13__metaclass);
    tmp_class_creation_13__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_13__prepared);
    tmp_class_creation_13__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_41;
    exception_value = exception_keeper_value_41;
    exception_tb = exception_keeper_tb_41;
    exception_lineno = exception_keeper_lineno_41;

    goto frame_exception_exit_1;
    // End of try:
    try_end_15:;
    CHECK_OBJECT(tmp_class_creation_13__bases_orig);
    Py_DECREF(tmp_class_creation_13__bases_orig);
    tmp_class_creation_13__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_13__bases);
    Py_DECREF(tmp_class_creation_13__bases);
    tmp_class_creation_13__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
    Py_DECREF(tmp_class_creation_13__class_decl_dict);
    tmp_class_creation_13__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_13__metaclass);
    Py_DECREF(tmp_class_creation_13__metaclass);
    tmp_class_creation_13__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_13__prepared);
    Py_DECREF(tmp_class_creation_13__prepared);
    tmp_class_creation_13__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_122;
        PyObject *tmp_tuple_element_53;
        tmp_tuple_element_53 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[98]);

        if (unlikely(tmp_tuple_element_53 == NULL)) {
            tmp_tuple_element_53 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[98]);
        }

        if (tmp_tuple_element_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 191;

            goto try_except_handler_42;
        }
        tmp_assign_source_122 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_122, 0, tmp_tuple_element_53);
        assert(tmp_class_creation_14__bases_orig == NULL);
        tmp_class_creation_14__bases_orig = tmp_assign_source_122;
    }
    {
        PyObject *tmp_assign_source_123;
        PyObject *tmp_dircall_arg1_14;
        CHECK_OBJECT(tmp_class_creation_14__bases_orig);
        tmp_dircall_arg1_14 = tmp_class_creation_14__bases_orig;
        Py_INCREF(tmp_dircall_arg1_14);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_14};
            tmp_assign_source_123 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_123 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 191;

            goto try_except_handler_42;
        }
        assert(tmp_class_creation_14__bases == NULL);
        tmp_class_creation_14__bases = tmp_assign_source_123;
    }
    {
        PyObject *tmp_assign_source_124;
        tmp_assign_source_124 = PyDict_New();
        assert(tmp_class_creation_14__class_decl_dict == NULL);
        tmp_class_creation_14__class_decl_dict = tmp_assign_source_124;
    }
    {
        PyObject *tmp_assign_source_125;
        PyObject *tmp_metaclass_value_14;
        bool tmp_condition_result_79;
        PyObject *tmp_key_value_40;
        PyObject *tmp_dict_arg_value_40;
        PyObject *tmp_dict_arg_value_41;
        PyObject *tmp_key_value_41;
        nuitka_bool tmp_condition_result_80;
        int tmp_truth_name_14;
        PyObject *tmp_type_arg_27;
        PyObject *tmp_expression_value_74;
        PyObject *tmp_subscript_value_22;
        PyObject *tmp_bases_value_14;
        tmp_key_value_40 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
        tmp_dict_arg_value_40 = tmp_class_creation_14__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_40, tmp_key_value_40);
        assert(!(tmp_res == -1));
        tmp_condition_result_79 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_79 != false) {
            goto condexpr_true_27;
        } else {
            goto condexpr_false_27;
        }
        condexpr_true_27:;
        CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
        tmp_dict_arg_value_41 = tmp_class_creation_14__class_decl_dict;
        tmp_key_value_41 = mod_consts[57];
        tmp_metaclass_value_14 = DICT_GET_ITEM0(tmp_dict_arg_value_41, tmp_key_value_41);
        if (tmp_metaclass_value_14 == NULL) {
            tmp_metaclass_value_14 = Py_None;
        }
        assert(!(tmp_metaclass_value_14 == NULL));
        Py_INCREF(tmp_metaclass_value_14);
        goto condexpr_end_27;
        condexpr_false_27:;
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_truth_name_14 = CHECK_IF_TRUE(tmp_class_creation_14__bases);
        if (tmp_truth_name_14 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 191;

            goto try_except_handler_42;
        }
        tmp_condition_result_80 = tmp_truth_name_14 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_80 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_28;
        } else {
            goto condexpr_false_28;
        }
        condexpr_true_28:;
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_expression_value_74 = tmp_class_creation_14__bases;
        tmp_subscript_value_22 = mod_consts[39];
        tmp_type_arg_27 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_74, tmp_subscript_value_22, 0);
        if (tmp_type_arg_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 191;

            goto try_except_handler_42;
        }
        tmp_metaclass_value_14 = BUILTIN_TYPE1(tmp_type_arg_27);
        Py_DECREF(tmp_type_arg_27);
        if (tmp_metaclass_value_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 191;

            goto try_except_handler_42;
        }
        goto condexpr_end_28;
        condexpr_false_28:;
        tmp_metaclass_value_14 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_14);
        condexpr_end_28:;
        condexpr_end_27:;
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_bases_value_14 = tmp_class_creation_14__bases;
        tmp_assign_source_125 = SELECT_METACLASS(tmp_metaclass_value_14, tmp_bases_value_14);
        Py_DECREF(tmp_metaclass_value_14);
        if (tmp_assign_source_125 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 191;

            goto try_except_handler_42;
        }
        assert(tmp_class_creation_14__metaclass == NULL);
        tmp_class_creation_14__metaclass = tmp_assign_source_125;
    }
    {
        bool tmp_condition_result_81;
        PyObject *tmp_key_value_42;
        PyObject *tmp_dict_arg_value_42;
        tmp_key_value_42 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
        tmp_dict_arg_value_42 = tmp_class_creation_14__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_42, tmp_key_value_42);
        assert(!(tmp_res == -1));
        tmp_condition_result_81 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_81 != false) {
            goto branch_yes_53;
        } else {
            goto branch_no_53;
        }
    }
    branch_yes_53:;
    CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_14__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 191;

        goto try_except_handler_42;
    }
    branch_no_53:;
    {
        nuitka_bool tmp_condition_result_82;
        PyObject *tmp_expression_value_75;
        CHECK_OBJECT(tmp_class_creation_14__metaclass);
        tmp_expression_value_75 = tmp_class_creation_14__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_75, mod_consts[58]);
        tmp_condition_result_82 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_82 == NUITKA_BOOL_TRUE) {
            goto branch_yes_54;
        } else {
            goto branch_no_54;
        }
    }
    branch_yes_54:;
    {
        PyObject *tmp_assign_source_126;
        PyObject *tmp_called_value_27;
        PyObject *tmp_expression_value_76;
        PyObject *tmp_args_value_27;
        PyObject *tmp_tuple_element_54;
        PyObject *tmp_kwargs_value_27;
        CHECK_OBJECT(tmp_class_creation_14__metaclass);
        tmp_expression_value_76 = tmp_class_creation_14__metaclass;
        tmp_called_value_27 = LOOKUP_ATTRIBUTE(tmp_expression_value_76, mod_consts[58]);
        if (tmp_called_value_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 191;

            goto try_except_handler_42;
        }
        tmp_tuple_element_54 = mod_consts[102];
        tmp_args_value_27 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_27, 0, tmp_tuple_element_54);
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_tuple_element_54 = tmp_class_creation_14__bases;
        PyTuple_SET_ITEM0(tmp_args_value_27, 1, tmp_tuple_element_54);
        CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
        tmp_kwargs_value_27 = tmp_class_creation_14__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 191;
        tmp_assign_source_126 = CALL_FUNCTION(tmp_called_value_27, tmp_args_value_27, tmp_kwargs_value_27);
        Py_DECREF(tmp_called_value_27);
        Py_DECREF(tmp_args_value_27);
        if (tmp_assign_source_126 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 191;

            goto try_except_handler_42;
        }
        assert(tmp_class_creation_14__prepared == NULL);
        tmp_class_creation_14__prepared = tmp_assign_source_126;
    }
    {
        bool tmp_condition_result_83;
        PyObject *tmp_operand_value_14;
        PyObject *tmp_expression_value_77;
        CHECK_OBJECT(tmp_class_creation_14__prepared);
        tmp_expression_value_77 = tmp_class_creation_14__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_77, mod_consts[60]);
        tmp_operand_value_14 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_14);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 191;

            goto try_except_handler_42;
        }
        tmp_condition_result_83 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_83 != false) {
            goto branch_yes_55;
        } else {
            goto branch_no_55;
        }
    }
    branch_yes_55:;
    {
        PyObject *tmp_raise_type_14;
        PyObject *tmp_raise_value_14;
        PyObject *tmp_left_value_14;
        PyObject *tmp_right_value_14;
        PyObject *tmp_tuple_element_55;
        PyObject *tmp_getattr_target_14;
        PyObject *tmp_getattr_attr_14;
        PyObject *tmp_getattr_default_14;
        tmp_raise_type_14 = PyExc_TypeError;
        tmp_left_value_14 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_14__metaclass);
        tmp_getattr_target_14 = tmp_class_creation_14__metaclass;
        tmp_getattr_attr_14 = mod_consts[62];
        tmp_getattr_default_14 = mod_consts[63];
        tmp_tuple_element_55 = BUILTIN_GETATTR(tmp_getattr_target_14, tmp_getattr_attr_14, tmp_getattr_default_14);
        if (tmp_tuple_element_55 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 191;

            goto try_except_handler_42;
        }
        tmp_right_value_14 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_78;
            PyObject *tmp_type_arg_28;
            PyTuple_SET_ITEM(tmp_right_value_14, 0, tmp_tuple_element_55);
            CHECK_OBJECT(tmp_class_creation_14__prepared);
            tmp_type_arg_28 = tmp_class_creation_14__prepared;
            tmp_expression_value_78 = BUILTIN_TYPE1(tmp_type_arg_28);
            assert(!(tmp_expression_value_78 == NULL));
            tmp_tuple_element_55 = LOOKUP_ATTRIBUTE(tmp_expression_value_78, mod_consts[62]);
            Py_DECREF(tmp_expression_value_78);
            if (tmp_tuple_element_55 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 191;

                goto tuple_build_exception_14;
            }
            PyTuple_SET_ITEM(tmp_right_value_14, 1, tmp_tuple_element_55);
        }
        goto tuple_build_noexception_14;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_14:;
        Py_DECREF(tmp_right_value_14);
        goto try_except_handler_42;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_14:;
        tmp_raise_value_14 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_14, tmp_right_value_14);
        Py_DECREF(tmp_right_value_14);
        if (tmp_raise_value_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 191;

            goto try_except_handler_42;
        }
        exception_type = tmp_raise_type_14;
        Py_INCREF(tmp_raise_type_14);
        exception_value = tmp_raise_value_14;
        exception_lineno = 191;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_42;
    }
    branch_no_55:;
    goto branch_end_54;
    branch_no_54:;
    {
        PyObject *tmp_assign_source_127;
        tmp_assign_source_127 = PyDict_New();
        assert(tmp_class_creation_14__prepared == NULL);
        tmp_class_creation_14__prepared = tmp_assign_source_127;
    }
    branch_end_54:;
    {
        PyObject *tmp_assign_source_128;
        {
            PyObject *tmp_set_locals_14;
            CHECK_OBJECT(tmp_class_creation_14__prepared);
            tmp_set_locals_14 = tmp_class_creation_14__prepared;
            locals_aiohttp$web_exceptions$$$class__14_HTTPMovedPermanently_191 = tmp_set_locals_14;
            Py_INCREF(tmp_set_locals_14);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__14_HTTPMovedPermanently_191, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 191;

            goto try_except_handler_44;
        }
        tmp_dictset_value = mod_consts[102];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__14_HTTPMovedPermanently_191, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 191;

            goto try_except_handler_44;
        }
        if (isFrameUnusable(cache_frame_c65f0b71934d64e244a59bc45ea34528_12)) {
            Py_XDECREF(cache_frame_c65f0b71934d64e244a59bc45ea34528_12);

#if _DEBUG_REFCOUNTS
            if (cache_frame_c65f0b71934d64e244a59bc45ea34528_12 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_c65f0b71934d64e244a59bc45ea34528_12 = MAKE_FUNCTION_FRAME(codeobj_c65f0b71934d64e244a59bc45ea34528, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_c65f0b71934d64e244a59bc45ea34528_12->m_type_description == NULL);
        frame_c65f0b71934d64e244a59bc45ea34528_12 = cache_frame_c65f0b71934d64e244a59bc45ea34528_12;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_c65f0b71934d64e244a59bc45ea34528_12);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_c65f0b71934d64e244a59bc45ea34528_12) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[103];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__14_HTTPMovedPermanently_191, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 192;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c65f0b71934d64e244a59bc45ea34528_12);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_11;

        frame_exception_exit_12:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c65f0b71934d64e244a59bc45ea34528_12);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_c65f0b71934d64e244a59bc45ea34528_12, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_c65f0b71934d64e244a59bc45ea34528_12->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_c65f0b71934d64e244a59bc45ea34528_12, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_c65f0b71934d64e244a59bc45ea34528_12,
            type_description_2,
            outline_13_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_c65f0b71934d64e244a59bc45ea34528_12 == cache_frame_c65f0b71934d64e244a59bc45ea34528_12) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_c65f0b71934d64e244a59bc45ea34528_12);
            cache_frame_c65f0b71934d64e244a59bc45ea34528_12 = NULL;
        }

        assertFrameObject(frame_c65f0b71934d64e244a59bc45ea34528_12);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_11;

        frame_no_exception_11:;
        goto skip_nested_handling_11;
        nested_frame_exit_11:;

        goto try_except_handler_44;
        skip_nested_handling_11:;
        {
            nuitka_bool tmp_condition_result_84;
            PyObject *tmp_cmp_expr_left_14;
            PyObject *tmp_cmp_expr_right_14;
            CHECK_OBJECT(tmp_class_creation_14__bases);
            tmp_cmp_expr_left_14 = tmp_class_creation_14__bases;
            CHECK_OBJECT(tmp_class_creation_14__bases_orig);
            tmp_cmp_expr_right_14 = tmp_class_creation_14__bases_orig;
            tmp_condition_result_84 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_14, tmp_cmp_expr_right_14);
            if (tmp_condition_result_84 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 191;

                goto try_except_handler_44;
            }
            if (tmp_condition_result_84 == NUITKA_BOOL_TRUE) {
                goto branch_yes_56;
            } else {
                goto branch_no_56;
            }
            assert(tmp_condition_result_84 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_56:;
        CHECK_OBJECT(tmp_class_creation_14__bases_orig);
        tmp_dictset_value = tmp_class_creation_14__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__14_HTTPMovedPermanently_191, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 191;

            goto try_except_handler_44;
        }
        branch_no_56:;
        {
            PyObject *tmp_assign_source_129;
            PyObject *tmp_called_value_28;
            PyObject *tmp_args_value_28;
            PyObject *tmp_tuple_element_56;
            PyObject *tmp_kwargs_value_28;
            CHECK_OBJECT(tmp_class_creation_14__metaclass);
            tmp_called_value_28 = tmp_class_creation_14__metaclass;
            tmp_tuple_element_56 = mod_consts[102];
            tmp_args_value_28 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_28, 0, tmp_tuple_element_56);
            CHECK_OBJECT(tmp_class_creation_14__bases);
            tmp_tuple_element_56 = tmp_class_creation_14__bases;
            PyTuple_SET_ITEM0(tmp_args_value_28, 1, tmp_tuple_element_56);
            tmp_tuple_element_56 = locals_aiohttp$web_exceptions$$$class__14_HTTPMovedPermanently_191;
            PyTuple_SET_ITEM0(tmp_args_value_28, 2, tmp_tuple_element_56);
            CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
            tmp_kwargs_value_28 = tmp_class_creation_14__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 191;
            tmp_assign_source_129 = CALL_FUNCTION(tmp_called_value_28, tmp_args_value_28, tmp_kwargs_value_28);
            Py_DECREF(tmp_args_value_28);
            if (tmp_assign_source_129 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 191;

                goto try_except_handler_44;
            }
            assert(outline_13_var___class__ == NULL);
            outline_13_var___class__ = tmp_assign_source_129;
        }
        CHECK_OBJECT(outline_13_var___class__);
        tmp_assign_source_128 = outline_13_var___class__;
        Py_INCREF(tmp_assign_source_128);
        goto try_return_handler_44;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_44:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__14_HTTPMovedPermanently_191);
        locals_aiohttp$web_exceptions$$$class__14_HTTPMovedPermanently_191 = NULL;
        goto try_return_handler_43;
        // Exception handler code:
        try_except_handler_44:;
        exception_keeper_type_42 = exception_type;
        exception_keeper_value_42 = exception_value;
        exception_keeper_tb_42 = exception_tb;
        exception_keeper_lineno_42 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__14_HTTPMovedPermanently_191);
        locals_aiohttp$web_exceptions$$$class__14_HTTPMovedPermanently_191 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_42;
        exception_value = exception_keeper_value_42;
        exception_tb = exception_keeper_tb_42;
        exception_lineno = exception_keeper_lineno_42;

        goto try_except_handler_43;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_43:;
        CHECK_OBJECT(outline_13_var___class__);
        Py_DECREF(outline_13_var___class__);
        outline_13_var___class__ = NULL;
        goto outline_result_14;
        // Exception handler code:
        try_except_handler_43:;
        exception_keeper_type_43 = exception_type;
        exception_keeper_value_43 = exception_value;
        exception_keeper_tb_43 = exception_tb;
        exception_keeper_lineno_43 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_43;
        exception_value = exception_keeper_value_43;
        exception_tb = exception_keeper_tb_43;
        exception_lineno = exception_keeper_lineno_43;

        goto outline_exception_14;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_14:;
        exception_lineno = 191;
        goto try_except_handler_42;
        outline_result_14:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[102], tmp_assign_source_128);
    }
    goto try_end_16;
    // Exception handler code:
    try_except_handler_42:;
    exception_keeper_type_44 = exception_type;
    exception_keeper_value_44 = exception_value;
    exception_keeper_tb_44 = exception_tb;
    exception_keeper_lineno_44 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_14__bases_orig);
    tmp_class_creation_14__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_14__bases);
    tmp_class_creation_14__bases = NULL;
    Py_XDECREF(tmp_class_creation_14__class_decl_dict);
    tmp_class_creation_14__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_14__metaclass);
    tmp_class_creation_14__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_14__prepared);
    tmp_class_creation_14__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_44;
    exception_value = exception_keeper_value_44;
    exception_tb = exception_keeper_tb_44;
    exception_lineno = exception_keeper_lineno_44;

    goto frame_exception_exit_1;
    // End of try:
    try_end_16:;
    CHECK_OBJECT(tmp_class_creation_14__bases_orig);
    Py_DECREF(tmp_class_creation_14__bases_orig);
    tmp_class_creation_14__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_14__bases);
    Py_DECREF(tmp_class_creation_14__bases);
    tmp_class_creation_14__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
    Py_DECREF(tmp_class_creation_14__class_decl_dict);
    tmp_class_creation_14__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_14__metaclass);
    Py_DECREF(tmp_class_creation_14__metaclass);
    tmp_class_creation_14__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_14__prepared);
    Py_DECREF(tmp_class_creation_14__prepared);
    tmp_class_creation_14__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_130;
        PyObject *tmp_tuple_element_57;
        tmp_tuple_element_57 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[98]);

        if (unlikely(tmp_tuple_element_57 == NULL)) {
            tmp_tuple_element_57 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[98]);
        }

        if (tmp_tuple_element_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 195;

            goto try_except_handler_45;
        }
        tmp_assign_source_130 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_130, 0, tmp_tuple_element_57);
        assert(tmp_class_creation_15__bases_orig == NULL);
        tmp_class_creation_15__bases_orig = tmp_assign_source_130;
    }
    {
        PyObject *tmp_assign_source_131;
        PyObject *tmp_dircall_arg1_15;
        CHECK_OBJECT(tmp_class_creation_15__bases_orig);
        tmp_dircall_arg1_15 = tmp_class_creation_15__bases_orig;
        Py_INCREF(tmp_dircall_arg1_15);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_15};
            tmp_assign_source_131 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_131 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 195;

            goto try_except_handler_45;
        }
        assert(tmp_class_creation_15__bases == NULL);
        tmp_class_creation_15__bases = tmp_assign_source_131;
    }
    {
        PyObject *tmp_assign_source_132;
        tmp_assign_source_132 = PyDict_New();
        assert(tmp_class_creation_15__class_decl_dict == NULL);
        tmp_class_creation_15__class_decl_dict = tmp_assign_source_132;
    }
    {
        PyObject *tmp_assign_source_133;
        PyObject *tmp_metaclass_value_15;
        bool tmp_condition_result_85;
        PyObject *tmp_key_value_43;
        PyObject *tmp_dict_arg_value_43;
        PyObject *tmp_dict_arg_value_44;
        PyObject *tmp_key_value_44;
        nuitka_bool tmp_condition_result_86;
        int tmp_truth_name_15;
        PyObject *tmp_type_arg_29;
        PyObject *tmp_expression_value_79;
        PyObject *tmp_subscript_value_23;
        PyObject *tmp_bases_value_15;
        tmp_key_value_43 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
        tmp_dict_arg_value_43 = tmp_class_creation_15__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_43, tmp_key_value_43);
        assert(!(tmp_res == -1));
        tmp_condition_result_85 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_85 != false) {
            goto condexpr_true_29;
        } else {
            goto condexpr_false_29;
        }
        condexpr_true_29:;
        CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
        tmp_dict_arg_value_44 = tmp_class_creation_15__class_decl_dict;
        tmp_key_value_44 = mod_consts[57];
        tmp_metaclass_value_15 = DICT_GET_ITEM0(tmp_dict_arg_value_44, tmp_key_value_44);
        if (tmp_metaclass_value_15 == NULL) {
            tmp_metaclass_value_15 = Py_None;
        }
        assert(!(tmp_metaclass_value_15 == NULL));
        Py_INCREF(tmp_metaclass_value_15);
        goto condexpr_end_29;
        condexpr_false_29:;
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_truth_name_15 = CHECK_IF_TRUE(tmp_class_creation_15__bases);
        if (tmp_truth_name_15 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 195;

            goto try_except_handler_45;
        }
        tmp_condition_result_86 = tmp_truth_name_15 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_86 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_30;
        } else {
            goto condexpr_false_30;
        }
        condexpr_true_30:;
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_expression_value_79 = tmp_class_creation_15__bases;
        tmp_subscript_value_23 = mod_consts[39];
        tmp_type_arg_29 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_79, tmp_subscript_value_23, 0);
        if (tmp_type_arg_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 195;

            goto try_except_handler_45;
        }
        tmp_metaclass_value_15 = BUILTIN_TYPE1(tmp_type_arg_29);
        Py_DECREF(tmp_type_arg_29);
        if (tmp_metaclass_value_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 195;

            goto try_except_handler_45;
        }
        goto condexpr_end_30;
        condexpr_false_30:;
        tmp_metaclass_value_15 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_15);
        condexpr_end_30:;
        condexpr_end_29:;
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_bases_value_15 = tmp_class_creation_15__bases;
        tmp_assign_source_133 = SELECT_METACLASS(tmp_metaclass_value_15, tmp_bases_value_15);
        Py_DECREF(tmp_metaclass_value_15);
        if (tmp_assign_source_133 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 195;

            goto try_except_handler_45;
        }
        assert(tmp_class_creation_15__metaclass == NULL);
        tmp_class_creation_15__metaclass = tmp_assign_source_133;
    }
    {
        bool tmp_condition_result_87;
        PyObject *tmp_key_value_45;
        PyObject *tmp_dict_arg_value_45;
        tmp_key_value_45 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
        tmp_dict_arg_value_45 = tmp_class_creation_15__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_45, tmp_key_value_45);
        assert(!(tmp_res == -1));
        tmp_condition_result_87 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_87 != false) {
            goto branch_yes_57;
        } else {
            goto branch_no_57;
        }
    }
    branch_yes_57:;
    CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_15__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 195;

        goto try_except_handler_45;
    }
    branch_no_57:;
    {
        nuitka_bool tmp_condition_result_88;
        PyObject *tmp_expression_value_80;
        CHECK_OBJECT(tmp_class_creation_15__metaclass);
        tmp_expression_value_80 = tmp_class_creation_15__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_80, mod_consts[58]);
        tmp_condition_result_88 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_88 == NUITKA_BOOL_TRUE) {
            goto branch_yes_58;
        } else {
            goto branch_no_58;
        }
    }
    branch_yes_58:;
    {
        PyObject *tmp_assign_source_134;
        PyObject *tmp_called_value_29;
        PyObject *tmp_expression_value_81;
        PyObject *tmp_args_value_29;
        PyObject *tmp_tuple_element_58;
        PyObject *tmp_kwargs_value_29;
        CHECK_OBJECT(tmp_class_creation_15__metaclass);
        tmp_expression_value_81 = tmp_class_creation_15__metaclass;
        tmp_called_value_29 = LOOKUP_ATTRIBUTE(tmp_expression_value_81, mod_consts[58]);
        if (tmp_called_value_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 195;

            goto try_except_handler_45;
        }
        tmp_tuple_element_58 = mod_consts[104];
        tmp_args_value_29 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_29, 0, tmp_tuple_element_58);
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_tuple_element_58 = tmp_class_creation_15__bases;
        PyTuple_SET_ITEM0(tmp_args_value_29, 1, tmp_tuple_element_58);
        CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
        tmp_kwargs_value_29 = tmp_class_creation_15__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 195;
        tmp_assign_source_134 = CALL_FUNCTION(tmp_called_value_29, tmp_args_value_29, tmp_kwargs_value_29);
        Py_DECREF(tmp_called_value_29);
        Py_DECREF(tmp_args_value_29);
        if (tmp_assign_source_134 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 195;

            goto try_except_handler_45;
        }
        assert(tmp_class_creation_15__prepared == NULL);
        tmp_class_creation_15__prepared = tmp_assign_source_134;
    }
    {
        bool tmp_condition_result_89;
        PyObject *tmp_operand_value_15;
        PyObject *tmp_expression_value_82;
        CHECK_OBJECT(tmp_class_creation_15__prepared);
        tmp_expression_value_82 = tmp_class_creation_15__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_82, mod_consts[60]);
        tmp_operand_value_15 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_15);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 195;

            goto try_except_handler_45;
        }
        tmp_condition_result_89 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_89 != false) {
            goto branch_yes_59;
        } else {
            goto branch_no_59;
        }
    }
    branch_yes_59:;
    {
        PyObject *tmp_raise_type_15;
        PyObject *tmp_raise_value_15;
        PyObject *tmp_left_value_15;
        PyObject *tmp_right_value_15;
        PyObject *tmp_tuple_element_59;
        PyObject *tmp_getattr_target_15;
        PyObject *tmp_getattr_attr_15;
        PyObject *tmp_getattr_default_15;
        tmp_raise_type_15 = PyExc_TypeError;
        tmp_left_value_15 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_15__metaclass);
        tmp_getattr_target_15 = tmp_class_creation_15__metaclass;
        tmp_getattr_attr_15 = mod_consts[62];
        tmp_getattr_default_15 = mod_consts[63];
        tmp_tuple_element_59 = BUILTIN_GETATTR(tmp_getattr_target_15, tmp_getattr_attr_15, tmp_getattr_default_15);
        if (tmp_tuple_element_59 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 195;

            goto try_except_handler_45;
        }
        tmp_right_value_15 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_83;
            PyObject *tmp_type_arg_30;
            PyTuple_SET_ITEM(tmp_right_value_15, 0, tmp_tuple_element_59);
            CHECK_OBJECT(tmp_class_creation_15__prepared);
            tmp_type_arg_30 = tmp_class_creation_15__prepared;
            tmp_expression_value_83 = BUILTIN_TYPE1(tmp_type_arg_30);
            assert(!(tmp_expression_value_83 == NULL));
            tmp_tuple_element_59 = LOOKUP_ATTRIBUTE(tmp_expression_value_83, mod_consts[62]);
            Py_DECREF(tmp_expression_value_83);
            if (tmp_tuple_element_59 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 195;

                goto tuple_build_exception_15;
            }
            PyTuple_SET_ITEM(tmp_right_value_15, 1, tmp_tuple_element_59);
        }
        goto tuple_build_noexception_15;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_15:;
        Py_DECREF(tmp_right_value_15);
        goto try_except_handler_45;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_15:;
        tmp_raise_value_15 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_15, tmp_right_value_15);
        Py_DECREF(tmp_right_value_15);
        if (tmp_raise_value_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 195;

            goto try_except_handler_45;
        }
        exception_type = tmp_raise_type_15;
        Py_INCREF(tmp_raise_type_15);
        exception_value = tmp_raise_value_15;
        exception_lineno = 195;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_45;
    }
    branch_no_59:;
    goto branch_end_58;
    branch_no_58:;
    {
        PyObject *tmp_assign_source_135;
        tmp_assign_source_135 = PyDict_New();
        assert(tmp_class_creation_15__prepared == NULL);
        tmp_class_creation_15__prepared = tmp_assign_source_135;
    }
    branch_end_58:;
    {
        PyObject *tmp_assign_source_136;
        {
            PyObject *tmp_set_locals_15;
            CHECK_OBJECT(tmp_class_creation_15__prepared);
            tmp_set_locals_15 = tmp_class_creation_15__prepared;
            locals_aiohttp$web_exceptions$$$class__15_HTTPFound_195 = tmp_set_locals_15;
            Py_INCREF(tmp_set_locals_15);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__15_HTTPFound_195, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 195;

            goto try_except_handler_47;
        }
        tmp_dictset_value = mod_consts[104];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__15_HTTPFound_195, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 195;

            goto try_except_handler_47;
        }
        if (isFrameUnusable(cache_frame_181f49a2cef869dc2fa564051fc94c90_13)) {
            Py_XDECREF(cache_frame_181f49a2cef869dc2fa564051fc94c90_13);

#if _DEBUG_REFCOUNTS
            if (cache_frame_181f49a2cef869dc2fa564051fc94c90_13 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_181f49a2cef869dc2fa564051fc94c90_13 = MAKE_FUNCTION_FRAME(codeobj_181f49a2cef869dc2fa564051fc94c90, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_181f49a2cef869dc2fa564051fc94c90_13->m_type_description == NULL);
        frame_181f49a2cef869dc2fa564051fc94c90_13 = cache_frame_181f49a2cef869dc2fa564051fc94c90_13;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_181f49a2cef869dc2fa564051fc94c90_13);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_181f49a2cef869dc2fa564051fc94c90_13) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[105];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__15_HTTPFound_195, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 196;
            type_description_2 = "o";
            goto frame_exception_exit_13;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_181f49a2cef869dc2fa564051fc94c90_13);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_12;

        frame_exception_exit_13:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_181f49a2cef869dc2fa564051fc94c90_13);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_181f49a2cef869dc2fa564051fc94c90_13, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_181f49a2cef869dc2fa564051fc94c90_13->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_181f49a2cef869dc2fa564051fc94c90_13, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_181f49a2cef869dc2fa564051fc94c90_13,
            type_description_2,
            outline_14_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_181f49a2cef869dc2fa564051fc94c90_13 == cache_frame_181f49a2cef869dc2fa564051fc94c90_13) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_181f49a2cef869dc2fa564051fc94c90_13);
            cache_frame_181f49a2cef869dc2fa564051fc94c90_13 = NULL;
        }

        assertFrameObject(frame_181f49a2cef869dc2fa564051fc94c90_13);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_12;

        frame_no_exception_12:;
        goto skip_nested_handling_12;
        nested_frame_exit_12:;

        goto try_except_handler_47;
        skip_nested_handling_12:;
        {
            nuitka_bool tmp_condition_result_90;
            PyObject *tmp_cmp_expr_left_15;
            PyObject *tmp_cmp_expr_right_15;
            CHECK_OBJECT(tmp_class_creation_15__bases);
            tmp_cmp_expr_left_15 = tmp_class_creation_15__bases;
            CHECK_OBJECT(tmp_class_creation_15__bases_orig);
            tmp_cmp_expr_right_15 = tmp_class_creation_15__bases_orig;
            tmp_condition_result_90 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_15, tmp_cmp_expr_right_15);
            if (tmp_condition_result_90 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 195;

                goto try_except_handler_47;
            }
            if (tmp_condition_result_90 == NUITKA_BOOL_TRUE) {
                goto branch_yes_60;
            } else {
                goto branch_no_60;
            }
            assert(tmp_condition_result_90 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_60:;
        CHECK_OBJECT(tmp_class_creation_15__bases_orig);
        tmp_dictset_value = tmp_class_creation_15__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__15_HTTPFound_195, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 195;

            goto try_except_handler_47;
        }
        branch_no_60:;
        {
            PyObject *tmp_assign_source_137;
            PyObject *tmp_called_value_30;
            PyObject *tmp_args_value_30;
            PyObject *tmp_tuple_element_60;
            PyObject *tmp_kwargs_value_30;
            CHECK_OBJECT(tmp_class_creation_15__metaclass);
            tmp_called_value_30 = tmp_class_creation_15__metaclass;
            tmp_tuple_element_60 = mod_consts[104];
            tmp_args_value_30 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_30, 0, tmp_tuple_element_60);
            CHECK_OBJECT(tmp_class_creation_15__bases);
            tmp_tuple_element_60 = tmp_class_creation_15__bases;
            PyTuple_SET_ITEM0(tmp_args_value_30, 1, tmp_tuple_element_60);
            tmp_tuple_element_60 = locals_aiohttp$web_exceptions$$$class__15_HTTPFound_195;
            PyTuple_SET_ITEM0(tmp_args_value_30, 2, tmp_tuple_element_60);
            CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
            tmp_kwargs_value_30 = tmp_class_creation_15__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 195;
            tmp_assign_source_137 = CALL_FUNCTION(tmp_called_value_30, tmp_args_value_30, tmp_kwargs_value_30);
            Py_DECREF(tmp_args_value_30);
            if (tmp_assign_source_137 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 195;

                goto try_except_handler_47;
            }
            assert(outline_14_var___class__ == NULL);
            outline_14_var___class__ = tmp_assign_source_137;
        }
        CHECK_OBJECT(outline_14_var___class__);
        tmp_assign_source_136 = outline_14_var___class__;
        Py_INCREF(tmp_assign_source_136);
        goto try_return_handler_47;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_47:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__15_HTTPFound_195);
        locals_aiohttp$web_exceptions$$$class__15_HTTPFound_195 = NULL;
        goto try_return_handler_46;
        // Exception handler code:
        try_except_handler_47:;
        exception_keeper_type_45 = exception_type;
        exception_keeper_value_45 = exception_value;
        exception_keeper_tb_45 = exception_tb;
        exception_keeper_lineno_45 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__15_HTTPFound_195);
        locals_aiohttp$web_exceptions$$$class__15_HTTPFound_195 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_45;
        exception_value = exception_keeper_value_45;
        exception_tb = exception_keeper_tb_45;
        exception_lineno = exception_keeper_lineno_45;

        goto try_except_handler_46;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_46:;
        CHECK_OBJECT(outline_14_var___class__);
        Py_DECREF(outline_14_var___class__);
        outline_14_var___class__ = NULL;
        goto outline_result_15;
        // Exception handler code:
        try_except_handler_46:;
        exception_keeper_type_46 = exception_type;
        exception_keeper_value_46 = exception_value;
        exception_keeper_tb_46 = exception_tb;
        exception_keeper_lineno_46 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_46;
        exception_value = exception_keeper_value_46;
        exception_tb = exception_keeper_tb_46;
        exception_lineno = exception_keeper_lineno_46;

        goto outline_exception_15;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_15:;
        exception_lineno = 195;
        goto try_except_handler_45;
        outline_result_15:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[104], tmp_assign_source_136);
    }
    goto try_end_17;
    // Exception handler code:
    try_except_handler_45:;
    exception_keeper_type_47 = exception_type;
    exception_keeper_value_47 = exception_value;
    exception_keeper_tb_47 = exception_tb;
    exception_keeper_lineno_47 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_15__bases_orig);
    tmp_class_creation_15__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_15__bases);
    tmp_class_creation_15__bases = NULL;
    Py_XDECREF(tmp_class_creation_15__class_decl_dict);
    tmp_class_creation_15__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_15__metaclass);
    tmp_class_creation_15__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_15__prepared);
    tmp_class_creation_15__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_47;
    exception_value = exception_keeper_value_47;
    exception_tb = exception_keeper_tb_47;
    exception_lineno = exception_keeper_lineno_47;

    goto frame_exception_exit_1;
    // End of try:
    try_end_17:;
    CHECK_OBJECT(tmp_class_creation_15__bases_orig);
    Py_DECREF(tmp_class_creation_15__bases_orig);
    tmp_class_creation_15__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_15__bases);
    Py_DECREF(tmp_class_creation_15__bases);
    tmp_class_creation_15__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
    Py_DECREF(tmp_class_creation_15__class_decl_dict);
    tmp_class_creation_15__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_15__metaclass);
    Py_DECREF(tmp_class_creation_15__metaclass);
    tmp_class_creation_15__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_15__prepared);
    Py_DECREF(tmp_class_creation_15__prepared);
    tmp_class_creation_15__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_138;
        PyObject *tmp_tuple_element_61;
        tmp_tuple_element_61 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[98]);

        if (unlikely(tmp_tuple_element_61 == NULL)) {
            tmp_tuple_element_61 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[98]);
        }

        if (tmp_tuple_element_61 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_48;
        }
        tmp_assign_source_138 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_138, 0, tmp_tuple_element_61);
        assert(tmp_class_creation_16__bases_orig == NULL);
        tmp_class_creation_16__bases_orig = tmp_assign_source_138;
    }
    {
        PyObject *tmp_assign_source_139;
        PyObject *tmp_dircall_arg1_16;
        CHECK_OBJECT(tmp_class_creation_16__bases_orig);
        tmp_dircall_arg1_16 = tmp_class_creation_16__bases_orig;
        Py_INCREF(tmp_dircall_arg1_16);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_16};
            tmp_assign_source_139 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_139 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_48;
        }
        assert(tmp_class_creation_16__bases == NULL);
        tmp_class_creation_16__bases = tmp_assign_source_139;
    }
    {
        PyObject *tmp_assign_source_140;
        tmp_assign_source_140 = PyDict_New();
        assert(tmp_class_creation_16__class_decl_dict == NULL);
        tmp_class_creation_16__class_decl_dict = tmp_assign_source_140;
    }
    {
        PyObject *tmp_assign_source_141;
        PyObject *tmp_metaclass_value_16;
        bool tmp_condition_result_91;
        PyObject *tmp_key_value_46;
        PyObject *tmp_dict_arg_value_46;
        PyObject *tmp_dict_arg_value_47;
        PyObject *tmp_key_value_47;
        nuitka_bool tmp_condition_result_92;
        int tmp_truth_name_16;
        PyObject *tmp_type_arg_31;
        PyObject *tmp_expression_value_84;
        PyObject *tmp_subscript_value_24;
        PyObject *tmp_bases_value_16;
        tmp_key_value_46 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
        tmp_dict_arg_value_46 = tmp_class_creation_16__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_46, tmp_key_value_46);
        assert(!(tmp_res == -1));
        tmp_condition_result_91 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_91 != false) {
            goto condexpr_true_31;
        } else {
            goto condexpr_false_31;
        }
        condexpr_true_31:;
        CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
        tmp_dict_arg_value_47 = tmp_class_creation_16__class_decl_dict;
        tmp_key_value_47 = mod_consts[57];
        tmp_metaclass_value_16 = DICT_GET_ITEM0(tmp_dict_arg_value_47, tmp_key_value_47);
        if (tmp_metaclass_value_16 == NULL) {
            tmp_metaclass_value_16 = Py_None;
        }
        assert(!(tmp_metaclass_value_16 == NULL));
        Py_INCREF(tmp_metaclass_value_16);
        goto condexpr_end_31;
        condexpr_false_31:;
        CHECK_OBJECT(tmp_class_creation_16__bases);
        tmp_truth_name_16 = CHECK_IF_TRUE(tmp_class_creation_16__bases);
        if (tmp_truth_name_16 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_48;
        }
        tmp_condition_result_92 = tmp_truth_name_16 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_92 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_32;
        } else {
            goto condexpr_false_32;
        }
        condexpr_true_32:;
        CHECK_OBJECT(tmp_class_creation_16__bases);
        tmp_expression_value_84 = tmp_class_creation_16__bases;
        tmp_subscript_value_24 = mod_consts[39];
        tmp_type_arg_31 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_84, tmp_subscript_value_24, 0);
        if (tmp_type_arg_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_48;
        }
        tmp_metaclass_value_16 = BUILTIN_TYPE1(tmp_type_arg_31);
        Py_DECREF(tmp_type_arg_31);
        if (tmp_metaclass_value_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_48;
        }
        goto condexpr_end_32;
        condexpr_false_32:;
        tmp_metaclass_value_16 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_16);
        condexpr_end_32:;
        condexpr_end_31:;
        CHECK_OBJECT(tmp_class_creation_16__bases);
        tmp_bases_value_16 = tmp_class_creation_16__bases;
        tmp_assign_source_141 = SELECT_METACLASS(tmp_metaclass_value_16, tmp_bases_value_16);
        Py_DECREF(tmp_metaclass_value_16);
        if (tmp_assign_source_141 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_48;
        }
        assert(tmp_class_creation_16__metaclass == NULL);
        tmp_class_creation_16__metaclass = tmp_assign_source_141;
    }
    {
        bool tmp_condition_result_93;
        PyObject *tmp_key_value_48;
        PyObject *tmp_dict_arg_value_48;
        tmp_key_value_48 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
        tmp_dict_arg_value_48 = tmp_class_creation_16__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_48, tmp_key_value_48);
        assert(!(tmp_res == -1));
        tmp_condition_result_93 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_93 != false) {
            goto branch_yes_61;
        } else {
            goto branch_no_61;
        }
    }
    branch_yes_61:;
    CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_16__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 201;

        goto try_except_handler_48;
    }
    branch_no_61:;
    {
        nuitka_bool tmp_condition_result_94;
        PyObject *tmp_expression_value_85;
        CHECK_OBJECT(tmp_class_creation_16__metaclass);
        tmp_expression_value_85 = tmp_class_creation_16__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_85, mod_consts[58]);
        tmp_condition_result_94 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_94 == NUITKA_BOOL_TRUE) {
            goto branch_yes_62;
        } else {
            goto branch_no_62;
        }
    }
    branch_yes_62:;
    {
        PyObject *tmp_assign_source_142;
        PyObject *tmp_called_value_31;
        PyObject *tmp_expression_value_86;
        PyObject *tmp_args_value_31;
        PyObject *tmp_tuple_element_62;
        PyObject *tmp_kwargs_value_31;
        CHECK_OBJECT(tmp_class_creation_16__metaclass);
        tmp_expression_value_86 = tmp_class_creation_16__metaclass;
        tmp_called_value_31 = LOOKUP_ATTRIBUTE(tmp_expression_value_86, mod_consts[58]);
        if (tmp_called_value_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_48;
        }
        tmp_tuple_element_62 = mod_consts[106];
        tmp_args_value_31 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_31, 0, tmp_tuple_element_62);
        CHECK_OBJECT(tmp_class_creation_16__bases);
        tmp_tuple_element_62 = tmp_class_creation_16__bases;
        PyTuple_SET_ITEM0(tmp_args_value_31, 1, tmp_tuple_element_62);
        CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
        tmp_kwargs_value_31 = tmp_class_creation_16__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 201;
        tmp_assign_source_142 = CALL_FUNCTION(tmp_called_value_31, tmp_args_value_31, tmp_kwargs_value_31);
        Py_DECREF(tmp_called_value_31);
        Py_DECREF(tmp_args_value_31);
        if (tmp_assign_source_142 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_48;
        }
        assert(tmp_class_creation_16__prepared == NULL);
        tmp_class_creation_16__prepared = tmp_assign_source_142;
    }
    {
        bool tmp_condition_result_95;
        PyObject *tmp_operand_value_16;
        PyObject *tmp_expression_value_87;
        CHECK_OBJECT(tmp_class_creation_16__prepared);
        tmp_expression_value_87 = tmp_class_creation_16__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_87, mod_consts[60]);
        tmp_operand_value_16 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_16);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_48;
        }
        tmp_condition_result_95 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_95 != false) {
            goto branch_yes_63;
        } else {
            goto branch_no_63;
        }
    }
    branch_yes_63:;
    {
        PyObject *tmp_raise_type_16;
        PyObject *tmp_raise_value_16;
        PyObject *tmp_left_value_16;
        PyObject *tmp_right_value_16;
        PyObject *tmp_tuple_element_63;
        PyObject *tmp_getattr_target_16;
        PyObject *tmp_getattr_attr_16;
        PyObject *tmp_getattr_default_16;
        tmp_raise_type_16 = PyExc_TypeError;
        tmp_left_value_16 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_16__metaclass);
        tmp_getattr_target_16 = tmp_class_creation_16__metaclass;
        tmp_getattr_attr_16 = mod_consts[62];
        tmp_getattr_default_16 = mod_consts[63];
        tmp_tuple_element_63 = BUILTIN_GETATTR(tmp_getattr_target_16, tmp_getattr_attr_16, tmp_getattr_default_16);
        if (tmp_tuple_element_63 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_48;
        }
        tmp_right_value_16 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_88;
            PyObject *tmp_type_arg_32;
            PyTuple_SET_ITEM(tmp_right_value_16, 0, tmp_tuple_element_63);
            CHECK_OBJECT(tmp_class_creation_16__prepared);
            tmp_type_arg_32 = tmp_class_creation_16__prepared;
            tmp_expression_value_88 = BUILTIN_TYPE1(tmp_type_arg_32);
            assert(!(tmp_expression_value_88 == NULL));
            tmp_tuple_element_63 = LOOKUP_ATTRIBUTE(tmp_expression_value_88, mod_consts[62]);
            Py_DECREF(tmp_expression_value_88);
            if (tmp_tuple_element_63 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 201;

                goto tuple_build_exception_16;
            }
            PyTuple_SET_ITEM(tmp_right_value_16, 1, tmp_tuple_element_63);
        }
        goto tuple_build_noexception_16;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_16:;
        Py_DECREF(tmp_right_value_16);
        goto try_except_handler_48;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_16:;
        tmp_raise_value_16 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_16, tmp_right_value_16);
        Py_DECREF(tmp_right_value_16);
        if (tmp_raise_value_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_48;
        }
        exception_type = tmp_raise_type_16;
        Py_INCREF(tmp_raise_type_16);
        exception_value = tmp_raise_value_16;
        exception_lineno = 201;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_48;
    }
    branch_no_63:;
    goto branch_end_62;
    branch_no_62:;
    {
        PyObject *tmp_assign_source_143;
        tmp_assign_source_143 = PyDict_New();
        assert(tmp_class_creation_16__prepared == NULL);
        tmp_class_creation_16__prepared = tmp_assign_source_143;
    }
    branch_end_62:;
    {
        PyObject *tmp_assign_source_144;
        {
            PyObject *tmp_set_locals_16;
            CHECK_OBJECT(tmp_class_creation_16__prepared);
            tmp_set_locals_16 = tmp_class_creation_16__prepared;
            locals_aiohttp$web_exceptions$$$class__16_HTTPSeeOther_201 = tmp_set_locals_16;
            Py_INCREF(tmp_set_locals_16);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__16_HTTPSeeOther_201, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_50;
        }
        tmp_dictset_value = mod_consts[106];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__16_HTTPSeeOther_201, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_50;
        }
        if (isFrameUnusable(cache_frame_c9eeeb2528898d4f0d2226f2150e7100_14)) {
            Py_XDECREF(cache_frame_c9eeeb2528898d4f0d2226f2150e7100_14);

#if _DEBUG_REFCOUNTS
            if (cache_frame_c9eeeb2528898d4f0d2226f2150e7100_14 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_c9eeeb2528898d4f0d2226f2150e7100_14 = MAKE_FUNCTION_FRAME(codeobj_c9eeeb2528898d4f0d2226f2150e7100, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_c9eeeb2528898d4f0d2226f2150e7100_14->m_type_description == NULL);
        frame_c9eeeb2528898d4f0d2226f2150e7100_14 = cache_frame_c9eeeb2528898d4f0d2226f2150e7100_14;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_c9eeeb2528898d4f0d2226f2150e7100_14);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_c9eeeb2528898d4f0d2226f2150e7100_14) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[107];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__16_HTTPSeeOther_201, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 202;
            type_description_2 = "o";
            goto frame_exception_exit_14;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c9eeeb2528898d4f0d2226f2150e7100_14);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_13;

        frame_exception_exit_14:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c9eeeb2528898d4f0d2226f2150e7100_14);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_c9eeeb2528898d4f0d2226f2150e7100_14, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_c9eeeb2528898d4f0d2226f2150e7100_14->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_c9eeeb2528898d4f0d2226f2150e7100_14, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_c9eeeb2528898d4f0d2226f2150e7100_14,
            type_description_2,
            outline_15_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_c9eeeb2528898d4f0d2226f2150e7100_14 == cache_frame_c9eeeb2528898d4f0d2226f2150e7100_14) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_c9eeeb2528898d4f0d2226f2150e7100_14);
            cache_frame_c9eeeb2528898d4f0d2226f2150e7100_14 = NULL;
        }

        assertFrameObject(frame_c9eeeb2528898d4f0d2226f2150e7100_14);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_13;

        frame_no_exception_13:;
        goto skip_nested_handling_13;
        nested_frame_exit_13:;

        goto try_except_handler_50;
        skip_nested_handling_13:;
        {
            nuitka_bool tmp_condition_result_96;
            PyObject *tmp_cmp_expr_left_16;
            PyObject *tmp_cmp_expr_right_16;
            CHECK_OBJECT(tmp_class_creation_16__bases);
            tmp_cmp_expr_left_16 = tmp_class_creation_16__bases;
            CHECK_OBJECT(tmp_class_creation_16__bases_orig);
            tmp_cmp_expr_right_16 = tmp_class_creation_16__bases_orig;
            tmp_condition_result_96 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_16, tmp_cmp_expr_right_16);
            if (tmp_condition_result_96 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 201;

                goto try_except_handler_50;
            }
            if (tmp_condition_result_96 == NUITKA_BOOL_TRUE) {
                goto branch_yes_64;
            } else {
                goto branch_no_64;
            }
            assert(tmp_condition_result_96 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_64:;
        CHECK_OBJECT(tmp_class_creation_16__bases_orig);
        tmp_dictset_value = tmp_class_creation_16__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__16_HTTPSeeOther_201, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_50;
        }
        branch_no_64:;
        {
            PyObject *tmp_assign_source_145;
            PyObject *tmp_called_value_32;
            PyObject *tmp_args_value_32;
            PyObject *tmp_tuple_element_64;
            PyObject *tmp_kwargs_value_32;
            CHECK_OBJECT(tmp_class_creation_16__metaclass);
            tmp_called_value_32 = tmp_class_creation_16__metaclass;
            tmp_tuple_element_64 = mod_consts[106];
            tmp_args_value_32 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_32, 0, tmp_tuple_element_64);
            CHECK_OBJECT(tmp_class_creation_16__bases);
            tmp_tuple_element_64 = tmp_class_creation_16__bases;
            PyTuple_SET_ITEM0(tmp_args_value_32, 1, tmp_tuple_element_64);
            tmp_tuple_element_64 = locals_aiohttp$web_exceptions$$$class__16_HTTPSeeOther_201;
            PyTuple_SET_ITEM0(tmp_args_value_32, 2, tmp_tuple_element_64);
            CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
            tmp_kwargs_value_32 = tmp_class_creation_16__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 201;
            tmp_assign_source_145 = CALL_FUNCTION(tmp_called_value_32, tmp_args_value_32, tmp_kwargs_value_32);
            Py_DECREF(tmp_args_value_32);
            if (tmp_assign_source_145 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 201;

                goto try_except_handler_50;
            }
            assert(outline_15_var___class__ == NULL);
            outline_15_var___class__ = tmp_assign_source_145;
        }
        CHECK_OBJECT(outline_15_var___class__);
        tmp_assign_source_144 = outline_15_var___class__;
        Py_INCREF(tmp_assign_source_144);
        goto try_return_handler_50;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_50:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__16_HTTPSeeOther_201);
        locals_aiohttp$web_exceptions$$$class__16_HTTPSeeOther_201 = NULL;
        goto try_return_handler_49;
        // Exception handler code:
        try_except_handler_50:;
        exception_keeper_type_48 = exception_type;
        exception_keeper_value_48 = exception_value;
        exception_keeper_tb_48 = exception_tb;
        exception_keeper_lineno_48 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__16_HTTPSeeOther_201);
        locals_aiohttp$web_exceptions$$$class__16_HTTPSeeOther_201 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_48;
        exception_value = exception_keeper_value_48;
        exception_tb = exception_keeper_tb_48;
        exception_lineno = exception_keeper_lineno_48;

        goto try_except_handler_49;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_49:;
        CHECK_OBJECT(outline_15_var___class__);
        Py_DECREF(outline_15_var___class__);
        outline_15_var___class__ = NULL;
        goto outline_result_16;
        // Exception handler code:
        try_except_handler_49:;
        exception_keeper_type_49 = exception_type;
        exception_keeper_value_49 = exception_value;
        exception_keeper_tb_49 = exception_tb;
        exception_keeper_lineno_49 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_49;
        exception_value = exception_keeper_value_49;
        exception_tb = exception_keeper_tb_49;
        exception_lineno = exception_keeper_lineno_49;

        goto outline_exception_16;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_16:;
        exception_lineno = 201;
        goto try_except_handler_48;
        outline_result_16:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[106], tmp_assign_source_144);
    }
    goto try_end_18;
    // Exception handler code:
    try_except_handler_48:;
    exception_keeper_type_50 = exception_type;
    exception_keeper_value_50 = exception_value;
    exception_keeper_tb_50 = exception_tb;
    exception_keeper_lineno_50 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_16__bases_orig);
    tmp_class_creation_16__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_16__bases);
    tmp_class_creation_16__bases = NULL;
    Py_XDECREF(tmp_class_creation_16__class_decl_dict);
    tmp_class_creation_16__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_16__metaclass);
    tmp_class_creation_16__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_16__prepared);
    tmp_class_creation_16__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_50;
    exception_value = exception_keeper_value_50;
    exception_tb = exception_keeper_tb_50;
    exception_lineno = exception_keeper_lineno_50;

    goto frame_exception_exit_1;
    // End of try:
    try_end_18:;
    CHECK_OBJECT(tmp_class_creation_16__bases_orig);
    Py_DECREF(tmp_class_creation_16__bases_orig);
    tmp_class_creation_16__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_16__bases);
    Py_DECREF(tmp_class_creation_16__bases);
    tmp_class_creation_16__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
    Py_DECREF(tmp_class_creation_16__class_decl_dict);
    tmp_class_creation_16__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_16__metaclass);
    Py_DECREF(tmp_class_creation_16__metaclass);
    tmp_class_creation_16__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_16__prepared);
    Py_DECREF(tmp_class_creation_16__prepared);
    tmp_class_creation_16__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_146;
        PyObject *tmp_tuple_element_65;
        tmp_tuple_element_65 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_tuple_element_65 == NULL)) {
            tmp_tuple_element_65 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_tuple_element_65 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 205;

            goto try_except_handler_51;
        }
        tmp_assign_source_146 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_146, 0, tmp_tuple_element_65);
        assert(tmp_class_creation_17__bases_orig == NULL);
        tmp_class_creation_17__bases_orig = tmp_assign_source_146;
    }
    {
        PyObject *tmp_assign_source_147;
        PyObject *tmp_dircall_arg1_17;
        CHECK_OBJECT(tmp_class_creation_17__bases_orig);
        tmp_dircall_arg1_17 = tmp_class_creation_17__bases_orig;
        Py_INCREF(tmp_dircall_arg1_17);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_17};
            tmp_assign_source_147 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_147 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 205;

            goto try_except_handler_51;
        }
        assert(tmp_class_creation_17__bases == NULL);
        tmp_class_creation_17__bases = tmp_assign_source_147;
    }
    {
        PyObject *tmp_assign_source_148;
        tmp_assign_source_148 = PyDict_New();
        assert(tmp_class_creation_17__class_decl_dict == NULL);
        tmp_class_creation_17__class_decl_dict = tmp_assign_source_148;
    }
    {
        PyObject *tmp_assign_source_149;
        PyObject *tmp_metaclass_value_17;
        bool tmp_condition_result_97;
        PyObject *tmp_key_value_49;
        PyObject *tmp_dict_arg_value_49;
        PyObject *tmp_dict_arg_value_50;
        PyObject *tmp_key_value_50;
        nuitka_bool tmp_condition_result_98;
        int tmp_truth_name_17;
        PyObject *tmp_type_arg_33;
        PyObject *tmp_expression_value_89;
        PyObject *tmp_subscript_value_25;
        PyObject *tmp_bases_value_17;
        tmp_key_value_49 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
        tmp_dict_arg_value_49 = tmp_class_creation_17__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_49, tmp_key_value_49);
        assert(!(tmp_res == -1));
        tmp_condition_result_97 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_97 != false) {
            goto condexpr_true_33;
        } else {
            goto condexpr_false_33;
        }
        condexpr_true_33:;
        CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
        tmp_dict_arg_value_50 = tmp_class_creation_17__class_decl_dict;
        tmp_key_value_50 = mod_consts[57];
        tmp_metaclass_value_17 = DICT_GET_ITEM0(tmp_dict_arg_value_50, tmp_key_value_50);
        if (tmp_metaclass_value_17 == NULL) {
            tmp_metaclass_value_17 = Py_None;
        }
        assert(!(tmp_metaclass_value_17 == NULL));
        Py_INCREF(tmp_metaclass_value_17);
        goto condexpr_end_33;
        condexpr_false_33:;
        CHECK_OBJECT(tmp_class_creation_17__bases);
        tmp_truth_name_17 = CHECK_IF_TRUE(tmp_class_creation_17__bases);
        if (tmp_truth_name_17 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 205;

            goto try_except_handler_51;
        }
        tmp_condition_result_98 = tmp_truth_name_17 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_98 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_34;
        } else {
            goto condexpr_false_34;
        }
        condexpr_true_34:;
        CHECK_OBJECT(tmp_class_creation_17__bases);
        tmp_expression_value_89 = tmp_class_creation_17__bases;
        tmp_subscript_value_25 = mod_consts[39];
        tmp_type_arg_33 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_89, tmp_subscript_value_25, 0);
        if (tmp_type_arg_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 205;

            goto try_except_handler_51;
        }
        tmp_metaclass_value_17 = BUILTIN_TYPE1(tmp_type_arg_33);
        Py_DECREF(tmp_type_arg_33);
        if (tmp_metaclass_value_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 205;

            goto try_except_handler_51;
        }
        goto condexpr_end_34;
        condexpr_false_34:;
        tmp_metaclass_value_17 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_17);
        condexpr_end_34:;
        condexpr_end_33:;
        CHECK_OBJECT(tmp_class_creation_17__bases);
        tmp_bases_value_17 = tmp_class_creation_17__bases;
        tmp_assign_source_149 = SELECT_METACLASS(tmp_metaclass_value_17, tmp_bases_value_17);
        Py_DECREF(tmp_metaclass_value_17);
        if (tmp_assign_source_149 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 205;

            goto try_except_handler_51;
        }
        assert(tmp_class_creation_17__metaclass == NULL);
        tmp_class_creation_17__metaclass = tmp_assign_source_149;
    }
    {
        bool tmp_condition_result_99;
        PyObject *tmp_key_value_51;
        PyObject *tmp_dict_arg_value_51;
        tmp_key_value_51 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
        tmp_dict_arg_value_51 = tmp_class_creation_17__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_51, tmp_key_value_51);
        assert(!(tmp_res == -1));
        tmp_condition_result_99 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_99 != false) {
            goto branch_yes_65;
        } else {
            goto branch_no_65;
        }
    }
    branch_yes_65:;
    CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_17__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 205;

        goto try_except_handler_51;
    }
    branch_no_65:;
    {
        nuitka_bool tmp_condition_result_100;
        PyObject *tmp_expression_value_90;
        CHECK_OBJECT(tmp_class_creation_17__metaclass);
        tmp_expression_value_90 = tmp_class_creation_17__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_90, mod_consts[58]);
        tmp_condition_result_100 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_100 == NUITKA_BOOL_TRUE) {
            goto branch_yes_66;
        } else {
            goto branch_no_66;
        }
    }
    branch_yes_66:;
    {
        PyObject *tmp_assign_source_150;
        PyObject *tmp_called_value_33;
        PyObject *tmp_expression_value_91;
        PyObject *tmp_args_value_33;
        PyObject *tmp_tuple_element_66;
        PyObject *tmp_kwargs_value_33;
        CHECK_OBJECT(tmp_class_creation_17__metaclass);
        tmp_expression_value_91 = tmp_class_creation_17__metaclass;
        tmp_called_value_33 = LOOKUP_ATTRIBUTE(tmp_expression_value_91, mod_consts[58]);
        if (tmp_called_value_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 205;

            goto try_except_handler_51;
        }
        tmp_tuple_element_66 = mod_consts[108];
        tmp_args_value_33 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_33, 0, tmp_tuple_element_66);
        CHECK_OBJECT(tmp_class_creation_17__bases);
        tmp_tuple_element_66 = tmp_class_creation_17__bases;
        PyTuple_SET_ITEM0(tmp_args_value_33, 1, tmp_tuple_element_66);
        CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
        tmp_kwargs_value_33 = tmp_class_creation_17__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 205;
        tmp_assign_source_150 = CALL_FUNCTION(tmp_called_value_33, tmp_args_value_33, tmp_kwargs_value_33);
        Py_DECREF(tmp_called_value_33);
        Py_DECREF(tmp_args_value_33);
        if (tmp_assign_source_150 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 205;

            goto try_except_handler_51;
        }
        assert(tmp_class_creation_17__prepared == NULL);
        tmp_class_creation_17__prepared = tmp_assign_source_150;
    }
    {
        bool tmp_condition_result_101;
        PyObject *tmp_operand_value_17;
        PyObject *tmp_expression_value_92;
        CHECK_OBJECT(tmp_class_creation_17__prepared);
        tmp_expression_value_92 = tmp_class_creation_17__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_92, mod_consts[60]);
        tmp_operand_value_17 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_17);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 205;

            goto try_except_handler_51;
        }
        tmp_condition_result_101 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_101 != false) {
            goto branch_yes_67;
        } else {
            goto branch_no_67;
        }
    }
    branch_yes_67:;
    {
        PyObject *tmp_raise_type_17;
        PyObject *tmp_raise_value_17;
        PyObject *tmp_left_value_17;
        PyObject *tmp_right_value_17;
        PyObject *tmp_tuple_element_67;
        PyObject *tmp_getattr_target_17;
        PyObject *tmp_getattr_attr_17;
        PyObject *tmp_getattr_default_17;
        tmp_raise_type_17 = PyExc_TypeError;
        tmp_left_value_17 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_17__metaclass);
        tmp_getattr_target_17 = tmp_class_creation_17__metaclass;
        tmp_getattr_attr_17 = mod_consts[62];
        tmp_getattr_default_17 = mod_consts[63];
        tmp_tuple_element_67 = BUILTIN_GETATTR(tmp_getattr_target_17, tmp_getattr_attr_17, tmp_getattr_default_17);
        if (tmp_tuple_element_67 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 205;

            goto try_except_handler_51;
        }
        tmp_right_value_17 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_93;
            PyObject *tmp_type_arg_34;
            PyTuple_SET_ITEM(tmp_right_value_17, 0, tmp_tuple_element_67);
            CHECK_OBJECT(tmp_class_creation_17__prepared);
            tmp_type_arg_34 = tmp_class_creation_17__prepared;
            tmp_expression_value_93 = BUILTIN_TYPE1(tmp_type_arg_34);
            assert(!(tmp_expression_value_93 == NULL));
            tmp_tuple_element_67 = LOOKUP_ATTRIBUTE(tmp_expression_value_93, mod_consts[62]);
            Py_DECREF(tmp_expression_value_93);
            if (tmp_tuple_element_67 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 205;

                goto tuple_build_exception_17;
            }
            PyTuple_SET_ITEM(tmp_right_value_17, 1, tmp_tuple_element_67);
        }
        goto tuple_build_noexception_17;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_17:;
        Py_DECREF(tmp_right_value_17);
        goto try_except_handler_51;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_17:;
        tmp_raise_value_17 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_17, tmp_right_value_17);
        Py_DECREF(tmp_right_value_17);
        if (tmp_raise_value_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 205;

            goto try_except_handler_51;
        }
        exception_type = tmp_raise_type_17;
        Py_INCREF(tmp_raise_type_17);
        exception_value = tmp_raise_value_17;
        exception_lineno = 205;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_51;
    }
    branch_no_67:;
    goto branch_end_66;
    branch_no_66:;
    {
        PyObject *tmp_assign_source_151;
        tmp_assign_source_151 = PyDict_New();
        assert(tmp_class_creation_17__prepared == NULL);
        tmp_class_creation_17__prepared = tmp_assign_source_151;
    }
    branch_end_66:;
    {
        PyObject *tmp_assign_source_152;
        {
            PyObject *tmp_set_locals_17;
            CHECK_OBJECT(tmp_class_creation_17__prepared);
            tmp_set_locals_17 = tmp_class_creation_17__prepared;
            locals_aiohttp$web_exceptions$$$class__17_HTTPNotModified_205 = tmp_set_locals_17;
            Py_INCREF(tmp_set_locals_17);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__17_HTTPNotModified_205, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 205;

            goto try_except_handler_53;
        }
        tmp_dictset_value = mod_consts[108];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__17_HTTPNotModified_205, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 205;

            goto try_except_handler_53;
        }
        if (isFrameUnusable(cache_frame_af43bceb6f688d49590950019f7fbcda_15)) {
            Py_XDECREF(cache_frame_af43bceb6f688d49590950019f7fbcda_15);

#if _DEBUG_REFCOUNTS
            if (cache_frame_af43bceb6f688d49590950019f7fbcda_15 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_af43bceb6f688d49590950019f7fbcda_15 = MAKE_FUNCTION_FRAME(codeobj_af43bceb6f688d49590950019f7fbcda, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_af43bceb6f688d49590950019f7fbcda_15->m_type_description == NULL);
        frame_af43bceb6f688d49590950019f7fbcda_15 = cache_frame_af43bceb6f688d49590950019f7fbcda_15;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_af43bceb6f688d49590950019f7fbcda_15);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_af43bceb6f688d49590950019f7fbcda_15) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[109];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__17_HTTPNotModified_205, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 207;
            type_description_2 = "o";
            goto frame_exception_exit_15;
        }
        tmp_dictset_value = Py_True;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__17_HTTPNotModified_205, mod_consts[10], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 208;
            type_description_2 = "o";
            goto frame_exception_exit_15;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_af43bceb6f688d49590950019f7fbcda_15);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_14;

        frame_exception_exit_15:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_af43bceb6f688d49590950019f7fbcda_15);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_af43bceb6f688d49590950019f7fbcda_15, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_af43bceb6f688d49590950019f7fbcda_15->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_af43bceb6f688d49590950019f7fbcda_15, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_af43bceb6f688d49590950019f7fbcda_15,
            type_description_2,
            outline_16_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_af43bceb6f688d49590950019f7fbcda_15 == cache_frame_af43bceb6f688d49590950019f7fbcda_15) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_af43bceb6f688d49590950019f7fbcda_15);
            cache_frame_af43bceb6f688d49590950019f7fbcda_15 = NULL;
        }

        assertFrameObject(frame_af43bceb6f688d49590950019f7fbcda_15);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_14;

        frame_no_exception_14:;
        goto skip_nested_handling_14;
        nested_frame_exit_14:;

        goto try_except_handler_53;
        skip_nested_handling_14:;
        {
            nuitka_bool tmp_condition_result_102;
            PyObject *tmp_cmp_expr_left_17;
            PyObject *tmp_cmp_expr_right_17;
            CHECK_OBJECT(tmp_class_creation_17__bases);
            tmp_cmp_expr_left_17 = tmp_class_creation_17__bases;
            CHECK_OBJECT(tmp_class_creation_17__bases_orig);
            tmp_cmp_expr_right_17 = tmp_class_creation_17__bases_orig;
            tmp_condition_result_102 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_17, tmp_cmp_expr_right_17);
            if (tmp_condition_result_102 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 205;

                goto try_except_handler_53;
            }
            if (tmp_condition_result_102 == NUITKA_BOOL_TRUE) {
                goto branch_yes_68;
            } else {
                goto branch_no_68;
            }
            assert(tmp_condition_result_102 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_68:;
        CHECK_OBJECT(tmp_class_creation_17__bases_orig);
        tmp_dictset_value = tmp_class_creation_17__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__17_HTTPNotModified_205, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 205;

            goto try_except_handler_53;
        }
        branch_no_68:;
        {
            PyObject *tmp_assign_source_153;
            PyObject *tmp_called_value_34;
            PyObject *tmp_args_value_34;
            PyObject *tmp_tuple_element_68;
            PyObject *tmp_kwargs_value_34;
            CHECK_OBJECT(tmp_class_creation_17__metaclass);
            tmp_called_value_34 = tmp_class_creation_17__metaclass;
            tmp_tuple_element_68 = mod_consts[108];
            tmp_args_value_34 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_34, 0, tmp_tuple_element_68);
            CHECK_OBJECT(tmp_class_creation_17__bases);
            tmp_tuple_element_68 = tmp_class_creation_17__bases;
            PyTuple_SET_ITEM0(tmp_args_value_34, 1, tmp_tuple_element_68);
            tmp_tuple_element_68 = locals_aiohttp$web_exceptions$$$class__17_HTTPNotModified_205;
            PyTuple_SET_ITEM0(tmp_args_value_34, 2, tmp_tuple_element_68);
            CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
            tmp_kwargs_value_34 = tmp_class_creation_17__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 205;
            tmp_assign_source_153 = CALL_FUNCTION(tmp_called_value_34, tmp_args_value_34, tmp_kwargs_value_34);
            Py_DECREF(tmp_args_value_34);
            if (tmp_assign_source_153 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 205;

                goto try_except_handler_53;
            }
            assert(outline_16_var___class__ == NULL);
            outline_16_var___class__ = tmp_assign_source_153;
        }
        CHECK_OBJECT(outline_16_var___class__);
        tmp_assign_source_152 = outline_16_var___class__;
        Py_INCREF(tmp_assign_source_152);
        goto try_return_handler_53;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_53:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__17_HTTPNotModified_205);
        locals_aiohttp$web_exceptions$$$class__17_HTTPNotModified_205 = NULL;
        goto try_return_handler_52;
        // Exception handler code:
        try_except_handler_53:;
        exception_keeper_type_51 = exception_type;
        exception_keeper_value_51 = exception_value;
        exception_keeper_tb_51 = exception_tb;
        exception_keeper_lineno_51 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__17_HTTPNotModified_205);
        locals_aiohttp$web_exceptions$$$class__17_HTTPNotModified_205 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_51;
        exception_value = exception_keeper_value_51;
        exception_tb = exception_keeper_tb_51;
        exception_lineno = exception_keeper_lineno_51;

        goto try_except_handler_52;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_52:;
        CHECK_OBJECT(outline_16_var___class__);
        Py_DECREF(outline_16_var___class__);
        outline_16_var___class__ = NULL;
        goto outline_result_17;
        // Exception handler code:
        try_except_handler_52:;
        exception_keeper_type_52 = exception_type;
        exception_keeper_value_52 = exception_value;
        exception_keeper_tb_52 = exception_tb;
        exception_keeper_lineno_52 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_52;
        exception_value = exception_keeper_value_52;
        exception_tb = exception_keeper_tb_52;
        exception_lineno = exception_keeper_lineno_52;

        goto outline_exception_17;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_17:;
        exception_lineno = 205;
        goto try_except_handler_51;
        outline_result_17:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[108], tmp_assign_source_152);
    }
    goto try_end_19;
    // Exception handler code:
    try_except_handler_51:;
    exception_keeper_type_53 = exception_type;
    exception_keeper_value_53 = exception_value;
    exception_keeper_tb_53 = exception_tb;
    exception_keeper_lineno_53 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_17__bases_orig);
    tmp_class_creation_17__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_17__bases);
    tmp_class_creation_17__bases = NULL;
    Py_XDECREF(tmp_class_creation_17__class_decl_dict);
    tmp_class_creation_17__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_17__metaclass);
    tmp_class_creation_17__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_17__prepared);
    tmp_class_creation_17__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_53;
    exception_value = exception_keeper_value_53;
    exception_tb = exception_keeper_tb_53;
    exception_lineno = exception_keeper_lineno_53;

    goto frame_exception_exit_1;
    // End of try:
    try_end_19:;
    CHECK_OBJECT(tmp_class_creation_17__bases_orig);
    Py_DECREF(tmp_class_creation_17__bases_orig);
    tmp_class_creation_17__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_17__bases);
    Py_DECREF(tmp_class_creation_17__bases);
    tmp_class_creation_17__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
    Py_DECREF(tmp_class_creation_17__class_decl_dict);
    tmp_class_creation_17__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_17__metaclass);
    Py_DECREF(tmp_class_creation_17__metaclass);
    tmp_class_creation_17__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_17__prepared);
    Py_DECREF(tmp_class_creation_17__prepared);
    tmp_class_creation_17__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_154;
        PyObject *tmp_tuple_element_69;
        tmp_tuple_element_69 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[98]);

        if (unlikely(tmp_tuple_element_69 == NULL)) {
            tmp_tuple_element_69 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[98]);
        }

        if (tmp_tuple_element_69 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;

            goto try_except_handler_54;
        }
        tmp_assign_source_154 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_154, 0, tmp_tuple_element_69);
        assert(tmp_class_creation_18__bases_orig == NULL);
        tmp_class_creation_18__bases_orig = tmp_assign_source_154;
    }
    {
        PyObject *tmp_assign_source_155;
        PyObject *tmp_dircall_arg1_18;
        CHECK_OBJECT(tmp_class_creation_18__bases_orig);
        tmp_dircall_arg1_18 = tmp_class_creation_18__bases_orig;
        Py_INCREF(tmp_dircall_arg1_18);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_18};
            tmp_assign_source_155 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_155 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;

            goto try_except_handler_54;
        }
        assert(tmp_class_creation_18__bases == NULL);
        tmp_class_creation_18__bases = tmp_assign_source_155;
    }
    {
        PyObject *tmp_assign_source_156;
        tmp_assign_source_156 = PyDict_New();
        assert(tmp_class_creation_18__class_decl_dict == NULL);
        tmp_class_creation_18__class_decl_dict = tmp_assign_source_156;
    }
    {
        PyObject *tmp_assign_source_157;
        PyObject *tmp_metaclass_value_18;
        bool tmp_condition_result_103;
        PyObject *tmp_key_value_52;
        PyObject *tmp_dict_arg_value_52;
        PyObject *tmp_dict_arg_value_53;
        PyObject *tmp_key_value_53;
        nuitka_bool tmp_condition_result_104;
        int tmp_truth_name_18;
        PyObject *tmp_type_arg_35;
        PyObject *tmp_expression_value_94;
        PyObject *tmp_subscript_value_26;
        PyObject *tmp_bases_value_18;
        tmp_key_value_52 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
        tmp_dict_arg_value_52 = tmp_class_creation_18__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_52, tmp_key_value_52);
        assert(!(tmp_res == -1));
        tmp_condition_result_103 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_103 != false) {
            goto condexpr_true_35;
        } else {
            goto condexpr_false_35;
        }
        condexpr_true_35:;
        CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
        tmp_dict_arg_value_53 = tmp_class_creation_18__class_decl_dict;
        tmp_key_value_53 = mod_consts[57];
        tmp_metaclass_value_18 = DICT_GET_ITEM0(tmp_dict_arg_value_53, tmp_key_value_53);
        if (tmp_metaclass_value_18 == NULL) {
            tmp_metaclass_value_18 = Py_None;
        }
        assert(!(tmp_metaclass_value_18 == NULL));
        Py_INCREF(tmp_metaclass_value_18);
        goto condexpr_end_35;
        condexpr_false_35:;
        CHECK_OBJECT(tmp_class_creation_18__bases);
        tmp_truth_name_18 = CHECK_IF_TRUE(tmp_class_creation_18__bases);
        if (tmp_truth_name_18 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;

            goto try_except_handler_54;
        }
        tmp_condition_result_104 = tmp_truth_name_18 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_104 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_36;
        } else {
            goto condexpr_false_36;
        }
        condexpr_true_36:;
        CHECK_OBJECT(tmp_class_creation_18__bases);
        tmp_expression_value_94 = tmp_class_creation_18__bases;
        tmp_subscript_value_26 = mod_consts[39];
        tmp_type_arg_35 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_94, tmp_subscript_value_26, 0);
        if (tmp_type_arg_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;

            goto try_except_handler_54;
        }
        tmp_metaclass_value_18 = BUILTIN_TYPE1(tmp_type_arg_35);
        Py_DECREF(tmp_type_arg_35);
        if (tmp_metaclass_value_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;

            goto try_except_handler_54;
        }
        goto condexpr_end_36;
        condexpr_false_36:;
        tmp_metaclass_value_18 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_18);
        condexpr_end_36:;
        condexpr_end_35:;
        CHECK_OBJECT(tmp_class_creation_18__bases);
        tmp_bases_value_18 = tmp_class_creation_18__bases;
        tmp_assign_source_157 = SELECT_METACLASS(tmp_metaclass_value_18, tmp_bases_value_18);
        Py_DECREF(tmp_metaclass_value_18);
        if (tmp_assign_source_157 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;

            goto try_except_handler_54;
        }
        assert(tmp_class_creation_18__metaclass == NULL);
        tmp_class_creation_18__metaclass = tmp_assign_source_157;
    }
    {
        bool tmp_condition_result_105;
        PyObject *tmp_key_value_54;
        PyObject *tmp_dict_arg_value_54;
        tmp_key_value_54 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
        tmp_dict_arg_value_54 = tmp_class_creation_18__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_54, tmp_key_value_54);
        assert(!(tmp_res == -1));
        tmp_condition_result_105 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_105 != false) {
            goto branch_yes_69;
        } else {
            goto branch_no_69;
        }
    }
    branch_yes_69:;
    CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_18__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 211;

        goto try_except_handler_54;
    }
    branch_no_69:;
    {
        nuitka_bool tmp_condition_result_106;
        PyObject *tmp_expression_value_95;
        CHECK_OBJECT(tmp_class_creation_18__metaclass);
        tmp_expression_value_95 = tmp_class_creation_18__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_95, mod_consts[58]);
        tmp_condition_result_106 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_106 == NUITKA_BOOL_TRUE) {
            goto branch_yes_70;
        } else {
            goto branch_no_70;
        }
    }
    branch_yes_70:;
    {
        PyObject *tmp_assign_source_158;
        PyObject *tmp_called_value_35;
        PyObject *tmp_expression_value_96;
        PyObject *tmp_args_value_35;
        PyObject *tmp_tuple_element_70;
        PyObject *tmp_kwargs_value_35;
        CHECK_OBJECT(tmp_class_creation_18__metaclass);
        tmp_expression_value_96 = tmp_class_creation_18__metaclass;
        tmp_called_value_35 = LOOKUP_ATTRIBUTE(tmp_expression_value_96, mod_consts[58]);
        if (tmp_called_value_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;

            goto try_except_handler_54;
        }
        tmp_tuple_element_70 = mod_consts[110];
        tmp_args_value_35 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_35, 0, tmp_tuple_element_70);
        CHECK_OBJECT(tmp_class_creation_18__bases);
        tmp_tuple_element_70 = tmp_class_creation_18__bases;
        PyTuple_SET_ITEM0(tmp_args_value_35, 1, tmp_tuple_element_70);
        CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
        tmp_kwargs_value_35 = tmp_class_creation_18__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 211;
        tmp_assign_source_158 = CALL_FUNCTION(tmp_called_value_35, tmp_args_value_35, tmp_kwargs_value_35);
        Py_DECREF(tmp_called_value_35);
        Py_DECREF(tmp_args_value_35);
        if (tmp_assign_source_158 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;

            goto try_except_handler_54;
        }
        assert(tmp_class_creation_18__prepared == NULL);
        tmp_class_creation_18__prepared = tmp_assign_source_158;
    }
    {
        bool tmp_condition_result_107;
        PyObject *tmp_operand_value_18;
        PyObject *tmp_expression_value_97;
        CHECK_OBJECT(tmp_class_creation_18__prepared);
        tmp_expression_value_97 = tmp_class_creation_18__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_97, mod_consts[60]);
        tmp_operand_value_18 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_18);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;

            goto try_except_handler_54;
        }
        tmp_condition_result_107 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_107 != false) {
            goto branch_yes_71;
        } else {
            goto branch_no_71;
        }
    }
    branch_yes_71:;
    {
        PyObject *tmp_raise_type_18;
        PyObject *tmp_raise_value_18;
        PyObject *tmp_left_value_18;
        PyObject *tmp_right_value_18;
        PyObject *tmp_tuple_element_71;
        PyObject *tmp_getattr_target_18;
        PyObject *tmp_getattr_attr_18;
        PyObject *tmp_getattr_default_18;
        tmp_raise_type_18 = PyExc_TypeError;
        tmp_left_value_18 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_18__metaclass);
        tmp_getattr_target_18 = tmp_class_creation_18__metaclass;
        tmp_getattr_attr_18 = mod_consts[62];
        tmp_getattr_default_18 = mod_consts[63];
        tmp_tuple_element_71 = BUILTIN_GETATTR(tmp_getattr_target_18, tmp_getattr_attr_18, tmp_getattr_default_18);
        if (tmp_tuple_element_71 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;

            goto try_except_handler_54;
        }
        tmp_right_value_18 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_98;
            PyObject *tmp_type_arg_36;
            PyTuple_SET_ITEM(tmp_right_value_18, 0, tmp_tuple_element_71);
            CHECK_OBJECT(tmp_class_creation_18__prepared);
            tmp_type_arg_36 = tmp_class_creation_18__prepared;
            tmp_expression_value_98 = BUILTIN_TYPE1(tmp_type_arg_36);
            assert(!(tmp_expression_value_98 == NULL));
            tmp_tuple_element_71 = LOOKUP_ATTRIBUTE(tmp_expression_value_98, mod_consts[62]);
            Py_DECREF(tmp_expression_value_98);
            if (tmp_tuple_element_71 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 211;

                goto tuple_build_exception_18;
            }
            PyTuple_SET_ITEM(tmp_right_value_18, 1, tmp_tuple_element_71);
        }
        goto tuple_build_noexception_18;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_18:;
        Py_DECREF(tmp_right_value_18);
        goto try_except_handler_54;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_18:;
        tmp_raise_value_18 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_18, tmp_right_value_18);
        Py_DECREF(tmp_right_value_18);
        if (tmp_raise_value_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;

            goto try_except_handler_54;
        }
        exception_type = tmp_raise_type_18;
        Py_INCREF(tmp_raise_type_18);
        exception_value = tmp_raise_value_18;
        exception_lineno = 211;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_54;
    }
    branch_no_71:;
    goto branch_end_70;
    branch_no_70:;
    {
        PyObject *tmp_assign_source_159;
        tmp_assign_source_159 = PyDict_New();
        assert(tmp_class_creation_18__prepared == NULL);
        tmp_class_creation_18__prepared = tmp_assign_source_159;
    }
    branch_end_70:;
    {
        PyObject *tmp_assign_source_160;
        {
            PyObject *tmp_set_locals_18;
            CHECK_OBJECT(tmp_class_creation_18__prepared);
            tmp_set_locals_18 = tmp_class_creation_18__prepared;
            locals_aiohttp$web_exceptions$$$class__18_HTTPUseProxy_211 = tmp_set_locals_18;
            Py_INCREF(tmp_set_locals_18);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__18_HTTPUseProxy_211, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;

            goto try_except_handler_56;
        }
        tmp_dictset_value = mod_consts[110];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__18_HTTPUseProxy_211, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;

            goto try_except_handler_56;
        }
        if (isFrameUnusable(cache_frame_59c8aa990f11ff133b6bd6c60f3d66ff_16)) {
            Py_XDECREF(cache_frame_59c8aa990f11ff133b6bd6c60f3d66ff_16);

#if _DEBUG_REFCOUNTS
            if (cache_frame_59c8aa990f11ff133b6bd6c60f3d66ff_16 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_59c8aa990f11ff133b6bd6c60f3d66ff_16 = MAKE_FUNCTION_FRAME(codeobj_59c8aa990f11ff133b6bd6c60f3d66ff, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_59c8aa990f11ff133b6bd6c60f3d66ff_16->m_type_description == NULL);
        frame_59c8aa990f11ff133b6bd6c60f3d66ff_16 = cache_frame_59c8aa990f11ff133b6bd6c60f3d66ff_16;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_59c8aa990f11ff133b6bd6c60f3d66ff_16);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_59c8aa990f11ff133b6bd6c60f3d66ff_16) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[111];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__18_HTTPUseProxy_211, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 213;
            type_description_2 = "o";
            goto frame_exception_exit_16;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_59c8aa990f11ff133b6bd6c60f3d66ff_16);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_15;

        frame_exception_exit_16:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_59c8aa990f11ff133b6bd6c60f3d66ff_16);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_59c8aa990f11ff133b6bd6c60f3d66ff_16, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_59c8aa990f11ff133b6bd6c60f3d66ff_16->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_59c8aa990f11ff133b6bd6c60f3d66ff_16, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_59c8aa990f11ff133b6bd6c60f3d66ff_16,
            type_description_2,
            outline_17_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_59c8aa990f11ff133b6bd6c60f3d66ff_16 == cache_frame_59c8aa990f11ff133b6bd6c60f3d66ff_16) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_59c8aa990f11ff133b6bd6c60f3d66ff_16);
            cache_frame_59c8aa990f11ff133b6bd6c60f3d66ff_16 = NULL;
        }

        assertFrameObject(frame_59c8aa990f11ff133b6bd6c60f3d66ff_16);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_15;

        frame_no_exception_15:;
        goto skip_nested_handling_15;
        nested_frame_exit_15:;

        goto try_except_handler_56;
        skip_nested_handling_15:;
        {
            nuitka_bool tmp_condition_result_108;
            PyObject *tmp_cmp_expr_left_18;
            PyObject *tmp_cmp_expr_right_18;
            CHECK_OBJECT(tmp_class_creation_18__bases);
            tmp_cmp_expr_left_18 = tmp_class_creation_18__bases;
            CHECK_OBJECT(tmp_class_creation_18__bases_orig);
            tmp_cmp_expr_right_18 = tmp_class_creation_18__bases_orig;
            tmp_condition_result_108 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_18, tmp_cmp_expr_right_18);
            if (tmp_condition_result_108 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 211;

                goto try_except_handler_56;
            }
            if (tmp_condition_result_108 == NUITKA_BOOL_TRUE) {
                goto branch_yes_72;
            } else {
                goto branch_no_72;
            }
            assert(tmp_condition_result_108 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_72:;
        CHECK_OBJECT(tmp_class_creation_18__bases_orig);
        tmp_dictset_value = tmp_class_creation_18__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__18_HTTPUseProxy_211, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;

            goto try_except_handler_56;
        }
        branch_no_72:;
        {
            PyObject *tmp_assign_source_161;
            PyObject *tmp_called_value_36;
            PyObject *tmp_args_value_36;
            PyObject *tmp_tuple_element_72;
            PyObject *tmp_kwargs_value_36;
            CHECK_OBJECT(tmp_class_creation_18__metaclass);
            tmp_called_value_36 = tmp_class_creation_18__metaclass;
            tmp_tuple_element_72 = mod_consts[110];
            tmp_args_value_36 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_36, 0, tmp_tuple_element_72);
            CHECK_OBJECT(tmp_class_creation_18__bases);
            tmp_tuple_element_72 = tmp_class_creation_18__bases;
            PyTuple_SET_ITEM0(tmp_args_value_36, 1, tmp_tuple_element_72);
            tmp_tuple_element_72 = locals_aiohttp$web_exceptions$$$class__18_HTTPUseProxy_211;
            PyTuple_SET_ITEM0(tmp_args_value_36, 2, tmp_tuple_element_72);
            CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
            tmp_kwargs_value_36 = tmp_class_creation_18__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 211;
            tmp_assign_source_161 = CALL_FUNCTION(tmp_called_value_36, tmp_args_value_36, tmp_kwargs_value_36);
            Py_DECREF(tmp_args_value_36);
            if (tmp_assign_source_161 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 211;

                goto try_except_handler_56;
            }
            assert(outline_17_var___class__ == NULL);
            outline_17_var___class__ = tmp_assign_source_161;
        }
        CHECK_OBJECT(outline_17_var___class__);
        tmp_assign_source_160 = outline_17_var___class__;
        Py_INCREF(tmp_assign_source_160);
        goto try_return_handler_56;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_56:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__18_HTTPUseProxy_211);
        locals_aiohttp$web_exceptions$$$class__18_HTTPUseProxy_211 = NULL;
        goto try_return_handler_55;
        // Exception handler code:
        try_except_handler_56:;
        exception_keeper_type_54 = exception_type;
        exception_keeper_value_54 = exception_value;
        exception_keeper_tb_54 = exception_tb;
        exception_keeper_lineno_54 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__18_HTTPUseProxy_211);
        locals_aiohttp$web_exceptions$$$class__18_HTTPUseProxy_211 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_54;
        exception_value = exception_keeper_value_54;
        exception_tb = exception_keeper_tb_54;
        exception_lineno = exception_keeper_lineno_54;

        goto try_except_handler_55;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_55:;
        CHECK_OBJECT(outline_17_var___class__);
        Py_DECREF(outline_17_var___class__);
        outline_17_var___class__ = NULL;
        goto outline_result_18;
        // Exception handler code:
        try_except_handler_55:;
        exception_keeper_type_55 = exception_type;
        exception_keeper_value_55 = exception_value;
        exception_keeper_tb_55 = exception_tb;
        exception_keeper_lineno_55 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_55;
        exception_value = exception_keeper_value_55;
        exception_tb = exception_keeper_tb_55;
        exception_lineno = exception_keeper_lineno_55;

        goto outline_exception_18;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_18:;
        exception_lineno = 211;
        goto try_except_handler_54;
        outline_result_18:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[110], tmp_assign_source_160);
    }
    goto try_end_20;
    // Exception handler code:
    try_except_handler_54:;
    exception_keeper_type_56 = exception_type;
    exception_keeper_value_56 = exception_value;
    exception_keeper_tb_56 = exception_tb;
    exception_keeper_lineno_56 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_18__bases_orig);
    tmp_class_creation_18__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_18__bases);
    tmp_class_creation_18__bases = NULL;
    Py_XDECREF(tmp_class_creation_18__class_decl_dict);
    tmp_class_creation_18__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_18__metaclass);
    tmp_class_creation_18__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_18__prepared);
    tmp_class_creation_18__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_56;
    exception_value = exception_keeper_value_56;
    exception_tb = exception_keeper_tb_56;
    exception_lineno = exception_keeper_lineno_56;

    goto frame_exception_exit_1;
    // End of try:
    try_end_20:;
    CHECK_OBJECT(tmp_class_creation_18__bases_orig);
    Py_DECREF(tmp_class_creation_18__bases_orig);
    tmp_class_creation_18__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_18__bases);
    Py_DECREF(tmp_class_creation_18__bases);
    tmp_class_creation_18__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
    Py_DECREF(tmp_class_creation_18__class_decl_dict);
    tmp_class_creation_18__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_18__metaclass);
    Py_DECREF(tmp_class_creation_18__metaclass);
    tmp_class_creation_18__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_18__prepared);
    Py_DECREF(tmp_class_creation_18__prepared);
    tmp_class_creation_18__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_162;
        PyObject *tmp_tuple_element_73;
        tmp_tuple_element_73 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[98]);

        if (unlikely(tmp_tuple_element_73 == NULL)) {
            tmp_tuple_element_73 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[98]);
        }

        if (tmp_tuple_element_73 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 216;

            goto try_except_handler_57;
        }
        tmp_assign_source_162 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_162, 0, tmp_tuple_element_73);
        assert(tmp_class_creation_19__bases_orig == NULL);
        tmp_class_creation_19__bases_orig = tmp_assign_source_162;
    }
    {
        PyObject *tmp_assign_source_163;
        PyObject *tmp_dircall_arg1_19;
        CHECK_OBJECT(tmp_class_creation_19__bases_orig);
        tmp_dircall_arg1_19 = tmp_class_creation_19__bases_orig;
        Py_INCREF(tmp_dircall_arg1_19);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_19};
            tmp_assign_source_163 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_163 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 216;

            goto try_except_handler_57;
        }
        assert(tmp_class_creation_19__bases == NULL);
        tmp_class_creation_19__bases = tmp_assign_source_163;
    }
    {
        PyObject *tmp_assign_source_164;
        tmp_assign_source_164 = PyDict_New();
        assert(tmp_class_creation_19__class_decl_dict == NULL);
        tmp_class_creation_19__class_decl_dict = tmp_assign_source_164;
    }
    {
        PyObject *tmp_assign_source_165;
        PyObject *tmp_metaclass_value_19;
        bool tmp_condition_result_109;
        PyObject *tmp_key_value_55;
        PyObject *tmp_dict_arg_value_55;
        PyObject *tmp_dict_arg_value_56;
        PyObject *tmp_key_value_56;
        nuitka_bool tmp_condition_result_110;
        int tmp_truth_name_19;
        PyObject *tmp_type_arg_37;
        PyObject *tmp_expression_value_99;
        PyObject *tmp_subscript_value_27;
        PyObject *tmp_bases_value_19;
        tmp_key_value_55 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
        tmp_dict_arg_value_55 = tmp_class_creation_19__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_55, tmp_key_value_55);
        assert(!(tmp_res == -1));
        tmp_condition_result_109 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_109 != false) {
            goto condexpr_true_37;
        } else {
            goto condexpr_false_37;
        }
        condexpr_true_37:;
        CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
        tmp_dict_arg_value_56 = tmp_class_creation_19__class_decl_dict;
        tmp_key_value_56 = mod_consts[57];
        tmp_metaclass_value_19 = DICT_GET_ITEM0(tmp_dict_arg_value_56, tmp_key_value_56);
        if (tmp_metaclass_value_19 == NULL) {
            tmp_metaclass_value_19 = Py_None;
        }
        assert(!(tmp_metaclass_value_19 == NULL));
        Py_INCREF(tmp_metaclass_value_19);
        goto condexpr_end_37;
        condexpr_false_37:;
        CHECK_OBJECT(tmp_class_creation_19__bases);
        tmp_truth_name_19 = CHECK_IF_TRUE(tmp_class_creation_19__bases);
        if (tmp_truth_name_19 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 216;

            goto try_except_handler_57;
        }
        tmp_condition_result_110 = tmp_truth_name_19 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_110 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_38;
        } else {
            goto condexpr_false_38;
        }
        condexpr_true_38:;
        CHECK_OBJECT(tmp_class_creation_19__bases);
        tmp_expression_value_99 = tmp_class_creation_19__bases;
        tmp_subscript_value_27 = mod_consts[39];
        tmp_type_arg_37 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_99, tmp_subscript_value_27, 0);
        if (tmp_type_arg_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 216;

            goto try_except_handler_57;
        }
        tmp_metaclass_value_19 = BUILTIN_TYPE1(tmp_type_arg_37);
        Py_DECREF(tmp_type_arg_37);
        if (tmp_metaclass_value_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 216;

            goto try_except_handler_57;
        }
        goto condexpr_end_38;
        condexpr_false_38:;
        tmp_metaclass_value_19 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_19);
        condexpr_end_38:;
        condexpr_end_37:;
        CHECK_OBJECT(tmp_class_creation_19__bases);
        tmp_bases_value_19 = tmp_class_creation_19__bases;
        tmp_assign_source_165 = SELECT_METACLASS(tmp_metaclass_value_19, tmp_bases_value_19);
        Py_DECREF(tmp_metaclass_value_19);
        if (tmp_assign_source_165 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 216;

            goto try_except_handler_57;
        }
        assert(tmp_class_creation_19__metaclass == NULL);
        tmp_class_creation_19__metaclass = tmp_assign_source_165;
    }
    {
        bool tmp_condition_result_111;
        PyObject *tmp_key_value_57;
        PyObject *tmp_dict_arg_value_57;
        tmp_key_value_57 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
        tmp_dict_arg_value_57 = tmp_class_creation_19__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_57, tmp_key_value_57);
        assert(!(tmp_res == -1));
        tmp_condition_result_111 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_111 != false) {
            goto branch_yes_73;
        } else {
            goto branch_no_73;
        }
    }
    branch_yes_73:;
    CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_19__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 216;

        goto try_except_handler_57;
    }
    branch_no_73:;
    {
        nuitka_bool tmp_condition_result_112;
        PyObject *tmp_expression_value_100;
        CHECK_OBJECT(tmp_class_creation_19__metaclass);
        tmp_expression_value_100 = tmp_class_creation_19__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_100, mod_consts[58]);
        tmp_condition_result_112 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_112 == NUITKA_BOOL_TRUE) {
            goto branch_yes_74;
        } else {
            goto branch_no_74;
        }
    }
    branch_yes_74:;
    {
        PyObject *tmp_assign_source_166;
        PyObject *tmp_called_value_37;
        PyObject *tmp_expression_value_101;
        PyObject *tmp_args_value_37;
        PyObject *tmp_tuple_element_74;
        PyObject *tmp_kwargs_value_37;
        CHECK_OBJECT(tmp_class_creation_19__metaclass);
        tmp_expression_value_101 = tmp_class_creation_19__metaclass;
        tmp_called_value_37 = LOOKUP_ATTRIBUTE(tmp_expression_value_101, mod_consts[58]);
        if (tmp_called_value_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 216;

            goto try_except_handler_57;
        }
        tmp_tuple_element_74 = mod_consts[112];
        tmp_args_value_37 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_37, 0, tmp_tuple_element_74);
        CHECK_OBJECT(tmp_class_creation_19__bases);
        tmp_tuple_element_74 = tmp_class_creation_19__bases;
        PyTuple_SET_ITEM0(tmp_args_value_37, 1, tmp_tuple_element_74);
        CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
        tmp_kwargs_value_37 = tmp_class_creation_19__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 216;
        tmp_assign_source_166 = CALL_FUNCTION(tmp_called_value_37, tmp_args_value_37, tmp_kwargs_value_37);
        Py_DECREF(tmp_called_value_37);
        Py_DECREF(tmp_args_value_37);
        if (tmp_assign_source_166 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 216;

            goto try_except_handler_57;
        }
        assert(tmp_class_creation_19__prepared == NULL);
        tmp_class_creation_19__prepared = tmp_assign_source_166;
    }
    {
        bool tmp_condition_result_113;
        PyObject *tmp_operand_value_19;
        PyObject *tmp_expression_value_102;
        CHECK_OBJECT(tmp_class_creation_19__prepared);
        tmp_expression_value_102 = tmp_class_creation_19__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_102, mod_consts[60]);
        tmp_operand_value_19 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_19);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 216;

            goto try_except_handler_57;
        }
        tmp_condition_result_113 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_113 != false) {
            goto branch_yes_75;
        } else {
            goto branch_no_75;
        }
    }
    branch_yes_75:;
    {
        PyObject *tmp_raise_type_19;
        PyObject *tmp_raise_value_19;
        PyObject *tmp_left_value_19;
        PyObject *tmp_right_value_19;
        PyObject *tmp_tuple_element_75;
        PyObject *tmp_getattr_target_19;
        PyObject *tmp_getattr_attr_19;
        PyObject *tmp_getattr_default_19;
        tmp_raise_type_19 = PyExc_TypeError;
        tmp_left_value_19 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_19__metaclass);
        tmp_getattr_target_19 = tmp_class_creation_19__metaclass;
        tmp_getattr_attr_19 = mod_consts[62];
        tmp_getattr_default_19 = mod_consts[63];
        tmp_tuple_element_75 = BUILTIN_GETATTR(tmp_getattr_target_19, tmp_getattr_attr_19, tmp_getattr_default_19);
        if (tmp_tuple_element_75 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 216;

            goto try_except_handler_57;
        }
        tmp_right_value_19 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_103;
            PyObject *tmp_type_arg_38;
            PyTuple_SET_ITEM(tmp_right_value_19, 0, tmp_tuple_element_75);
            CHECK_OBJECT(tmp_class_creation_19__prepared);
            tmp_type_arg_38 = tmp_class_creation_19__prepared;
            tmp_expression_value_103 = BUILTIN_TYPE1(tmp_type_arg_38);
            assert(!(tmp_expression_value_103 == NULL));
            tmp_tuple_element_75 = LOOKUP_ATTRIBUTE(tmp_expression_value_103, mod_consts[62]);
            Py_DECREF(tmp_expression_value_103);
            if (tmp_tuple_element_75 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 216;

                goto tuple_build_exception_19;
            }
            PyTuple_SET_ITEM(tmp_right_value_19, 1, tmp_tuple_element_75);
        }
        goto tuple_build_noexception_19;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_19:;
        Py_DECREF(tmp_right_value_19);
        goto try_except_handler_57;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_19:;
        tmp_raise_value_19 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_19, tmp_right_value_19);
        Py_DECREF(tmp_right_value_19);
        if (tmp_raise_value_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 216;

            goto try_except_handler_57;
        }
        exception_type = tmp_raise_type_19;
        Py_INCREF(tmp_raise_type_19);
        exception_value = tmp_raise_value_19;
        exception_lineno = 216;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_57;
    }
    branch_no_75:;
    goto branch_end_74;
    branch_no_74:;
    {
        PyObject *tmp_assign_source_167;
        tmp_assign_source_167 = PyDict_New();
        assert(tmp_class_creation_19__prepared == NULL);
        tmp_class_creation_19__prepared = tmp_assign_source_167;
    }
    branch_end_74:;
    {
        PyObject *tmp_assign_source_168;
        {
            PyObject *tmp_set_locals_19;
            CHECK_OBJECT(tmp_class_creation_19__prepared);
            tmp_set_locals_19 = tmp_class_creation_19__prepared;
            locals_aiohttp$web_exceptions$$$class__19_HTTPTemporaryRedirect_216 = tmp_set_locals_19;
            Py_INCREF(tmp_set_locals_19);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__19_HTTPTemporaryRedirect_216, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 216;

            goto try_except_handler_59;
        }
        tmp_dictset_value = mod_consts[112];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__19_HTTPTemporaryRedirect_216, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 216;

            goto try_except_handler_59;
        }
        if (isFrameUnusable(cache_frame_30d1733a30c16574e3f49de3c14624a1_17)) {
            Py_XDECREF(cache_frame_30d1733a30c16574e3f49de3c14624a1_17);

#if _DEBUG_REFCOUNTS
            if (cache_frame_30d1733a30c16574e3f49de3c14624a1_17 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_30d1733a30c16574e3f49de3c14624a1_17 = MAKE_FUNCTION_FRAME(codeobj_30d1733a30c16574e3f49de3c14624a1, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_30d1733a30c16574e3f49de3c14624a1_17->m_type_description == NULL);
        frame_30d1733a30c16574e3f49de3c14624a1_17 = cache_frame_30d1733a30c16574e3f49de3c14624a1_17;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_30d1733a30c16574e3f49de3c14624a1_17);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_30d1733a30c16574e3f49de3c14624a1_17) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[113];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__19_HTTPTemporaryRedirect_216, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 217;
            type_description_2 = "o";
            goto frame_exception_exit_17;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_30d1733a30c16574e3f49de3c14624a1_17);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_16;

        frame_exception_exit_17:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_30d1733a30c16574e3f49de3c14624a1_17);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_30d1733a30c16574e3f49de3c14624a1_17, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_30d1733a30c16574e3f49de3c14624a1_17->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_30d1733a30c16574e3f49de3c14624a1_17, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_30d1733a30c16574e3f49de3c14624a1_17,
            type_description_2,
            outline_18_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_30d1733a30c16574e3f49de3c14624a1_17 == cache_frame_30d1733a30c16574e3f49de3c14624a1_17) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_30d1733a30c16574e3f49de3c14624a1_17);
            cache_frame_30d1733a30c16574e3f49de3c14624a1_17 = NULL;
        }

        assertFrameObject(frame_30d1733a30c16574e3f49de3c14624a1_17);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_16;

        frame_no_exception_16:;
        goto skip_nested_handling_16;
        nested_frame_exit_16:;

        goto try_except_handler_59;
        skip_nested_handling_16:;
        {
            nuitka_bool tmp_condition_result_114;
            PyObject *tmp_cmp_expr_left_19;
            PyObject *tmp_cmp_expr_right_19;
            CHECK_OBJECT(tmp_class_creation_19__bases);
            tmp_cmp_expr_left_19 = tmp_class_creation_19__bases;
            CHECK_OBJECT(tmp_class_creation_19__bases_orig);
            tmp_cmp_expr_right_19 = tmp_class_creation_19__bases_orig;
            tmp_condition_result_114 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_19, tmp_cmp_expr_right_19);
            if (tmp_condition_result_114 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 216;

                goto try_except_handler_59;
            }
            if (tmp_condition_result_114 == NUITKA_BOOL_TRUE) {
                goto branch_yes_76;
            } else {
                goto branch_no_76;
            }
            assert(tmp_condition_result_114 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_76:;
        CHECK_OBJECT(tmp_class_creation_19__bases_orig);
        tmp_dictset_value = tmp_class_creation_19__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__19_HTTPTemporaryRedirect_216, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 216;

            goto try_except_handler_59;
        }
        branch_no_76:;
        {
            PyObject *tmp_assign_source_169;
            PyObject *tmp_called_value_38;
            PyObject *tmp_args_value_38;
            PyObject *tmp_tuple_element_76;
            PyObject *tmp_kwargs_value_38;
            CHECK_OBJECT(tmp_class_creation_19__metaclass);
            tmp_called_value_38 = tmp_class_creation_19__metaclass;
            tmp_tuple_element_76 = mod_consts[112];
            tmp_args_value_38 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_38, 0, tmp_tuple_element_76);
            CHECK_OBJECT(tmp_class_creation_19__bases);
            tmp_tuple_element_76 = tmp_class_creation_19__bases;
            PyTuple_SET_ITEM0(tmp_args_value_38, 1, tmp_tuple_element_76);
            tmp_tuple_element_76 = locals_aiohttp$web_exceptions$$$class__19_HTTPTemporaryRedirect_216;
            PyTuple_SET_ITEM0(tmp_args_value_38, 2, tmp_tuple_element_76);
            CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
            tmp_kwargs_value_38 = tmp_class_creation_19__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 216;
            tmp_assign_source_169 = CALL_FUNCTION(tmp_called_value_38, tmp_args_value_38, tmp_kwargs_value_38);
            Py_DECREF(tmp_args_value_38);
            if (tmp_assign_source_169 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 216;

                goto try_except_handler_59;
            }
            assert(outline_18_var___class__ == NULL);
            outline_18_var___class__ = tmp_assign_source_169;
        }
        CHECK_OBJECT(outline_18_var___class__);
        tmp_assign_source_168 = outline_18_var___class__;
        Py_INCREF(tmp_assign_source_168);
        goto try_return_handler_59;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_59:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__19_HTTPTemporaryRedirect_216);
        locals_aiohttp$web_exceptions$$$class__19_HTTPTemporaryRedirect_216 = NULL;
        goto try_return_handler_58;
        // Exception handler code:
        try_except_handler_59:;
        exception_keeper_type_57 = exception_type;
        exception_keeper_value_57 = exception_value;
        exception_keeper_tb_57 = exception_tb;
        exception_keeper_lineno_57 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__19_HTTPTemporaryRedirect_216);
        locals_aiohttp$web_exceptions$$$class__19_HTTPTemporaryRedirect_216 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_57;
        exception_value = exception_keeper_value_57;
        exception_tb = exception_keeper_tb_57;
        exception_lineno = exception_keeper_lineno_57;

        goto try_except_handler_58;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_58:;
        CHECK_OBJECT(outline_18_var___class__);
        Py_DECREF(outline_18_var___class__);
        outline_18_var___class__ = NULL;
        goto outline_result_19;
        // Exception handler code:
        try_except_handler_58:;
        exception_keeper_type_58 = exception_type;
        exception_keeper_value_58 = exception_value;
        exception_keeper_tb_58 = exception_tb;
        exception_keeper_lineno_58 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_58;
        exception_value = exception_keeper_value_58;
        exception_tb = exception_keeper_tb_58;
        exception_lineno = exception_keeper_lineno_58;

        goto outline_exception_19;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_19:;
        exception_lineno = 216;
        goto try_except_handler_57;
        outline_result_19:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[112], tmp_assign_source_168);
    }
    goto try_end_21;
    // Exception handler code:
    try_except_handler_57:;
    exception_keeper_type_59 = exception_type;
    exception_keeper_value_59 = exception_value;
    exception_keeper_tb_59 = exception_tb;
    exception_keeper_lineno_59 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_19__bases_orig);
    tmp_class_creation_19__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_19__bases);
    tmp_class_creation_19__bases = NULL;
    Py_XDECREF(tmp_class_creation_19__class_decl_dict);
    tmp_class_creation_19__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_19__metaclass);
    tmp_class_creation_19__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_19__prepared);
    tmp_class_creation_19__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_59;
    exception_value = exception_keeper_value_59;
    exception_tb = exception_keeper_tb_59;
    exception_lineno = exception_keeper_lineno_59;

    goto frame_exception_exit_1;
    // End of try:
    try_end_21:;
    CHECK_OBJECT(tmp_class_creation_19__bases_orig);
    Py_DECREF(tmp_class_creation_19__bases_orig);
    tmp_class_creation_19__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_19__bases);
    Py_DECREF(tmp_class_creation_19__bases);
    tmp_class_creation_19__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
    Py_DECREF(tmp_class_creation_19__class_decl_dict);
    tmp_class_creation_19__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_19__metaclass);
    Py_DECREF(tmp_class_creation_19__metaclass);
    tmp_class_creation_19__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_19__prepared);
    Py_DECREF(tmp_class_creation_19__prepared);
    tmp_class_creation_19__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_170;
        PyObject *tmp_tuple_element_77;
        tmp_tuple_element_77 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[98]);

        if (unlikely(tmp_tuple_element_77 == NULL)) {
            tmp_tuple_element_77 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[98]);
        }

        if (tmp_tuple_element_77 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_60;
        }
        tmp_assign_source_170 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_170, 0, tmp_tuple_element_77);
        assert(tmp_class_creation_20__bases_orig == NULL);
        tmp_class_creation_20__bases_orig = tmp_assign_source_170;
    }
    {
        PyObject *tmp_assign_source_171;
        PyObject *tmp_dircall_arg1_20;
        CHECK_OBJECT(tmp_class_creation_20__bases_orig);
        tmp_dircall_arg1_20 = tmp_class_creation_20__bases_orig;
        Py_INCREF(tmp_dircall_arg1_20);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_20};
            tmp_assign_source_171 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_171 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_60;
        }
        assert(tmp_class_creation_20__bases == NULL);
        tmp_class_creation_20__bases = tmp_assign_source_171;
    }
    {
        PyObject *tmp_assign_source_172;
        tmp_assign_source_172 = PyDict_New();
        assert(tmp_class_creation_20__class_decl_dict == NULL);
        tmp_class_creation_20__class_decl_dict = tmp_assign_source_172;
    }
    {
        PyObject *tmp_assign_source_173;
        PyObject *tmp_metaclass_value_20;
        bool tmp_condition_result_115;
        PyObject *tmp_key_value_58;
        PyObject *tmp_dict_arg_value_58;
        PyObject *tmp_dict_arg_value_59;
        PyObject *tmp_key_value_59;
        nuitka_bool tmp_condition_result_116;
        int tmp_truth_name_20;
        PyObject *tmp_type_arg_39;
        PyObject *tmp_expression_value_104;
        PyObject *tmp_subscript_value_28;
        PyObject *tmp_bases_value_20;
        tmp_key_value_58 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
        tmp_dict_arg_value_58 = tmp_class_creation_20__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_58, tmp_key_value_58);
        assert(!(tmp_res == -1));
        tmp_condition_result_115 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_115 != false) {
            goto condexpr_true_39;
        } else {
            goto condexpr_false_39;
        }
        condexpr_true_39:;
        CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
        tmp_dict_arg_value_59 = tmp_class_creation_20__class_decl_dict;
        tmp_key_value_59 = mod_consts[57];
        tmp_metaclass_value_20 = DICT_GET_ITEM0(tmp_dict_arg_value_59, tmp_key_value_59);
        if (tmp_metaclass_value_20 == NULL) {
            tmp_metaclass_value_20 = Py_None;
        }
        assert(!(tmp_metaclass_value_20 == NULL));
        Py_INCREF(tmp_metaclass_value_20);
        goto condexpr_end_39;
        condexpr_false_39:;
        CHECK_OBJECT(tmp_class_creation_20__bases);
        tmp_truth_name_20 = CHECK_IF_TRUE(tmp_class_creation_20__bases);
        if (tmp_truth_name_20 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_60;
        }
        tmp_condition_result_116 = tmp_truth_name_20 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_116 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_40;
        } else {
            goto condexpr_false_40;
        }
        condexpr_true_40:;
        CHECK_OBJECT(tmp_class_creation_20__bases);
        tmp_expression_value_104 = tmp_class_creation_20__bases;
        tmp_subscript_value_28 = mod_consts[39];
        tmp_type_arg_39 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_104, tmp_subscript_value_28, 0);
        if (tmp_type_arg_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_60;
        }
        tmp_metaclass_value_20 = BUILTIN_TYPE1(tmp_type_arg_39);
        Py_DECREF(tmp_type_arg_39);
        if (tmp_metaclass_value_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_60;
        }
        goto condexpr_end_40;
        condexpr_false_40:;
        tmp_metaclass_value_20 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_20);
        condexpr_end_40:;
        condexpr_end_39:;
        CHECK_OBJECT(tmp_class_creation_20__bases);
        tmp_bases_value_20 = tmp_class_creation_20__bases;
        tmp_assign_source_173 = SELECT_METACLASS(tmp_metaclass_value_20, tmp_bases_value_20);
        Py_DECREF(tmp_metaclass_value_20);
        if (tmp_assign_source_173 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_60;
        }
        assert(tmp_class_creation_20__metaclass == NULL);
        tmp_class_creation_20__metaclass = tmp_assign_source_173;
    }
    {
        bool tmp_condition_result_117;
        PyObject *tmp_key_value_60;
        PyObject *tmp_dict_arg_value_60;
        tmp_key_value_60 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
        tmp_dict_arg_value_60 = tmp_class_creation_20__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_60, tmp_key_value_60);
        assert(!(tmp_res == -1));
        tmp_condition_result_117 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_117 != false) {
            goto branch_yes_77;
        } else {
            goto branch_no_77;
        }
    }
    branch_yes_77:;
    CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_20__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 220;

        goto try_except_handler_60;
    }
    branch_no_77:;
    {
        nuitka_bool tmp_condition_result_118;
        PyObject *tmp_expression_value_105;
        CHECK_OBJECT(tmp_class_creation_20__metaclass);
        tmp_expression_value_105 = tmp_class_creation_20__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_105, mod_consts[58]);
        tmp_condition_result_118 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_118 == NUITKA_BOOL_TRUE) {
            goto branch_yes_78;
        } else {
            goto branch_no_78;
        }
    }
    branch_yes_78:;
    {
        PyObject *tmp_assign_source_174;
        PyObject *tmp_called_value_39;
        PyObject *tmp_expression_value_106;
        PyObject *tmp_args_value_39;
        PyObject *tmp_tuple_element_78;
        PyObject *tmp_kwargs_value_39;
        CHECK_OBJECT(tmp_class_creation_20__metaclass);
        tmp_expression_value_106 = tmp_class_creation_20__metaclass;
        tmp_called_value_39 = LOOKUP_ATTRIBUTE(tmp_expression_value_106, mod_consts[58]);
        if (tmp_called_value_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_60;
        }
        tmp_tuple_element_78 = mod_consts[114];
        tmp_args_value_39 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_39, 0, tmp_tuple_element_78);
        CHECK_OBJECT(tmp_class_creation_20__bases);
        tmp_tuple_element_78 = tmp_class_creation_20__bases;
        PyTuple_SET_ITEM0(tmp_args_value_39, 1, tmp_tuple_element_78);
        CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
        tmp_kwargs_value_39 = tmp_class_creation_20__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 220;
        tmp_assign_source_174 = CALL_FUNCTION(tmp_called_value_39, tmp_args_value_39, tmp_kwargs_value_39);
        Py_DECREF(tmp_called_value_39);
        Py_DECREF(tmp_args_value_39);
        if (tmp_assign_source_174 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_60;
        }
        assert(tmp_class_creation_20__prepared == NULL);
        tmp_class_creation_20__prepared = tmp_assign_source_174;
    }
    {
        bool tmp_condition_result_119;
        PyObject *tmp_operand_value_20;
        PyObject *tmp_expression_value_107;
        CHECK_OBJECT(tmp_class_creation_20__prepared);
        tmp_expression_value_107 = tmp_class_creation_20__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_107, mod_consts[60]);
        tmp_operand_value_20 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_20);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_60;
        }
        tmp_condition_result_119 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_119 != false) {
            goto branch_yes_79;
        } else {
            goto branch_no_79;
        }
    }
    branch_yes_79:;
    {
        PyObject *tmp_raise_type_20;
        PyObject *tmp_raise_value_20;
        PyObject *tmp_left_value_20;
        PyObject *tmp_right_value_20;
        PyObject *tmp_tuple_element_79;
        PyObject *tmp_getattr_target_20;
        PyObject *tmp_getattr_attr_20;
        PyObject *tmp_getattr_default_20;
        tmp_raise_type_20 = PyExc_TypeError;
        tmp_left_value_20 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_20__metaclass);
        tmp_getattr_target_20 = tmp_class_creation_20__metaclass;
        tmp_getattr_attr_20 = mod_consts[62];
        tmp_getattr_default_20 = mod_consts[63];
        tmp_tuple_element_79 = BUILTIN_GETATTR(tmp_getattr_target_20, tmp_getattr_attr_20, tmp_getattr_default_20);
        if (tmp_tuple_element_79 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_60;
        }
        tmp_right_value_20 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_108;
            PyObject *tmp_type_arg_40;
            PyTuple_SET_ITEM(tmp_right_value_20, 0, tmp_tuple_element_79);
            CHECK_OBJECT(tmp_class_creation_20__prepared);
            tmp_type_arg_40 = tmp_class_creation_20__prepared;
            tmp_expression_value_108 = BUILTIN_TYPE1(tmp_type_arg_40);
            assert(!(tmp_expression_value_108 == NULL));
            tmp_tuple_element_79 = LOOKUP_ATTRIBUTE(tmp_expression_value_108, mod_consts[62]);
            Py_DECREF(tmp_expression_value_108);
            if (tmp_tuple_element_79 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 220;

                goto tuple_build_exception_20;
            }
            PyTuple_SET_ITEM(tmp_right_value_20, 1, tmp_tuple_element_79);
        }
        goto tuple_build_noexception_20;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_20:;
        Py_DECREF(tmp_right_value_20);
        goto try_except_handler_60;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_20:;
        tmp_raise_value_20 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_20, tmp_right_value_20);
        Py_DECREF(tmp_right_value_20);
        if (tmp_raise_value_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_60;
        }
        exception_type = tmp_raise_type_20;
        Py_INCREF(tmp_raise_type_20);
        exception_value = tmp_raise_value_20;
        exception_lineno = 220;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_60;
    }
    branch_no_79:;
    goto branch_end_78;
    branch_no_78:;
    {
        PyObject *tmp_assign_source_175;
        tmp_assign_source_175 = PyDict_New();
        assert(tmp_class_creation_20__prepared == NULL);
        tmp_class_creation_20__prepared = tmp_assign_source_175;
    }
    branch_end_78:;
    {
        PyObject *tmp_assign_source_176;
        {
            PyObject *tmp_set_locals_20;
            CHECK_OBJECT(tmp_class_creation_20__prepared);
            tmp_set_locals_20 = tmp_class_creation_20__prepared;
            locals_aiohttp$web_exceptions$$$class__20_HTTPPermanentRedirect_220 = tmp_set_locals_20;
            Py_INCREF(tmp_set_locals_20);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__20_HTTPPermanentRedirect_220, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_62;
        }
        tmp_dictset_value = mod_consts[114];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__20_HTTPPermanentRedirect_220, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_62;
        }
        if (isFrameUnusable(cache_frame_d9d75d15b1dec25cbf3f516a4adba3a7_18)) {
            Py_XDECREF(cache_frame_d9d75d15b1dec25cbf3f516a4adba3a7_18);

#if _DEBUG_REFCOUNTS
            if (cache_frame_d9d75d15b1dec25cbf3f516a4adba3a7_18 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_d9d75d15b1dec25cbf3f516a4adba3a7_18 = MAKE_FUNCTION_FRAME(codeobj_d9d75d15b1dec25cbf3f516a4adba3a7, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_d9d75d15b1dec25cbf3f516a4adba3a7_18->m_type_description == NULL);
        frame_d9d75d15b1dec25cbf3f516a4adba3a7_18 = cache_frame_d9d75d15b1dec25cbf3f516a4adba3a7_18;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_d9d75d15b1dec25cbf3f516a4adba3a7_18);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_d9d75d15b1dec25cbf3f516a4adba3a7_18) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[115];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__20_HTTPPermanentRedirect_220, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 221;
            type_description_2 = "o";
            goto frame_exception_exit_18;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_d9d75d15b1dec25cbf3f516a4adba3a7_18);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_17;

        frame_exception_exit_18:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_d9d75d15b1dec25cbf3f516a4adba3a7_18);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_d9d75d15b1dec25cbf3f516a4adba3a7_18, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_d9d75d15b1dec25cbf3f516a4adba3a7_18->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_d9d75d15b1dec25cbf3f516a4adba3a7_18, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_d9d75d15b1dec25cbf3f516a4adba3a7_18,
            type_description_2,
            outline_19_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_d9d75d15b1dec25cbf3f516a4adba3a7_18 == cache_frame_d9d75d15b1dec25cbf3f516a4adba3a7_18) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_d9d75d15b1dec25cbf3f516a4adba3a7_18);
            cache_frame_d9d75d15b1dec25cbf3f516a4adba3a7_18 = NULL;
        }

        assertFrameObject(frame_d9d75d15b1dec25cbf3f516a4adba3a7_18);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_17;

        frame_no_exception_17:;
        goto skip_nested_handling_17;
        nested_frame_exit_17:;

        goto try_except_handler_62;
        skip_nested_handling_17:;
        {
            nuitka_bool tmp_condition_result_120;
            PyObject *tmp_cmp_expr_left_20;
            PyObject *tmp_cmp_expr_right_20;
            CHECK_OBJECT(tmp_class_creation_20__bases);
            tmp_cmp_expr_left_20 = tmp_class_creation_20__bases;
            CHECK_OBJECT(tmp_class_creation_20__bases_orig);
            tmp_cmp_expr_right_20 = tmp_class_creation_20__bases_orig;
            tmp_condition_result_120 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_20, tmp_cmp_expr_right_20);
            if (tmp_condition_result_120 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 220;

                goto try_except_handler_62;
            }
            if (tmp_condition_result_120 == NUITKA_BOOL_TRUE) {
                goto branch_yes_80;
            } else {
                goto branch_no_80;
            }
            assert(tmp_condition_result_120 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_80:;
        CHECK_OBJECT(tmp_class_creation_20__bases_orig);
        tmp_dictset_value = tmp_class_creation_20__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__20_HTTPPermanentRedirect_220, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_62;
        }
        branch_no_80:;
        {
            PyObject *tmp_assign_source_177;
            PyObject *tmp_called_value_40;
            PyObject *tmp_args_value_40;
            PyObject *tmp_tuple_element_80;
            PyObject *tmp_kwargs_value_40;
            CHECK_OBJECT(tmp_class_creation_20__metaclass);
            tmp_called_value_40 = tmp_class_creation_20__metaclass;
            tmp_tuple_element_80 = mod_consts[114];
            tmp_args_value_40 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_40, 0, tmp_tuple_element_80);
            CHECK_OBJECT(tmp_class_creation_20__bases);
            tmp_tuple_element_80 = tmp_class_creation_20__bases;
            PyTuple_SET_ITEM0(tmp_args_value_40, 1, tmp_tuple_element_80);
            tmp_tuple_element_80 = locals_aiohttp$web_exceptions$$$class__20_HTTPPermanentRedirect_220;
            PyTuple_SET_ITEM0(tmp_args_value_40, 2, tmp_tuple_element_80);
            CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
            tmp_kwargs_value_40 = tmp_class_creation_20__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 220;
            tmp_assign_source_177 = CALL_FUNCTION(tmp_called_value_40, tmp_args_value_40, tmp_kwargs_value_40);
            Py_DECREF(tmp_args_value_40);
            if (tmp_assign_source_177 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 220;

                goto try_except_handler_62;
            }
            assert(outline_19_var___class__ == NULL);
            outline_19_var___class__ = tmp_assign_source_177;
        }
        CHECK_OBJECT(outline_19_var___class__);
        tmp_assign_source_176 = outline_19_var___class__;
        Py_INCREF(tmp_assign_source_176);
        goto try_return_handler_62;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_62:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__20_HTTPPermanentRedirect_220);
        locals_aiohttp$web_exceptions$$$class__20_HTTPPermanentRedirect_220 = NULL;
        goto try_return_handler_61;
        // Exception handler code:
        try_except_handler_62:;
        exception_keeper_type_60 = exception_type;
        exception_keeper_value_60 = exception_value;
        exception_keeper_tb_60 = exception_tb;
        exception_keeper_lineno_60 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__20_HTTPPermanentRedirect_220);
        locals_aiohttp$web_exceptions$$$class__20_HTTPPermanentRedirect_220 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_60;
        exception_value = exception_keeper_value_60;
        exception_tb = exception_keeper_tb_60;
        exception_lineno = exception_keeper_lineno_60;

        goto try_except_handler_61;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_61:;
        CHECK_OBJECT(outline_19_var___class__);
        Py_DECREF(outline_19_var___class__);
        outline_19_var___class__ = NULL;
        goto outline_result_20;
        // Exception handler code:
        try_except_handler_61:;
        exception_keeper_type_61 = exception_type;
        exception_keeper_value_61 = exception_value;
        exception_keeper_tb_61 = exception_tb;
        exception_keeper_lineno_61 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_61;
        exception_value = exception_keeper_value_61;
        exception_tb = exception_keeper_tb_61;
        exception_lineno = exception_keeper_lineno_61;

        goto outline_exception_20;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_20:;
        exception_lineno = 220;
        goto try_except_handler_60;
        outline_result_20:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[114], tmp_assign_source_176);
    }
    goto try_end_22;
    // Exception handler code:
    try_except_handler_60:;
    exception_keeper_type_62 = exception_type;
    exception_keeper_value_62 = exception_value;
    exception_keeper_tb_62 = exception_tb;
    exception_keeper_lineno_62 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_20__bases_orig);
    tmp_class_creation_20__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_20__bases);
    tmp_class_creation_20__bases = NULL;
    Py_XDECREF(tmp_class_creation_20__class_decl_dict);
    tmp_class_creation_20__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_20__metaclass);
    tmp_class_creation_20__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_20__prepared);
    tmp_class_creation_20__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_62;
    exception_value = exception_keeper_value_62;
    exception_tb = exception_keeper_tb_62;
    exception_lineno = exception_keeper_lineno_62;

    goto frame_exception_exit_1;
    // End of try:
    try_end_22:;
    CHECK_OBJECT(tmp_class_creation_20__bases_orig);
    Py_DECREF(tmp_class_creation_20__bases_orig);
    tmp_class_creation_20__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_20__bases);
    Py_DECREF(tmp_class_creation_20__bases);
    tmp_class_creation_20__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
    Py_DECREF(tmp_class_creation_20__class_decl_dict);
    tmp_class_creation_20__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_20__metaclass);
    Py_DECREF(tmp_class_creation_20__metaclass);
    tmp_class_creation_20__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_20__prepared);
    Py_DECREF(tmp_class_creation_20__prepared);
    tmp_class_creation_20__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_178;
        PyObject *tmp_tuple_element_81;
        tmp_tuple_element_81 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[78]);

        if (unlikely(tmp_tuple_element_81 == NULL)) {
            tmp_tuple_element_81 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[78]);
        }

        if (tmp_tuple_element_81 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;

            goto try_except_handler_63;
        }
        tmp_assign_source_178 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_178, 0, tmp_tuple_element_81);
        assert(tmp_class_creation_21__bases_orig == NULL);
        tmp_class_creation_21__bases_orig = tmp_assign_source_178;
    }
    {
        PyObject *tmp_assign_source_179;
        PyObject *tmp_dircall_arg1_21;
        CHECK_OBJECT(tmp_class_creation_21__bases_orig);
        tmp_dircall_arg1_21 = tmp_class_creation_21__bases_orig;
        Py_INCREF(tmp_dircall_arg1_21);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_21};
            tmp_assign_source_179 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_179 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;

            goto try_except_handler_63;
        }
        assert(tmp_class_creation_21__bases == NULL);
        tmp_class_creation_21__bases = tmp_assign_source_179;
    }
    {
        PyObject *tmp_assign_source_180;
        tmp_assign_source_180 = PyDict_New();
        assert(tmp_class_creation_21__class_decl_dict == NULL);
        tmp_class_creation_21__class_decl_dict = tmp_assign_source_180;
    }
    {
        PyObject *tmp_assign_source_181;
        PyObject *tmp_metaclass_value_21;
        bool tmp_condition_result_121;
        PyObject *tmp_key_value_61;
        PyObject *tmp_dict_arg_value_61;
        PyObject *tmp_dict_arg_value_62;
        PyObject *tmp_key_value_62;
        nuitka_bool tmp_condition_result_122;
        int tmp_truth_name_21;
        PyObject *tmp_type_arg_41;
        PyObject *tmp_expression_value_109;
        PyObject *tmp_subscript_value_29;
        PyObject *tmp_bases_value_21;
        tmp_key_value_61 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
        tmp_dict_arg_value_61 = tmp_class_creation_21__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_61, tmp_key_value_61);
        assert(!(tmp_res == -1));
        tmp_condition_result_121 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_121 != false) {
            goto condexpr_true_41;
        } else {
            goto condexpr_false_41;
        }
        condexpr_true_41:;
        CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
        tmp_dict_arg_value_62 = tmp_class_creation_21__class_decl_dict;
        tmp_key_value_62 = mod_consts[57];
        tmp_metaclass_value_21 = DICT_GET_ITEM0(tmp_dict_arg_value_62, tmp_key_value_62);
        if (tmp_metaclass_value_21 == NULL) {
            tmp_metaclass_value_21 = Py_None;
        }
        assert(!(tmp_metaclass_value_21 == NULL));
        Py_INCREF(tmp_metaclass_value_21);
        goto condexpr_end_41;
        condexpr_false_41:;
        CHECK_OBJECT(tmp_class_creation_21__bases);
        tmp_truth_name_21 = CHECK_IF_TRUE(tmp_class_creation_21__bases);
        if (tmp_truth_name_21 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;

            goto try_except_handler_63;
        }
        tmp_condition_result_122 = tmp_truth_name_21 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_122 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_42;
        } else {
            goto condexpr_false_42;
        }
        condexpr_true_42:;
        CHECK_OBJECT(tmp_class_creation_21__bases);
        tmp_expression_value_109 = tmp_class_creation_21__bases;
        tmp_subscript_value_29 = mod_consts[39];
        tmp_type_arg_41 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_109, tmp_subscript_value_29, 0);
        if (tmp_type_arg_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;

            goto try_except_handler_63;
        }
        tmp_metaclass_value_21 = BUILTIN_TYPE1(tmp_type_arg_41);
        Py_DECREF(tmp_type_arg_41);
        if (tmp_metaclass_value_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;

            goto try_except_handler_63;
        }
        goto condexpr_end_42;
        condexpr_false_42:;
        tmp_metaclass_value_21 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_21);
        condexpr_end_42:;
        condexpr_end_41:;
        CHECK_OBJECT(tmp_class_creation_21__bases);
        tmp_bases_value_21 = tmp_class_creation_21__bases;
        tmp_assign_source_181 = SELECT_METACLASS(tmp_metaclass_value_21, tmp_bases_value_21);
        Py_DECREF(tmp_metaclass_value_21);
        if (tmp_assign_source_181 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;

            goto try_except_handler_63;
        }
        assert(tmp_class_creation_21__metaclass == NULL);
        tmp_class_creation_21__metaclass = tmp_assign_source_181;
    }
    {
        bool tmp_condition_result_123;
        PyObject *tmp_key_value_63;
        PyObject *tmp_dict_arg_value_63;
        tmp_key_value_63 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
        tmp_dict_arg_value_63 = tmp_class_creation_21__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_63, tmp_key_value_63);
        assert(!(tmp_res == -1));
        tmp_condition_result_123 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_123 != false) {
            goto branch_yes_81;
        } else {
            goto branch_no_81;
        }
    }
    branch_yes_81:;
    CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_21__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 229;

        goto try_except_handler_63;
    }
    branch_no_81:;
    {
        nuitka_bool tmp_condition_result_124;
        PyObject *tmp_expression_value_110;
        CHECK_OBJECT(tmp_class_creation_21__metaclass);
        tmp_expression_value_110 = tmp_class_creation_21__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_110, mod_consts[58]);
        tmp_condition_result_124 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_124 == NUITKA_BOOL_TRUE) {
            goto branch_yes_82;
        } else {
            goto branch_no_82;
        }
    }
    branch_yes_82:;
    {
        PyObject *tmp_assign_source_182;
        PyObject *tmp_called_value_41;
        PyObject *tmp_expression_value_111;
        PyObject *tmp_args_value_41;
        PyObject *tmp_tuple_element_82;
        PyObject *tmp_kwargs_value_41;
        CHECK_OBJECT(tmp_class_creation_21__metaclass);
        tmp_expression_value_111 = tmp_class_creation_21__metaclass;
        tmp_called_value_41 = LOOKUP_ATTRIBUTE(tmp_expression_value_111, mod_consts[58]);
        if (tmp_called_value_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;

            goto try_except_handler_63;
        }
        tmp_tuple_element_82 = mod_consts[116];
        tmp_args_value_41 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_41, 0, tmp_tuple_element_82);
        CHECK_OBJECT(tmp_class_creation_21__bases);
        tmp_tuple_element_82 = tmp_class_creation_21__bases;
        PyTuple_SET_ITEM0(tmp_args_value_41, 1, tmp_tuple_element_82);
        CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
        tmp_kwargs_value_41 = tmp_class_creation_21__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 229;
        tmp_assign_source_182 = CALL_FUNCTION(tmp_called_value_41, tmp_args_value_41, tmp_kwargs_value_41);
        Py_DECREF(tmp_called_value_41);
        Py_DECREF(tmp_args_value_41);
        if (tmp_assign_source_182 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;

            goto try_except_handler_63;
        }
        assert(tmp_class_creation_21__prepared == NULL);
        tmp_class_creation_21__prepared = tmp_assign_source_182;
    }
    {
        bool tmp_condition_result_125;
        PyObject *tmp_operand_value_21;
        PyObject *tmp_expression_value_112;
        CHECK_OBJECT(tmp_class_creation_21__prepared);
        tmp_expression_value_112 = tmp_class_creation_21__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_112, mod_consts[60]);
        tmp_operand_value_21 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_21);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;

            goto try_except_handler_63;
        }
        tmp_condition_result_125 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_125 != false) {
            goto branch_yes_83;
        } else {
            goto branch_no_83;
        }
    }
    branch_yes_83:;
    {
        PyObject *tmp_raise_type_21;
        PyObject *tmp_raise_value_21;
        PyObject *tmp_left_value_21;
        PyObject *tmp_right_value_21;
        PyObject *tmp_tuple_element_83;
        PyObject *tmp_getattr_target_21;
        PyObject *tmp_getattr_attr_21;
        PyObject *tmp_getattr_default_21;
        tmp_raise_type_21 = PyExc_TypeError;
        tmp_left_value_21 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_21__metaclass);
        tmp_getattr_target_21 = tmp_class_creation_21__metaclass;
        tmp_getattr_attr_21 = mod_consts[62];
        tmp_getattr_default_21 = mod_consts[63];
        tmp_tuple_element_83 = BUILTIN_GETATTR(tmp_getattr_target_21, tmp_getattr_attr_21, tmp_getattr_default_21);
        if (tmp_tuple_element_83 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;

            goto try_except_handler_63;
        }
        tmp_right_value_21 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_113;
            PyObject *tmp_type_arg_42;
            PyTuple_SET_ITEM(tmp_right_value_21, 0, tmp_tuple_element_83);
            CHECK_OBJECT(tmp_class_creation_21__prepared);
            tmp_type_arg_42 = tmp_class_creation_21__prepared;
            tmp_expression_value_113 = BUILTIN_TYPE1(tmp_type_arg_42);
            assert(!(tmp_expression_value_113 == NULL));
            tmp_tuple_element_83 = LOOKUP_ATTRIBUTE(tmp_expression_value_113, mod_consts[62]);
            Py_DECREF(tmp_expression_value_113);
            if (tmp_tuple_element_83 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 229;

                goto tuple_build_exception_21;
            }
            PyTuple_SET_ITEM(tmp_right_value_21, 1, tmp_tuple_element_83);
        }
        goto tuple_build_noexception_21;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_21:;
        Py_DECREF(tmp_right_value_21);
        goto try_except_handler_63;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_21:;
        tmp_raise_value_21 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_21, tmp_right_value_21);
        Py_DECREF(tmp_right_value_21);
        if (tmp_raise_value_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;

            goto try_except_handler_63;
        }
        exception_type = tmp_raise_type_21;
        Py_INCREF(tmp_raise_type_21);
        exception_value = tmp_raise_value_21;
        exception_lineno = 229;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_63;
    }
    branch_no_83:;
    goto branch_end_82;
    branch_no_82:;
    {
        PyObject *tmp_assign_source_183;
        tmp_assign_source_183 = PyDict_New();
        assert(tmp_class_creation_21__prepared == NULL);
        tmp_class_creation_21__prepared = tmp_assign_source_183;
    }
    branch_end_82:;
    {
        PyObject *tmp_assign_source_184;
        {
            PyObject *tmp_set_locals_21;
            CHECK_OBJECT(tmp_class_creation_21__prepared);
            tmp_set_locals_21 = tmp_class_creation_21__prepared;
            locals_aiohttp$web_exceptions$$$class__21_HTTPClientError_229 = tmp_set_locals_21;
            Py_INCREF(tmp_set_locals_21);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__21_HTTPClientError_229, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;

            goto try_except_handler_65;
        }
        tmp_dictset_value = mod_consts[116];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__21_HTTPClientError_229, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;

            goto try_except_handler_65;
        }
        {
            nuitka_bool tmp_condition_result_126;
            PyObject *tmp_cmp_expr_left_21;
            PyObject *tmp_cmp_expr_right_21;
            CHECK_OBJECT(tmp_class_creation_21__bases);
            tmp_cmp_expr_left_21 = tmp_class_creation_21__bases;
            CHECK_OBJECT(tmp_class_creation_21__bases_orig);
            tmp_cmp_expr_right_21 = tmp_class_creation_21__bases_orig;
            tmp_condition_result_126 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_21, tmp_cmp_expr_right_21);
            if (tmp_condition_result_126 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 229;

                goto try_except_handler_65;
            }
            if (tmp_condition_result_126 == NUITKA_BOOL_TRUE) {
                goto branch_yes_84;
            } else {
                goto branch_no_84;
            }
            assert(tmp_condition_result_126 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_84:;
        CHECK_OBJECT(tmp_class_creation_21__bases_orig);
        tmp_dictset_value = tmp_class_creation_21__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__21_HTTPClientError_229, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;

            goto try_except_handler_65;
        }
        branch_no_84:;
        {
            PyObject *tmp_assign_source_185;
            PyObject *tmp_called_value_42;
            PyObject *tmp_args_value_42;
            PyObject *tmp_tuple_element_84;
            PyObject *tmp_kwargs_value_42;
            CHECK_OBJECT(tmp_class_creation_21__metaclass);
            tmp_called_value_42 = tmp_class_creation_21__metaclass;
            tmp_tuple_element_84 = mod_consts[116];
            tmp_args_value_42 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_42, 0, tmp_tuple_element_84);
            CHECK_OBJECT(tmp_class_creation_21__bases);
            tmp_tuple_element_84 = tmp_class_creation_21__bases;
            PyTuple_SET_ITEM0(tmp_args_value_42, 1, tmp_tuple_element_84);
            tmp_tuple_element_84 = locals_aiohttp$web_exceptions$$$class__21_HTTPClientError_229;
            PyTuple_SET_ITEM0(tmp_args_value_42, 2, tmp_tuple_element_84);
            CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
            tmp_kwargs_value_42 = tmp_class_creation_21__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 229;
            tmp_assign_source_185 = CALL_FUNCTION(tmp_called_value_42, tmp_args_value_42, tmp_kwargs_value_42);
            Py_DECREF(tmp_args_value_42);
            if (tmp_assign_source_185 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 229;

                goto try_except_handler_65;
            }
            assert(outline_20_var___class__ == NULL);
            outline_20_var___class__ = tmp_assign_source_185;
        }
        CHECK_OBJECT(outline_20_var___class__);
        tmp_assign_source_184 = outline_20_var___class__;
        Py_INCREF(tmp_assign_source_184);
        goto try_return_handler_65;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_65:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__21_HTTPClientError_229);
        locals_aiohttp$web_exceptions$$$class__21_HTTPClientError_229 = NULL;
        goto try_return_handler_64;
        // Exception handler code:
        try_except_handler_65:;
        exception_keeper_type_63 = exception_type;
        exception_keeper_value_63 = exception_value;
        exception_keeper_tb_63 = exception_tb;
        exception_keeper_lineno_63 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__21_HTTPClientError_229);
        locals_aiohttp$web_exceptions$$$class__21_HTTPClientError_229 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_63;
        exception_value = exception_keeper_value_63;
        exception_tb = exception_keeper_tb_63;
        exception_lineno = exception_keeper_lineno_63;

        goto try_except_handler_64;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_64:;
        CHECK_OBJECT(outline_20_var___class__);
        Py_DECREF(outline_20_var___class__);
        outline_20_var___class__ = NULL;
        goto outline_result_21;
        // Exception handler code:
        try_except_handler_64:;
        exception_keeper_type_64 = exception_type;
        exception_keeper_value_64 = exception_value;
        exception_keeper_tb_64 = exception_tb;
        exception_keeper_lineno_64 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_64;
        exception_value = exception_keeper_value_64;
        exception_tb = exception_keeper_tb_64;
        exception_lineno = exception_keeper_lineno_64;

        goto outline_exception_21;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_21:;
        exception_lineno = 229;
        goto try_except_handler_63;
        outline_result_21:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[116], tmp_assign_source_184);
    }
    goto try_end_23;
    // Exception handler code:
    try_except_handler_63:;
    exception_keeper_type_65 = exception_type;
    exception_keeper_value_65 = exception_value;
    exception_keeper_tb_65 = exception_tb;
    exception_keeper_lineno_65 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_21__bases_orig);
    tmp_class_creation_21__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_21__bases);
    tmp_class_creation_21__bases = NULL;
    Py_XDECREF(tmp_class_creation_21__class_decl_dict);
    tmp_class_creation_21__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_21__metaclass);
    tmp_class_creation_21__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_21__prepared);
    tmp_class_creation_21__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_65;
    exception_value = exception_keeper_value_65;
    exception_tb = exception_keeper_tb_65;
    exception_lineno = exception_keeper_lineno_65;

    goto frame_exception_exit_1;
    // End of try:
    try_end_23:;
    CHECK_OBJECT(tmp_class_creation_21__bases_orig);
    Py_DECREF(tmp_class_creation_21__bases_orig);
    tmp_class_creation_21__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_21__bases);
    Py_DECREF(tmp_class_creation_21__bases);
    tmp_class_creation_21__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
    Py_DECREF(tmp_class_creation_21__class_decl_dict);
    tmp_class_creation_21__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_21__metaclass);
    Py_DECREF(tmp_class_creation_21__metaclass);
    tmp_class_creation_21__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_21__prepared);
    Py_DECREF(tmp_class_creation_21__prepared);
    tmp_class_creation_21__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_186;
        PyObject *tmp_tuple_element_85;
        tmp_tuple_element_85 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[116]);

        if (unlikely(tmp_tuple_element_85 == NULL)) {
            tmp_tuple_element_85 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[116]);
        }

        if (tmp_tuple_element_85 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 233;

            goto try_except_handler_66;
        }
        tmp_assign_source_186 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_186, 0, tmp_tuple_element_85);
        assert(tmp_class_creation_22__bases_orig == NULL);
        tmp_class_creation_22__bases_orig = tmp_assign_source_186;
    }
    {
        PyObject *tmp_assign_source_187;
        PyObject *tmp_dircall_arg1_22;
        CHECK_OBJECT(tmp_class_creation_22__bases_orig);
        tmp_dircall_arg1_22 = tmp_class_creation_22__bases_orig;
        Py_INCREF(tmp_dircall_arg1_22);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_22};
            tmp_assign_source_187 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_187 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 233;

            goto try_except_handler_66;
        }
        assert(tmp_class_creation_22__bases == NULL);
        tmp_class_creation_22__bases = tmp_assign_source_187;
    }
    {
        PyObject *tmp_assign_source_188;
        tmp_assign_source_188 = PyDict_New();
        assert(tmp_class_creation_22__class_decl_dict == NULL);
        tmp_class_creation_22__class_decl_dict = tmp_assign_source_188;
    }
    {
        PyObject *tmp_assign_source_189;
        PyObject *tmp_metaclass_value_22;
        bool tmp_condition_result_127;
        PyObject *tmp_key_value_64;
        PyObject *tmp_dict_arg_value_64;
        PyObject *tmp_dict_arg_value_65;
        PyObject *tmp_key_value_65;
        nuitka_bool tmp_condition_result_128;
        int tmp_truth_name_22;
        PyObject *tmp_type_arg_43;
        PyObject *tmp_expression_value_114;
        PyObject *tmp_subscript_value_30;
        PyObject *tmp_bases_value_22;
        tmp_key_value_64 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
        tmp_dict_arg_value_64 = tmp_class_creation_22__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_64, tmp_key_value_64);
        assert(!(tmp_res == -1));
        tmp_condition_result_127 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_127 != false) {
            goto condexpr_true_43;
        } else {
            goto condexpr_false_43;
        }
        condexpr_true_43:;
        CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
        tmp_dict_arg_value_65 = tmp_class_creation_22__class_decl_dict;
        tmp_key_value_65 = mod_consts[57];
        tmp_metaclass_value_22 = DICT_GET_ITEM0(tmp_dict_arg_value_65, tmp_key_value_65);
        if (tmp_metaclass_value_22 == NULL) {
            tmp_metaclass_value_22 = Py_None;
        }
        assert(!(tmp_metaclass_value_22 == NULL));
        Py_INCREF(tmp_metaclass_value_22);
        goto condexpr_end_43;
        condexpr_false_43:;
        CHECK_OBJECT(tmp_class_creation_22__bases);
        tmp_truth_name_22 = CHECK_IF_TRUE(tmp_class_creation_22__bases);
        if (tmp_truth_name_22 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 233;

            goto try_except_handler_66;
        }
        tmp_condition_result_128 = tmp_truth_name_22 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_128 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_44;
        } else {
            goto condexpr_false_44;
        }
        condexpr_true_44:;
        CHECK_OBJECT(tmp_class_creation_22__bases);
        tmp_expression_value_114 = tmp_class_creation_22__bases;
        tmp_subscript_value_30 = mod_consts[39];
        tmp_type_arg_43 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_114, tmp_subscript_value_30, 0);
        if (tmp_type_arg_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 233;

            goto try_except_handler_66;
        }
        tmp_metaclass_value_22 = BUILTIN_TYPE1(tmp_type_arg_43);
        Py_DECREF(tmp_type_arg_43);
        if (tmp_metaclass_value_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 233;

            goto try_except_handler_66;
        }
        goto condexpr_end_44;
        condexpr_false_44:;
        tmp_metaclass_value_22 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_22);
        condexpr_end_44:;
        condexpr_end_43:;
        CHECK_OBJECT(tmp_class_creation_22__bases);
        tmp_bases_value_22 = tmp_class_creation_22__bases;
        tmp_assign_source_189 = SELECT_METACLASS(tmp_metaclass_value_22, tmp_bases_value_22);
        Py_DECREF(tmp_metaclass_value_22);
        if (tmp_assign_source_189 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 233;

            goto try_except_handler_66;
        }
        assert(tmp_class_creation_22__metaclass == NULL);
        tmp_class_creation_22__metaclass = tmp_assign_source_189;
    }
    {
        bool tmp_condition_result_129;
        PyObject *tmp_key_value_66;
        PyObject *tmp_dict_arg_value_66;
        tmp_key_value_66 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
        tmp_dict_arg_value_66 = tmp_class_creation_22__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_66, tmp_key_value_66);
        assert(!(tmp_res == -1));
        tmp_condition_result_129 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_129 != false) {
            goto branch_yes_85;
        } else {
            goto branch_no_85;
        }
    }
    branch_yes_85:;
    CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_22__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 233;

        goto try_except_handler_66;
    }
    branch_no_85:;
    {
        nuitka_bool tmp_condition_result_130;
        PyObject *tmp_expression_value_115;
        CHECK_OBJECT(tmp_class_creation_22__metaclass);
        tmp_expression_value_115 = tmp_class_creation_22__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_115, mod_consts[58]);
        tmp_condition_result_130 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_130 == NUITKA_BOOL_TRUE) {
            goto branch_yes_86;
        } else {
            goto branch_no_86;
        }
    }
    branch_yes_86:;
    {
        PyObject *tmp_assign_source_190;
        PyObject *tmp_called_value_43;
        PyObject *tmp_expression_value_116;
        PyObject *tmp_args_value_43;
        PyObject *tmp_tuple_element_86;
        PyObject *tmp_kwargs_value_43;
        CHECK_OBJECT(tmp_class_creation_22__metaclass);
        tmp_expression_value_116 = tmp_class_creation_22__metaclass;
        tmp_called_value_43 = LOOKUP_ATTRIBUTE(tmp_expression_value_116, mod_consts[58]);
        if (tmp_called_value_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 233;

            goto try_except_handler_66;
        }
        tmp_tuple_element_86 = mod_consts[117];
        tmp_args_value_43 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_43, 0, tmp_tuple_element_86);
        CHECK_OBJECT(tmp_class_creation_22__bases);
        tmp_tuple_element_86 = tmp_class_creation_22__bases;
        PyTuple_SET_ITEM0(tmp_args_value_43, 1, tmp_tuple_element_86);
        CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
        tmp_kwargs_value_43 = tmp_class_creation_22__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 233;
        tmp_assign_source_190 = CALL_FUNCTION(tmp_called_value_43, tmp_args_value_43, tmp_kwargs_value_43);
        Py_DECREF(tmp_called_value_43);
        Py_DECREF(tmp_args_value_43);
        if (tmp_assign_source_190 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 233;

            goto try_except_handler_66;
        }
        assert(tmp_class_creation_22__prepared == NULL);
        tmp_class_creation_22__prepared = tmp_assign_source_190;
    }
    {
        bool tmp_condition_result_131;
        PyObject *tmp_operand_value_22;
        PyObject *tmp_expression_value_117;
        CHECK_OBJECT(tmp_class_creation_22__prepared);
        tmp_expression_value_117 = tmp_class_creation_22__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_117, mod_consts[60]);
        tmp_operand_value_22 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_22);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 233;

            goto try_except_handler_66;
        }
        tmp_condition_result_131 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_131 != false) {
            goto branch_yes_87;
        } else {
            goto branch_no_87;
        }
    }
    branch_yes_87:;
    {
        PyObject *tmp_raise_type_22;
        PyObject *tmp_raise_value_22;
        PyObject *tmp_left_value_22;
        PyObject *tmp_right_value_22;
        PyObject *tmp_tuple_element_87;
        PyObject *tmp_getattr_target_22;
        PyObject *tmp_getattr_attr_22;
        PyObject *tmp_getattr_default_22;
        tmp_raise_type_22 = PyExc_TypeError;
        tmp_left_value_22 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_22__metaclass);
        tmp_getattr_target_22 = tmp_class_creation_22__metaclass;
        tmp_getattr_attr_22 = mod_consts[62];
        tmp_getattr_default_22 = mod_consts[63];
        tmp_tuple_element_87 = BUILTIN_GETATTR(tmp_getattr_target_22, tmp_getattr_attr_22, tmp_getattr_default_22);
        if (tmp_tuple_element_87 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 233;

            goto try_except_handler_66;
        }
        tmp_right_value_22 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_118;
            PyObject *tmp_type_arg_44;
            PyTuple_SET_ITEM(tmp_right_value_22, 0, tmp_tuple_element_87);
            CHECK_OBJECT(tmp_class_creation_22__prepared);
            tmp_type_arg_44 = tmp_class_creation_22__prepared;
            tmp_expression_value_118 = BUILTIN_TYPE1(tmp_type_arg_44);
            assert(!(tmp_expression_value_118 == NULL));
            tmp_tuple_element_87 = LOOKUP_ATTRIBUTE(tmp_expression_value_118, mod_consts[62]);
            Py_DECREF(tmp_expression_value_118);
            if (tmp_tuple_element_87 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 233;

                goto tuple_build_exception_22;
            }
            PyTuple_SET_ITEM(tmp_right_value_22, 1, tmp_tuple_element_87);
        }
        goto tuple_build_noexception_22;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_22:;
        Py_DECREF(tmp_right_value_22);
        goto try_except_handler_66;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_22:;
        tmp_raise_value_22 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_22, tmp_right_value_22);
        Py_DECREF(tmp_right_value_22);
        if (tmp_raise_value_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 233;

            goto try_except_handler_66;
        }
        exception_type = tmp_raise_type_22;
        Py_INCREF(tmp_raise_type_22);
        exception_value = tmp_raise_value_22;
        exception_lineno = 233;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_66;
    }
    branch_no_87:;
    goto branch_end_86;
    branch_no_86:;
    {
        PyObject *tmp_assign_source_191;
        tmp_assign_source_191 = PyDict_New();
        assert(tmp_class_creation_22__prepared == NULL);
        tmp_class_creation_22__prepared = tmp_assign_source_191;
    }
    branch_end_86:;
    {
        PyObject *tmp_assign_source_192;
        {
            PyObject *tmp_set_locals_22;
            CHECK_OBJECT(tmp_class_creation_22__prepared);
            tmp_set_locals_22 = tmp_class_creation_22__prepared;
            locals_aiohttp$web_exceptions$$$class__22_HTTPBadRequest_233 = tmp_set_locals_22;
            Py_INCREF(tmp_set_locals_22);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__22_HTTPBadRequest_233, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 233;

            goto try_except_handler_68;
        }
        tmp_dictset_value = mod_consts[117];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__22_HTTPBadRequest_233, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 233;

            goto try_except_handler_68;
        }
        if (isFrameUnusable(cache_frame_b808cbf6ef3af6bdee26d60d49d98fe9_19)) {
            Py_XDECREF(cache_frame_b808cbf6ef3af6bdee26d60d49d98fe9_19);

#if _DEBUG_REFCOUNTS
            if (cache_frame_b808cbf6ef3af6bdee26d60d49d98fe9_19 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_b808cbf6ef3af6bdee26d60d49d98fe9_19 = MAKE_FUNCTION_FRAME(codeobj_b808cbf6ef3af6bdee26d60d49d98fe9, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_b808cbf6ef3af6bdee26d60d49d98fe9_19->m_type_description == NULL);
        frame_b808cbf6ef3af6bdee26d60d49d98fe9_19 = cache_frame_b808cbf6ef3af6bdee26d60d49d98fe9_19;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_b808cbf6ef3af6bdee26d60d49d98fe9_19);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_b808cbf6ef3af6bdee26d60d49d98fe9_19) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[118];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__22_HTTPBadRequest_233, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 234;
            type_description_2 = "o";
            goto frame_exception_exit_19;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b808cbf6ef3af6bdee26d60d49d98fe9_19);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_18;

        frame_exception_exit_19:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b808cbf6ef3af6bdee26d60d49d98fe9_19);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_b808cbf6ef3af6bdee26d60d49d98fe9_19, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_b808cbf6ef3af6bdee26d60d49d98fe9_19->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_b808cbf6ef3af6bdee26d60d49d98fe9_19, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_b808cbf6ef3af6bdee26d60d49d98fe9_19,
            type_description_2,
            outline_21_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_b808cbf6ef3af6bdee26d60d49d98fe9_19 == cache_frame_b808cbf6ef3af6bdee26d60d49d98fe9_19) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_b808cbf6ef3af6bdee26d60d49d98fe9_19);
            cache_frame_b808cbf6ef3af6bdee26d60d49d98fe9_19 = NULL;
        }

        assertFrameObject(frame_b808cbf6ef3af6bdee26d60d49d98fe9_19);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_18;

        frame_no_exception_18:;
        goto skip_nested_handling_18;
        nested_frame_exit_18:;

        goto try_except_handler_68;
        skip_nested_handling_18:;
        {
            nuitka_bool tmp_condition_result_132;
            PyObject *tmp_cmp_expr_left_22;
            PyObject *tmp_cmp_expr_right_22;
            CHECK_OBJECT(tmp_class_creation_22__bases);
            tmp_cmp_expr_left_22 = tmp_class_creation_22__bases;
            CHECK_OBJECT(tmp_class_creation_22__bases_orig);
            tmp_cmp_expr_right_22 = tmp_class_creation_22__bases_orig;
            tmp_condition_result_132 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_22, tmp_cmp_expr_right_22);
            if (tmp_condition_result_132 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 233;

                goto try_except_handler_68;
            }
            if (tmp_condition_result_132 == NUITKA_BOOL_TRUE) {
                goto branch_yes_88;
            } else {
                goto branch_no_88;
            }
            assert(tmp_condition_result_132 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_88:;
        CHECK_OBJECT(tmp_class_creation_22__bases_orig);
        tmp_dictset_value = tmp_class_creation_22__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__22_HTTPBadRequest_233, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 233;

            goto try_except_handler_68;
        }
        branch_no_88:;
        {
            PyObject *tmp_assign_source_193;
            PyObject *tmp_called_value_44;
            PyObject *tmp_args_value_44;
            PyObject *tmp_tuple_element_88;
            PyObject *tmp_kwargs_value_44;
            CHECK_OBJECT(tmp_class_creation_22__metaclass);
            tmp_called_value_44 = tmp_class_creation_22__metaclass;
            tmp_tuple_element_88 = mod_consts[117];
            tmp_args_value_44 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_44, 0, tmp_tuple_element_88);
            CHECK_OBJECT(tmp_class_creation_22__bases);
            tmp_tuple_element_88 = tmp_class_creation_22__bases;
            PyTuple_SET_ITEM0(tmp_args_value_44, 1, tmp_tuple_element_88);
            tmp_tuple_element_88 = locals_aiohttp$web_exceptions$$$class__22_HTTPBadRequest_233;
            PyTuple_SET_ITEM0(tmp_args_value_44, 2, tmp_tuple_element_88);
            CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
            tmp_kwargs_value_44 = tmp_class_creation_22__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 233;
            tmp_assign_source_193 = CALL_FUNCTION(tmp_called_value_44, tmp_args_value_44, tmp_kwargs_value_44);
            Py_DECREF(tmp_args_value_44);
            if (tmp_assign_source_193 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 233;

                goto try_except_handler_68;
            }
            assert(outline_21_var___class__ == NULL);
            outline_21_var___class__ = tmp_assign_source_193;
        }
        CHECK_OBJECT(outline_21_var___class__);
        tmp_assign_source_192 = outline_21_var___class__;
        Py_INCREF(tmp_assign_source_192);
        goto try_return_handler_68;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_68:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__22_HTTPBadRequest_233);
        locals_aiohttp$web_exceptions$$$class__22_HTTPBadRequest_233 = NULL;
        goto try_return_handler_67;
        // Exception handler code:
        try_except_handler_68:;
        exception_keeper_type_66 = exception_type;
        exception_keeper_value_66 = exception_value;
        exception_keeper_tb_66 = exception_tb;
        exception_keeper_lineno_66 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__22_HTTPBadRequest_233);
        locals_aiohttp$web_exceptions$$$class__22_HTTPBadRequest_233 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_66;
        exception_value = exception_keeper_value_66;
        exception_tb = exception_keeper_tb_66;
        exception_lineno = exception_keeper_lineno_66;

        goto try_except_handler_67;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_67:;
        CHECK_OBJECT(outline_21_var___class__);
        Py_DECREF(outline_21_var___class__);
        outline_21_var___class__ = NULL;
        goto outline_result_22;
        // Exception handler code:
        try_except_handler_67:;
        exception_keeper_type_67 = exception_type;
        exception_keeper_value_67 = exception_value;
        exception_keeper_tb_67 = exception_tb;
        exception_keeper_lineno_67 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_67;
        exception_value = exception_keeper_value_67;
        exception_tb = exception_keeper_tb_67;
        exception_lineno = exception_keeper_lineno_67;

        goto outline_exception_22;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_22:;
        exception_lineno = 233;
        goto try_except_handler_66;
        outline_result_22:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[117], tmp_assign_source_192);
    }
    goto try_end_24;
    // Exception handler code:
    try_except_handler_66:;
    exception_keeper_type_68 = exception_type;
    exception_keeper_value_68 = exception_value;
    exception_keeper_tb_68 = exception_tb;
    exception_keeper_lineno_68 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_22__bases_orig);
    tmp_class_creation_22__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_22__bases);
    tmp_class_creation_22__bases = NULL;
    Py_XDECREF(tmp_class_creation_22__class_decl_dict);
    tmp_class_creation_22__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_22__metaclass);
    tmp_class_creation_22__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_22__prepared);
    tmp_class_creation_22__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_68;
    exception_value = exception_keeper_value_68;
    exception_tb = exception_keeper_tb_68;
    exception_lineno = exception_keeper_lineno_68;

    goto frame_exception_exit_1;
    // End of try:
    try_end_24:;
    CHECK_OBJECT(tmp_class_creation_22__bases_orig);
    Py_DECREF(tmp_class_creation_22__bases_orig);
    tmp_class_creation_22__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_22__bases);
    Py_DECREF(tmp_class_creation_22__bases);
    tmp_class_creation_22__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
    Py_DECREF(tmp_class_creation_22__class_decl_dict);
    tmp_class_creation_22__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_22__metaclass);
    Py_DECREF(tmp_class_creation_22__metaclass);
    tmp_class_creation_22__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_22__prepared);
    Py_DECREF(tmp_class_creation_22__prepared);
    tmp_class_creation_22__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_194;
        PyObject *tmp_tuple_element_89;
        tmp_tuple_element_89 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[116]);

        if (unlikely(tmp_tuple_element_89 == NULL)) {
            tmp_tuple_element_89 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[116]);
        }

        if (tmp_tuple_element_89 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 237;

            goto try_except_handler_69;
        }
        tmp_assign_source_194 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_194, 0, tmp_tuple_element_89);
        assert(tmp_class_creation_23__bases_orig == NULL);
        tmp_class_creation_23__bases_orig = tmp_assign_source_194;
    }
    {
        PyObject *tmp_assign_source_195;
        PyObject *tmp_dircall_arg1_23;
        CHECK_OBJECT(tmp_class_creation_23__bases_orig);
        tmp_dircall_arg1_23 = tmp_class_creation_23__bases_orig;
        Py_INCREF(tmp_dircall_arg1_23);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_23};
            tmp_assign_source_195 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_195 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 237;

            goto try_except_handler_69;
        }
        assert(tmp_class_creation_23__bases == NULL);
        tmp_class_creation_23__bases = tmp_assign_source_195;
    }
    {
        PyObject *tmp_assign_source_196;
        tmp_assign_source_196 = PyDict_New();
        assert(tmp_class_creation_23__class_decl_dict == NULL);
        tmp_class_creation_23__class_decl_dict = tmp_assign_source_196;
    }
    {
        PyObject *tmp_assign_source_197;
        PyObject *tmp_metaclass_value_23;
        bool tmp_condition_result_133;
        PyObject *tmp_key_value_67;
        PyObject *tmp_dict_arg_value_67;
        PyObject *tmp_dict_arg_value_68;
        PyObject *tmp_key_value_68;
        nuitka_bool tmp_condition_result_134;
        int tmp_truth_name_23;
        PyObject *tmp_type_arg_45;
        PyObject *tmp_expression_value_119;
        PyObject *tmp_subscript_value_31;
        PyObject *tmp_bases_value_23;
        tmp_key_value_67 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
        tmp_dict_arg_value_67 = tmp_class_creation_23__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_67, tmp_key_value_67);
        assert(!(tmp_res == -1));
        tmp_condition_result_133 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_133 != false) {
            goto condexpr_true_45;
        } else {
            goto condexpr_false_45;
        }
        condexpr_true_45:;
        CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
        tmp_dict_arg_value_68 = tmp_class_creation_23__class_decl_dict;
        tmp_key_value_68 = mod_consts[57];
        tmp_metaclass_value_23 = DICT_GET_ITEM0(tmp_dict_arg_value_68, tmp_key_value_68);
        if (tmp_metaclass_value_23 == NULL) {
            tmp_metaclass_value_23 = Py_None;
        }
        assert(!(tmp_metaclass_value_23 == NULL));
        Py_INCREF(tmp_metaclass_value_23);
        goto condexpr_end_45;
        condexpr_false_45:;
        CHECK_OBJECT(tmp_class_creation_23__bases);
        tmp_truth_name_23 = CHECK_IF_TRUE(tmp_class_creation_23__bases);
        if (tmp_truth_name_23 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 237;

            goto try_except_handler_69;
        }
        tmp_condition_result_134 = tmp_truth_name_23 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_134 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_46;
        } else {
            goto condexpr_false_46;
        }
        condexpr_true_46:;
        CHECK_OBJECT(tmp_class_creation_23__bases);
        tmp_expression_value_119 = tmp_class_creation_23__bases;
        tmp_subscript_value_31 = mod_consts[39];
        tmp_type_arg_45 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_119, tmp_subscript_value_31, 0);
        if (tmp_type_arg_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 237;

            goto try_except_handler_69;
        }
        tmp_metaclass_value_23 = BUILTIN_TYPE1(tmp_type_arg_45);
        Py_DECREF(tmp_type_arg_45);
        if (tmp_metaclass_value_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 237;

            goto try_except_handler_69;
        }
        goto condexpr_end_46;
        condexpr_false_46:;
        tmp_metaclass_value_23 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_23);
        condexpr_end_46:;
        condexpr_end_45:;
        CHECK_OBJECT(tmp_class_creation_23__bases);
        tmp_bases_value_23 = tmp_class_creation_23__bases;
        tmp_assign_source_197 = SELECT_METACLASS(tmp_metaclass_value_23, tmp_bases_value_23);
        Py_DECREF(tmp_metaclass_value_23);
        if (tmp_assign_source_197 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 237;

            goto try_except_handler_69;
        }
        assert(tmp_class_creation_23__metaclass == NULL);
        tmp_class_creation_23__metaclass = tmp_assign_source_197;
    }
    {
        bool tmp_condition_result_135;
        PyObject *tmp_key_value_69;
        PyObject *tmp_dict_arg_value_69;
        tmp_key_value_69 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
        tmp_dict_arg_value_69 = tmp_class_creation_23__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_69, tmp_key_value_69);
        assert(!(tmp_res == -1));
        tmp_condition_result_135 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_135 != false) {
            goto branch_yes_89;
        } else {
            goto branch_no_89;
        }
    }
    branch_yes_89:;
    CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_23__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 237;

        goto try_except_handler_69;
    }
    branch_no_89:;
    {
        nuitka_bool tmp_condition_result_136;
        PyObject *tmp_expression_value_120;
        CHECK_OBJECT(tmp_class_creation_23__metaclass);
        tmp_expression_value_120 = tmp_class_creation_23__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_120, mod_consts[58]);
        tmp_condition_result_136 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_136 == NUITKA_BOOL_TRUE) {
            goto branch_yes_90;
        } else {
            goto branch_no_90;
        }
    }
    branch_yes_90:;
    {
        PyObject *tmp_assign_source_198;
        PyObject *tmp_called_value_45;
        PyObject *tmp_expression_value_121;
        PyObject *tmp_args_value_45;
        PyObject *tmp_tuple_element_90;
        PyObject *tmp_kwargs_value_45;
        CHECK_OBJECT(tmp_class_creation_23__metaclass);
        tmp_expression_value_121 = tmp_class_creation_23__metaclass;
        tmp_called_value_45 = LOOKUP_ATTRIBUTE(tmp_expression_value_121, mod_consts[58]);
        if (tmp_called_value_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 237;

            goto try_except_handler_69;
        }
        tmp_tuple_element_90 = mod_consts[119];
        tmp_args_value_45 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_45, 0, tmp_tuple_element_90);
        CHECK_OBJECT(tmp_class_creation_23__bases);
        tmp_tuple_element_90 = tmp_class_creation_23__bases;
        PyTuple_SET_ITEM0(tmp_args_value_45, 1, tmp_tuple_element_90);
        CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
        tmp_kwargs_value_45 = tmp_class_creation_23__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 237;
        tmp_assign_source_198 = CALL_FUNCTION(tmp_called_value_45, tmp_args_value_45, tmp_kwargs_value_45);
        Py_DECREF(tmp_called_value_45);
        Py_DECREF(tmp_args_value_45);
        if (tmp_assign_source_198 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 237;

            goto try_except_handler_69;
        }
        assert(tmp_class_creation_23__prepared == NULL);
        tmp_class_creation_23__prepared = tmp_assign_source_198;
    }
    {
        bool tmp_condition_result_137;
        PyObject *tmp_operand_value_23;
        PyObject *tmp_expression_value_122;
        CHECK_OBJECT(tmp_class_creation_23__prepared);
        tmp_expression_value_122 = tmp_class_creation_23__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_122, mod_consts[60]);
        tmp_operand_value_23 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_23);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 237;

            goto try_except_handler_69;
        }
        tmp_condition_result_137 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_137 != false) {
            goto branch_yes_91;
        } else {
            goto branch_no_91;
        }
    }
    branch_yes_91:;
    {
        PyObject *tmp_raise_type_23;
        PyObject *tmp_raise_value_23;
        PyObject *tmp_left_value_23;
        PyObject *tmp_right_value_23;
        PyObject *tmp_tuple_element_91;
        PyObject *tmp_getattr_target_23;
        PyObject *tmp_getattr_attr_23;
        PyObject *tmp_getattr_default_23;
        tmp_raise_type_23 = PyExc_TypeError;
        tmp_left_value_23 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_23__metaclass);
        tmp_getattr_target_23 = tmp_class_creation_23__metaclass;
        tmp_getattr_attr_23 = mod_consts[62];
        tmp_getattr_default_23 = mod_consts[63];
        tmp_tuple_element_91 = BUILTIN_GETATTR(tmp_getattr_target_23, tmp_getattr_attr_23, tmp_getattr_default_23);
        if (tmp_tuple_element_91 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 237;

            goto try_except_handler_69;
        }
        tmp_right_value_23 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_123;
            PyObject *tmp_type_arg_46;
            PyTuple_SET_ITEM(tmp_right_value_23, 0, tmp_tuple_element_91);
            CHECK_OBJECT(tmp_class_creation_23__prepared);
            tmp_type_arg_46 = tmp_class_creation_23__prepared;
            tmp_expression_value_123 = BUILTIN_TYPE1(tmp_type_arg_46);
            assert(!(tmp_expression_value_123 == NULL));
            tmp_tuple_element_91 = LOOKUP_ATTRIBUTE(tmp_expression_value_123, mod_consts[62]);
            Py_DECREF(tmp_expression_value_123);
            if (tmp_tuple_element_91 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 237;

                goto tuple_build_exception_23;
            }
            PyTuple_SET_ITEM(tmp_right_value_23, 1, tmp_tuple_element_91);
        }
        goto tuple_build_noexception_23;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_23:;
        Py_DECREF(tmp_right_value_23);
        goto try_except_handler_69;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_23:;
        tmp_raise_value_23 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_23, tmp_right_value_23);
        Py_DECREF(tmp_right_value_23);
        if (tmp_raise_value_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 237;

            goto try_except_handler_69;
        }
        exception_type = tmp_raise_type_23;
        Py_INCREF(tmp_raise_type_23);
        exception_value = tmp_raise_value_23;
        exception_lineno = 237;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_69;
    }
    branch_no_91:;
    goto branch_end_90;
    branch_no_90:;
    {
        PyObject *tmp_assign_source_199;
        tmp_assign_source_199 = PyDict_New();
        assert(tmp_class_creation_23__prepared == NULL);
        tmp_class_creation_23__prepared = tmp_assign_source_199;
    }
    branch_end_90:;
    {
        PyObject *tmp_assign_source_200;
        {
            PyObject *tmp_set_locals_23;
            CHECK_OBJECT(tmp_class_creation_23__prepared);
            tmp_set_locals_23 = tmp_class_creation_23__prepared;
            locals_aiohttp$web_exceptions$$$class__23_HTTPUnauthorized_237 = tmp_set_locals_23;
            Py_INCREF(tmp_set_locals_23);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__23_HTTPUnauthorized_237, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 237;

            goto try_except_handler_71;
        }
        tmp_dictset_value = mod_consts[119];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__23_HTTPUnauthorized_237, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 237;

            goto try_except_handler_71;
        }
        if (isFrameUnusable(cache_frame_896f721b3cdd968a04613eb95bac246a_20)) {
            Py_XDECREF(cache_frame_896f721b3cdd968a04613eb95bac246a_20);

#if _DEBUG_REFCOUNTS
            if (cache_frame_896f721b3cdd968a04613eb95bac246a_20 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_896f721b3cdd968a04613eb95bac246a_20 = MAKE_FUNCTION_FRAME(codeobj_896f721b3cdd968a04613eb95bac246a, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_896f721b3cdd968a04613eb95bac246a_20->m_type_description == NULL);
        frame_896f721b3cdd968a04613eb95bac246a_20 = cache_frame_896f721b3cdd968a04613eb95bac246a_20;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_896f721b3cdd968a04613eb95bac246a_20);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_896f721b3cdd968a04613eb95bac246a_20) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[120];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__23_HTTPUnauthorized_237, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 238;
            type_description_2 = "o";
            goto frame_exception_exit_20;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_896f721b3cdd968a04613eb95bac246a_20);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_19;

        frame_exception_exit_20:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_896f721b3cdd968a04613eb95bac246a_20);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_896f721b3cdd968a04613eb95bac246a_20, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_896f721b3cdd968a04613eb95bac246a_20->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_896f721b3cdd968a04613eb95bac246a_20, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_896f721b3cdd968a04613eb95bac246a_20,
            type_description_2,
            outline_22_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_896f721b3cdd968a04613eb95bac246a_20 == cache_frame_896f721b3cdd968a04613eb95bac246a_20) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_896f721b3cdd968a04613eb95bac246a_20);
            cache_frame_896f721b3cdd968a04613eb95bac246a_20 = NULL;
        }

        assertFrameObject(frame_896f721b3cdd968a04613eb95bac246a_20);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_19;

        frame_no_exception_19:;
        goto skip_nested_handling_19;
        nested_frame_exit_19:;

        goto try_except_handler_71;
        skip_nested_handling_19:;
        {
            nuitka_bool tmp_condition_result_138;
            PyObject *tmp_cmp_expr_left_23;
            PyObject *tmp_cmp_expr_right_23;
            CHECK_OBJECT(tmp_class_creation_23__bases);
            tmp_cmp_expr_left_23 = tmp_class_creation_23__bases;
            CHECK_OBJECT(tmp_class_creation_23__bases_orig);
            tmp_cmp_expr_right_23 = tmp_class_creation_23__bases_orig;
            tmp_condition_result_138 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_23, tmp_cmp_expr_right_23);
            if (tmp_condition_result_138 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 237;

                goto try_except_handler_71;
            }
            if (tmp_condition_result_138 == NUITKA_BOOL_TRUE) {
                goto branch_yes_92;
            } else {
                goto branch_no_92;
            }
            assert(tmp_condition_result_138 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_92:;
        CHECK_OBJECT(tmp_class_creation_23__bases_orig);
        tmp_dictset_value = tmp_class_creation_23__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__23_HTTPUnauthorized_237, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 237;

            goto try_except_handler_71;
        }
        branch_no_92:;
        {
            PyObject *tmp_assign_source_201;
            PyObject *tmp_called_value_46;
            PyObject *tmp_args_value_46;
            PyObject *tmp_tuple_element_92;
            PyObject *tmp_kwargs_value_46;
            CHECK_OBJECT(tmp_class_creation_23__metaclass);
            tmp_called_value_46 = tmp_class_creation_23__metaclass;
            tmp_tuple_element_92 = mod_consts[119];
            tmp_args_value_46 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_46, 0, tmp_tuple_element_92);
            CHECK_OBJECT(tmp_class_creation_23__bases);
            tmp_tuple_element_92 = tmp_class_creation_23__bases;
            PyTuple_SET_ITEM0(tmp_args_value_46, 1, tmp_tuple_element_92);
            tmp_tuple_element_92 = locals_aiohttp$web_exceptions$$$class__23_HTTPUnauthorized_237;
            PyTuple_SET_ITEM0(tmp_args_value_46, 2, tmp_tuple_element_92);
            CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
            tmp_kwargs_value_46 = tmp_class_creation_23__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 237;
            tmp_assign_source_201 = CALL_FUNCTION(tmp_called_value_46, tmp_args_value_46, tmp_kwargs_value_46);
            Py_DECREF(tmp_args_value_46);
            if (tmp_assign_source_201 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 237;

                goto try_except_handler_71;
            }
            assert(outline_22_var___class__ == NULL);
            outline_22_var___class__ = tmp_assign_source_201;
        }
        CHECK_OBJECT(outline_22_var___class__);
        tmp_assign_source_200 = outline_22_var___class__;
        Py_INCREF(tmp_assign_source_200);
        goto try_return_handler_71;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_71:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__23_HTTPUnauthorized_237);
        locals_aiohttp$web_exceptions$$$class__23_HTTPUnauthorized_237 = NULL;
        goto try_return_handler_70;
        // Exception handler code:
        try_except_handler_71:;
        exception_keeper_type_69 = exception_type;
        exception_keeper_value_69 = exception_value;
        exception_keeper_tb_69 = exception_tb;
        exception_keeper_lineno_69 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__23_HTTPUnauthorized_237);
        locals_aiohttp$web_exceptions$$$class__23_HTTPUnauthorized_237 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_69;
        exception_value = exception_keeper_value_69;
        exception_tb = exception_keeper_tb_69;
        exception_lineno = exception_keeper_lineno_69;

        goto try_except_handler_70;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_70:;
        CHECK_OBJECT(outline_22_var___class__);
        Py_DECREF(outline_22_var___class__);
        outline_22_var___class__ = NULL;
        goto outline_result_23;
        // Exception handler code:
        try_except_handler_70:;
        exception_keeper_type_70 = exception_type;
        exception_keeper_value_70 = exception_value;
        exception_keeper_tb_70 = exception_tb;
        exception_keeper_lineno_70 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_70;
        exception_value = exception_keeper_value_70;
        exception_tb = exception_keeper_tb_70;
        exception_lineno = exception_keeper_lineno_70;

        goto outline_exception_23;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_23:;
        exception_lineno = 237;
        goto try_except_handler_69;
        outline_result_23:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[119], tmp_assign_source_200);
    }
    goto try_end_25;
    // Exception handler code:
    try_except_handler_69:;
    exception_keeper_type_71 = exception_type;
    exception_keeper_value_71 = exception_value;
    exception_keeper_tb_71 = exception_tb;
    exception_keeper_lineno_71 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_23__bases_orig);
    tmp_class_creation_23__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_23__bases);
    tmp_class_creation_23__bases = NULL;
    Py_XDECREF(tmp_class_creation_23__class_decl_dict);
    tmp_class_creation_23__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_23__metaclass);
    tmp_class_creation_23__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_23__prepared);
    tmp_class_creation_23__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_71;
    exception_value = exception_keeper_value_71;
    exception_tb = exception_keeper_tb_71;
    exception_lineno = exception_keeper_lineno_71;

    goto frame_exception_exit_1;
    // End of try:
    try_end_25:;
    CHECK_OBJECT(tmp_class_creation_23__bases_orig);
    Py_DECREF(tmp_class_creation_23__bases_orig);
    tmp_class_creation_23__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_23__bases);
    Py_DECREF(tmp_class_creation_23__bases);
    tmp_class_creation_23__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
    Py_DECREF(tmp_class_creation_23__class_decl_dict);
    tmp_class_creation_23__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_23__metaclass);
    Py_DECREF(tmp_class_creation_23__metaclass);
    tmp_class_creation_23__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_23__prepared);
    Py_DECREF(tmp_class_creation_23__prepared);
    tmp_class_creation_23__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_202;
        PyObject *tmp_tuple_element_93;
        tmp_tuple_element_93 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[116]);

        if (unlikely(tmp_tuple_element_93 == NULL)) {
            tmp_tuple_element_93 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[116]);
        }

        if (tmp_tuple_element_93 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_72;
        }
        tmp_assign_source_202 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_202, 0, tmp_tuple_element_93);
        assert(tmp_class_creation_24__bases_orig == NULL);
        tmp_class_creation_24__bases_orig = tmp_assign_source_202;
    }
    {
        PyObject *tmp_assign_source_203;
        PyObject *tmp_dircall_arg1_24;
        CHECK_OBJECT(tmp_class_creation_24__bases_orig);
        tmp_dircall_arg1_24 = tmp_class_creation_24__bases_orig;
        Py_INCREF(tmp_dircall_arg1_24);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_24};
            tmp_assign_source_203 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_203 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_72;
        }
        assert(tmp_class_creation_24__bases == NULL);
        tmp_class_creation_24__bases = tmp_assign_source_203;
    }
    {
        PyObject *tmp_assign_source_204;
        tmp_assign_source_204 = PyDict_New();
        assert(tmp_class_creation_24__class_decl_dict == NULL);
        tmp_class_creation_24__class_decl_dict = tmp_assign_source_204;
    }
    {
        PyObject *tmp_assign_source_205;
        PyObject *tmp_metaclass_value_24;
        bool tmp_condition_result_139;
        PyObject *tmp_key_value_70;
        PyObject *tmp_dict_arg_value_70;
        PyObject *tmp_dict_arg_value_71;
        PyObject *tmp_key_value_71;
        nuitka_bool tmp_condition_result_140;
        int tmp_truth_name_24;
        PyObject *tmp_type_arg_47;
        PyObject *tmp_expression_value_124;
        PyObject *tmp_subscript_value_32;
        PyObject *tmp_bases_value_24;
        tmp_key_value_70 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
        tmp_dict_arg_value_70 = tmp_class_creation_24__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_70, tmp_key_value_70);
        assert(!(tmp_res == -1));
        tmp_condition_result_139 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_139 != false) {
            goto condexpr_true_47;
        } else {
            goto condexpr_false_47;
        }
        condexpr_true_47:;
        CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
        tmp_dict_arg_value_71 = tmp_class_creation_24__class_decl_dict;
        tmp_key_value_71 = mod_consts[57];
        tmp_metaclass_value_24 = DICT_GET_ITEM0(tmp_dict_arg_value_71, tmp_key_value_71);
        if (tmp_metaclass_value_24 == NULL) {
            tmp_metaclass_value_24 = Py_None;
        }
        assert(!(tmp_metaclass_value_24 == NULL));
        Py_INCREF(tmp_metaclass_value_24);
        goto condexpr_end_47;
        condexpr_false_47:;
        CHECK_OBJECT(tmp_class_creation_24__bases);
        tmp_truth_name_24 = CHECK_IF_TRUE(tmp_class_creation_24__bases);
        if (tmp_truth_name_24 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_72;
        }
        tmp_condition_result_140 = tmp_truth_name_24 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_140 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_48;
        } else {
            goto condexpr_false_48;
        }
        condexpr_true_48:;
        CHECK_OBJECT(tmp_class_creation_24__bases);
        tmp_expression_value_124 = tmp_class_creation_24__bases;
        tmp_subscript_value_32 = mod_consts[39];
        tmp_type_arg_47 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_124, tmp_subscript_value_32, 0);
        if (tmp_type_arg_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_72;
        }
        tmp_metaclass_value_24 = BUILTIN_TYPE1(tmp_type_arg_47);
        Py_DECREF(tmp_type_arg_47);
        if (tmp_metaclass_value_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_72;
        }
        goto condexpr_end_48;
        condexpr_false_48:;
        tmp_metaclass_value_24 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_24);
        condexpr_end_48:;
        condexpr_end_47:;
        CHECK_OBJECT(tmp_class_creation_24__bases);
        tmp_bases_value_24 = tmp_class_creation_24__bases;
        tmp_assign_source_205 = SELECT_METACLASS(tmp_metaclass_value_24, tmp_bases_value_24);
        Py_DECREF(tmp_metaclass_value_24);
        if (tmp_assign_source_205 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_72;
        }
        assert(tmp_class_creation_24__metaclass == NULL);
        tmp_class_creation_24__metaclass = tmp_assign_source_205;
    }
    {
        bool tmp_condition_result_141;
        PyObject *tmp_key_value_72;
        PyObject *tmp_dict_arg_value_72;
        tmp_key_value_72 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
        tmp_dict_arg_value_72 = tmp_class_creation_24__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_72, tmp_key_value_72);
        assert(!(tmp_res == -1));
        tmp_condition_result_141 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_141 != false) {
            goto branch_yes_93;
        } else {
            goto branch_no_93;
        }
    }
    branch_yes_93:;
    CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_24__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 241;

        goto try_except_handler_72;
    }
    branch_no_93:;
    {
        nuitka_bool tmp_condition_result_142;
        PyObject *tmp_expression_value_125;
        CHECK_OBJECT(tmp_class_creation_24__metaclass);
        tmp_expression_value_125 = tmp_class_creation_24__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_125, mod_consts[58]);
        tmp_condition_result_142 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_142 == NUITKA_BOOL_TRUE) {
            goto branch_yes_94;
        } else {
            goto branch_no_94;
        }
    }
    branch_yes_94:;
    {
        PyObject *tmp_assign_source_206;
        PyObject *tmp_called_value_47;
        PyObject *tmp_expression_value_126;
        PyObject *tmp_args_value_47;
        PyObject *tmp_tuple_element_94;
        PyObject *tmp_kwargs_value_47;
        CHECK_OBJECT(tmp_class_creation_24__metaclass);
        tmp_expression_value_126 = tmp_class_creation_24__metaclass;
        tmp_called_value_47 = LOOKUP_ATTRIBUTE(tmp_expression_value_126, mod_consts[58]);
        if (tmp_called_value_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_72;
        }
        tmp_tuple_element_94 = mod_consts[121];
        tmp_args_value_47 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_47, 0, tmp_tuple_element_94);
        CHECK_OBJECT(tmp_class_creation_24__bases);
        tmp_tuple_element_94 = tmp_class_creation_24__bases;
        PyTuple_SET_ITEM0(tmp_args_value_47, 1, tmp_tuple_element_94);
        CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
        tmp_kwargs_value_47 = tmp_class_creation_24__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 241;
        tmp_assign_source_206 = CALL_FUNCTION(tmp_called_value_47, tmp_args_value_47, tmp_kwargs_value_47);
        Py_DECREF(tmp_called_value_47);
        Py_DECREF(tmp_args_value_47);
        if (tmp_assign_source_206 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_72;
        }
        assert(tmp_class_creation_24__prepared == NULL);
        tmp_class_creation_24__prepared = tmp_assign_source_206;
    }
    {
        bool tmp_condition_result_143;
        PyObject *tmp_operand_value_24;
        PyObject *tmp_expression_value_127;
        CHECK_OBJECT(tmp_class_creation_24__prepared);
        tmp_expression_value_127 = tmp_class_creation_24__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_127, mod_consts[60]);
        tmp_operand_value_24 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_24);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_72;
        }
        tmp_condition_result_143 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_143 != false) {
            goto branch_yes_95;
        } else {
            goto branch_no_95;
        }
    }
    branch_yes_95:;
    {
        PyObject *tmp_raise_type_24;
        PyObject *tmp_raise_value_24;
        PyObject *tmp_left_value_24;
        PyObject *tmp_right_value_24;
        PyObject *tmp_tuple_element_95;
        PyObject *tmp_getattr_target_24;
        PyObject *tmp_getattr_attr_24;
        PyObject *tmp_getattr_default_24;
        tmp_raise_type_24 = PyExc_TypeError;
        tmp_left_value_24 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_24__metaclass);
        tmp_getattr_target_24 = tmp_class_creation_24__metaclass;
        tmp_getattr_attr_24 = mod_consts[62];
        tmp_getattr_default_24 = mod_consts[63];
        tmp_tuple_element_95 = BUILTIN_GETATTR(tmp_getattr_target_24, tmp_getattr_attr_24, tmp_getattr_default_24);
        if (tmp_tuple_element_95 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_72;
        }
        tmp_right_value_24 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_128;
            PyObject *tmp_type_arg_48;
            PyTuple_SET_ITEM(tmp_right_value_24, 0, tmp_tuple_element_95);
            CHECK_OBJECT(tmp_class_creation_24__prepared);
            tmp_type_arg_48 = tmp_class_creation_24__prepared;
            tmp_expression_value_128 = BUILTIN_TYPE1(tmp_type_arg_48);
            assert(!(tmp_expression_value_128 == NULL));
            tmp_tuple_element_95 = LOOKUP_ATTRIBUTE(tmp_expression_value_128, mod_consts[62]);
            Py_DECREF(tmp_expression_value_128);
            if (tmp_tuple_element_95 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 241;

                goto tuple_build_exception_24;
            }
            PyTuple_SET_ITEM(tmp_right_value_24, 1, tmp_tuple_element_95);
        }
        goto tuple_build_noexception_24;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_24:;
        Py_DECREF(tmp_right_value_24);
        goto try_except_handler_72;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_24:;
        tmp_raise_value_24 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_24, tmp_right_value_24);
        Py_DECREF(tmp_right_value_24);
        if (tmp_raise_value_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_72;
        }
        exception_type = tmp_raise_type_24;
        Py_INCREF(tmp_raise_type_24);
        exception_value = tmp_raise_value_24;
        exception_lineno = 241;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_72;
    }
    branch_no_95:;
    goto branch_end_94;
    branch_no_94:;
    {
        PyObject *tmp_assign_source_207;
        tmp_assign_source_207 = PyDict_New();
        assert(tmp_class_creation_24__prepared == NULL);
        tmp_class_creation_24__prepared = tmp_assign_source_207;
    }
    branch_end_94:;
    {
        PyObject *tmp_assign_source_208;
        {
            PyObject *tmp_set_locals_24;
            CHECK_OBJECT(tmp_class_creation_24__prepared);
            tmp_set_locals_24 = tmp_class_creation_24__prepared;
            locals_aiohttp$web_exceptions$$$class__24_HTTPPaymentRequired_241 = tmp_set_locals_24;
            Py_INCREF(tmp_set_locals_24);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__24_HTTPPaymentRequired_241, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_74;
        }
        tmp_dictset_value = mod_consts[121];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__24_HTTPPaymentRequired_241, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_74;
        }
        if (isFrameUnusable(cache_frame_505fdc7799db46a65af4a0df2e063cea_21)) {
            Py_XDECREF(cache_frame_505fdc7799db46a65af4a0df2e063cea_21);

#if _DEBUG_REFCOUNTS
            if (cache_frame_505fdc7799db46a65af4a0df2e063cea_21 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_505fdc7799db46a65af4a0df2e063cea_21 = MAKE_FUNCTION_FRAME(codeobj_505fdc7799db46a65af4a0df2e063cea, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_505fdc7799db46a65af4a0df2e063cea_21->m_type_description == NULL);
        frame_505fdc7799db46a65af4a0df2e063cea_21 = cache_frame_505fdc7799db46a65af4a0df2e063cea_21;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_505fdc7799db46a65af4a0df2e063cea_21);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_505fdc7799db46a65af4a0df2e063cea_21) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[122];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__24_HTTPPaymentRequired_241, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 242;
            type_description_2 = "o";
            goto frame_exception_exit_21;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_505fdc7799db46a65af4a0df2e063cea_21);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_20;

        frame_exception_exit_21:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_505fdc7799db46a65af4a0df2e063cea_21);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_505fdc7799db46a65af4a0df2e063cea_21, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_505fdc7799db46a65af4a0df2e063cea_21->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_505fdc7799db46a65af4a0df2e063cea_21, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_505fdc7799db46a65af4a0df2e063cea_21,
            type_description_2,
            outline_23_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_505fdc7799db46a65af4a0df2e063cea_21 == cache_frame_505fdc7799db46a65af4a0df2e063cea_21) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_505fdc7799db46a65af4a0df2e063cea_21);
            cache_frame_505fdc7799db46a65af4a0df2e063cea_21 = NULL;
        }

        assertFrameObject(frame_505fdc7799db46a65af4a0df2e063cea_21);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_20;

        frame_no_exception_20:;
        goto skip_nested_handling_20;
        nested_frame_exit_20:;

        goto try_except_handler_74;
        skip_nested_handling_20:;
        {
            nuitka_bool tmp_condition_result_144;
            PyObject *tmp_cmp_expr_left_24;
            PyObject *tmp_cmp_expr_right_24;
            CHECK_OBJECT(tmp_class_creation_24__bases);
            tmp_cmp_expr_left_24 = tmp_class_creation_24__bases;
            CHECK_OBJECT(tmp_class_creation_24__bases_orig);
            tmp_cmp_expr_right_24 = tmp_class_creation_24__bases_orig;
            tmp_condition_result_144 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_24, tmp_cmp_expr_right_24);
            if (tmp_condition_result_144 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 241;

                goto try_except_handler_74;
            }
            if (tmp_condition_result_144 == NUITKA_BOOL_TRUE) {
                goto branch_yes_96;
            } else {
                goto branch_no_96;
            }
            assert(tmp_condition_result_144 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_96:;
        CHECK_OBJECT(tmp_class_creation_24__bases_orig);
        tmp_dictset_value = tmp_class_creation_24__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__24_HTTPPaymentRequired_241, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;

            goto try_except_handler_74;
        }
        branch_no_96:;
        {
            PyObject *tmp_assign_source_209;
            PyObject *tmp_called_value_48;
            PyObject *tmp_args_value_48;
            PyObject *tmp_tuple_element_96;
            PyObject *tmp_kwargs_value_48;
            CHECK_OBJECT(tmp_class_creation_24__metaclass);
            tmp_called_value_48 = tmp_class_creation_24__metaclass;
            tmp_tuple_element_96 = mod_consts[121];
            tmp_args_value_48 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_48, 0, tmp_tuple_element_96);
            CHECK_OBJECT(tmp_class_creation_24__bases);
            tmp_tuple_element_96 = tmp_class_creation_24__bases;
            PyTuple_SET_ITEM0(tmp_args_value_48, 1, tmp_tuple_element_96);
            tmp_tuple_element_96 = locals_aiohttp$web_exceptions$$$class__24_HTTPPaymentRequired_241;
            PyTuple_SET_ITEM0(tmp_args_value_48, 2, tmp_tuple_element_96);
            CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
            tmp_kwargs_value_48 = tmp_class_creation_24__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 241;
            tmp_assign_source_209 = CALL_FUNCTION(tmp_called_value_48, tmp_args_value_48, tmp_kwargs_value_48);
            Py_DECREF(tmp_args_value_48);
            if (tmp_assign_source_209 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 241;

                goto try_except_handler_74;
            }
            assert(outline_23_var___class__ == NULL);
            outline_23_var___class__ = tmp_assign_source_209;
        }
        CHECK_OBJECT(outline_23_var___class__);
        tmp_assign_source_208 = outline_23_var___class__;
        Py_INCREF(tmp_assign_source_208);
        goto try_return_handler_74;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_74:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__24_HTTPPaymentRequired_241);
        locals_aiohttp$web_exceptions$$$class__24_HTTPPaymentRequired_241 = NULL;
        goto try_return_handler_73;
        // Exception handler code:
        try_except_handler_74:;
        exception_keeper_type_72 = exception_type;
        exception_keeper_value_72 = exception_value;
        exception_keeper_tb_72 = exception_tb;
        exception_keeper_lineno_72 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__24_HTTPPaymentRequired_241);
        locals_aiohttp$web_exceptions$$$class__24_HTTPPaymentRequired_241 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_72;
        exception_value = exception_keeper_value_72;
        exception_tb = exception_keeper_tb_72;
        exception_lineno = exception_keeper_lineno_72;

        goto try_except_handler_73;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_73:;
        CHECK_OBJECT(outline_23_var___class__);
        Py_DECREF(outline_23_var___class__);
        outline_23_var___class__ = NULL;
        goto outline_result_24;
        // Exception handler code:
        try_except_handler_73:;
        exception_keeper_type_73 = exception_type;
        exception_keeper_value_73 = exception_value;
        exception_keeper_tb_73 = exception_tb;
        exception_keeper_lineno_73 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_73;
        exception_value = exception_keeper_value_73;
        exception_tb = exception_keeper_tb_73;
        exception_lineno = exception_keeper_lineno_73;

        goto outline_exception_24;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_24:;
        exception_lineno = 241;
        goto try_except_handler_72;
        outline_result_24:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[121], tmp_assign_source_208);
    }
    goto try_end_26;
    // Exception handler code:
    try_except_handler_72:;
    exception_keeper_type_74 = exception_type;
    exception_keeper_value_74 = exception_value;
    exception_keeper_tb_74 = exception_tb;
    exception_keeper_lineno_74 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_24__bases_orig);
    tmp_class_creation_24__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_24__bases);
    tmp_class_creation_24__bases = NULL;
    Py_XDECREF(tmp_class_creation_24__class_decl_dict);
    tmp_class_creation_24__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_24__metaclass);
    tmp_class_creation_24__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_24__prepared);
    tmp_class_creation_24__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_74;
    exception_value = exception_keeper_value_74;
    exception_tb = exception_keeper_tb_74;
    exception_lineno = exception_keeper_lineno_74;

    goto frame_exception_exit_1;
    // End of try:
    try_end_26:;
    CHECK_OBJECT(tmp_class_creation_24__bases_orig);
    Py_DECREF(tmp_class_creation_24__bases_orig);
    tmp_class_creation_24__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_24__bases);
    Py_DECREF(tmp_class_creation_24__bases);
    tmp_class_creation_24__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
    Py_DECREF(tmp_class_creation_24__class_decl_dict);
    tmp_class_creation_24__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_24__metaclass);
    Py_DECREF(tmp_class_creation_24__metaclass);
    tmp_class_creation_24__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_24__prepared);
    Py_DECREF(tmp_class_creation_24__prepared);
    tmp_class_creation_24__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_210;
        PyObject *tmp_tuple_element_97;
        tmp_tuple_element_97 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[116]);

        if (unlikely(tmp_tuple_element_97 == NULL)) {
            tmp_tuple_element_97 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[116]);
        }

        if (tmp_tuple_element_97 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 245;

            goto try_except_handler_75;
        }
        tmp_assign_source_210 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_210, 0, tmp_tuple_element_97);
        assert(tmp_class_creation_25__bases_orig == NULL);
        tmp_class_creation_25__bases_orig = tmp_assign_source_210;
    }
    {
        PyObject *tmp_assign_source_211;
        PyObject *tmp_dircall_arg1_25;
        CHECK_OBJECT(tmp_class_creation_25__bases_orig);
        tmp_dircall_arg1_25 = tmp_class_creation_25__bases_orig;
        Py_INCREF(tmp_dircall_arg1_25);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_25};
            tmp_assign_source_211 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_211 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 245;

            goto try_except_handler_75;
        }
        assert(tmp_class_creation_25__bases == NULL);
        tmp_class_creation_25__bases = tmp_assign_source_211;
    }
    {
        PyObject *tmp_assign_source_212;
        tmp_assign_source_212 = PyDict_New();
        assert(tmp_class_creation_25__class_decl_dict == NULL);
        tmp_class_creation_25__class_decl_dict = tmp_assign_source_212;
    }
    {
        PyObject *tmp_assign_source_213;
        PyObject *tmp_metaclass_value_25;
        bool tmp_condition_result_145;
        PyObject *tmp_key_value_73;
        PyObject *tmp_dict_arg_value_73;
        PyObject *tmp_dict_arg_value_74;
        PyObject *tmp_key_value_74;
        nuitka_bool tmp_condition_result_146;
        int tmp_truth_name_25;
        PyObject *tmp_type_arg_49;
        PyObject *tmp_expression_value_129;
        PyObject *tmp_subscript_value_33;
        PyObject *tmp_bases_value_25;
        tmp_key_value_73 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
        tmp_dict_arg_value_73 = tmp_class_creation_25__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_73, tmp_key_value_73);
        assert(!(tmp_res == -1));
        tmp_condition_result_145 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_145 != false) {
            goto condexpr_true_49;
        } else {
            goto condexpr_false_49;
        }
        condexpr_true_49:;
        CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
        tmp_dict_arg_value_74 = tmp_class_creation_25__class_decl_dict;
        tmp_key_value_74 = mod_consts[57];
        tmp_metaclass_value_25 = DICT_GET_ITEM0(tmp_dict_arg_value_74, tmp_key_value_74);
        if (tmp_metaclass_value_25 == NULL) {
            tmp_metaclass_value_25 = Py_None;
        }
        assert(!(tmp_metaclass_value_25 == NULL));
        Py_INCREF(tmp_metaclass_value_25);
        goto condexpr_end_49;
        condexpr_false_49:;
        CHECK_OBJECT(tmp_class_creation_25__bases);
        tmp_truth_name_25 = CHECK_IF_TRUE(tmp_class_creation_25__bases);
        if (tmp_truth_name_25 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 245;

            goto try_except_handler_75;
        }
        tmp_condition_result_146 = tmp_truth_name_25 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_146 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_50;
        } else {
            goto condexpr_false_50;
        }
        condexpr_true_50:;
        CHECK_OBJECT(tmp_class_creation_25__bases);
        tmp_expression_value_129 = tmp_class_creation_25__bases;
        tmp_subscript_value_33 = mod_consts[39];
        tmp_type_arg_49 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_129, tmp_subscript_value_33, 0);
        if (tmp_type_arg_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 245;

            goto try_except_handler_75;
        }
        tmp_metaclass_value_25 = BUILTIN_TYPE1(tmp_type_arg_49);
        Py_DECREF(tmp_type_arg_49);
        if (tmp_metaclass_value_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 245;

            goto try_except_handler_75;
        }
        goto condexpr_end_50;
        condexpr_false_50:;
        tmp_metaclass_value_25 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_25);
        condexpr_end_50:;
        condexpr_end_49:;
        CHECK_OBJECT(tmp_class_creation_25__bases);
        tmp_bases_value_25 = tmp_class_creation_25__bases;
        tmp_assign_source_213 = SELECT_METACLASS(tmp_metaclass_value_25, tmp_bases_value_25);
        Py_DECREF(tmp_metaclass_value_25);
        if (tmp_assign_source_213 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 245;

            goto try_except_handler_75;
        }
        assert(tmp_class_creation_25__metaclass == NULL);
        tmp_class_creation_25__metaclass = tmp_assign_source_213;
    }
    {
        bool tmp_condition_result_147;
        PyObject *tmp_key_value_75;
        PyObject *tmp_dict_arg_value_75;
        tmp_key_value_75 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
        tmp_dict_arg_value_75 = tmp_class_creation_25__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_75, tmp_key_value_75);
        assert(!(tmp_res == -1));
        tmp_condition_result_147 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_147 != false) {
            goto branch_yes_97;
        } else {
            goto branch_no_97;
        }
    }
    branch_yes_97:;
    CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_25__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 245;

        goto try_except_handler_75;
    }
    branch_no_97:;
    {
        nuitka_bool tmp_condition_result_148;
        PyObject *tmp_expression_value_130;
        CHECK_OBJECT(tmp_class_creation_25__metaclass);
        tmp_expression_value_130 = tmp_class_creation_25__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_130, mod_consts[58]);
        tmp_condition_result_148 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_148 == NUITKA_BOOL_TRUE) {
            goto branch_yes_98;
        } else {
            goto branch_no_98;
        }
    }
    branch_yes_98:;
    {
        PyObject *tmp_assign_source_214;
        PyObject *tmp_called_value_49;
        PyObject *tmp_expression_value_131;
        PyObject *tmp_args_value_49;
        PyObject *tmp_tuple_element_98;
        PyObject *tmp_kwargs_value_49;
        CHECK_OBJECT(tmp_class_creation_25__metaclass);
        tmp_expression_value_131 = tmp_class_creation_25__metaclass;
        tmp_called_value_49 = LOOKUP_ATTRIBUTE(tmp_expression_value_131, mod_consts[58]);
        if (tmp_called_value_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 245;

            goto try_except_handler_75;
        }
        tmp_tuple_element_98 = mod_consts[123];
        tmp_args_value_49 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_49, 0, tmp_tuple_element_98);
        CHECK_OBJECT(tmp_class_creation_25__bases);
        tmp_tuple_element_98 = tmp_class_creation_25__bases;
        PyTuple_SET_ITEM0(tmp_args_value_49, 1, tmp_tuple_element_98);
        CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
        tmp_kwargs_value_49 = tmp_class_creation_25__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 245;
        tmp_assign_source_214 = CALL_FUNCTION(tmp_called_value_49, tmp_args_value_49, tmp_kwargs_value_49);
        Py_DECREF(tmp_called_value_49);
        Py_DECREF(tmp_args_value_49);
        if (tmp_assign_source_214 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 245;

            goto try_except_handler_75;
        }
        assert(tmp_class_creation_25__prepared == NULL);
        tmp_class_creation_25__prepared = tmp_assign_source_214;
    }
    {
        bool tmp_condition_result_149;
        PyObject *tmp_operand_value_25;
        PyObject *tmp_expression_value_132;
        CHECK_OBJECT(tmp_class_creation_25__prepared);
        tmp_expression_value_132 = tmp_class_creation_25__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_132, mod_consts[60]);
        tmp_operand_value_25 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_25);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 245;

            goto try_except_handler_75;
        }
        tmp_condition_result_149 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_149 != false) {
            goto branch_yes_99;
        } else {
            goto branch_no_99;
        }
    }
    branch_yes_99:;
    {
        PyObject *tmp_raise_type_25;
        PyObject *tmp_raise_value_25;
        PyObject *tmp_left_value_25;
        PyObject *tmp_right_value_25;
        PyObject *tmp_tuple_element_99;
        PyObject *tmp_getattr_target_25;
        PyObject *tmp_getattr_attr_25;
        PyObject *tmp_getattr_default_25;
        tmp_raise_type_25 = PyExc_TypeError;
        tmp_left_value_25 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_25__metaclass);
        tmp_getattr_target_25 = tmp_class_creation_25__metaclass;
        tmp_getattr_attr_25 = mod_consts[62];
        tmp_getattr_default_25 = mod_consts[63];
        tmp_tuple_element_99 = BUILTIN_GETATTR(tmp_getattr_target_25, tmp_getattr_attr_25, tmp_getattr_default_25);
        if (tmp_tuple_element_99 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 245;

            goto try_except_handler_75;
        }
        tmp_right_value_25 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_133;
            PyObject *tmp_type_arg_50;
            PyTuple_SET_ITEM(tmp_right_value_25, 0, tmp_tuple_element_99);
            CHECK_OBJECT(tmp_class_creation_25__prepared);
            tmp_type_arg_50 = tmp_class_creation_25__prepared;
            tmp_expression_value_133 = BUILTIN_TYPE1(tmp_type_arg_50);
            assert(!(tmp_expression_value_133 == NULL));
            tmp_tuple_element_99 = LOOKUP_ATTRIBUTE(tmp_expression_value_133, mod_consts[62]);
            Py_DECREF(tmp_expression_value_133);
            if (tmp_tuple_element_99 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 245;

                goto tuple_build_exception_25;
            }
            PyTuple_SET_ITEM(tmp_right_value_25, 1, tmp_tuple_element_99);
        }
        goto tuple_build_noexception_25;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_25:;
        Py_DECREF(tmp_right_value_25);
        goto try_except_handler_75;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_25:;
        tmp_raise_value_25 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_25, tmp_right_value_25);
        Py_DECREF(tmp_right_value_25);
        if (tmp_raise_value_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 245;

            goto try_except_handler_75;
        }
        exception_type = tmp_raise_type_25;
        Py_INCREF(tmp_raise_type_25);
        exception_value = tmp_raise_value_25;
        exception_lineno = 245;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_75;
    }
    branch_no_99:;
    goto branch_end_98;
    branch_no_98:;
    {
        PyObject *tmp_assign_source_215;
        tmp_assign_source_215 = PyDict_New();
        assert(tmp_class_creation_25__prepared == NULL);
        tmp_class_creation_25__prepared = tmp_assign_source_215;
    }
    branch_end_98:;
    {
        PyObject *tmp_assign_source_216;
        {
            PyObject *tmp_set_locals_25;
            CHECK_OBJECT(tmp_class_creation_25__prepared);
            tmp_set_locals_25 = tmp_class_creation_25__prepared;
            locals_aiohttp$web_exceptions$$$class__25_HTTPForbidden_245 = tmp_set_locals_25;
            Py_INCREF(tmp_set_locals_25);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__25_HTTPForbidden_245, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 245;

            goto try_except_handler_77;
        }
        tmp_dictset_value = mod_consts[123];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__25_HTTPForbidden_245, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 245;

            goto try_except_handler_77;
        }
        if (isFrameUnusable(cache_frame_b8b1950400aaf4510ee2d2ee8e8ca436_22)) {
            Py_XDECREF(cache_frame_b8b1950400aaf4510ee2d2ee8e8ca436_22);

#if _DEBUG_REFCOUNTS
            if (cache_frame_b8b1950400aaf4510ee2d2ee8e8ca436_22 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_b8b1950400aaf4510ee2d2ee8e8ca436_22 = MAKE_FUNCTION_FRAME(codeobj_b8b1950400aaf4510ee2d2ee8e8ca436, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_b8b1950400aaf4510ee2d2ee8e8ca436_22->m_type_description == NULL);
        frame_b8b1950400aaf4510ee2d2ee8e8ca436_22 = cache_frame_b8b1950400aaf4510ee2d2ee8e8ca436_22;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_b8b1950400aaf4510ee2d2ee8e8ca436_22);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_b8b1950400aaf4510ee2d2ee8e8ca436_22) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[124];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__25_HTTPForbidden_245, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 246;
            type_description_2 = "o";
            goto frame_exception_exit_22;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b8b1950400aaf4510ee2d2ee8e8ca436_22);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_21;

        frame_exception_exit_22:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b8b1950400aaf4510ee2d2ee8e8ca436_22);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_b8b1950400aaf4510ee2d2ee8e8ca436_22, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_b8b1950400aaf4510ee2d2ee8e8ca436_22->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_b8b1950400aaf4510ee2d2ee8e8ca436_22, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_b8b1950400aaf4510ee2d2ee8e8ca436_22,
            type_description_2,
            outline_24_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_b8b1950400aaf4510ee2d2ee8e8ca436_22 == cache_frame_b8b1950400aaf4510ee2d2ee8e8ca436_22) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_b8b1950400aaf4510ee2d2ee8e8ca436_22);
            cache_frame_b8b1950400aaf4510ee2d2ee8e8ca436_22 = NULL;
        }

        assertFrameObject(frame_b8b1950400aaf4510ee2d2ee8e8ca436_22);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_21;

        frame_no_exception_21:;
        goto skip_nested_handling_21;
        nested_frame_exit_21:;

        goto try_except_handler_77;
        skip_nested_handling_21:;
        {
            nuitka_bool tmp_condition_result_150;
            PyObject *tmp_cmp_expr_left_25;
            PyObject *tmp_cmp_expr_right_25;
            CHECK_OBJECT(tmp_class_creation_25__bases);
            tmp_cmp_expr_left_25 = tmp_class_creation_25__bases;
            CHECK_OBJECT(tmp_class_creation_25__bases_orig);
            tmp_cmp_expr_right_25 = tmp_class_creation_25__bases_orig;
            tmp_condition_result_150 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_25, tmp_cmp_expr_right_25);
            if (tmp_condition_result_150 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 245;

                goto try_except_handler_77;
            }
            if (tmp_condition_result_150 == NUITKA_BOOL_TRUE) {
                goto branch_yes_100;
            } else {
                goto branch_no_100;
            }
            assert(tmp_condition_result_150 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_100:;
        CHECK_OBJECT(tmp_class_creation_25__bases_orig);
        tmp_dictset_value = tmp_class_creation_25__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__25_HTTPForbidden_245, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 245;

            goto try_except_handler_77;
        }
        branch_no_100:;
        {
            PyObject *tmp_assign_source_217;
            PyObject *tmp_called_value_50;
            PyObject *tmp_args_value_50;
            PyObject *tmp_tuple_element_100;
            PyObject *tmp_kwargs_value_50;
            CHECK_OBJECT(tmp_class_creation_25__metaclass);
            tmp_called_value_50 = tmp_class_creation_25__metaclass;
            tmp_tuple_element_100 = mod_consts[123];
            tmp_args_value_50 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_50, 0, tmp_tuple_element_100);
            CHECK_OBJECT(tmp_class_creation_25__bases);
            tmp_tuple_element_100 = tmp_class_creation_25__bases;
            PyTuple_SET_ITEM0(tmp_args_value_50, 1, tmp_tuple_element_100);
            tmp_tuple_element_100 = locals_aiohttp$web_exceptions$$$class__25_HTTPForbidden_245;
            PyTuple_SET_ITEM0(tmp_args_value_50, 2, tmp_tuple_element_100);
            CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
            tmp_kwargs_value_50 = tmp_class_creation_25__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 245;
            tmp_assign_source_217 = CALL_FUNCTION(tmp_called_value_50, tmp_args_value_50, tmp_kwargs_value_50);
            Py_DECREF(tmp_args_value_50);
            if (tmp_assign_source_217 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 245;

                goto try_except_handler_77;
            }
            assert(outline_24_var___class__ == NULL);
            outline_24_var___class__ = tmp_assign_source_217;
        }
        CHECK_OBJECT(outline_24_var___class__);
        tmp_assign_source_216 = outline_24_var___class__;
        Py_INCREF(tmp_assign_source_216);
        goto try_return_handler_77;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_77:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__25_HTTPForbidden_245);
        locals_aiohttp$web_exceptions$$$class__25_HTTPForbidden_245 = NULL;
        goto try_return_handler_76;
        // Exception handler code:
        try_except_handler_77:;
        exception_keeper_type_75 = exception_type;
        exception_keeper_value_75 = exception_value;
        exception_keeper_tb_75 = exception_tb;
        exception_keeper_lineno_75 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__25_HTTPForbidden_245);
        locals_aiohttp$web_exceptions$$$class__25_HTTPForbidden_245 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_75;
        exception_value = exception_keeper_value_75;
        exception_tb = exception_keeper_tb_75;
        exception_lineno = exception_keeper_lineno_75;

        goto try_except_handler_76;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_76:;
        CHECK_OBJECT(outline_24_var___class__);
        Py_DECREF(outline_24_var___class__);
        outline_24_var___class__ = NULL;
        goto outline_result_25;
        // Exception handler code:
        try_except_handler_76:;
        exception_keeper_type_76 = exception_type;
        exception_keeper_value_76 = exception_value;
        exception_keeper_tb_76 = exception_tb;
        exception_keeper_lineno_76 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_76;
        exception_value = exception_keeper_value_76;
        exception_tb = exception_keeper_tb_76;
        exception_lineno = exception_keeper_lineno_76;

        goto outline_exception_25;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_25:;
        exception_lineno = 245;
        goto try_except_handler_75;
        outline_result_25:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[123], tmp_assign_source_216);
    }
    goto try_end_27;
    // Exception handler code:
    try_except_handler_75:;
    exception_keeper_type_77 = exception_type;
    exception_keeper_value_77 = exception_value;
    exception_keeper_tb_77 = exception_tb;
    exception_keeper_lineno_77 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_25__bases_orig);
    tmp_class_creation_25__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_25__bases);
    tmp_class_creation_25__bases = NULL;
    Py_XDECREF(tmp_class_creation_25__class_decl_dict);
    tmp_class_creation_25__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_25__metaclass);
    tmp_class_creation_25__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_25__prepared);
    tmp_class_creation_25__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_77;
    exception_value = exception_keeper_value_77;
    exception_tb = exception_keeper_tb_77;
    exception_lineno = exception_keeper_lineno_77;

    goto frame_exception_exit_1;
    // End of try:
    try_end_27:;
    CHECK_OBJECT(tmp_class_creation_25__bases_orig);
    Py_DECREF(tmp_class_creation_25__bases_orig);
    tmp_class_creation_25__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_25__bases);
    Py_DECREF(tmp_class_creation_25__bases);
    tmp_class_creation_25__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
    Py_DECREF(tmp_class_creation_25__class_decl_dict);
    tmp_class_creation_25__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_25__metaclass);
    Py_DECREF(tmp_class_creation_25__metaclass);
    tmp_class_creation_25__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_25__prepared);
    Py_DECREF(tmp_class_creation_25__prepared);
    tmp_class_creation_25__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_218;
        PyObject *tmp_tuple_element_101;
        tmp_tuple_element_101 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[116]);

        if (unlikely(tmp_tuple_element_101 == NULL)) {
            tmp_tuple_element_101 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[116]);
        }

        if (tmp_tuple_element_101 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;

            goto try_except_handler_78;
        }
        tmp_assign_source_218 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_218, 0, tmp_tuple_element_101);
        assert(tmp_class_creation_26__bases_orig == NULL);
        tmp_class_creation_26__bases_orig = tmp_assign_source_218;
    }
    {
        PyObject *tmp_assign_source_219;
        PyObject *tmp_dircall_arg1_26;
        CHECK_OBJECT(tmp_class_creation_26__bases_orig);
        tmp_dircall_arg1_26 = tmp_class_creation_26__bases_orig;
        Py_INCREF(tmp_dircall_arg1_26);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_26};
            tmp_assign_source_219 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_219 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;

            goto try_except_handler_78;
        }
        assert(tmp_class_creation_26__bases == NULL);
        tmp_class_creation_26__bases = tmp_assign_source_219;
    }
    {
        PyObject *tmp_assign_source_220;
        tmp_assign_source_220 = PyDict_New();
        assert(tmp_class_creation_26__class_decl_dict == NULL);
        tmp_class_creation_26__class_decl_dict = tmp_assign_source_220;
    }
    {
        PyObject *tmp_assign_source_221;
        PyObject *tmp_metaclass_value_26;
        bool tmp_condition_result_151;
        PyObject *tmp_key_value_76;
        PyObject *tmp_dict_arg_value_76;
        PyObject *tmp_dict_arg_value_77;
        PyObject *tmp_key_value_77;
        nuitka_bool tmp_condition_result_152;
        int tmp_truth_name_26;
        PyObject *tmp_type_arg_51;
        PyObject *tmp_expression_value_134;
        PyObject *tmp_subscript_value_34;
        PyObject *tmp_bases_value_26;
        tmp_key_value_76 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
        tmp_dict_arg_value_76 = tmp_class_creation_26__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_76, tmp_key_value_76);
        assert(!(tmp_res == -1));
        tmp_condition_result_151 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_151 != false) {
            goto condexpr_true_51;
        } else {
            goto condexpr_false_51;
        }
        condexpr_true_51:;
        CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
        tmp_dict_arg_value_77 = tmp_class_creation_26__class_decl_dict;
        tmp_key_value_77 = mod_consts[57];
        tmp_metaclass_value_26 = DICT_GET_ITEM0(tmp_dict_arg_value_77, tmp_key_value_77);
        if (tmp_metaclass_value_26 == NULL) {
            tmp_metaclass_value_26 = Py_None;
        }
        assert(!(tmp_metaclass_value_26 == NULL));
        Py_INCREF(tmp_metaclass_value_26);
        goto condexpr_end_51;
        condexpr_false_51:;
        CHECK_OBJECT(tmp_class_creation_26__bases);
        tmp_truth_name_26 = CHECK_IF_TRUE(tmp_class_creation_26__bases);
        if (tmp_truth_name_26 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;

            goto try_except_handler_78;
        }
        tmp_condition_result_152 = tmp_truth_name_26 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_152 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_52;
        } else {
            goto condexpr_false_52;
        }
        condexpr_true_52:;
        CHECK_OBJECT(tmp_class_creation_26__bases);
        tmp_expression_value_134 = tmp_class_creation_26__bases;
        tmp_subscript_value_34 = mod_consts[39];
        tmp_type_arg_51 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_134, tmp_subscript_value_34, 0);
        if (tmp_type_arg_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;

            goto try_except_handler_78;
        }
        tmp_metaclass_value_26 = BUILTIN_TYPE1(tmp_type_arg_51);
        Py_DECREF(tmp_type_arg_51);
        if (tmp_metaclass_value_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;

            goto try_except_handler_78;
        }
        goto condexpr_end_52;
        condexpr_false_52:;
        tmp_metaclass_value_26 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_26);
        condexpr_end_52:;
        condexpr_end_51:;
        CHECK_OBJECT(tmp_class_creation_26__bases);
        tmp_bases_value_26 = tmp_class_creation_26__bases;
        tmp_assign_source_221 = SELECT_METACLASS(tmp_metaclass_value_26, tmp_bases_value_26);
        Py_DECREF(tmp_metaclass_value_26);
        if (tmp_assign_source_221 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;

            goto try_except_handler_78;
        }
        assert(tmp_class_creation_26__metaclass == NULL);
        tmp_class_creation_26__metaclass = tmp_assign_source_221;
    }
    {
        bool tmp_condition_result_153;
        PyObject *tmp_key_value_78;
        PyObject *tmp_dict_arg_value_78;
        tmp_key_value_78 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
        tmp_dict_arg_value_78 = tmp_class_creation_26__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_78, tmp_key_value_78);
        assert(!(tmp_res == -1));
        tmp_condition_result_153 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_153 != false) {
            goto branch_yes_101;
        } else {
            goto branch_no_101;
        }
    }
    branch_yes_101:;
    CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_26__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 249;

        goto try_except_handler_78;
    }
    branch_no_101:;
    {
        nuitka_bool tmp_condition_result_154;
        PyObject *tmp_expression_value_135;
        CHECK_OBJECT(tmp_class_creation_26__metaclass);
        tmp_expression_value_135 = tmp_class_creation_26__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_135, mod_consts[58]);
        tmp_condition_result_154 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_154 == NUITKA_BOOL_TRUE) {
            goto branch_yes_102;
        } else {
            goto branch_no_102;
        }
    }
    branch_yes_102:;
    {
        PyObject *tmp_assign_source_222;
        PyObject *tmp_called_value_51;
        PyObject *tmp_expression_value_136;
        PyObject *tmp_args_value_51;
        PyObject *tmp_tuple_element_102;
        PyObject *tmp_kwargs_value_51;
        CHECK_OBJECT(tmp_class_creation_26__metaclass);
        tmp_expression_value_136 = tmp_class_creation_26__metaclass;
        tmp_called_value_51 = LOOKUP_ATTRIBUTE(tmp_expression_value_136, mod_consts[58]);
        if (tmp_called_value_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;

            goto try_except_handler_78;
        }
        tmp_tuple_element_102 = mod_consts[125];
        tmp_args_value_51 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_51, 0, tmp_tuple_element_102);
        CHECK_OBJECT(tmp_class_creation_26__bases);
        tmp_tuple_element_102 = tmp_class_creation_26__bases;
        PyTuple_SET_ITEM0(tmp_args_value_51, 1, tmp_tuple_element_102);
        CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
        tmp_kwargs_value_51 = tmp_class_creation_26__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 249;
        tmp_assign_source_222 = CALL_FUNCTION(tmp_called_value_51, tmp_args_value_51, tmp_kwargs_value_51);
        Py_DECREF(tmp_called_value_51);
        Py_DECREF(tmp_args_value_51);
        if (tmp_assign_source_222 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;

            goto try_except_handler_78;
        }
        assert(tmp_class_creation_26__prepared == NULL);
        tmp_class_creation_26__prepared = tmp_assign_source_222;
    }
    {
        bool tmp_condition_result_155;
        PyObject *tmp_operand_value_26;
        PyObject *tmp_expression_value_137;
        CHECK_OBJECT(tmp_class_creation_26__prepared);
        tmp_expression_value_137 = tmp_class_creation_26__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_137, mod_consts[60]);
        tmp_operand_value_26 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_26);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;

            goto try_except_handler_78;
        }
        tmp_condition_result_155 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_155 != false) {
            goto branch_yes_103;
        } else {
            goto branch_no_103;
        }
    }
    branch_yes_103:;
    {
        PyObject *tmp_raise_type_26;
        PyObject *tmp_raise_value_26;
        PyObject *tmp_left_value_26;
        PyObject *tmp_right_value_26;
        PyObject *tmp_tuple_element_103;
        PyObject *tmp_getattr_target_26;
        PyObject *tmp_getattr_attr_26;
        PyObject *tmp_getattr_default_26;
        tmp_raise_type_26 = PyExc_TypeError;
        tmp_left_value_26 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_26__metaclass);
        tmp_getattr_target_26 = tmp_class_creation_26__metaclass;
        tmp_getattr_attr_26 = mod_consts[62];
        tmp_getattr_default_26 = mod_consts[63];
        tmp_tuple_element_103 = BUILTIN_GETATTR(tmp_getattr_target_26, tmp_getattr_attr_26, tmp_getattr_default_26);
        if (tmp_tuple_element_103 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;

            goto try_except_handler_78;
        }
        tmp_right_value_26 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_138;
            PyObject *tmp_type_arg_52;
            PyTuple_SET_ITEM(tmp_right_value_26, 0, tmp_tuple_element_103);
            CHECK_OBJECT(tmp_class_creation_26__prepared);
            tmp_type_arg_52 = tmp_class_creation_26__prepared;
            tmp_expression_value_138 = BUILTIN_TYPE1(tmp_type_arg_52);
            assert(!(tmp_expression_value_138 == NULL));
            tmp_tuple_element_103 = LOOKUP_ATTRIBUTE(tmp_expression_value_138, mod_consts[62]);
            Py_DECREF(tmp_expression_value_138);
            if (tmp_tuple_element_103 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 249;

                goto tuple_build_exception_26;
            }
            PyTuple_SET_ITEM(tmp_right_value_26, 1, tmp_tuple_element_103);
        }
        goto tuple_build_noexception_26;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_26:;
        Py_DECREF(tmp_right_value_26);
        goto try_except_handler_78;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_26:;
        tmp_raise_value_26 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_26, tmp_right_value_26);
        Py_DECREF(tmp_right_value_26);
        if (tmp_raise_value_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;

            goto try_except_handler_78;
        }
        exception_type = tmp_raise_type_26;
        Py_INCREF(tmp_raise_type_26);
        exception_value = tmp_raise_value_26;
        exception_lineno = 249;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_78;
    }
    branch_no_103:;
    goto branch_end_102;
    branch_no_102:;
    {
        PyObject *tmp_assign_source_223;
        tmp_assign_source_223 = PyDict_New();
        assert(tmp_class_creation_26__prepared == NULL);
        tmp_class_creation_26__prepared = tmp_assign_source_223;
    }
    branch_end_102:;
    {
        PyObject *tmp_assign_source_224;
        {
            PyObject *tmp_set_locals_26;
            CHECK_OBJECT(tmp_class_creation_26__prepared);
            tmp_set_locals_26 = tmp_class_creation_26__prepared;
            locals_aiohttp$web_exceptions$$$class__26_HTTPNotFound_249 = tmp_set_locals_26;
            Py_INCREF(tmp_set_locals_26);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__26_HTTPNotFound_249, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;

            goto try_except_handler_80;
        }
        tmp_dictset_value = mod_consts[125];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__26_HTTPNotFound_249, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;

            goto try_except_handler_80;
        }
        if (isFrameUnusable(cache_frame_bddc09fead8ce6f71a6830ba5da102b2_23)) {
            Py_XDECREF(cache_frame_bddc09fead8ce6f71a6830ba5da102b2_23);

#if _DEBUG_REFCOUNTS
            if (cache_frame_bddc09fead8ce6f71a6830ba5da102b2_23 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_bddc09fead8ce6f71a6830ba5da102b2_23 = MAKE_FUNCTION_FRAME(codeobj_bddc09fead8ce6f71a6830ba5da102b2, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_bddc09fead8ce6f71a6830ba5da102b2_23->m_type_description == NULL);
        frame_bddc09fead8ce6f71a6830ba5da102b2_23 = cache_frame_bddc09fead8ce6f71a6830ba5da102b2_23;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_bddc09fead8ce6f71a6830ba5da102b2_23);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_bddc09fead8ce6f71a6830ba5da102b2_23) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[126];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__26_HTTPNotFound_249, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 250;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bddc09fead8ce6f71a6830ba5da102b2_23);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_22;

        frame_exception_exit_23:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bddc09fead8ce6f71a6830ba5da102b2_23);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_bddc09fead8ce6f71a6830ba5da102b2_23, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_bddc09fead8ce6f71a6830ba5da102b2_23->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_bddc09fead8ce6f71a6830ba5da102b2_23, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_bddc09fead8ce6f71a6830ba5da102b2_23,
            type_description_2,
            outline_25_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_bddc09fead8ce6f71a6830ba5da102b2_23 == cache_frame_bddc09fead8ce6f71a6830ba5da102b2_23) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_bddc09fead8ce6f71a6830ba5da102b2_23);
            cache_frame_bddc09fead8ce6f71a6830ba5da102b2_23 = NULL;
        }

        assertFrameObject(frame_bddc09fead8ce6f71a6830ba5da102b2_23);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_22;

        frame_no_exception_22:;
        goto skip_nested_handling_22;
        nested_frame_exit_22:;

        goto try_except_handler_80;
        skip_nested_handling_22:;
        {
            nuitka_bool tmp_condition_result_156;
            PyObject *tmp_cmp_expr_left_26;
            PyObject *tmp_cmp_expr_right_26;
            CHECK_OBJECT(tmp_class_creation_26__bases);
            tmp_cmp_expr_left_26 = tmp_class_creation_26__bases;
            CHECK_OBJECT(tmp_class_creation_26__bases_orig);
            tmp_cmp_expr_right_26 = tmp_class_creation_26__bases_orig;
            tmp_condition_result_156 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_26, tmp_cmp_expr_right_26);
            if (tmp_condition_result_156 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 249;

                goto try_except_handler_80;
            }
            if (tmp_condition_result_156 == NUITKA_BOOL_TRUE) {
                goto branch_yes_104;
            } else {
                goto branch_no_104;
            }
            assert(tmp_condition_result_156 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_104:;
        CHECK_OBJECT(tmp_class_creation_26__bases_orig);
        tmp_dictset_value = tmp_class_creation_26__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__26_HTTPNotFound_249, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;

            goto try_except_handler_80;
        }
        branch_no_104:;
        {
            PyObject *tmp_assign_source_225;
            PyObject *tmp_called_value_52;
            PyObject *tmp_args_value_52;
            PyObject *tmp_tuple_element_104;
            PyObject *tmp_kwargs_value_52;
            CHECK_OBJECT(tmp_class_creation_26__metaclass);
            tmp_called_value_52 = tmp_class_creation_26__metaclass;
            tmp_tuple_element_104 = mod_consts[125];
            tmp_args_value_52 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_52, 0, tmp_tuple_element_104);
            CHECK_OBJECT(tmp_class_creation_26__bases);
            tmp_tuple_element_104 = tmp_class_creation_26__bases;
            PyTuple_SET_ITEM0(tmp_args_value_52, 1, tmp_tuple_element_104);
            tmp_tuple_element_104 = locals_aiohttp$web_exceptions$$$class__26_HTTPNotFound_249;
            PyTuple_SET_ITEM0(tmp_args_value_52, 2, tmp_tuple_element_104);
            CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
            tmp_kwargs_value_52 = tmp_class_creation_26__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 249;
            tmp_assign_source_225 = CALL_FUNCTION(tmp_called_value_52, tmp_args_value_52, tmp_kwargs_value_52);
            Py_DECREF(tmp_args_value_52);
            if (tmp_assign_source_225 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 249;

                goto try_except_handler_80;
            }
            assert(outline_25_var___class__ == NULL);
            outline_25_var___class__ = tmp_assign_source_225;
        }
        CHECK_OBJECT(outline_25_var___class__);
        tmp_assign_source_224 = outline_25_var___class__;
        Py_INCREF(tmp_assign_source_224);
        goto try_return_handler_80;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_80:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__26_HTTPNotFound_249);
        locals_aiohttp$web_exceptions$$$class__26_HTTPNotFound_249 = NULL;
        goto try_return_handler_79;
        // Exception handler code:
        try_except_handler_80:;
        exception_keeper_type_78 = exception_type;
        exception_keeper_value_78 = exception_value;
        exception_keeper_tb_78 = exception_tb;
        exception_keeper_lineno_78 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__26_HTTPNotFound_249);
        locals_aiohttp$web_exceptions$$$class__26_HTTPNotFound_249 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_78;
        exception_value = exception_keeper_value_78;
        exception_tb = exception_keeper_tb_78;
        exception_lineno = exception_keeper_lineno_78;

        goto try_except_handler_79;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_79:;
        CHECK_OBJECT(outline_25_var___class__);
        Py_DECREF(outline_25_var___class__);
        outline_25_var___class__ = NULL;
        goto outline_result_26;
        // Exception handler code:
        try_except_handler_79:;
        exception_keeper_type_79 = exception_type;
        exception_keeper_value_79 = exception_value;
        exception_keeper_tb_79 = exception_tb;
        exception_keeper_lineno_79 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_79;
        exception_value = exception_keeper_value_79;
        exception_tb = exception_keeper_tb_79;
        exception_lineno = exception_keeper_lineno_79;

        goto outline_exception_26;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_26:;
        exception_lineno = 249;
        goto try_except_handler_78;
        outline_result_26:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[125], tmp_assign_source_224);
    }
    goto try_end_28;
    // Exception handler code:
    try_except_handler_78:;
    exception_keeper_type_80 = exception_type;
    exception_keeper_value_80 = exception_value;
    exception_keeper_tb_80 = exception_tb;
    exception_keeper_lineno_80 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_26__bases_orig);
    tmp_class_creation_26__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_26__bases);
    tmp_class_creation_26__bases = NULL;
    Py_XDECREF(tmp_class_creation_26__class_decl_dict);
    tmp_class_creation_26__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_26__metaclass);
    tmp_class_creation_26__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_26__prepared);
    tmp_class_creation_26__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_80;
    exception_value = exception_keeper_value_80;
    exception_tb = exception_keeper_tb_80;
    exception_lineno = exception_keeper_lineno_80;

    goto frame_exception_exit_1;
    // End of try:
    try_end_28:;
    CHECK_OBJECT(tmp_class_creation_26__bases_orig);
    Py_DECREF(tmp_class_creation_26__bases_orig);
    tmp_class_creation_26__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_26__bases);
    Py_DECREF(tmp_class_creation_26__bases);
    tmp_class_creation_26__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
    Py_DECREF(tmp_class_creation_26__class_decl_dict);
    tmp_class_creation_26__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_26__metaclass);
    Py_DECREF(tmp_class_creation_26__metaclass);
    tmp_class_creation_26__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_26__prepared);
    Py_DECREF(tmp_class_creation_26__prepared);
    tmp_class_creation_26__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_226;
        PyObject *tmp_tuple_element_105;
        tmp_tuple_element_105 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[116]);

        if (unlikely(tmp_tuple_element_105 == NULL)) {
            tmp_tuple_element_105 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[116]);
        }

        if (tmp_tuple_element_105 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 253;

            goto try_except_handler_81;
        }
        tmp_assign_source_226 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_226, 0, tmp_tuple_element_105);
        assert(tmp_class_creation_27__bases_orig == NULL);
        tmp_class_creation_27__bases_orig = tmp_assign_source_226;
    }
    {
        PyObject *tmp_assign_source_227;
        PyObject *tmp_dircall_arg1_27;
        CHECK_OBJECT(tmp_class_creation_27__bases_orig);
        tmp_dircall_arg1_27 = tmp_class_creation_27__bases_orig;
        Py_INCREF(tmp_dircall_arg1_27);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_27};
            tmp_assign_source_227 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_227 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 253;

            goto try_except_handler_81;
        }
        assert(tmp_class_creation_27__bases == NULL);
        tmp_class_creation_27__bases = tmp_assign_source_227;
    }
    {
        PyObject *tmp_assign_source_228;
        tmp_assign_source_228 = PyDict_New();
        assert(tmp_class_creation_27__class_decl_dict == NULL);
        tmp_class_creation_27__class_decl_dict = tmp_assign_source_228;
    }
    {
        PyObject *tmp_assign_source_229;
        PyObject *tmp_metaclass_value_27;
        bool tmp_condition_result_157;
        PyObject *tmp_key_value_79;
        PyObject *tmp_dict_arg_value_79;
        PyObject *tmp_dict_arg_value_80;
        PyObject *tmp_key_value_80;
        nuitka_bool tmp_condition_result_158;
        int tmp_truth_name_27;
        PyObject *tmp_type_arg_53;
        PyObject *tmp_expression_value_139;
        PyObject *tmp_subscript_value_35;
        PyObject *tmp_bases_value_27;
        tmp_key_value_79 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
        tmp_dict_arg_value_79 = tmp_class_creation_27__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_79, tmp_key_value_79);
        assert(!(tmp_res == -1));
        tmp_condition_result_157 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_157 != false) {
            goto condexpr_true_53;
        } else {
            goto condexpr_false_53;
        }
        condexpr_true_53:;
        CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
        tmp_dict_arg_value_80 = tmp_class_creation_27__class_decl_dict;
        tmp_key_value_80 = mod_consts[57];
        tmp_metaclass_value_27 = DICT_GET_ITEM0(tmp_dict_arg_value_80, tmp_key_value_80);
        if (tmp_metaclass_value_27 == NULL) {
            tmp_metaclass_value_27 = Py_None;
        }
        assert(!(tmp_metaclass_value_27 == NULL));
        Py_INCREF(tmp_metaclass_value_27);
        goto condexpr_end_53;
        condexpr_false_53:;
        CHECK_OBJECT(tmp_class_creation_27__bases);
        tmp_truth_name_27 = CHECK_IF_TRUE(tmp_class_creation_27__bases);
        if (tmp_truth_name_27 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 253;

            goto try_except_handler_81;
        }
        tmp_condition_result_158 = tmp_truth_name_27 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_158 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_54;
        } else {
            goto condexpr_false_54;
        }
        condexpr_true_54:;
        CHECK_OBJECT(tmp_class_creation_27__bases);
        tmp_expression_value_139 = tmp_class_creation_27__bases;
        tmp_subscript_value_35 = mod_consts[39];
        tmp_type_arg_53 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_139, tmp_subscript_value_35, 0);
        if (tmp_type_arg_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 253;

            goto try_except_handler_81;
        }
        tmp_metaclass_value_27 = BUILTIN_TYPE1(tmp_type_arg_53);
        Py_DECREF(tmp_type_arg_53);
        if (tmp_metaclass_value_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 253;

            goto try_except_handler_81;
        }
        goto condexpr_end_54;
        condexpr_false_54:;
        tmp_metaclass_value_27 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_27);
        condexpr_end_54:;
        condexpr_end_53:;
        CHECK_OBJECT(tmp_class_creation_27__bases);
        tmp_bases_value_27 = tmp_class_creation_27__bases;
        tmp_assign_source_229 = SELECT_METACLASS(tmp_metaclass_value_27, tmp_bases_value_27);
        Py_DECREF(tmp_metaclass_value_27);
        if (tmp_assign_source_229 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 253;

            goto try_except_handler_81;
        }
        assert(tmp_class_creation_27__metaclass == NULL);
        tmp_class_creation_27__metaclass = tmp_assign_source_229;
    }
    {
        bool tmp_condition_result_159;
        PyObject *tmp_key_value_81;
        PyObject *tmp_dict_arg_value_81;
        tmp_key_value_81 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
        tmp_dict_arg_value_81 = tmp_class_creation_27__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_81, tmp_key_value_81);
        assert(!(tmp_res == -1));
        tmp_condition_result_159 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_159 != false) {
            goto branch_yes_105;
        } else {
            goto branch_no_105;
        }
    }
    branch_yes_105:;
    CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_27__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 253;

        goto try_except_handler_81;
    }
    branch_no_105:;
    {
        nuitka_bool tmp_condition_result_160;
        PyObject *tmp_expression_value_140;
        CHECK_OBJECT(tmp_class_creation_27__metaclass);
        tmp_expression_value_140 = tmp_class_creation_27__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_140, mod_consts[58]);
        tmp_condition_result_160 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_160 == NUITKA_BOOL_TRUE) {
            goto branch_yes_106;
        } else {
            goto branch_no_106;
        }
    }
    branch_yes_106:;
    {
        PyObject *tmp_assign_source_230;
        PyObject *tmp_called_value_53;
        PyObject *tmp_expression_value_141;
        PyObject *tmp_args_value_53;
        PyObject *tmp_tuple_element_106;
        PyObject *tmp_kwargs_value_53;
        CHECK_OBJECT(tmp_class_creation_27__metaclass);
        tmp_expression_value_141 = tmp_class_creation_27__metaclass;
        tmp_called_value_53 = LOOKUP_ATTRIBUTE(tmp_expression_value_141, mod_consts[58]);
        if (tmp_called_value_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 253;

            goto try_except_handler_81;
        }
        tmp_tuple_element_106 = mod_consts[127];
        tmp_args_value_53 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_53, 0, tmp_tuple_element_106);
        CHECK_OBJECT(tmp_class_creation_27__bases);
        tmp_tuple_element_106 = tmp_class_creation_27__bases;
        PyTuple_SET_ITEM0(tmp_args_value_53, 1, tmp_tuple_element_106);
        CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
        tmp_kwargs_value_53 = tmp_class_creation_27__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 253;
        tmp_assign_source_230 = CALL_FUNCTION(tmp_called_value_53, tmp_args_value_53, tmp_kwargs_value_53);
        Py_DECREF(tmp_called_value_53);
        Py_DECREF(tmp_args_value_53);
        if (tmp_assign_source_230 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 253;

            goto try_except_handler_81;
        }
        assert(tmp_class_creation_27__prepared == NULL);
        tmp_class_creation_27__prepared = tmp_assign_source_230;
    }
    {
        bool tmp_condition_result_161;
        PyObject *tmp_operand_value_27;
        PyObject *tmp_expression_value_142;
        CHECK_OBJECT(tmp_class_creation_27__prepared);
        tmp_expression_value_142 = tmp_class_creation_27__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_142, mod_consts[60]);
        tmp_operand_value_27 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_27);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 253;

            goto try_except_handler_81;
        }
        tmp_condition_result_161 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_161 != false) {
            goto branch_yes_107;
        } else {
            goto branch_no_107;
        }
    }
    branch_yes_107:;
    {
        PyObject *tmp_raise_type_27;
        PyObject *tmp_raise_value_27;
        PyObject *tmp_left_value_27;
        PyObject *tmp_right_value_27;
        PyObject *tmp_tuple_element_107;
        PyObject *tmp_getattr_target_27;
        PyObject *tmp_getattr_attr_27;
        PyObject *tmp_getattr_default_27;
        tmp_raise_type_27 = PyExc_TypeError;
        tmp_left_value_27 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_27__metaclass);
        tmp_getattr_target_27 = tmp_class_creation_27__metaclass;
        tmp_getattr_attr_27 = mod_consts[62];
        tmp_getattr_default_27 = mod_consts[63];
        tmp_tuple_element_107 = BUILTIN_GETATTR(tmp_getattr_target_27, tmp_getattr_attr_27, tmp_getattr_default_27);
        if (tmp_tuple_element_107 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 253;

            goto try_except_handler_81;
        }
        tmp_right_value_27 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_143;
            PyObject *tmp_type_arg_54;
            PyTuple_SET_ITEM(tmp_right_value_27, 0, tmp_tuple_element_107);
            CHECK_OBJECT(tmp_class_creation_27__prepared);
            tmp_type_arg_54 = tmp_class_creation_27__prepared;
            tmp_expression_value_143 = BUILTIN_TYPE1(tmp_type_arg_54);
            assert(!(tmp_expression_value_143 == NULL));
            tmp_tuple_element_107 = LOOKUP_ATTRIBUTE(tmp_expression_value_143, mod_consts[62]);
            Py_DECREF(tmp_expression_value_143);
            if (tmp_tuple_element_107 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 253;

                goto tuple_build_exception_27;
            }
            PyTuple_SET_ITEM(tmp_right_value_27, 1, tmp_tuple_element_107);
        }
        goto tuple_build_noexception_27;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_27:;
        Py_DECREF(tmp_right_value_27);
        goto try_except_handler_81;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_27:;
        tmp_raise_value_27 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_27, tmp_right_value_27);
        Py_DECREF(tmp_right_value_27);
        if (tmp_raise_value_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 253;

            goto try_except_handler_81;
        }
        exception_type = tmp_raise_type_27;
        Py_INCREF(tmp_raise_type_27);
        exception_value = tmp_raise_value_27;
        exception_lineno = 253;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_81;
    }
    branch_no_107:;
    goto branch_end_106;
    branch_no_106:;
    {
        PyObject *tmp_assign_source_231;
        tmp_assign_source_231 = PyDict_New();
        assert(tmp_class_creation_27__prepared == NULL);
        tmp_class_creation_27__prepared = tmp_assign_source_231;
    }
    branch_end_106:;
    {
        PyObject *tmp_assign_source_232;
        {
            PyObject *tmp_set_locals_27;
            CHECK_OBJECT(tmp_class_creation_27__prepared);
            tmp_set_locals_27 = tmp_class_creation_27__prepared;
            locals_aiohttp$web_exceptions$$$class__27_HTTPMethodNotAllowed_253 = tmp_set_locals_27;
            Py_INCREF(tmp_set_locals_27);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__27_HTTPMethodNotAllowed_253, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 253;

            goto try_except_handler_83;
        }
        tmp_dictset_value = mod_consts[127];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__27_HTTPMethodNotAllowed_253, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 253;

            goto try_except_handler_83;
        }
        if (isFrameUnusable(cache_frame_2e3ec85c770b6095e5b520d4af534846_24)) {
            Py_XDECREF(cache_frame_2e3ec85c770b6095e5b520d4af534846_24);

#if _DEBUG_REFCOUNTS
            if (cache_frame_2e3ec85c770b6095e5b520d4af534846_24 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_2e3ec85c770b6095e5b520d4af534846_24 = MAKE_FUNCTION_FRAME(codeobj_2e3ec85c770b6095e5b520d4af534846, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_2e3ec85c770b6095e5b520d4af534846_24->m_type_description == NULL);
        frame_2e3ec85c770b6095e5b520d4af534846_24 = cache_frame_2e3ec85c770b6095e5b520d4af534846_24;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_2e3ec85c770b6095e5b520d4af534846_24);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_2e3ec85c770b6095e5b520d4af534846_24) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[128];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__27_HTTPMethodNotAllowed_253, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 254;
            type_description_2 = "c";
            goto frame_exception_exit_24;
        }
        {
            PyObject *tmp_kw_defaults_3;
            PyObject *tmp_annotations_4;
            PyObject *tmp_dict_key_4;
            PyObject *tmp_dict_value_4;
            struct Nuitka_CellObject *tmp_closure_2[1];
            tmp_kw_defaults_3 = PyDict_Copy(mod_consts[69]);
            tmp_dict_key_4 = mod_consts[27];
            tmp_dict_value_4 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__27_HTTPMethodNotAllowed_253, mod_consts[70]);

            if (tmp_dict_value_4 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_dict_value_4 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_dict_value_4);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_annotations_4 = _PyDict_NewPresized( 8 );
            {
                PyObject *tmp_expression_value_144;
                PyObject *tmp_subscript_value_36;
                PyObject *tmp_expression_value_145;
                PyObject *tmp_subscript_value_37;
                PyObject *tmp_expression_value_146;
                PyObject *tmp_subscript_value_38;
                PyObject *tmp_expression_value_147;
                PyObject *tmp_subscript_value_39;
                PyObject *tmp_expression_value_148;
                PyObject *tmp_subscript_value_40;
                tmp_res = PyDict_SetItem(tmp_annotations_4, tmp_dict_key_4, tmp_dict_value_4);
                Py_DECREF(tmp_dict_value_4);
                assert(!(tmp_res != 0));
                tmp_dict_key_4 = mod_consts[25];
                tmp_expression_value_144 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__27_HTTPMethodNotAllowed_253, mod_consts[42]);

                if (tmp_expression_value_144 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_144 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[42]);

                        if (unlikely(tmp_expression_value_144 == NULL)) {
                            tmp_expression_value_144 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                        }

                        if (tmp_expression_value_144 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 259;
                            type_description_2 = "c";
                            goto dict_build_exception_3;
                        }
                        Py_INCREF(tmp_expression_value_144);
                    } else {
                        goto dict_build_exception_3;
                    }
                }

                tmp_subscript_value_36 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__27_HTTPMethodNotAllowed_253, mod_consts[70]);

                if (tmp_subscript_value_36 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_subscript_value_36 = (PyObject *)&PyUnicode_Type;
                        Py_INCREF(tmp_subscript_value_36);
                    } else {
                        goto dict_build_exception_3;
                    }
                }

                tmp_dict_value_4 = LOOKUP_SUBSCRIPT(tmp_expression_value_144, tmp_subscript_value_36);
                Py_DECREF(tmp_expression_value_144);
                Py_DECREF(tmp_subscript_value_36);
                if (tmp_dict_value_4 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 259;
                    type_description_2 = "c";
                    goto dict_build_exception_3;
                }
                tmp_res = PyDict_SetItem(tmp_annotations_4, tmp_dict_key_4, tmp_dict_value_4);
                Py_DECREF(tmp_dict_value_4);
                assert(!(tmp_res != 0));
                tmp_dict_key_4 = mod_consts[19];
                tmp_expression_value_145 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__27_HTTPMethodNotAllowed_253, mod_consts[44]);

                if (tmp_expression_value_145 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_145 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[44]);

                        if (unlikely(tmp_expression_value_145 == NULL)) {
                            tmp_expression_value_145 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[44]);
                        }

                        if (tmp_expression_value_145 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 261;
                            type_description_2 = "c";
                            goto dict_build_exception_3;
                        }
                        Py_INCREF(tmp_expression_value_145);
                    } else {
                        goto dict_build_exception_3;
                    }
                }

                tmp_subscript_value_37 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__27_HTTPMethodNotAllowed_253, mod_consts[51]);

                if (tmp_subscript_value_37 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_subscript_value_37 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[51]);

                        if (unlikely(tmp_subscript_value_37 == NULL)) {
                            tmp_subscript_value_37 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[51]);
                        }

                        if (tmp_subscript_value_37 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_expression_value_145);

                            exception_lineno = 261;
                            type_description_2 = "c";
                            goto dict_build_exception_3;
                        }
                        Py_INCREF(tmp_subscript_value_37);
                    } else {
                        goto dict_build_exception_3;
                    }
                }

                tmp_dict_value_4 = LOOKUP_SUBSCRIPT(tmp_expression_value_145, tmp_subscript_value_37);
                Py_DECREF(tmp_expression_value_145);
                Py_DECREF(tmp_subscript_value_37);
                if (tmp_dict_value_4 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 261;
                    type_description_2 = "c";
                    goto dict_build_exception_3;
                }
                tmp_res = PyDict_SetItem(tmp_annotations_4, tmp_dict_key_4, tmp_dict_value_4);
                Py_DECREF(tmp_dict_value_4);
                assert(!(tmp_res != 0));
                tmp_dict_key_4 = mod_consts[8];
                tmp_expression_value_146 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__27_HTTPMethodNotAllowed_253, mod_consts[44]);

                if (tmp_expression_value_146 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_146 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[44]);

                        if (unlikely(tmp_expression_value_146 == NULL)) {
                            tmp_expression_value_146 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[44]);
                        }

                        if (tmp_expression_value_146 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 262;
                            type_description_2 = "c";
                            goto dict_build_exception_3;
                        }
                        Py_INCREF(tmp_expression_value_146);
                    } else {
                        goto dict_build_exception_3;
                    }
                }

                tmp_subscript_value_38 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__27_HTTPMethodNotAllowed_253, mod_consts[70]);

                if (tmp_subscript_value_38 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_subscript_value_38 = (PyObject *)&PyUnicode_Type;
                        Py_INCREF(tmp_subscript_value_38);
                    } else {
                        goto dict_build_exception_3;
                    }
                }

                tmp_dict_value_4 = LOOKUP_SUBSCRIPT(tmp_expression_value_146, tmp_subscript_value_38);
                Py_DECREF(tmp_expression_value_146);
                Py_DECREF(tmp_subscript_value_38);
                if (tmp_dict_value_4 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 262;
                    type_description_2 = "c";
                    goto dict_build_exception_3;
                }
                tmp_res = PyDict_SetItem(tmp_annotations_4, tmp_dict_key_4, tmp_dict_value_4);
                Py_DECREF(tmp_dict_value_4);
                assert(!(tmp_res != 0));
                tmp_dict_key_4 = mod_consts[9];
                tmp_dict_value_4 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__27_HTTPMethodNotAllowed_253, mod_consts[40]);

                if (tmp_dict_value_4 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_dict_value_4 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[40]);

                        if (unlikely(tmp_dict_value_4 == NULL)) {
                            tmp_dict_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[40]);
                        }

                        if (tmp_dict_value_4 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 263;
                            type_description_2 = "c";
                            goto dict_build_exception_3;
                        }
                        Py_INCREF(tmp_dict_value_4);
                    } else {
                        goto dict_build_exception_3;
                    }
                }

                tmp_res = PyDict_SetItem(tmp_annotations_4, tmp_dict_key_4, tmp_dict_value_4);
                Py_DECREF(tmp_dict_value_4);
                assert(!(tmp_res != 0));
                tmp_dict_key_4 = mod_consts[14];
                tmp_expression_value_147 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__27_HTTPMethodNotAllowed_253, mod_consts[44]);

                if (tmp_expression_value_147 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_147 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[44]);

                        if (unlikely(tmp_expression_value_147 == NULL)) {
                            tmp_expression_value_147 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[44]);
                        }

                        if (tmp_expression_value_147 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 264;
                            type_description_2 = "c";
                            goto dict_build_exception_3;
                        }
                        Py_INCREF(tmp_expression_value_147);
                    } else {
                        goto dict_build_exception_3;
                    }
                }

                tmp_subscript_value_39 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__27_HTTPMethodNotAllowed_253, mod_consts[70]);

                if (tmp_subscript_value_39 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_subscript_value_39 = (PyObject *)&PyUnicode_Type;
                        Py_INCREF(tmp_subscript_value_39);
                    } else {
                        goto dict_build_exception_3;
                    }
                }

                tmp_dict_value_4 = LOOKUP_SUBSCRIPT(tmp_expression_value_147, tmp_subscript_value_39);
                Py_DECREF(tmp_expression_value_147);
                Py_DECREF(tmp_subscript_value_39);
                if (tmp_dict_value_4 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 264;
                    type_description_2 = "c";
                    goto dict_build_exception_3;
                }
                tmp_res = PyDict_SetItem(tmp_annotations_4, tmp_dict_key_4, tmp_dict_value_4);
                Py_DECREF(tmp_dict_value_4);
                assert(!(tmp_res != 0));
                tmp_dict_key_4 = mod_consts[71];
                tmp_expression_value_148 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__27_HTTPMethodNotAllowed_253, mod_consts[44]);

                if (tmp_expression_value_148 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_148 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[44]);

                        if (unlikely(tmp_expression_value_148 == NULL)) {
                            tmp_expression_value_148 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[44]);
                        }

                        if (tmp_expression_value_148 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 265;
                            type_description_2 = "c";
                            goto dict_build_exception_3;
                        }
                        Py_INCREF(tmp_expression_value_148);
                    } else {
                        goto dict_build_exception_3;
                    }
                }

                tmp_subscript_value_40 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__27_HTTPMethodNotAllowed_253, mod_consts[70]);

                if (tmp_subscript_value_40 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_subscript_value_40 = (PyObject *)&PyUnicode_Type;
                        Py_INCREF(tmp_subscript_value_40);
                    } else {
                        goto dict_build_exception_3;
                    }
                }

                tmp_dict_value_4 = LOOKUP_SUBSCRIPT(tmp_expression_value_148, tmp_subscript_value_40);
                Py_DECREF(tmp_expression_value_148);
                Py_DECREF(tmp_subscript_value_40);
                if (tmp_dict_value_4 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 265;
                    type_description_2 = "c";
                    goto dict_build_exception_3;
                }
                tmp_res = PyDict_SetItem(tmp_annotations_4, tmp_dict_key_4, tmp_dict_value_4);
                Py_DECREF(tmp_dict_value_4);
                assert(!(tmp_res != 0));
                tmp_dict_key_4 = mod_consts[72];
                tmp_dict_value_4 = Py_None;
                tmp_res = PyDict_SetItem(tmp_annotations_4, tmp_dict_key_4, tmp_dict_value_4);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_3;
            // Exception handling pass through code for dict_build:
            dict_build_exception_3:;
            Py_DECREF(tmp_kw_defaults_3);
            Py_DECREF(tmp_annotations_4);
            goto frame_exception_exit_24;
            // Finished with no exception for dict_build:
            dict_build_noexception_3:;

            tmp_closure_2[0] = outline_26_var___class__;
            Py_INCREF(tmp_closure_2[0]);

            tmp_dictset_value = MAKE_FUNCTION_aiohttp$web_exceptions$$$function__4___init__(tmp_kw_defaults_3, tmp_annotations_4, tmp_closure_2);

            tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__27_HTTPMethodNotAllowed_253, mod_consts[5], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 256;
                type_description_2 = "c";
                goto frame_exception_exit_24;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_2e3ec85c770b6095e5b520d4af534846_24);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_23;

        frame_exception_exit_24:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_2e3ec85c770b6095e5b520d4af534846_24);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_2e3ec85c770b6095e5b520d4af534846_24, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_2e3ec85c770b6095e5b520d4af534846_24->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_2e3ec85c770b6095e5b520d4af534846_24, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_2e3ec85c770b6095e5b520d4af534846_24,
            type_description_2,
            outline_26_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_2e3ec85c770b6095e5b520d4af534846_24 == cache_frame_2e3ec85c770b6095e5b520d4af534846_24) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_2e3ec85c770b6095e5b520d4af534846_24);
            cache_frame_2e3ec85c770b6095e5b520d4af534846_24 = NULL;
        }

        assertFrameObject(frame_2e3ec85c770b6095e5b520d4af534846_24);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_23;

        frame_no_exception_23:;
        goto skip_nested_handling_23;
        nested_frame_exit_23:;

        goto try_except_handler_83;
        skip_nested_handling_23:;
        {
            nuitka_bool tmp_condition_result_162;
            PyObject *tmp_cmp_expr_left_27;
            PyObject *tmp_cmp_expr_right_27;
            CHECK_OBJECT(tmp_class_creation_27__bases);
            tmp_cmp_expr_left_27 = tmp_class_creation_27__bases;
            CHECK_OBJECT(tmp_class_creation_27__bases_orig);
            tmp_cmp_expr_right_27 = tmp_class_creation_27__bases_orig;
            tmp_condition_result_162 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_27, tmp_cmp_expr_right_27);
            if (tmp_condition_result_162 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 253;

                goto try_except_handler_83;
            }
            if (tmp_condition_result_162 == NUITKA_BOOL_TRUE) {
                goto branch_yes_108;
            } else {
                goto branch_no_108;
            }
            assert(tmp_condition_result_162 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_108:;
        CHECK_OBJECT(tmp_class_creation_27__bases_orig);
        tmp_dictset_value = tmp_class_creation_27__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__27_HTTPMethodNotAllowed_253, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 253;

            goto try_except_handler_83;
        }
        branch_no_108:;
        {
            PyObject *tmp_assign_source_233;
            PyObject *tmp_called_value_54;
            PyObject *tmp_args_value_54;
            PyObject *tmp_tuple_element_108;
            PyObject *tmp_kwargs_value_54;
            CHECK_OBJECT(tmp_class_creation_27__metaclass);
            tmp_called_value_54 = tmp_class_creation_27__metaclass;
            tmp_tuple_element_108 = mod_consts[127];
            tmp_args_value_54 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_54, 0, tmp_tuple_element_108);
            CHECK_OBJECT(tmp_class_creation_27__bases);
            tmp_tuple_element_108 = tmp_class_creation_27__bases;
            PyTuple_SET_ITEM0(tmp_args_value_54, 1, tmp_tuple_element_108);
            tmp_tuple_element_108 = locals_aiohttp$web_exceptions$$$class__27_HTTPMethodNotAllowed_253;
            PyTuple_SET_ITEM0(tmp_args_value_54, 2, tmp_tuple_element_108);
            CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
            tmp_kwargs_value_54 = tmp_class_creation_27__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 253;
            tmp_assign_source_233 = CALL_FUNCTION(tmp_called_value_54, tmp_args_value_54, tmp_kwargs_value_54);
            Py_DECREF(tmp_args_value_54);
            if (tmp_assign_source_233 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 253;

                goto try_except_handler_83;
            }
            assert(Nuitka_Cell_GET(outline_26_var___class__) == NULL);
            PyCell_SET(outline_26_var___class__, tmp_assign_source_233);

        }
        CHECK_OBJECT(Nuitka_Cell_GET(outline_26_var___class__));
        tmp_assign_source_232 = Nuitka_Cell_GET(outline_26_var___class__);
        Py_INCREF(tmp_assign_source_232);
        goto try_return_handler_83;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_83:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__27_HTTPMethodNotAllowed_253);
        locals_aiohttp$web_exceptions$$$class__27_HTTPMethodNotAllowed_253 = NULL;
        goto try_return_handler_82;
        // Exception handler code:
        try_except_handler_83:;
        exception_keeper_type_81 = exception_type;
        exception_keeper_value_81 = exception_value;
        exception_keeper_tb_81 = exception_tb;
        exception_keeper_lineno_81 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__27_HTTPMethodNotAllowed_253);
        locals_aiohttp$web_exceptions$$$class__27_HTTPMethodNotAllowed_253 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_81;
        exception_value = exception_keeper_value_81;
        exception_tb = exception_keeper_tb_81;
        exception_lineno = exception_keeper_lineno_81;

        goto try_except_handler_82;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_82:;
        CHECK_OBJECT(outline_26_var___class__);
        Py_DECREF(outline_26_var___class__);
        outline_26_var___class__ = NULL;
        goto outline_result_27;
        // Exception handler code:
        try_except_handler_82:;
        exception_keeper_type_82 = exception_type;
        exception_keeper_value_82 = exception_value;
        exception_keeper_tb_82 = exception_tb;
        exception_keeper_lineno_82 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_82;
        exception_value = exception_keeper_value_82;
        exception_tb = exception_keeper_tb_82;
        exception_lineno = exception_keeper_lineno_82;

        goto outline_exception_27;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_27:;
        exception_lineno = 253;
        goto try_except_handler_81;
        outline_result_27:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[127], tmp_assign_source_232);
    }
    goto try_end_29;
    // Exception handler code:
    try_except_handler_81:;
    exception_keeper_type_83 = exception_type;
    exception_keeper_value_83 = exception_value;
    exception_keeper_tb_83 = exception_tb;
    exception_keeper_lineno_83 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_27__bases_orig);
    tmp_class_creation_27__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_27__bases);
    tmp_class_creation_27__bases = NULL;
    Py_XDECREF(tmp_class_creation_27__class_decl_dict);
    tmp_class_creation_27__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_27__metaclass);
    tmp_class_creation_27__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_27__prepared);
    tmp_class_creation_27__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_83;
    exception_value = exception_keeper_value_83;
    exception_tb = exception_keeper_tb_83;
    exception_lineno = exception_keeper_lineno_83;

    goto frame_exception_exit_1;
    // End of try:
    try_end_29:;
    CHECK_OBJECT(tmp_class_creation_27__bases_orig);
    Py_DECREF(tmp_class_creation_27__bases_orig);
    tmp_class_creation_27__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_27__bases);
    Py_DECREF(tmp_class_creation_27__bases);
    tmp_class_creation_27__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
    Py_DECREF(tmp_class_creation_27__class_decl_dict);
    tmp_class_creation_27__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_27__metaclass);
    Py_DECREF(tmp_class_creation_27__metaclass);
    tmp_class_creation_27__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_27__prepared);
    Py_DECREF(tmp_class_creation_27__prepared);
    tmp_class_creation_27__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_234;
        PyObject *tmp_tuple_element_109;
        tmp_tuple_element_109 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[116]);

        if (unlikely(tmp_tuple_element_109 == NULL)) {
            tmp_tuple_element_109 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[116]);
        }

        if (tmp_tuple_element_109 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 280;

            goto try_except_handler_84;
        }
        tmp_assign_source_234 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_234, 0, tmp_tuple_element_109);
        assert(tmp_class_creation_28__bases_orig == NULL);
        tmp_class_creation_28__bases_orig = tmp_assign_source_234;
    }
    {
        PyObject *tmp_assign_source_235;
        PyObject *tmp_dircall_arg1_28;
        CHECK_OBJECT(tmp_class_creation_28__bases_orig);
        tmp_dircall_arg1_28 = tmp_class_creation_28__bases_orig;
        Py_INCREF(tmp_dircall_arg1_28);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_28};
            tmp_assign_source_235 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_235 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 280;

            goto try_except_handler_84;
        }
        assert(tmp_class_creation_28__bases == NULL);
        tmp_class_creation_28__bases = tmp_assign_source_235;
    }
    {
        PyObject *tmp_assign_source_236;
        tmp_assign_source_236 = PyDict_New();
        assert(tmp_class_creation_28__class_decl_dict == NULL);
        tmp_class_creation_28__class_decl_dict = tmp_assign_source_236;
    }
    {
        PyObject *tmp_assign_source_237;
        PyObject *tmp_metaclass_value_28;
        bool tmp_condition_result_163;
        PyObject *tmp_key_value_82;
        PyObject *tmp_dict_arg_value_82;
        PyObject *tmp_dict_arg_value_83;
        PyObject *tmp_key_value_83;
        nuitka_bool tmp_condition_result_164;
        int tmp_truth_name_28;
        PyObject *tmp_type_arg_55;
        PyObject *tmp_expression_value_149;
        PyObject *tmp_subscript_value_41;
        PyObject *tmp_bases_value_28;
        tmp_key_value_82 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
        tmp_dict_arg_value_82 = tmp_class_creation_28__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_82, tmp_key_value_82);
        assert(!(tmp_res == -1));
        tmp_condition_result_163 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_163 != false) {
            goto condexpr_true_55;
        } else {
            goto condexpr_false_55;
        }
        condexpr_true_55:;
        CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
        tmp_dict_arg_value_83 = tmp_class_creation_28__class_decl_dict;
        tmp_key_value_83 = mod_consts[57];
        tmp_metaclass_value_28 = DICT_GET_ITEM0(tmp_dict_arg_value_83, tmp_key_value_83);
        if (tmp_metaclass_value_28 == NULL) {
            tmp_metaclass_value_28 = Py_None;
        }
        assert(!(tmp_metaclass_value_28 == NULL));
        Py_INCREF(tmp_metaclass_value_28);
        goto condexpr_end_55;
        condexpr_false_55:;
        CHECK_OBJECT(tmp_class_creation_28__bases);
        tmp_truth_name_28 = CHECK_IF_TRUE(tmp_class_creation_28__bases);
        if (tmp_truth_name_28 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 280;

            goto try_except_handler_84;
        }
        tmp_condition_result_164 = tmp_truth_name_28 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_164 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_56;
        } else {
            goto condexpr_false_56;
        }
        condexpr_true_56:;
        CHECK_OBJECT(tmp_class_creation_28__bases);
        tmp_expression_value_149 = tmp_class_creation_28__bases;
        tmp_subscript_value_41 = mod_consts[39];
        tmp_type_arg_55 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_149, tmp_subscript_value_41, 0);
        if (tmp_type_arg_55 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 280;

            goto try_except_handler_84;
        }
        tmp_metaclass_value_28 = BUILTIN_TYPE1(tmp_type_arg_55);
        Py_DECREF(tmp_type_arg_55);
        if (tmp_metaclass_value_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 280;

            goto try_except_handler_84;
        }
        goto condexpr_end_56;
        condexpr_false_56:;
        tmp_metaclass_value_28 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_28);
        condexpr_end_56:;
        condexpr_end_55:;
        CHECK_OBJECT(tmp_class_creation_28__bases);
        tmp_bases_value_28 = tmp_class_creation_28__bases;
        tmp_assign_source_237 = SELECT_METACLASS(tmp_metaclass_value_28, tmp_bases_value_28);
        Py_DECREF(tmp_metaclass_value_28);
        if (tmp_assign_source_237 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 280;

            goto try_except_handler_84;
        }
        assert(tmp_class_creation_28__metaclass == NULL);
        tmp_class_creation_28__metaclass = tmp_assign_source_237;
    }
    {
        bool tmp_condition_result_165;
        PyObject *tmp_key_value_84;
        PyObject *tmp_dict_arg_value_84;
        tmp_key_value_84 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
        tmp_dict_arg_value_84 = tmp_class_creation_28__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_84, tmp_key_value_84);
        assert(!(tmp_res == -1));
        tmp_condition_result_165 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_165 != false) {
            goto branch_yes_109;
        } else {
            goto branch_no_109;
        }
    }
    branch_yes_109:;
    CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_28__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 280;

        goto try_except_handler_84;
    }
    branch_no_109:;
    {
        nuitka_bool tmp_condition_result_166;
        PyObject *tmp_expression_value_150;
        CHECK_OBJECT(tmp_class_creation_28__metaclass);
        tmp_expression_value_150 = tmp_class_creation_28__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_150, mod_consts[58]);
        tmp_condition_result_166 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_166 == NUITKA_BOOL_TRUE) {
            goto branch_yes_110;
        } else {
            goto branch_no_110;
        }
    }
    branch_yes_110:;
    {
        PyObject *tmp_assign_source_238;
        PyObject *tmp_called_value_55;
        PyObject *tmp_expression_value_151;
        PyObject *tmp_args_value_55;
        PyObject *tmp_tuple_element_110;
        PyObject *tmp_kwargs_value_55;
        CHECK_OBJECT(tmp_class_creation_28__metaclass);
        tmp_expression_value_151 = tmp_class_creation_28__metaclass;
        tmp_called_value_55 = LOOKUP_ATTRIBUTE(tmp_expression_value_151, mod_consts[58]);
        if (tmp_called_value_55 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 280;

            goto try_except_handler_84;
        }
        tmp_tuple_element_110 = mod_consts[130];
        tmp_args_value_55 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_55, 0, tmp_tuple_element_110);
        CHECK_OBJECT(tmp_class_creation_28__bases);
        tmp_tuple_element_110 = tmp_class_creation_28__bases;
        PyTuple_SET_ITEM0(tmp_args_value_55, 1, tmp_tuple_element_110);
        CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
        tmp_kwargs_value_55 = tmp_class_creation_28__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 280;
        tmp_assign_source_238 = CALL_FUNCTION(tmp_called_value_55, tmp_args_value_55, tmp_kwargs_value_55);
        Py_DECREF(tmp_called_value_55);
        Py_DECREF(tmp_args_value_55);
        if (tmp_assign_source_238 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 280;

            goto try_except_handler_84;
        }
        assert(tmp_class_creation_28__prepared == NULL);
        tmp_class_creation_28__prepared = tmp_assign_source_238;
    }
    {
        bool tmp_condition_result_167;
        PyObject *tmp_operand_value_28;
        PyObject *tmp_expression_value_152;
        CHECK_OBJECT(tmp_class_creation_28__prepared);
        tmp_expression_value_152 = tmp_class_creation_28__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_152, mod_consts[60]);
        tmp_operand_value_28 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_28);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 280;

            goto try_except_handler_84;
        }
        tmp_condition_result_167 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_167 != false) {
            goto branch_yes_111;
        } else {
            goto branch_no_111;
        }
    }
    branch_yes_111:;
    {
        PyObject *tmp_raise_type_28;
        PyObject *tmp_raise_value_28;
        PyObject *tmp_left_value_28;
        PyObject *tmp_right_value_28;
        PyObject *tmp_tuple_element_111;
        PyObject *tmp_getattr_target_28;
        PyObject *tmp_getattr_attr_28;
        PyObject *tmp_getattr_default_28;
        tmp_raise_type_28 = PyExc_TypeError;
        tmp_left_value_28 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_28__metaclass);
        tmp_getattr_target_28 = tmp_class_creation_28__metaclass;
        tmp_getattr_attr_28 = mod_consts[62];
        tmp_getattr_default_28 = mod_consts[63];
        tmp_tuple_element_111 = BUILTIN_GETATTR(tmp_getattr_target_28, tmp_getattr_attr_28, tmp_getattr_default_28);
        if (tmp_tuple_element_111 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 280;

            goto try_except_handler_84;
        }
        tmp_right_value_28 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_153;
            PyObject *tmp_type_arg_56;
            PyTuple_SET_ITEM(tmp_right_value_28, 0, tmp_tuple_element_111);
            CHECK_OBJECT(tmp_class_creation_28__prepared);
            tmp_type_arg_56 = tmp_class_creation_28__prepared;
            tmp_expression_value_153 = BUILTIN_TYPE1(tmp_type_arg_56);
            assert(!(tmp_expression_value_153 == NULL));
            tmp_tuple_element_111 = LOOKUP_ATTRIBUTE(tmp_expression_value_153, mod_consts[62]);
            Py_DECREF(tmp_expression_value_153);
            if (tmp_tuple_element_111 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 280;

                goto tuple_build_exception_28;
            }
            PyTuple_SET_ITEM(tmp_right_value_28, 1, tmp_tuple_element_111);
        }
        goto tuple_build_noexception_28;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_28:;
        Py_DECREF(tmp_right_value_28);
        goto try_except_handler_84;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_28:;
        tmp_raise_value_28 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_28, tmp_right_value_28);
        Py_DECREF(tmp_right_value_28);
        if (tmp_raise_value_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 280;

            goto try_except_handler_84;
        }
        exception_type = tmp_raise_type_28;
        Py_INCREF(tmp_raise_type_28);
        exception_value = tmp_raise_value_28;
        exception_lineno = 280;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_84;
    }
    branch_no_111:;
    goto branch_end_110;
    branch_no_110:;
    {
        PyObject *tmp_assign_source_239;
        tmp_assign_source_239 = PyDict_New();
        assert(tmp_class_creation_28__prepared == NULL);
        tmp_class_creation_28__prepared = tmp_assign_source_239;
    }
    branch_end_110:;
    {
        PyObject *tmp_assign_source_240;
        {
            PyObject *tmp_set_locals_28;
            CHECK_OBJECT(tmp_class_creation_28__prepared);
            tmp_set_locals_28 = tmp_class_creation_28__prepared;
            locals_aiohttp$web_exceptions$$$class__28_HTTPNotAcceptable_280 = tmp_set_locals_28;
            Py_INCREF(tmp_set_locals_28);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__28_HTTPNotAcceptable_280, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 280;

            goto try_except_handler_86;
        }
        tmp_dictset_value = mod_consts[130];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__28_HTTPNotAcceptable_280, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 280;

            goto try_except_handler_86;
        }
        if (isFrameUnusable(cache_frame_0793e14ad2280948d27cc37307622bef_25)) {
            Py_XDECREF(cache_frame_0793e14ad2280948d27cc37307622bef_25);

#if _DEBUG_REFCOUNTS
            if (cache_frame_0793e14ad2280948d27cc37307622bef_25 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_0793e14ad2280948d27cc37307622bef_25 = MAKE_FUNCTION_FRAME(codeobj_0793e14ad2280948d27cc37307622bef, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_0793e14ad2280948d27cc37307622bef_25->m_type_description == NULL);
        frame_0793e14ad2280948d27cc37307622bef_25 = cache_frame_0793e14ad2280948d27cc37307622bef_25;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_0793e14ad2280948d27cc37307622bef_25);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_0793e14ad2280948d27cc37307622bef_25) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[131];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__28_HTTPNotAcceptable_280, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 281;
            type_description_2 = "o";
            goto frame_exception_exit_25;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_0793e14ad2280948d27cc37307622bef_25);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_24;

        frame_exception_exit_25:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_0793e14ad2280948d27cc37307622bef_25);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_0793e14ad2280948d27cc37307622bef_25, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_0793e14ad2280948d27cc37307622bef_25->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_0793e14ad2280948d27cc37307622bef_25, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_0793e14ad2280948d27cc37307622bef_25,
            type_description_2,
            outline_27_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_0793e14ad2280948d27cc37307622bef_25 == cache_frame_0793e14ad2280948d27cc37307622bef_25) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_0793e14ad2280948d27cc37307622bef_25);
            cache_frame_0793e14ad2280948d27cc37307622bef_25 = NULL;
        }

        assertFrameObject(frame_0793e14ad2280948d27cc37307622bef_25);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_24;

        frame_no_exception_24:;
        goto skip_nested_handling_24;
        nested_frame_exit_24:;

        goto try_except_handler_86;
        skip_nested_handling_24:;
        {
            nuitka_bool tmp_condition_result_168;
            PyObject *tmp_cmp_expr_left_28;
            PyObject *tmp_cmp_expr_right_28;
            CHECK_OBJECT(tmp_class_creation_28__bases);
            tmp_cmp_expr_left_28 = tmp_class_creation_28__bases;
            CHECK_OBJECT(tmp_class_creation_28__bases_orig);
            tmp_cmp_expr_right_28 = tmp_class_creation_28__bases_orig;
            tmp_condition_result_168 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_28, tmp_cmp_expr_right_28);
            if (tmp_condition_result_168 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 280;

                goto try_except_handler_86;
            }
            if (tmp_condition_result_168 == NUITKA_BOOL_TRUE) {
                goto branch_yes_112;
            } else {
                goto branch_no_112;
            }
            assert(tmp_condition_result_168 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_112:;
        CHECK_OBJECT(tmp_class_creation_28__bases_orig);
        tmp_dictset_value = tmp_class_creation_28__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__28_HTTPNotAcceptable_280, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 280;

            goto try_except_handler_86;
        }
        branch_no_112:;
        {
            PyObject *tmp_assign_source_241;
            PyObject *tmp_called_value_56;
            PyObject *tmp_args_value_56;
            PyObject *tmp_tuple_element_112;
            PyObject *tmp_kwargs_value_56;
            CHECK_OBJECT(tmp_class_creation_28__metaclass);
            tmp_called_value_56 = tmp_class_creation_28__metaclass;
            tmp_tuple_element_112 = mod_consts[130];
            tmp_args_value_56 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_56, 0, tmp_tuple_element_112);
            CHECK_OBJECT(tmp_class_creation_28__bases);
            tmp_tuple_element_112 = tmp_class_creation_28__bases;
            PyTuple_SET_ITEM0(tmp_args_value_56, 1, tmp_tuple_element_112);
            tmp_tuple_element_112 = locals_aiohttp$web_exceptions$$$class__28_HTTPNotAcceptable_280;
            PyTuple_SET_ITEM0(tmp_args_value_56, 2, tmp_tuple_element_112);
            CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
            tmp_kwargs_value_56 = tmp_class_creation_28__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 280;
            tmp_assign_source_241 = CALL_FUNCTION(tmp_called_value_56, tmp_args_value_56, tmp_kwargs_value_56);
            Py_DECREF(tmp_args_value_56);
            if (tmp_assign_source_241 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 280;

                goto try_except_handler_86;
            }
            assert(outline_27_var___class__ == NULL);
            outline_27_var___class__ = tmp_assign_source_241;
        }
        CHECK_OBJECT(outline_27_var___class__);
        tmp_assign_source_240 = outline_27_var___class__;
        Py_INCREF(tmp_assign_source_240);
        goto try_return_handler_86;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_86:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__28_HTTPNotAcceptable_280);
        locals_aiohttp$web_exceptions$$$class__28_HTTPNotAcceptable_280 = NULL;
        goto try_return_handler_85;
        // Exception handler code:
        try_except_handler_86:;
        exception_keeper_type_84 = exception_type;
        exception_keeper_value_84 = exception_value;
        exception_keeper_tb_84 = exception_tb;
        exception_keeper_lineno_84 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__28_HTTPNotAcceptable_280);
        locals_aiohttp$web_exceptions$$$class__28_HTTPNotAcceptable_280 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_84;
        exception_value = exception_keeper_value_84;
        exception_tb = exception_keeper_tb_84;
        exception_lineno = exception_keeper_lineno_84;

        goto try_except_handler_85;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_85:;
        CHECK_OBJECT(outline_27_var___class__);
        Py_DECREF(outline_27_var___class__);
        outline_27_var___class__ = NULL;
        goto outline_result_28;
        // Exception handler code:
        try_except_handler_85:;
        exception_keeper_type_85 = exception_type;
        exception_keeper_value_85 = exception_value;
        exception_keeper_tb_85 = exception_tb;
        exception_keeper_lineno_85 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_85;
        exception_value = exception_keeper_value_85;
        exception_tb = exception_keeper_tb_85;
        exception_lineno = exception_keeper_lineno_85;

        goto outline_exception_28;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_28:;
        exception_lineno = 280;
        goto try_except_handler_84;
        outline_result_28:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[130], tmp_assign_source_240);
    }
    goto try_end_30;
    // Exception handler code:
    try_except_handler_84:;
    exception_keeper_type_86 = exception_type;
    exception_keeper_value_86 = exception_value;
    exception_keeper_tb_86 = exception_tb;
    exception_keeper_lineno_86 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_28__bases_orig);
    tmp_class_creation_28__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_28__bases);
    tmp_class_creation_28__bases = NULL;
    Py_XDECREF(tmp_class_creation_28__class_decl_dict);
    tmp_class_creation_28__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_28__metaclass);
    tmp_class_creation_28__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_28__prepared);
    tmp_class_creation_28__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_86;
    exception_value = exception_keeper_value_86;
    exception_tb = exception_keeper_tb_86;
    exception_lineno = exception_keeper_lineno_86;

    goto frame_exception_exit_1;
    // End of try:
    try_end_30:;
    CHECK_OBJECT(tmp_class_creation_28__bases_orig);
    Py_DECREF(tmp_class_creation_28__bases_orig);
    tmp_class_creation_28__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_28__bases);
    Py_DECREF(tmp_class_creation_28__bases);
    tmp_class_creation_28__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
    Py_DECREF(tmp_class_creation_28__class_decl_dict);
    tmp_class_creation_28__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_28__metaclass);
    Py_DECREF(tmp_class_creation_28__metaclass);
    tmp_class_creation_28__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_28__prepared);
    Py_DECREF(tmp_class_creation_28__prepared);
    tmp_class_creation_28__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_242;
        PyObject *tmp_tuple_element_113;
        tmp_tuple_element_113 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[116]);

        if (unlikely(tmp_tuple_element_113 == NULL)) {
            tmp_tuple_element_113 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[116]);
        }

        if (tmp_tuple_element_113 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;

            goto try_except_handler_87;
        }
        tmp_assign_source_242 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_242, 0, tmp_tuple_element_113);
        assert(tmp_class_creation_29__bases_orig == NULL);
        tmp_class_creation_29__bases_orig = tmp_assign_source_242;
    }
    {
        PyObject *tmp_assign_source_243;
        PyObject *tmp_dircall_arg1_29;
        CHECK_OBJECT(tmp_class_creation_29__bases_orig);
        tmp_dircall_arg1_29 = tmp_class_creation_29__bases_orig;
        Py_INCREF(tmp_dircall_arg1_29);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_29};
            tmp_assign_source_243 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_243 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;

            goto try_except_handler_87;
        }
        assert(tmp_class_creation_29__bases == NULL);
        tmp_class_creation_29__bases = tmp_assign_source_243;
    }
    {
        PyObject *tmp_assign_source_244;
        tmp_assign_source_244 = PyDict_New();
        assert(tmp_class_creation_29__class_decl_dict == NULL);
        tmp_class_creation_29__class_decl_dict = tmp_assign_source_244;
    }
    {
        PyObject *tmp_assign_source_245;
        PyObject *tmp_metaclass_value_29;
        bool tmp_condition_result_169;
        PyObject *tmp_key_value_85;
        PyObject *tmp_dict_arg_value_85;
        PyObject *tmp_dict_arg_value_86;
        PyObject *tmp_key_value_86;
        nuitka_bool tmp_condition_result_170;
        int tmp_truth_name_29;
        PyObject *tmp_type_arg_57;
        PyObject *tmp_expression_value_154;
        PyObject *tmp_subscript_value_42;
        PyObject *tmp_bases_value_29;
        tmp_key_value_85 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
        tmp_dict_arg_value_85 = tmp_class_creation_29__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_85, tmp_key_value_85);
        assert(!(tmp_res == -1));
        tmp_condition_result_169 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_169 != false) {
            goto condexpr_true_57;
        } else {
            goto condexpr_false_57;
        }
        condexpr_true_57:;
        CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
        tmp_dict_arg_value_86 = tmp_class_creation_29__class_decl_dict;
        tmp_key_value_86 = mod_consts[57];
        tmp_metaclass_value_29 = DICT_GET_ITEM0(tmp_dict_arg_value_86, tmp_key_value_86);
        if (tmp_metaclass_value_29 == NULL) {
            tmp_metaclass_value_29 = Py_None;
        }
        assert(!(tmp_metaclass_value_29 == NULL));
        Py_INCREF(tmp_metaclass_value_29);
        goto condexpr_end_57;
        condexpr_false_57:;
        CHECK_OBJECT(tmp_class_creation_29__bases);
        tmp_truth_name_29 = CHECK_IF_TRUE(tmp_class_creation_29__bases);
        if (tmp_truth_name_29 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;

            goto try_except_handler_87;
        }
        tmp_condition_result_170 = tmp_truth_name_29 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_170 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_58;
        } else {
            goto condexpr_false_58;
        }
        condexpr_true_58:;
        CHECK_OBJECT(tmp_class_creation_29__bases);
        tmp_expression_value_154 = tmp_class_creation_29__bases;
        tmp_subscript_value_42 = mod_consts[39];
        tmp_type_arg_57 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_154, tmp_subscript_value_42, 0);
        if (tmp_type_arg_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;

            goto try_except_handler_87;
        }
        tmp_metaclass_value_29 = BUILTIN_TYPE1(tmp_type_arg_57);
        Py_DECREF(tmp_type_arg_57);
        if (tmp_metaclass_value_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;

            goto try_except_handler_87;
        }
        goto condexpr_end_58;
        condexpr_false_58:;
        tmp_metaclass_value_29 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_29);
        condexpr_end_58:;
        condexpr_end_57:;
        CHECK_OBJECT(tmp_class_creation_29__bases);
        tmp_bases_value_29 = tmp_class_creation_29__bases;
        tmp_assign_source_245 = SELECT_METACLASS(tmp_metaclass_value_29, tmp_bases_value_29);
        Py_DECREF(tmp_metaclass_value_29);
        if (tmp_assign_source_245 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;

            goto try_except_handler_87;
        }
        assert(tmp_class_creation_29__metaclass == NULL);
        tmp_class_creation_29__metaclass = tmp_assign_source_245;
    }
    {
        bool tmp_condition_result_171;
        PyObject *tmp_key_value_87;
        PyObject *tmp_dict_arg_value_87;
        tmp_key_value_87 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
        tmp_dict_arg_value_87 = tmp_class_creation_29__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_87, tmp_key_value_87);
        assert(!(tmp_res == -1));
        tmp_condition_result_171 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_171 != false) {
            goto branch_yes_113;
        } else {
            goto branch_no_113;
        }
    }
    branch_yes_113:;
    CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_29__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 284;

        goto try_except_handler_87;
    }
    branch_no_113:;
    {
        nuitka_bool tmp_condition_result_172;
        PyObject *tmp_expression_value_155;
        CHECK_OBJECT(tmp_class_creation_29__metaclass);
        tmp_expression_value_155 = tmp_class_creation_29__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_155, mod_consts[58]);
        tmp_condition_result_172 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_172 == NUITKA_BOOL_TRUE) {
            goto branch_yes_114;
        } else {
            goto branch_no_114;
        }
    }
    branch_yes_114:;
    {
        PyObject *tmp_assign_source_246;
        PyObject *tmp_called_value_57;
        PyObject *tmp_expression_value_156;
        PyObject *tmp_args_value_57;
        PyObject *tmp_tuple_element_114;
        PyObject *tmp_kwargs_value_57;
        CHECK_OBJECT(tmp_class_creation_29__metaclass);
        tmp_expression_value_156 = tmp_class_creation_29__metaclass;
        tmp_called_value_57 = LOOKUP_ATTRIBUTE(tmp_expression_value_156, mod_consts[58]);
        if (tmp_called_value_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;

            goto try_except_handler_87;
        }
        tmp_tuple_element_114 = mod_consts[132];
        tmp_args_value_57 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_57, 0, tmp_tuple_element_114);
        CHECK_OBJECT(tmp_class_creation_29__bases);
        tmp_tuple_element_114 = tmp_class_creation_29__bases;
        PyTuple_SET_ITEM0(tmp_args_value_57, 1, tmp_tuple_element_114);
        CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
        tmp_kwargs_value_57 = tmp_class_creation_29__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 284;
        tmp_assign_source_246 = CALL_FUNCTION(tmp_called_value_57, tmp_args_value_57, tmp_kwargs_value_57);
        Py_DECREF(tmp_called_value_57);
        Py_DECREF(tmp_args_value_57);
        if (tmp_assign_source_246 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;

            goto try_except_handler_87;
        }
        assert(tmp_class_creation_29__prepared == NULL);
        tmp_class_creation_29__prepared = tmp_assign_source_246;
    }
    {
        bool tmp_condition_result_173;
        PyObject *tmp_operand_value_29;
        PyObject *tmp_expression_value_157;
        CHECK_OBJECT(tmp_class_creation_29__prepared);
        tmp_expression_value_157 = tmp_class_creation_29__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_157, mod_consts[60]);
        tmp_operand_value_29 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_29);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;

            goto try_except_handler_87;
        }
        tmp_condition_result_173 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_173 != false) {
            goto branch_yes_115;
        } else {
            goto branch_no_115;
        }
    }
    branch_yes_115:;
    {
        PyObject *tmp_raise_type_29;
        PyObject *tmp_raise_value_29;
        PyObject *tmp_left_value_29;
        PyObject *tmp_right_value_29;
        PyObject *tmp_tuple_element_115;
        PyObject *tmp_getattr_target_29;
        PyObject *tmp_getattr_attr_29;
        PyObject *tmp_getattr_default_29;
        tmp_raise_type_29 = PyExc_TypeError;
        tmp_left_value_29 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_29__metaclass);
        tmp_getattr_target_29 = tmp_class_creation_29__metaclass;
        tmp_getattr_attr_29 = mod_consts[62];
        tmp_getattr_default_29 = mod_consts[63];
        tmp_tuple_element_115 = BUILTIN_GETATTR(tmp_getattr_target_29, tmp_getattr_attr_29, tmp_getattr_default_29);
        if (tmp_tuple_element_115 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;

            goto try_except_handler_87;
        }
        tmp_right_value_29 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_158;
            PyObject *tmp_type_arg_58;
            PyTuple_SET_ITEM(tmp_right_value_29, 0, tmp_tuple_element_115);
            CHECK_OBJECT(tmp_class_creation_29__prepared);
            tmp_type_arg_58 = tmp_class_creation_29__prepared;
            tmp_expression_value_158 = BUILTIN_TYPE1(tmp_type_arg_58);
            assert(!(tmp_expression_value_158 == NULL));
            tmp_tuple_element_115 = LOOKUP_ATTRIBUTE(tmp_expression_value_158, mod_consts[62]);
            Py_DECREF(tmp_expression_value_158);
            if (tmp_tuple_element_115 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 284;

                goto tuple_build_exception_29;
            }
            PyTuple_SET_ITEM(tmp_right_value_29, 1, tmp_tuple_element_115);
        }
        goto tuple_build_noexception_29;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_29:;
        Py_DECREF(tmp_right_value_29);
        goto try_except_handler_87;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_29:;
        tmp_raise_value_29 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_29, tmp_right_value_29);
        Py_DECREF(tmp_right_value_29);
        if (tmp_raise_value_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;

            goto try_except_handler_87;
        }
        exception_type = tmp_raise_type_29;
        Py_INCREF(tmp_raise_type_29);
        exception_value = tmp_raise_value_29;
        exception_lineno = 284;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_87;
    }
    branch_no_115:;
    goto branch_end_114;
    branch_no_114:;
    {
        PyObject *tmp_assign_source_247;
        tmp_assign_source_247 = PyDict_New();
        assert(tmp_class_creation_29__prepared == NULL);
        tmp_class_creation_29__prepared = tmp_assign_source_247;
    }
    branch_end_114:;
    {
        PyObject *tmp_assign_source_248;
        {
            PyObject *tmp_set_locals_29;
            CHECK_OBJECT(tmp_class_creation_29__prepared);
            tmp_set_locals_29 = tmp_class_creation_29__prepared;
            locals_aiohttp$web_exceptions$$$class__29_HTTPProxyAuthenticationRequired_284 = tmp_set_locals_29;
            Py_INCREF(tmp_set_locals_29);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__29_HTTPProxyAuthenticationRequired_284, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;

            goto try_except_handler_89;
        }
        tmp_dictset_value = mod_consts[132];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__29_HTTPProxyAuthenticationRequired_284, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;

            goto try_except_handler_89;
        }
        if (isFrameUnusable(cache_frame_5c97ef15107b228a5dc1a4e78aa80612_26)) {
            Py_XDECREF(cache_frame_5c97ef15107b228a5dc1a4e78aa80612_26);

#if _DEBUG_REFCOUNTS
            if (cache_frame_5c97ef15107b228a5dc1a4e78aa80612_26 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_5c97ef15107b228a5dc1a4e78aa80612_26 = MAKE_FUNCTION_FRAME(codeobj_5c97ef15107b228a5dc1a4e78aa80612, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_5c97ef15107b228a5dc1a4e78aa80612_26->m_type_description == NULL);
        frame_5c97ef15107b228a5dc1a4e78aa80612_26 = cache_frame_5c97ef15107b228a5dc1a4e78aa80612_26;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_5c97ef15107b228a5dc1a4e78aa80612_26);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_5c97ef15107b228a5dc1a4e78aa80612_26) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[133];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__29_HTTPProxyAuthenticationRequired_284, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 285;
            type_description_2 = "o";
            goto frame_exception_exit_26;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_5c97ef15107b228a5dc1a4e78aa80612_26);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_25;

        frame_exception_exit_26:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_5c97ef15107b228a5dc1a4e78aa80612_26);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_5c97ef15107b228a5dc1a4e78aa80612_26, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_5c97ef15107b228a5dc1a4e78aa80612_26->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_5c97ef15107b228a5dc1a4e78aa80612_26, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_5c97ef15107b228a5dc1a4e78aa80612_26,
            type_description_2,
            outline_28_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_5c97ef15107b228a5dc1a4e78aa80612_26 == cache_frame_5c97ef15107b228a5dc1a4e78aa80612_26) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_5c97ef15107b228a5dc1a4e78aa80612_26);
            cache_frame_5c97ef15107b228a5dc1a4e78aa80612_26 = NULL;
        }

        assertFrameObject(frame_5c97ef15107b228a5dc1a4e78aa80612_26);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_25;

        frame_no_exception_25:;
        goto skip_nested_handling_25;
        nested_frame_exit_25:;

        goto try_except_handler_89;
        skip_nested_handling_25:;
        {
            nuitka_bool tmp_condition_result_174;
            PyObject *tmp_cmp_expr_left_29;
            PyObject *tmp_cmp_expr_right_29;
            CHECK_OBJECT(tmp_class_creation_29__bases);
            tmp_cmp_expr_left_29 = tmp_class_creation_29__bases;
            CHECK_OBJECT(tmp_class_creation_29__bases_orig);
            tmp_cmp_expr_right_29 = tmp_class_creation_29__bases_orig;
            tmp_condition_result_174 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_29, tmp_cmp_expr_right_29);
            if (tmp_condition_result_174 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 284;

                goto try_except_handler_89;
            }
            if (tmp_condition_result_174 == NUITKA_BOOL_TRUE) {
                goto branch_yes_116;
            } else {
                goto branch_no_116;
            }
            assert(tmp_condition_result_174 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_116:;
        CHECK_OBJECT(tmp_class_creation_29__bases_orig);
        tmp_dictset_value = tmp_class_creation_29__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__29_HTTPProxyAuthenticationRequired_284, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;

            goto try_except_handler_89;
        }
        branch_no_116:;
        {
            PyObject *tmp_assign_source_249;
            PyObject *tmp_called_value_58;
            PyObject *tmp_args_value_58;
            PyObject *tmp_tuple_element_116;
            PyObject *tmp_kwargs_value_58;
            CHECK_OBJECT(tmp_class_creation_29__metaclass);
            tmp_called_value_58 = tmp_class_creation_29__metaclass;
            tmp_tuple_element_116 = mod_consts[132];
            tmp_args_value_58 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_58, 0, tmp_tuple_element_116);
            CHECK_OBJECT(tmp_class_creation_29__bases);
            tmp_tuple_element_116 = tmp_class_creation_29__bases;
            PyTuple_SET_ITEM0(tmp_args_value_58, 1, tmp_tuple_element_116);
            tmp_tuple_element_116 = locals_aiohttp$web_exceptions$$$class__29_HTTPProxyAuthenticationRequired_284;
            PyTuple_SET_ITEM0(tmp_args_value_58, 2, tmp_tuple_element_116);
            CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
            tmp_kwargs_value_58 = tmp_class_creation_29__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 284;
            tmp_assign_source_249 = CALL_FUNCTION(tmp_called_value_58, tmp_args_value_58, tmp_kwargs_value_58);
            Py_DECREF(tmp_args_value_58);
            if (tmp_assign_source_249 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 284;

                goto try_except_handler_89;
            }
            assert(outline_28_var___class__ == NULL);
            outline_28_var___class__ = tmp_assign_source_249;
        }
        CHECK_OBJECT(outline_28_var___class__);
        tmp_assign_source_248 = outline_28_var___class__;
        Py_INCREF(tmp_assign_source_248);
        goto try_return_handler_89;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_89:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__29_HTTPProxyAuthenticationRequired_284);
        locals_aiohttp$web_exceptions$$$class__29_HTTPProxyAuthenticationRequired_284 = NULL;
        goto try_return_handler_88;
        // Exception handler code:
        try_except_handler_89:;
        exception_keeper_type_87 = exception_type;
        exception_keeper_value_87 = exception_value;
        exception_keeper_tb_87 = exception_tb;
        exception_keeper_lineno_87 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__29_HTTPProxyAuthenticationRequired_284);
        locals_aiohttp$web_exceptions$$$class__29_HTTPProxyAuthenticationRequired_284 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_87;
        exception_value = exception_keeper_value_87;
        exception_tb = exception_keeper_tb_87;
        exception_lineno = exception_keeper_lineno_87;

        goto try_except_handler_88;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_88:;
        CHECK_OBJECT(outline_28_var___class__);
        Py_DECREF(outline_28_var___class__);
        outline_28_var___class__ = NULL;
        goto outline_result_29;
        // Exception handler code:
        try_except_handler_88:;
        exception_keeper_type_88 = exception_type;
        exception_keeper_value_88 = exception_value;
        exception_keeper_tb_88 = exception_tb;
        exception_keeper_lineno_88 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_88;
        exception_value = exception_keeper_value_88;
        exception_tb = exception_keeper_tb_88;
        exception_lineno = exception_keeper_lineno_88;

        goto outline_exception_29;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_29:;
        exception_lineno = 284;
        goto try_except_handler_87;
        outline_result_29:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[132], tmp_assign_source_248);
    }
    goto try_end_31;
    // Exception handler code:
    try_except_handler_87:;
    exception_keeper_type_89 = exception_type;
    exception_keeper_value_89 = exception_value;
    exception_keeper_tb_89 = exception_tb;
    exception_keeper_lineno_89 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_29__bases_orig);
    tmp_class_creation_29__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_29__bases);
    tmp_class_creation_29__bases = NULL;
    Py_XDECREF(tmp_class_creation_29__class_decl_dict);
    tmp_class_creation_29__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_29__metaclass);
    tmp_class_creation_29__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_29__prepared);
    tmp_class_creation_29__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_89;
    exception_value = exception_keeper_value_89;
    exception_tb = exception_keeper_tb_89;
    exception_lineno = exception_keeper_lineno_89;

    goto frame_exception_exit_1;
    // End of try:
    try_end_31:;
    CHECK_OBJECT(tmp_class_creation_29__bases_orig);
    Py_DECREF(tmp_class_creation_29__bases_orig);
    tmp_class_creation_29__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_29__bases);
    Py_DECREF(tmp_class_creation_29__bases);
    tmp_class_creation_29__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
    Py_DECREF(tmp_class_creation_29__class_decl_dict);
    tmp_class_creation_29__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_29__metaclass);
    Py_DECREF(tmp_class_creation_29__metaclass);
    tmp_class_creation_29__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_29__prepared);
    Py_DECREF(tmp_class_creation_29__prepared);
    tmp_class_creation_29__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_250;
        PyObject *tmp_tuple_element_117;
        tmp_tuple_element_117 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[116]);

        if (unlikely(tmp_tuple_element_117 == NULL)) {
            tmp_tuple_element_117 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[116]);
        }

        if (tmp_tuple_element_117 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 288;

            goto try_except_handler_90;
        }
        tmp_assign_source_250 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_250, 0, tmp_tuple_element_117);
        assert(tmp_class_creation_30__bases_orig == NULL);
        tmp_class_creation_30__bases_orig = tmp_assign_source_250;
    }
    {
        PyObject *tmp_assign_source_251;
        PyObject *tmp_dircall_arg1_30;
        CHECK_OBJECT(tmp_class_creation_30__bases_orig);
        tmp_dircall_arg1_30 = tmp_class_creation_30__bases_orig;
        Py_INCREF(tmp_dircall_arg1_30);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_30};
            tmp_assign_source_251 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_251 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 288;

            goto try_except_handler_90;
        }
        assert(tmp_class_creation_30__bases == NULL);
        tmp_class_creation_30__bases = tmp_assign_source_251;
    }
    {
        PyObject *tmp_assign_source_252;
        tmp_assign_source_252 = PyDict_New();
        assert(tmp_class_creation_30__class_decl_dict == NULL);
        tmp_class_creation_30__class_decl_dict = tmp_assign_source_252;
    }
    {
        PyObject *tmp_assign_source_253;
        PyObject *tmp_metaclass_value_30;
        bool tmp_condition_result_175;
        PyObject *tmp_key_value_88;
        PyObject *tmp_dict_arg_value_88;
        PyObject *tmp_dict_arg_value_89;
        PyObject *tmp_key_value_89;
        nuitka_bool tmp_condition_result_176;
        int tmp_truth_name_30;
        PyObject *tmp_type_arg_59;
        PyObject *tmp_expression_value_159;
        PyObject *tmp_subscript_value_43;
        PyObject *tmp_bases_value_30;
        tmp_key_value_88 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
        tmp_dict_arg_value_88 = tmp_class_creation_30__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_88, tmp_key_value_88);
        assert(!(tmp_res == -1));
        tmp_condition_result_175 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_175 != false) {
            goto condexpr_true_59;
        } else {
            goto condexpr_false_59;
        }
        condexpr_true_59:;
        CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
        tmp_dict_arg_value_89 = tmp_class_creation_30__class_decl_dict;
        tmp_key_value_89 = mod_consts[57];
        tmp_metaclass_value_30 = DICT_GET_ITEM0(tmp_dict_arg_value_89, tmp_key_value_89);
        if (tmp_metaclass_value_30 == NULL) {
            tmp_metaclass_value_30 = Py_None;
        }
        assert(!(tmp_metaclass_value_30 == NULL));
        Py_INCREF(tmp_metaclass_value_30);
        goto condexpr_end_59;
        condexpr_false_59:;
        CHECK_OBJECT(tmp_class_creation_30__bases);
        tmp_truth_name_30 = CHECK_IF_TRUE(tmp_class_creation_30__bases);
        if (tmp_truth_name_30 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 288;

            goto try_except_handler_90;
        }
        tmp_condition_result_176 = tmp_truth_name_30 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_176 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_60;
        } else {
            goto condexpr_false_60;
        }
        condexpr_true_60:;
        CHECK_OBJECT(tmp_class_creation_30__bases);
        tmp_expression_value_159 = tmp_class_creation_30__bases;
        tmp_subscript_value_43 = mod_consts[39];
        tmp_type_arg_59 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_159, tmp_subscript_value_43, 0);
        if (tmp_type_arg_59 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 288;

            goto try_except_handler_90;
        }
        tmp_metaclass_value_30 = BUILTIN_TYPE1(tmp_type_arg_59);
        Py_DECREF(tmp_type_arg_59);
        if (tmp_metaclass_value_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 288;

            goto try_except_handler_90;
        }
        goto condexpr_end_60;
        condexpr_false_60:;
        tmp_metaclass_value_30 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_30);
        condexpr_end_60:;
        condexpr_end_59:;
        CHECK_OBJECT(tmp_class_creation_30__bases);
        tmp_bases_value_30 = tmp_class_creation_30__bases;
        tmp_assign_source_253 = SELECT_METACLASS(tmp_metaclass_value_30, tmp_bases_value_30);
        Py_DECREF(tmp_metaclass_value_30);
        if (tmp_assign_source_253 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 288;

            goto try_except_handler_90;
        }
        assert(tmp_class_creation_30__metaclass == NULL);
        tmp_class_creation_30__metaclass = tmp_assign_source_253;
    }
    {
        bool tmp_condition_result_177;
        PyObject *tmp_key_value_90;
        PyObject *tmp_dict_arg_value_90;
        tmp_key_value_90 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
        tmp_dict_arg_value_90 = tmp_class_creation_30__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_90, tmp_key_value_90);
        assert(!(tmp_res == -1));
        tmp_condition_result_177 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_177 != false) {
            goto branch_yes_117;
        } else {
            goto branch_no_117;
        }
    }
    branch_yes_117:;
    CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_30__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 288;

        goto try_except_handler_90;
    }
    branch_no_117:;
    {
        nuitka_bool tmp_condition_result_178;
        PyObject *tmp_expression_value_160;
        CHECK_OBJECT(tmp_class_creation_30__metaclass);
        tmp_expression_value_160 = tmp_class_creation_30__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_160, mod_consts[58]);
        tmp_condition_result_178 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_178 == NUITKA_BOOL_TRUE) {
            goto branch_yes_118;
        } else {
            goto branch_no_118;
        }
    }
    branch_yes_118:;
    {
        PyObject *tmp_assign_source_254;
        PyObject *tmp_called_value_59;
        PyObject *tmp_expression_value_161;
        PyObject *tmp_args_value_59;
        PyObject *tmp_tuple_element_118;
        PyObject *tmp_kwargs_value_59;
        CHECK_OBJECT(tmp_class_creation_30__metaclass);
        tmp_expression_value_161 = tmp_class_creation_30__metaclass;
        tmp_called_value_59 = LOOKUP_ATTRIBUTE(tmp_expression_value_161, mod_consts[58]);
        if (tmp_called_value_59 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 288;

            goto try_except_handler_90;
        }
        tmp_tuple_element_118 = mod_consts[134];
        tmp_args_value_59 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_59, 0, tmp_tuple_element_118);
        CHECK_OBJECT(tmp_class_creation_30__bases);
        tmp_tuple_element_118 = tmp_class_creation_30__bases;
        PyTuple_SET_ITEM0(tmp_args_value_59, 1, tmp_tuple_element_118);
        CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
        tmp_kwargs_value_59 = tmp_class_creation_30__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 288;
        tmp_assign_source_254 = CALL_FUNCTION(tmp_called_value_59, tmp_args_value_59, tmp_kwargs_value_59);
        Py_DECREF(tmp_called_value_59);
        Py_DECREF(tmp_args_value_59);
        if (tmp_assign_source_254 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 288;

            goto try_except_handler_90;
        }
        assert(tmp_class_creation_30__prepared == NULL);
        tmp_class_creation_30__prepared = tmp_assign_source_254;
    }
    {
        bool tmp_condition_result_179;
        PyObject *tmp_operand_value_30;
        PyObject *tmp_expression_value_162;
        CHECK_OBJECT(tmp_class_creation_30__prepared);
        tmp_expression_value_162 = tmp_class_creation_30__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_162, mod_consts[60]);
        tmp_operand_value_30 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_30);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 288;

            goto try_except_handler_90;
        }
        tmp_condition_result_179 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_179 != false) {
            goto branch_yes_119;
        } else {
            goto branch_no_119;
        }
    }
    branch_yes_119:;
    {
        PyObject *tmp_raise_type_30;
        PyObject *tmp_raise_value_30;
        PyObject *tmp_left_value_30;
        PyObject *tmp_right_value_30;
        PyObject *tmp_tuple_element_119;
        PyObject *tmp_getattr_target_30;
        PyObject *tmp_getattr_attr_30;
        PyObject *tmp_getattr_default_30;
        tmp_raise_type_30 = PyExc_TypeError;
        tmp_left_value_30 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_30__metaclass);
        tmp_getattr_target_30 = tmp_class_creation_30__metaclass;
        tmp_getattr_attr_30 = mod_consts[62];
        tmp_getattr_default_30 = mod_consts[63];
        tmp_tuple_element_119 = BUILTIN_GETATTR(tmp_getattr_target_30, tmp_getattr_attr_30, tmp_getattr_default_30);
        if (tmp_tuple_element_119 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 288;

            goto try_except_handler_90;
        }
        tmp_right_value_30 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_163;
            PyObject *tmp_type_arg_60;
            PyTuple_SET_ITEM(tmp_right_value_30, 0, tmp_tuple_element_119);
            CHECK_OBJECT(tmp_class_creation_30__prepared);
            tmp_type_arg_60 = tmp_class_creation_30__prepared;
            tmp_expression_value_163 = BUILTIN_TYPE1(tmp_type_arg_60);
            assert(!(tmp_expression_value_163 == NULL));
            tmp_tuple_element_119 = LOOKUP_ATTRIBUTE(tmp_expression_value_163, mod_consts[62]);
            Py_DECREF(tmp_expression_value_163);
            if (tmp_tuple_element_119 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 288;

                goto tuple_build_exception_30;
            }
            PyTuple_SET_ITEM(tmp_right_value_30, 1, tmp_tuple_element_119);
        }
        goto tuple_build_noexception_30;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_30:;
        Py_DECREF(tmp_right_value_30);
        goto try_except_handler_90;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_30:;
        tmp_raise_value_30 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_30, tmp_right_value_30);
        Py_DECREF(tmp_right_value_30);
        if (tmp_raise_value_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 288;

            goto try_except_handler_90;
        }
        exception_type = tmp_raise_type_30;
        Py_INCREF(tmp_raise_type_30);
        exception_value = tmp_raise_value_30;
        exception_lineno = 288;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_90;
    }
    branch_no_119:;
    goto branch_end_118;
    branch_no_118:;
    {
        PyObject *tmp_assign_source_255;
        tmp_assign_source_255 = PyDict_New();
        assert(tmp_class_creation_30__prepared == NULL);
        tmp_class_creation_30__prepared = tmp_assign_source_255;
    }
    branch_end_118:;
    {
        PyObject *tmp_assign_source_256;
        {
            PyObject *tmp_set_locals_30;
            CHECK_OBJECT(tmp_class_creation_30__prepared);
            tmp_set_locals_30 = tmp_class_creation_30__prepared;
            locals_aiohttp$web_exceptions$$$class__30_HTTPRequestTimeout_288 = tmp_set_locals_30;
            Py_INCREF(tmp_set_locals_30);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__30_HTTPRequestTimeout_288, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 288;

            goto try_except_handler_92;
        }
        tmp_dictset_value = mod_consts[134];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__30_HTTPRequestTimeout_288, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 288;

            goto try_except_handler_92;
        }
        if (isFrameUnusable(cache_frame_865ef81c8777678d1d66964a3cdf063c_27)) {
            Py_XDECREF(cache_frame_865ef81c8777678d1d66964a3cdf063c_27);

#if _DEBUG_REFCOUNTS
            if (cache_frame_865ef81c8777678d1d66964a3cdf063c_27 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_865ef81c8777678d1d66964a3cdf063c_27 = MAKE_FUNCTION_FRAME(codeobj_865ef81c8777678d1d66964a3cdf063c, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_865ef81c8777678d1d66964a3cdf063c_27->m_type_description == NULL);
        frame_865ef81c8777678d1d66964a3cdf063c_27 = cache_frame_865ef81c8777678d1d66964a3cdf063c_27;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_865ef81c8777678d1d66964a3cdf063c_27);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_865ef81c8777678d1d66964a3cdf063c_27) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[135];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__30_HTTPRequestTimeout_288, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 289;
            type_description_2 = "o";
            goto frame_exception_exit_27;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_865ef81c8777678d1d66964a3cdf063c_27);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_26;

        frame_exception_exit_27:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_865ef81c8777678d1d66964a3cdf063c_27);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_865ef81c8777678d1d66964a3cdf063c_27, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_865ef81c8777678d1d66964a3cdf063c_27->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_865ef81c8777678d1d66964a3cdf063c_27, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_865ef81c8777678d1d66964a3cdf063c_27,
            type_description_2,
            outline_29_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_865ef81c8777678d1d66964a3cdf063c_27 == cache_frame_865ef81c8777678d1d66964a3cdf063c_27) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_865ef81c8777678d1d66964a3cdf063c_27);
            cache_frame_865ef81c8777678d1d66964a3cdf063c_27 = NULL;
        }

        assertFrameObject(frame_865ef81c8777678d1d66964a3cdf063c_27);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_26;

        frame_no_exception_26:;
        goto skip_nested_handling_26;
        nested_frame_exit_26:;

        goto try_except_handler_92;
        skip_nested_handling_26:;
        {
            nuitka_bool tmp_condition_result_180;
            PyObject *tmp_cmp_expr_left_30;
            PyObject *tmp_cmp_expr_right_30;
            CHECK_OBJECT(tmp_class_creation_30__bases);
            tmp_cmp_expr_left_30 = tmp_class_creation_30__bases;
            CHECK_OBJECT(tmp_class_creation_30__bases_orig);
            tmp_cmp_expr_right_30 = tmp_class_creation_30__bases_orig;
            tmp_condition_result_180 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_30, tmp_cmp_expr_right_30);
            if (tmp_condition_result_180 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 288;

                goto try_except_handler_92;
            }
            if (tmp_condition_result_180 == NUITKA_BOOL_TRUE) {
                goto branch_yes_120;
            } else {
                goto branch_no_120;
            }
            assert(tmp_condition_result_180 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_120:;
        CHECK_OBJECT(tmp_class_creation_30__bases_orig);
        tmp_dictset_value = tmp_class_creation_30__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__30_HTTPRequestTimeout_288, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 288;

            goto try_except_handler_92;
        }
        branch_no_120:;
        {
            PyObject *tmp_assign_source_257;
            PyObject *tmp_called_value_60;
            PyObject *tmp_args_value_60;
            PyObject *tmp_tuple_element_120;
            PyObject *tmp_kwargs_value_60;
            CHECK_OBJECT(tmp_class_creation_30__metaclass);
            tmp_called_value_60 = tmp_class_creation_30__metaclass;
            tmp_tuple_element_120 = mod_consts[134];
            tmp_args_value_60 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_60, 0, tmp_tuple_element_120);
            CHECK_OBJECT(tmp_class_creation_30__bases);
            tmp_tuple_element_120 = tmp_class_creation_30__bases;
            PyTuple_SET_ITEM0(tmp_args_value_60, 1, tmp_tuple_element_120);
            tmp_tuple_element_120 = locals_aiohttp$web_exceptions$$$class__30_HTTPRequestTimeout_288;
            PyTuple_SET_ITEM0(tmp_args_value_60, 2, tmp_tuple_element_120);
            CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
            tmp_kwargs_value_60 = tmp_class_creation_30__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 288;
            tmp_assign_source_257 = CALL_FUNCTION(tmp_called_value_60, tmp_args_value_60, tmp_kwargs_value_60);
            Py_DECREF(tmp_args_value_60);
            if (tmp_assign_source_257 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 288;

                goto try_except_handler_92;
            }
            assert(outline_29_var___class__ == NULL);
            outline_29_var___class__ = tmp_assign_source_257;
        }
        CHECK_OBJECT(outline_29_var___class__);
        tmp_assign_source_256 = outline_29_var___class__;
        Py_INCREF(tmp_assign_source_256);
        goto try_return_handler_92;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_92:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__30_HTTPRequestTimeout_288);
        locals_aiohttp$web_exceptions$$$class__30_HTTPRequestTimeout_288 = NULL;
        goto try_return_handler_91;
        // Exception handler code:
        try_except_handler_92:;
        exception_keeper_type_90 = exception_type;
        exception_keeper_value_90 = exception_value;
        exception_keeper_tb_90 = exception_tb;
        exception_keeper_lineno_90 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__30_HTTPRequestTimeout_288);
        locals_aiohttp$web_exceptions$$$class__30_HTTPRequestTimeout_288 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_90;
        exception_value = exception_keeper_value_90;
        exception_tb = exception_keeper_tb_90;
        exception_lineno = exception_keeper_lineno_90;

        goto try_except_handler_91;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_91:;
        CHECK_OBJECT(outline_29_var___class__);
        Py_DECREF(outline_29_var___class__);
        outline_29_var___class__ = NULL;
        goto outline_result_30;
        // Exception handler code:
        try_except_handler_91:;
        exception_keeper_type_91 = exception_type;
        exception_keeper_value_91 = exception_value;
        exception_keeper_tb_91 = exception_tb;
        exception_keeper_lineno_91 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_91;
        exception_value = exception_keeper_value_91;
        exception_tb = exception_keeper_tb_91;
        exception_lineno = exception_keeper_lineno_91;

        goto outline_exception_30;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_30:;
        exception_lineno = 288;
        goto try_except_handler_90;
        outline_result_30:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[134], tmp_assign_source_256);
    }
    goto try_end_32;
    // Exception handler code:
    try_except_handler_90:;
    exception_keeper_type_92 = exception_type;
    exception_keeper_value_92 = exception_value;
    exception_keeper_tb_92 = exception_tb;
    exception_keeper_lineno_92 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_30__bases_orig);
    tmp_class_creation_30__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_30__bases);
    tmp_class_creation_30__bases = NULL;
    Py_XDECREF(tmp_class_creation_30__class_decl_dict);
    tmp_class_creation_30__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_30__metaclass);
    tmp_class_creation_30__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_30__prepared);
    tmp_class_creation_30__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_92;
    exception_value = exception_keeper_value_92;
    exception_tb = exception_keeper_tb_92;
    exception_lineno = exception_keeper_lineno_92;

    goto frame_exception_exit_1;
    // End of try:
    try_end_32:;
    CHECK_OBJECT(tmp_class_creation_30__bases_orig);
    Py_DECREF(tmp_class_creation_30__bases_orig);
    tmp_class_creation_30__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_30__bases);
    Py_DECREF(tmp_class_creation_30__bases);
    tmp_class_creation_30__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
    Py_DECREF(tmp_class_creation_30__class_decl_dict);
    tmp_class_creation_30__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_30__metaclass);
    Py_DECREF(tmp_class_creation_30__metaclass);
    tmp_class_creation_30__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_30__prepared);
    Py_DECREF(tmp_class_creation_30__prepared);
    tmp_class_creation_30__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_258;
        PyObject *tmp_tuple_element_121;
        tmp_tuple_element_121 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[116]);

        if (unlikely(tmp_tuple_element_121 == NULL)) {
            tmp_tuple_element_121 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[116]);
        }

        if (tmp_tuple_element_121 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 292;

            goto try_except_handler_93;
        }
        tmp_assign_source_258 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_258, 0, tmp_tuple_element_121);
        assert(tmp_class_creation_31__bases_orig == NULL);
        tmp_class_creation_31__bases_orig = tmp_assign_source_258;
    }
    {
        PyObject *tmp_assign_source_259;
        PyObject *tmp_dircall_arg1_31;
        CHECK_OBJECT(tmp_class_creation_31__bases_orig);
        tmp_dircall_arg1_31 = tmp_class_creation_31__bases_orig;
        Py_INCREF(tmp_dircall_arg1_31);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_31};
            tmp_assign_source_259 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_259 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 292;

            goto try_except_handler_93;
        }
        assert(tmp_class_creation_31__bases == NULL);
        tmp_class_creation_31__bases = tmp_assign_source_259;
    }
    {
        PyObject *tmp_assign_source_260;
        tmp_assign_source_260 = PyDict_New();
        assert(tmp_class_creation_31__class_decl_dict == NULL);
        tmp_class_creation_31__class_decl_dict = tmp_assign_source_260;
    }
    {
        PyObject *tmp_assign_source_261;
        PyObject *tmp_metaclass_value_31;
        bool tmp_condition_result_181;
        PyObject *tmp_key_value_91;
        PyObject *tmp_dict_arg_value_91;
        PyObject *tmp_dict_arg_value_92;
        PyObject *tmp_key_value_92;
        nuitka_bool tmp_condition_result_182;
        int tmp_truth_name_31;
        PyObject *tmp_type_arg_61;
        PyObject *tmp_expression_value_164;
        PyObject *tmp_subscript_value_44;
        PyObject *tmp_bases_value_31;
        tmp_key_value_91 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
        tmp_dict_arg_value_91 = tmp_class_creation_31__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_91, tmp_key_value_91);
        assert(!(tmp_res == -1));
        tmp_condition_result_181 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_181 != false) {
            goto condexpr_true_61;
        } else {
            goto condexpr_false_61;
        }
        condexpr_true_61:;
        CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
        tmp_dict_arg_value_92 = tmp_class_creation_31__class_decl_dict;
        tmp_key_value_92 = mod_consts[57];
        tmp_metaclass_value_31 = DICT_GET_ITEM0(tmp_dict_arg_value_92, tmp_key_value_92);
        if (tmp_metaclass_value_31 == NULL) {
            tmp_metaclass_value_31 = Py_None;
        }
        assert(!(tmp_metaclass_value_31 == NULL));
        Py_INCREF(tmp_metaclass_value_31);
        goto condexpr_end_61;
        condexpr_false_61:;
        CHECK_OBJECT(tmp_class_creation_31__bases);
        tmp_truth_name_31 = CHECK_IF_TRUE(tmp_class_creation_31__bases);
        if (tmp_truth_name_31 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 292;

            goto try_except_handler_93;
        }
        tmp_condition_result_182 = tmp_truth_name_31 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_182 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_62;
        } else {
            goto condexpr_false_62;
        }
        condexpr_true_62:;
        CHECK_OBJECT(tmp_class_creation_31__bases);
        tmp_expression_value_164 = tmp_class_creation_31__bases;
        tmp_subscript_value_44 = mod_consts[39];
        tmp_type_arg_61 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_164, tmp_subscript_value_44, 0);
        if (tmp_type_arg_61 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 292;

            goto try_except_handler_93;
        }
        tmp_metaclass_value_31 = BUILTIN_TYPE1(tmp_type_arg_61);
        Py_DECREF(tmp_type_arg_61);
        if (tmp_metaclass_value_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 292;

            goto try_except_handler_93;
        }
        goto condexpr_end_62;
        condexpr_false_62:;
        tmp_metaclass_value_31 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_31);
        condexpr_end_62:;
        condexpr_end_61:;
        CHECK_OBJECT(tmp_class_creation_31__bases);
        tmp_bases_value_31 = tmp_class_creation_31__bases;
        tmp_assign_source_261 = SELECT_METACLASS(tmp_metaclass_value_31, tmp_bases_value_31);
        Py_DECREF(tmp_metaclass_value_31);
        if (tmp_assign_source_261 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 292;

            goto try_except_handler_93;
        }
        assert(tmp_class_creation_31__metaclass == NULL);
        tmp_class_creation_31__metaclass = tmp_assign_source_261;
    }
    {
        bool tmp_condition_result_183;
        PyObject *tmp_key_value_93;
        PyObject *tmp_dict_arg_value_93;
        tmp_key_value_93 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
        tmp_dict_arg_value_93 = tmp_class_creation_31__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_93, tmp_key_value_93);
        assert(!(tmp_res == -1));
        tmp_condition_result_183 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_183 != false) {
            goto branch_yes_121;
        } else {
            goto branch_no_121;
        }
    }
    branch_yes_121:;
    CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_31__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 292;

        goto try_except_handler_93;
    }
    branch_no_121:;
    {
        nuitka_bool tmp_condition_result_184;
        PyObject *tmp_expression_value_165;
        CHECK_OBJECT(tmp_class_creation_31__metaclass);
        tmp_expression_value_165 = tmp_class_creation_31__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_165, mod_consts[58]);
        tmp_condition_result_184 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_184 == NUITKA_BOOL_TRUE) {
            goto branch_yes_122;
        } else {
            goto branch_no_122;
        }
    }
    branch_yes_122:;
    {
        PyObject *tmp_assign_source_262;
        PyObject *tmp_called_value_61;
        PyObject *tmp_expression_value_166;
        PyObject *tmp_args_value_61;
        PyObject *tmp_tuple_element_122;
        PyObject *tmp_kwargs_value_61;
        CHECK_OBJECT(tmp_class_creation_31__metaclass);
        tmp_expression_value_166 = tmp_class_creation_31__metaclass;
        tmp_called_value_61 = LOOKUP_ATTRIBUTE(tmp_expression_value_166, mod_consts[58]);
        if (tmp_called_value_61 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 292;

            goto try_except_handler_93;
        }
        tmp_tuple_element_122 = mod_consts[136];
        tmp_args_value_61 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_61, 0, tmp_tuple_element_122);
        CHECK_OBJECT(tmp_class_creation_31__bases);
        tmp_tuple_element_122 = tmp_class_creation_31__bases;
        PyTuple_SET_ITEM0(tmp_args_value_61, 1, tmp_tuple_element_122);
        CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
        tmp_kwargs_value_61 = tmp_class_creation_31__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 292;
        tmp_assign_source_262 = CALL_FUNCTION(tmp_called_value_61, tmp_args_value_61, tmp_kwargs_value_61);
        Py_DECREF(tmp_called_value_61);
        Py_DECREF(tmp_args_value_61);
        if (tmp_assign_source_262 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 292;

            goto try_except_handler_93;
        }
        assert(tmp_class_creation_31__prepared == NULL);
        tmp_class_creation_31__prepared = tmp_assign_source_262;
    }
    {
        bool tmp_condition_result_185;
        PyObject *tmp_operand_value_31;
        PyObject *tmp_expression_value_167;
        CHECK_OBJECT(tmp_class_creation_31__prepared);
        tmp_expression_value_167 = tmp_class_creation_31__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_167, mod_consts[60]);
        tmp_operand_value_31 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_31);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 292;

            goto try_except_handler_93;
        }
        tmp_condition_result_185 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_185 != false) {
            goto branch_yes_123;
        } else {
            goto branch_no_123;
        }
    }
    branch_yes_123:;
    {
        PyObject *tmp_raise_type_31;
        PyObject *tmp_raise_value_31;
        PyObject *tmp_left_value_31;
        PyObject *tmp_right_value_31;
        PyObject *tmp_tuple_element_123;
        PyObject *tmp_getattr_target_31;
        PyObject *tmp_getattr_attr_31;
        PyObject *tmp_getattr_default_31;
        tmp_raise_type_31 = PyExc_TypeError;
        tmp_left_value_31 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_31__metaclass);
        tmp_getattr_target_31 = tmp_class_creation_31__metaclass;
        tmp_getattr_attr_31 = mod_consts[62];
        tmp_getattr_default_31 = mod_consts[63];
        tmp_tuple_element_123 = BUILTIN_GETATTR(tmp_getattr_target_31, tmp_getattr_attr_31, tmp_getattr_default_31);
        if (tmp_tuple_element_123 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 292;

            goto try_except_handler_93;
        }
        tmp_right_value_31 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_168;
            PyObject *tmp_type_arg_62;
            PyTuple_SET_ITEM(tmp_right_value_31, 0, tmp_tuple_element_123);
            CHECK_OBJECT(tmp_class_creation_31__prepared);
            tmp_type_arg_62 = tmp_class_creation_31__prepared;
            tmp_expression_value_168 = BUILTIN_TYPE1(tmp_type_arg_62);
            assert(!(tmp_expression_value_168 == NULL));
            tmp_tuple_element_123 = LOOKUP_ATTRIBUTE(tmp_expression_value_168, mod_consts[62]);
            Py_DECREF(tmp_expression_value_168);
            if (tmp_tuple_element_123 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 292;

                goto tuple_build_exception_31;
            }
            PyTuple_SET_ITEM(tmp_right_value_31, 1, tmp_tuple_element_123);
        }
        goto tuple_build_noexception_31;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_31:;
        Py_DECREF(tmp_right_value_31);
        goto try_except_handler_93;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_31:;
        tmp_raise_value_31 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_31, tmp_right_value_31);
        Py_DECREF(tmp_right_value_31);
        if (tmp_raise_value_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 292;

            goto try_except_handler_93;
        }
        exception_type = tmp_raise_type_31;
        Py_INCREF(tmp_raise_type_31);
        exception_value = tmp_raise_value_31;
        exception_lineno = 292;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_93;
    }
    branch_no_123:;
    goto branch_end_122;
    branch_no_122:;
    {
        PyObject *tmp_assign_source_263;
        tmp_assign_source_263 = PyDict_New();
        assert(tmp_class_creation_31__prepared == NULL);
        tmp_class_creation_31__prepared = tmp_assign_source_263;
    }
    branch_end_122:;
    {
        PyObject *tmp_assign_source_264;
        {
            PyObject *tmp_set_locals_31;
            CHECK_OBJECT(tmp_class_creation_31__prepared);
            tmp_set_locals_31 = tmp_class_creation_31__prepared;
            locals_aiohttp$web_exceptions$$$class__31_HTTPConflict_292 = tmp_set_locals_31;
            Py_INCREF(tmp_set_locals_31);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__31_HTTPConflict_292, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 292;

            goto try_except_handler_95;
        }
        tmp_dictset_value = mod_consts[136];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__31_HTTPConflict_292, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 292;

            goto try_except_handler_95;
        }
        if (isFrameUnusable(cache_frame_b3e20ebc481aefb7887320a4b7e86857_28)) {
            Py_XDECREF(cache_frame_b3e20ebc481aefb7887320a4b7e86857_28);

#if _DEBUG_REFCOUNTS
            if (cache_frame_b3e20ebc481aefb7887320a4b7e86857_28 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_b3e20ebc481aefb7887320a4b7e86857_28 = MAKE_FUNCTION_FRAME(codeobj_b3e20ebc481aefb7887320a4b7e86857, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_b3e20ebc481aefb7887320a4b7e86857_28->m_type_description == NULL);
        frame_b3e20ebc481aefb7887320a4b7e86857_28 = cache_frame_b3e20ebc481aefb7887320a4b7e86857_28;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_b3e20ebc481aefb7887320a4b7e86857_28);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_b3e20ebc481aefb7887320a4b7e86857_28) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[137];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__31_HTTPConflict_292, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 293;
            type_description_2 = "o";
            goto frame_exception_exit_28;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b3e20ebc481aefb7887320a4b7e86857_28);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_27;

        frame_exception_exit_28:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b3e20ebc481aefb7887320a4b7e86857_28);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_b3e20ebc481aefb7887320a4b7e86857_28, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_b3e20ebc481aefb7887320a4b7e86857_28->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_b3e20ebc481aefb7887320a4b7e86857_28, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_b3e20ebc481aefb7887320a4b7e86857_28,
            type_description_2,
            outline_30_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_b3e20ebc481aefb7887320a4b7e86857_28 == cache_frame_b3e20ebc481aefb7887320a4b7e86857_28) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_b3e20ebc481aefb7887320a4b7e86857_28);
            cache_frame_b3e20ebc481aefb7887320a4b7e86857_28 = NULL;
        }

        assertFrameObject(frame_b3e20ebc481aefb7887320a4b7e86857_28);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_27;

        frame_no_exception_27:;
        goto skip_nested_handling_27;
        nested_frame_exit_27:;

        goto try_except_handler_95;
        skip_nested_handling_27:;
        {
            nuitka_bool tmp_condition_result_186;
            PyObject *tmp_cmp_expr_left_31;
            PyObject *tmp_cmp_expr_right_31;
            CHECK_OBJECT(tmp_class_creation_31__bases);
            tmp_cmp_expr_left_31 = tmp_class_creation_31__bases;
            CHECK_OBJECT(tmp_class_creation_31__bases_orig);
            tmp_cmp_expr_right_31 = tmp_class_creation_31__bases_orig;
            tmp_condition_result_186 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_31, tmp_cmp_expr_right_31);
            if (tmp_condition_result_186 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 292;

                goto try_except_handler_95;
            }
            if (tmp_condition_result_186 == NUITKA_BOOL_TRUE) {
                goto branch_yes_124;
            } else {
                goto branch_no_124;
            }
            assert(tmp_condition_result_186 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_124:;
        CHECK_OBJECT(tmp_class_creation_31__bases_orig);
        tmp_dictset_value = tmp_class_creation_31__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__31_HTTPConflict_292, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 292;

            goto try_except_handler_95;
        }
        branch_no_124:;
        {
            PyObject *tmp_assign_source_265;
            PyObject *tmp_called_value_62;
            PyObject *tmp_args_value_62;
            PyObject *tmp_tuple_element_124;
            PyObject *tmp_kwargs_value_62;
            CHECK_OBJECT(tmp_class_creation_31__metaclass);
            tmp_called_value_62 = tmp_class_creation_31__metaclass;
            tmp_tuple_element_124 = mod_consts[136];
            tmp_args_value_62 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_62, 0, tmp_tuple_element_124);
            CHECK_OBJECT(tmp_class_creation_31__bases);
            tmp_tuple_element_124 = tmp_class_creation_31__bases;
            PyTuple_SET_ITEM0(tmp_args_value_62, 1, tmp_tuple_element_124);
            tmp_tuple_element_124 = locals_aiohttp$web_exceptions$$$class__31_HTTPConflict_292;
            PyTuple_SET_ITEM0(tmp_args_value_62, 2, tmp_tuple_element_124);
            CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
            tmp_kwargs_value_62 = tmp_class_creation_31__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 292;
            tmp_assign_source_265 = CALL_FUNCTION(tmp_called_value_62, tmp_args_value_62, tmp_kwargs_value_62);
            Py_DECREF(tmp_args_value_62);
            if (tmp_assign_source_265 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 292;

                goto try_except_handler_95;
            }
            assert(outline_30_var___class__ == NULL);
            outline_30_var___class__ = tmp_assign_source_265;
        }
        CHECK_OBJECT(outline_30_var___class__);
        tmp_assign_source_264 = outline_30_var___class__;
        Py_INCREF(tmp_assign_source_264);
        goto try_return_handler_95;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_95:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__31_HTTPConflict_292);
        locals_aiohttp$web_exceptions$$$class__31_HTTPConflict_292 = NULL;
        goto try_return_handler_94;
        // Exception handler code:
        try_except_handler_95:;
        exception_keeper_type_93 = exception_type;
        exception_keeper_value_93 = exception_value;
        exception_keeper_tb_93 = exception_tb;
        exception_keeper_lineno_93 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__31_HTTPConflict_292);
        locals_aiohttp$web_exceptions$$$class__31_HTTPConflict_292 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_93;
        exception_value = exception_keeper_value_93;
        exception_tb = exception_keeper_tb_93;
        exception_lineno = exception_keeper_lineno_93;

        goto try_except_handler_94;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_94:;
        CHECK_OBJECT(outline_30_var___class__);
        Py_DECREF(outline_30_var___class__);
        outline_30_var___class__ = NULL;
        goto outline_result_31;
        // Exception handler code:
        try_except_handler_94:;
        exception_keeper_type_94 = exception_type;
        exception_keeper_value_94 = exception_value;
        exception_keeper_tb_94 = exception_tb;
        exception_keeper_lineno_94 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_94;
        exception_value = exception_keeper_value_94;
        exception_tb = exception_keeper_tb_94;
        exception_lineno = exception_keeper_lineno_94;

        goto outline_exception_31;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_31:;
        exception_lineno = 292;
        goto try_except_handler_93;
        outline_result_31:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[136], tmp_assign_source_264);
    }
    goto try_end_33;
    // Exception handler code:
    try_except_handler_93:;
    exception_keeper_type_95 = exception_type;
    exception_keeper_value_95 = exception_value;
    exception_keeper_tb_95 = exception_tb;
    exception_keeper_lineno_95 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_31__bases_orig);
    tmp_class_creation_31__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_31__bases);
    tmp_class_creation_31__bases = NULL;
    Py_XDECREF(tmp_class_creation_31__class_decl_dict);
    tmp_class_creation_31__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_31__metaclass);
    tmp_class_creation_31__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_31__prepared);
    tmp_class_creation_31__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_95;
    exception_value = exception_keeper_value_95;
    exception_tb = exception_keeper_tb_95;
    exception_lineno = exception_keeper_lineno_95;

    goto frame_exception_exit_1;
    // End of try:
    try_end_33:;
    CHECK_OBJECT(tmp_class_creation_31__bases_orig);
    Py_DECREF(tmp_class_creation_31__bases_orig);
    tmp_class_creation_31__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_31__bases);
    Py_DECREF(tmp_class_creation_31__bases);
    tmp_class_creation_31__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
    Py_DECREF(tmp_class_creation_31__class_decl_dict);
    tmp_class_creation_31__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_31__metaclass);
    Py_DECREF(tmp_class_creation_31__metaclass);
    tmp_class_creation_31__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_31__prepared);
    Py_DECREF(tmp_class_creation_31__prepared);
    tmp_class_creation_31__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_266;
        PyObject *tmp_tuple_element_125;
        tmp_tuple_element_125 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[116]);

        if (unlikely(tmp_tuple_element_125 == NULL)) {
            tmp_tuple_element_125 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[116]);
        }

        if (tmp_tuple_element_125 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;

            goto try_except_handler_96;
        }
        tmp_assign_source_266 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_266, 0, tmp_tuple_element_125);
        assert(tmp_class_creation_32__bases_orig == NULL);
        tmp_class_creation_32__bases_orig = tmp_assign_source_266;
    }
    {
        PyObject *tmp_assign_source_267;
        PyObject *tmp_dircall_arg1_32;
        CHECK_OBJECT(tmp_class_creation_32__bases_orig);
        tmp_dircall_arg1_32 = tmp_class_creation_32__bases_orig;
        Py_INCREF(tmp_dircall_arg1_32);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_32};
            tmp_assign_source_267 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_267 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;

            goto try_except_handler_96;
        }
        assert(tmp_class_creation_32__bases == NULL);
        tmp_class_creation_32__bases = tmp_assign_source_267;
    }
    {
        PyObject *tmp_assign_source_268;
        tmp_assign_source_268 = PyDict_New();
        assert(tmp_class_creation_32__class_decl_dict == NULL);
        tmp_class_creation_32__class_decl_dict = tmp_assign_source_268;
    }
    {
        PyObject *tmp_assign_source_269;
        PyObject *tmp_metaclass_value_32;
        bool tmp_condition_result_187;
        PyObject *tmp_key_value_94;
        PyObject *tmp_dict_arg_value_94;
        PyObject *tmp_dict_arg_value_95;
        PyObject *tmp_key_value_95;
        nuitka_bool tmp_condition_result_188;
        int tmp_truth_name_32;
        PyObject *tmp_type_arg_63;
        PyObject *tmp_expression_value_169;
        PyObject *tmp_subscript_value_45;
        PyObject *tmp_bases_value_32;
        tmp_key_value_94 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
        tmp_dict_arg_value_94 = tmp_class_creation_32__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_94, tmp_key_value_94);
        assert(!(tmp_res == -1));
        tmp_condition_result_187 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_187 != false) {
            goto condexpr_true_63;
        } else {
            goto condexpr_false_63;
        }
        condexpr_true_63:;
        CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
        tmp_dict_arg_value_95 = tmp_class_creation_32__class_decl_dict;
        tmp_key_value_95 = mod_consts[57];
        tmp_metaclass_value_32 = DICT_GET_ITEM0(tmp_dict_arg_value_95, tmp_key_value_95);
        if (tmp_metaclass_value_32 == NULL) {
            tmp_metaclass_value_32 = Py_None;
        }
        assert(!(tmp_metaclass_value_32 == NULL));
        Py_INCREF(tmp_metaclass_value_32);
        goto condexpr_end_63;
        condexpr_false_63:;
        CHECK_OBJECT(tmp_class_creation_32__bases);
        tmp_truth_name_32 = CHECK_IF_TRUE(tmp_class_creation_32__bases);
        if (tmp_truth_name_32 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;

            goto try_except_handler_96;
        }
        tmp_condition_result_188 = tmp_truth_name_32 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_188 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_64;
        } else {
            goto condexpr_false_64;
        }
        condexpr_true_64:;
        CHECK_OBJECT(tmp_class_creation_32__bases);
        tmp_expression_value_169 = tmp_class_creation_32__bases;
        tmp_subscript_value_45 = mod_consts[39];
        tmp_type_arg_63 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_169, tmp_subscript_value_45, 0);
        if (tmp_type_arg_63 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;

            goto try_except_handler_96;
        }
        tmp_metaclass_value_32 = BUILTIN_TYPE1(tmp_type_arg_63);
        Py_DECREF(tmp_type_arg_63);
        if (tmp_metaclass_value_32 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;

            goto try_except_handler_96;
        }
        goto condexpr_end_64;
        condexpr_false_64:;
        tmp_metaclass_value_32 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_32);
        condexpr_end_64:;
        condexpr_end_63:;
        CHECK_OBJECT(tmp_class_creation_32__bases);
        tmp_bases_value_32 = tmp_class_creation_32__bases;
        tmp_assign_source_269 = SELECT_METACLASS(tmp_metaclass_value_32, tmp_bases_value_32);
        Py_DECREF(tmp_metaclass_value_32);
        if (tmp_assign_source_269 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;

            goto try_except_handler_96;
        }
        assert(tmp_class_creation_32__metaclass == NULL);
        tmp_class_creation_32__metaclass = tmp_assign_source_269;
    }
    {
        bool tmp_condition_result_189;
        PyObject *tmp_key_value_96;
        PyObject *tmp_dict_arg_value_96;
        tmp_key_value_96 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
        tmp_dict_arg_value_96 = tmp_class_creation_32__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_96, tmp_key_value_96);
        assert(!(tmp_res == -1));
        tmp_condition_result_189 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_189 != false) {
            goto branch_yes_125;
        } else {
            goto branch_no_125;
        }
    }
    branch_yes_125:;
    CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_32__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 296;

        goto try_except_handler_96;
    }
    branch_no_125:;
    {
        nuitka_bool tmp_condition_result_190;
        PyObject *tmp_expression_value_170;
        CHECK_OBJECT(tmp_class_creation_32__metaclass);
        tmp_expression_value_170 = tmp_class_creation_32__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_170, mod_consts[58]);
        tmp_condition_result_190 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_190 == NUITKA_BOOL_TRUE) {
            goto branch_yes_126;
        } else {
            goto branch_no_126;
        }
    }
    branch_yes_126:;
    {
        PyObject *tmp_assign_source_270;
        PyObject *tmp_called_value_63;
        PyObject *tmp_expression_value_171;
        PyObject *tmp_args_value_63;
        PyObject *tmp_tuple_element_126;
        PyObject *tmp_kwargs_value_63;
        CHECK_OBJECT(tmp_class_creation_32__metaclass);
        tmp_expression_value_171 = tmp_class_creation_32__metaclass;
        tmp_called_value_63 = LOOKUP_ATTRIBUTE(tmp_expression_value_171, mod_consts[58]);
        if (tmp_called_value_63 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;

            goto try_except_handler_96;
        }
        tmp_tuple_element_126 = mod_consts[138];
        tmp_args_value_63 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_63, 0, tmp_tuple_element_126);
        CHECK_OBJECT(tmp_class_creation_32__bases);
        tmp_tuple_element_126 = tmp_class_creation_32__bases;
        PyTuple_SET_ITEM0(tmp_args_value_63, 1, tmp_tuple_element_126);
        CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
        tmp_kwargs_value_63 = tmp_class_creation_32__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 296;
        tmp_assign_source_270 = CALL_FUNCTION(tmp_called_value_63, tmp_args_value_63, tmp_kwargs_value_63);
        Py_DECREF(tmp_called_value_63);
        Py_DECREF(tmp_args_value_63);
        if (tmp_assign_source_270 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;

            goto try_except_handler_96;
        }
        assert(tmp_class_creation_32__prepared == NULL);
        tmp_class_creation_32__prepared = tmp_assign_source_270;
    }
    {
        bool tmp_condition_result_191;
        PyObject *tmp_operand_value_32;
        PyObject *tmp_expression_value_172;
        CHECK_OBJECT(tmp_class_creation_32__prepared);
        tmp_expression_value_172 = tmp_class_creation_32__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_172, mod_consts[60]);
        tmp_operand_value_32 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_32);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;

            goto try_except_handler_96;
        }
        tmp_condition_result_191 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_191 != false) {
            goto branch_yes_127;
        } else {
            goto branch_no_127;
        }
    }
    branch_yes_127:;
    {
        PyObject *tmp_raise_type_32;
        PyObject *tmp_raise_value_32;
        PyObject *tmp_left_value_32;
        PyObject *tmp_right_value_32;
        PyObject *tmp_tuple_element_127;
        PyObject *tmp_getattr_target_32;
        PyObject *tmp_getattr_attr_32;
        PyObject *tmp_getattr_default_32;
        tmp_raise_type_32 = PyExc_TypeError;
        tmp_left_value_32 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_32__metaclass);
        tmp_getattr_target_32 = tmp_class_creation_32__metaclass;
        tmp_getattr_attr_32 = mod_consts[62];
        tmp_getattr_default_32 = mod_consts[63];
        tmp_tuple_element_127 = BUILTIN_GETATTR(tmp_getattr_target_32, tmp_getattr_attr_32, tmp_getattr_default_32);
        if (tmp_tuple_element_127 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;

            goto try_except_handler_96;
        }
        tmp_right_value_32 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_173;
            PyObject *tmp_type_arg_64;
            PyTuple_SET_ITEM(tmp_right_value_32, 0, tmp_tuple_element_127);
            CHECK_OBJECT(tmp_class_creation_32__prepared);
            tmp_type_arg_64 = tmp_class_creation_32__prepared;
            tmp_expression_value_173 = BUILTIN_TYPE1(tmp_type_arg_64);
            assert(!(tmp_expression_value_173 == NULL));
            tmp_tuple_element_127 = LOOKUP_ATTRIBUTE(tmp_expression_value_173, mod_consts[62]);
            Py_DECREF(tmp_expression_value_173);
            if (tmp_tuple_element_127 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 296;

                goto tuple_build_exception_32;
            }
            PyTuple_SET_ITEM(tmp_right_value_32, 1, tmp_tuple_element_127);
        }
        goto tuple_build_noexception_32;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_32:;
        Py_DECREF(tmp_right_value_32);
        goto try_except_handler_96;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_32:;
        tmp_raise_value_32 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_32, tmp_right_value_32);
        Py_DECREF(tmp_right_value_32);
        if (tmp_raise_value_32 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;

            goto try_except_handler_96;
        }
        exception_type = tmp_raise_type_32;
        Py_INCREF(tmp_raise_type_32);
        exception_value = tmp_raise_value_32;
        exception_lineno = 296;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_96;
    }
    branch_no_127:;
    goto branch_end_126;
    branch_no_126:;
    {
        PyObject *tmp_assign_source_271;
        tmp_assign_source_271 = PyDict_New();
        assert(tmp_class_creation_32__prepared == NULL);
        tmp_class_creation_32__prepared = tmp_assign_source_271;
    }
    branch_end_126:;
    {
        PyObject *tmp_assign_source_272;
        {
            PyObject *tmp_set_locals_32;
            CHECK_OBJECT(tmp_class_creation_32__prepared);
            tmp_set_locals_32 = tmp_class_creation_32__prepared;
            locals_aiohttp$web_exceptions$$$class__32_HTTPGone_296 = tmp_set_locals_32;
            Py_INCREF(tmp_set_locals_32);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__32_HTTPGone_296, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;

            goto try_except_handler_98;
        }
        tmp_dictset_value = mod_consts[138];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__32_HTTPGone_296, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;

            goto try_except_handler_98;
        }
        if (isFrameUnusable(cache_frame_225ebbd64dcf77cc25245db7a78a0798_29)) {
            Py_XDECREF(cache_frame_225ebbd64dcf77cc25245db7a78a0798_29);

#if _DEBUG_REFCOUNTS
            if (cache_frame_225ebbd64dcf77cc25245db7a78a0798_29 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_225ebbd64dcf77cc25245db7a78a0798_29 = MAKE_FUNCTION_FRAME(codeobj_225ebbd64dcf77cc25245db7a78a0798, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_225ebbd64dcf77cc25245db7a78a0798_29->m_type_description == NULL);
        frame_225ebbd64dcf77cc25245db7a78a0798_29 = cache_frame_225ebbd64dcf77cc25245db7a78a0798_29;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_225ebbd64dcf77cc25245db7a78a0798_29);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_225ebbd64dcf77cc25245db7a78a0798_29) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[139];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__32_HTTPGone_296, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 297;
            type_description_2 = "o";
            goto frame_exception_exit_29;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_225ebbd64dcf77cc25245db7a78a0798_29);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_28;

        frame_exception_exit_29:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_225ebbd64dcf77cc25245db7a78a0798_29);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_225ebbd64dcf77cc25245db7a78a0798_29, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_225ebbd64dcf77cc25245db7a78a0798_29->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_225ebbd64dcf77cc25245db7a78a0798_29, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_225ebbd64dcf77cc25245db7a78a0798_29,
            type_description_2,
            outline_31_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_225ebbd64dcf77cc25245db7a78a0798_29 == cache_frame_225ebbd64dcf77cc25245db7a78a0798_29) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_225ebbd64dcf77cc25245db7a78a0798_29);
            cache_frame_225ebbd64dcf77cc25245db7a78a0798_29 = NULL;
        }

        assertFrameObject(frame_225ebbd64dcf77cc25245db7a78a0798_29);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_28;

        frame_no_exception_28:;
        goto skip_nested_handling_28;
        nested_frame_exit_28:;

        goto try_except_handler_98;
        skip_nested_handling_28:;
        {
            nuitka_bool tmp_condition_result_192;
            PyObject *tmp_cmp_expr_left_32;
            PyObject *tmp_cmp_expr_right_32;
            CHECK_OBJECT(tmp_class_creation_32__bases);
            tmp_cmp_expr_left_32 = tmp_class_creation_32__bases;
            CHECK_OBJECT(tmp_class_creation_32__bases_orig);
            tmp_cmp_expr_right_32 = tmp_class_creation_32__bases_orig;
            tmp_condition_result_192 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_32, tmp_cmp_expr_right_32);
            if (tmp_condition_result_192 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 296;

                goto try_except_handler_98;
            }
            if (tmp_condition_result_192 == NUITKA_BOOL_TRUE) {
                goto branch_yes_128;
            } else {
                goto branch_no_128;
            }
            assert(tmp_condition_result_192 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_128:;
        CHECK_OBJECT(tmp_class_creation_32__bases_orig);
        tmp_dictset_value = tmp_class_creation_32__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__32_HTTPGone_296, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;

            goto try_except_handler_98;
        }
        branch_no_128:;
        {
            PyObject *tmp_assign_source_273;
            PyObject *tmp_called_value_64;
            PyObject *tmp_args_value_64;
            PyObject *tmp_tuple_element_128;
            PyObject *tmp_kwargs_value_64;
            CHECK_OBJECT(tmp_class_creation_32__metaclass);
            tmp_called_value_64 = tmp_class_creation_32__metaclass;
            tmp_tuple_element_128 = mod_consts[138];
            tmp_args_value_64 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_64, 0, tmp_tuple_element_128);
            CHECK_OBJECT(tmp_class_creation_32__bases);
            tmp_tuple_element_128 = tmp_class_creation_32__bases;
            PyTuple_SET_ITEM0(tmp_args_value_64, 1, tmp_tuple_element_128);
            tmp_tuple_element_128 = locals_aiohttp$web_exceptions$$$class__32_HTTPGone_296;
            PyTuple_SET_ITEM0(tmp_args_value_64, 2, tmp_tuple_element_128);
            CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
            tmp_kwargs_value_64 = tmp_class_creation_32__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 296;
            tmp_assign_source_273 = CALL_FUNCTION(tmp_called_value_64, tmp_args_value_64, tmp_kwargs_value_64);
            Py_DECREF(tmp_args_value_64);
            if (tmp_assign_source_273 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 296;

                goto try_except_handler_98;
            }
            assert(outline_31_var___class__ == NULL);
            outline_31_var___class__ = tmp_assign_source_273;
        }
        CHECK_OBJECT(outline_31_var___class__);
        tmp_assign_source_272 = outline_31_var___class__;
        Py_INCREF(tmp_assign_source_272);
        goto try_return_handler_98;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_98:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__32_HTTPGone_296);
        locals_aiohttp$web_exceptions$$$class__32_HTTPGone_296 = NULL;
        goto try_return_handler_97;
        // Exception handler code:
        try_except_handler_98:;
        exception_keeper_type_96 = exception_type;
        exception_keeper_value_96 = exception_value;
        exception_keeper_tb_96 = exception_tb;
        exception_keeper_lineno_96 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__32_HTTPGone_296);
        locals_aiohttp$web_exceptions$$$class__32_HTTPGone_296 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_96;
        exception_value = exception_keeper_value_96;
        exception_tb = exception_keeper_tb_96;
        exception_lineno = exception_keeper_lineno_96;

        goto try_except_handler_97;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_97:;
        CHECK_OBJECT(outline_31_var___class__);
        Py_DECREF(outline_31_var___class__);
        outline_31_var___class__ = NULL;
        goto outline_result_32;
        // Exception handler code:
        try_except_handler_97:;
        exception_keeper_type_97 = exception_type;
        exception_keeper_value_97 = exception_value;
        exception_keeper_tb_97 = exception_tb;
        exception_keeper_lineno_97 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_97;
        exception_value = exception_keeper_value_97;
        exception_tb = exception_keeper_tb_97;
        exception_lineno = exception_keeper_lineno_97;

        goto outline_exception_32;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_32:;
        exception_lineno = 296;
        goto try_except_handler_96;
        outline_result_32:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[138], tmp_assign_source_272);
    }
    goto try_end_34;
    // Exception handler code:
    try_except_handler_96:;
    exception_keeper_type_98 = exception_type;
    exception_keeper_value_98 = exception_value;
    exception_keeper_tb_98 = exception_tb;
    exception_keeper_lineno_98 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_32__bases_orig);
    tmp_class_creation_32__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_32__bases);
    tmp_class_creation_32__bases = NULL;
    Py_XDECREF(tmp_class_creation_32__class_decl_dict);
    tmp_class_creation_32__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_32__metaclass);
    tmp_class_creation_32__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_32__prepared);
    tmp_class_creation_32__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_98;
    exception_value = exception_keeper_value_98;
    exception_tb = exception_keeper_tb_98;
    exception_lineno = exception_keeper_lineno_98;

    goto frame_exception_exit_1;
    // End of try:
    try_end_34:;
    CHECK_OBJECT(tmp_class_creation_32__bases_orig);
    Py_DECREF(tmp_class_creation_32__bases_orig);
    tmp_class_creation_32__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_32__bases);
    Py_DECREF(tmp_class_creation_32__bases);
    tmp_class_creation_32__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
    Py_DECREF(tmp_class_creation_32__class_decl_dict);
    tmp_class_creation_32__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_32__metaclass);
    Py_DECREF(tmp_class_creation_32__metaclass);
    tmp_class_creation_32__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_32__prepared);
    Py_DECREF(tmp_class_creation_32__prepared);
    tmp_class_creation_32__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_274;
        PyObject *tmp_tuple_element_129;
        tmp_tuple_element_129 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[116]);

        if (unlikely(tmp_tuple_element_129 == NULL)) {
            tmp_tuple_element_129 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[116]);
        }

        if (tmp_tuple_element_129 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_99;
        }
        tmp_assign_source_274 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_274, 0, tmp_tuple_element_129);
        assert(tmp_class_creation_33__bases_orig == NULL);
        tmp_class_creation_33__bases_orig = tmp_assign_source_274;
    }
    {
        PyObject *tmp_assign_source_275;
        PyObject *tmp_dircall_arg1_33;
        CHECK_OBJECT(tmp_class_creation_33__bases_orig);
        tmp_dircall_arg1_33 = tmp_class_creation_33__bases_orig;
        Py_INCREF(tmp_dircall_arg1_33);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_33};
            tmp_assign_source_275 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_275 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_99;
        }
        assert(tmp_class_creation_33__bases == NULL);
        tmp_class_creation_33__bases = tmp_assign_source_275;
    }
    {
        PyObject *tmp_assign_source_276;
        tmp_assign_source_276 = PyDict_New();
        assert(tmp_class_creation_33__class_decl_dict == NULL);
        tmp_class_creation_33__class_decl_dict = tmp_assign_source_276;
    }
    {
        PyObject *tmp_assign_source_277;
        PyObject *tmp_metaclass_value_33;
        bool tmp_condition_result_193;
        PyObject *tmp_key_value_97;
        PyObject *tmp_dict_arg_value_97;
        PyObject *tmp_dict_arg_value_98;
        PyObject *tmp_key_value_98;
        nuitka_bool tmp_condition_result_194;
        int tmp_truth_name_33;
        PyObject *tmp_type_arg_65;
        PyObject *tmp_expression_value_174;
        PyObject *tmp_subscript_value_46;
        PyObject *tmp_bases_value_33;
        tmp_key_value_97 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
        tmp_dict_arg_value_97 = tmp_class_creation_33__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_97, tmp_key_value_97);
        assert(!(tmp_res == -1));
        tmp_condition_result_193 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_193 != false) {
            goto condexpr_true_65;
        } else {
            goto condexpr_false_65;
        }
        condexpr_true_65:;
        CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
        tmp_dict_arg_value_98 = tmp_class_creation_33__class_decl_dict;
        tmp_key_value_98 = mod_consts[57];
        tmp_metaclass_value_33 = DICT_GET_ITEM0(tmp_dict_arg_value_98, tmp_key_value_98);
        if (tmp_metaclass_value_33 == NULL) {
            tmp_metaclass_value_33 = Py_None;
        }
        assert(!(tmp_metaclass_value_33 == NULL));
        Py_INCREF(tmp_metaclass_value_33);
        goto condexpr_end_65;
        condexpr_false_65:;
        CHECK_OBJECT(tmp_class_creation_33__bases);
        tmp_truth_name_33 = CHECK_IF_TRUE(tmp_class_creation_33__bases);
        if (tmp_truth_name_33 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_99;
        }
        tmp_condition_result_194 = tmp_truth_name_33 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_194 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_66;
        } else {
            goto condexpr_false_66;
        }
        condexpr_true_66:;
        CHECK_OBJECT(tmp_class_creation_33__bases);
        tmp_expression_value_174 = tmp_class_creation_33__bases;
        tmp_subscript_value_46 = mod_consts[39];
        tmp_type_arg_65 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_174, tmp_subscript_value_46, 0);
        if (tmp_type_arg_65 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_99;
        }
        tmp_metaclass_value_33 = BUILTIN_TYPE1(tmp_type_arg_65);
        Py_DECREF(tmp_type_arg_65);
        if (tmp_metaclass_value_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_99;
        }
        goto condexpr_end_66;
        condexpr_false_66:;
        tmp_metaclass_value_33 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_33);
        condexpr_end_66:;
        condexpr_end_65:;
        CHECK_OBJECT(tmp_class_creation_33__bases);
        tmp_bases_value_33 = tmp_class_creation_33__bases;
        tmp_assign_source_277 = SELECT_METACLASS(tmp_metaclass_value_33, tmp_bases_value_33);
        Py_DECREF(tmp_metaclass_value_33);
        if (tmp_assign_source_277 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_99;
        }
        assert(tmp_class_creation_33__metaclass == NULL);
        tmp_class_creation_33__metaclass = tmp_assign_source_277;
    }
    {
        bool tmp_condition_result_195;
        PyObject *tmp_key_value_99;
        PyObject *tmp_dict_arg_value_99;
        tmp_key_value_99 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
        tmp_dict_arg_value_99 = tmp_class_creation_33__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_99, tmp_key_value_99);
        assert(!(tmp_res == -1));
        tmp_condition_result_195 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_195 != false) {
            goto branch_yes_129;
        } else {
            goto branch_no_129;
        }
    }
    branch_yes_129:;
    CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_33__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 300;

        goto try_except_handler_99;
    }
    branch_no_129:;
    {
        nuitka_bool tmp_condition_result_196;
        PyObject *tmp_expression_value_175;
        CHECK_OBJECT(tmp_class_creation_33__metaclass);
        tmp_expression_value_175 = tmp_class_creation_33__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_175, mod_consts[58]);
        tmp_condition_result_196 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_196 == NUITKA_BOOL_TRUE) {
            goto branch_yes_130;
        } else {
            goto branch_no_130;
        }
    }
    branch_yes_130:;
    {
        PyObject *tmp_assign_source_278;
        PyObject *tmp_called_value_65;
        PyObject *tmp_expression_value_176;
        PyObject *tmp_args_value_65;
        PyObject *tmp_tuple_element_130;
        PyObject *tmp_kwargs_value_65;
        CHECK_OBJECT(tmp_class_creation_33__metaclass);
        tmp_expression_value_176 = tmp_class_creation_33__metaclass;
        tmp_called_value_65 = LOOKUP_ATTRIBUTE(tmp_expression_value_176, mod_consts[58]);
        if (tmp_called_value_65 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_99;
        }
        tmp_tuple_element_130 = mod_consts[140];
        tmp_args_value_65 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_65, 0, tmp_tuple_element_130);
        CHECK_OBJECT(tmp_class_creation_33__bases);
        tmp_tuple_element_130 = tmp_class_creation_33__bases;
        PyTuple_SET_ITEM0(tmp_args_value_65, 1, tmp_tuple_element_130);
        CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
        tmp_kwargs_value_65 = tmp_class_creation_33__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 300;
        tmp_assign_source_278 = CALL_FUNCTION(tmp_called_value_65, tmp_args_value_65, tmp_kwargs_value_65);
        Py_DECREF(tmp_called_value_65);
        Py_DECREF(tmp_args_value_65);
        if (tmp_assign_source_278 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_99;
        }
        assert(tmp_class_creation_33__prepared == NULL);
        tmp_class_creation_33__prepared = tmp_assign_source_278;
    }
    {
        bool tmp_condition_result_197;
        PyObject *tmp_operand_value_33;
        PyObject *tmp_expression_value_177;
        CHECK_OBJECT(tmp_class_creation_33__prepared);
        tmp_expression_value_177 = tmp_class_creation_33__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_177, mod_consts[60]);
        tmp_operand_value_33 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_33);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_99;
        }
        tmp_condition_result_197 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_197 != false) {
            goto branch_yes_131;
        } else {
            goto branch_no_131;
        }
    }
    branch_yes_131:;
    {
        PyObject *tmp_raise_type_33;
        PyObject *tmp_raise_value_33;
        PyObject *tmp_left_value_33;
        PyObject *tmp_right_value_33;
        PyObject *tmp_tuple_element_131;
        PyObject *tmp_getattr_target_33;
        PyObject *tmp_getattr_attr_33;
        PyObject *tmp_getattr_default_33;
        tmp_raise_type_33 = PyExc_TypeError;
        tmp_left_value_33 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_33__metaclass);
        tmp_getattr_target_33 = tmp_class_creation_33__metaclass;
        tmp_getattr_attr_33 = mod_consts[62];
        tmp_getattr_default_33 = mod_consts[63];
        tmp_tuple_element_131 = BUILTIN_GETATTR(tmp_getattr_target_33, tmp_getattr_attr_33, tmp_getattr_default_33);
        if (tmp_tuple_element_131 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_99;
        }
        tmp_right_value_33 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_178;
            PyObject *tmp_type_arg_66;
            PyTuple_SET_ITEM(tmp_right_value_33, 0, tmp_tuple_element_131);
            CHECK_OBJECT(tmp_class_creation_33__prepared);
            tmp_type_arg_66 = tmp_class_creation_33__prepared;
            tmp_expression_value_178 = BUILTIN_TYPE1(tmp_type_arg_66);
            assert(!(tmp_expression_value_178 == NULL));
            tmp_tuple_element_131 = LOOKUP_ATTRIBUTE(tmp_expression_value_178, mod_consts[62]);
            Py_DECREF(tmp_expression_value_178);
            if (tmp_tuple_element_131 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 300;

                goto tuple_build_exception_33;
            }
            PyTuple_SET_ITEM(tmp_right_value_33, 1, tmp_tuple_element_131);
        }
        goto tuple_build_noexception_33;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_33:;
        Py_DECREF(tmp_right_value_33);
        goto try_except_handler_99;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_33:;
        tmp_raise_value_33 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_33, tmp_right_value_33);
        Py_DECREF(tmp_right_value_33);
        if (tmp_raise_value_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_99;
        }
        exception_type = tmp_raise_type_33;
        Py_INCREF(tmp_raise_type_33);
        exception_value = tmp_raise_value_33;
        exception_lineno = 300;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_99;
    }
    branch_no_131:;
    goto branch_end_130;
    branch_no_130:;
    {
        PyObject *tmp_assign_source_279;
        tmp_assign_source_279 = PyDict_New();
        assert(tmp_class_creation_33__prepared == NULL);
        tmp_class_creation_33__prepared = tmp_assign_source_279;
    }
    branch_end_130:;
    {
        PyObject *tmp_assign_source_280;
        {
            PyObject *tmp_set_locals_33;
            CHECK_OBJECT(tmp_class_creation_33__prepared);
            tmp_set_locals_33 = tmp_class_creation_33__prepared;
            locals_aiohttp$web_exceptions$$$class__33_HTTPLengthRequired_300 = tmp_set_locals_33;
            Py_INCREF(tmp_set_locals_33);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__33_HTTPLengthRequired_300, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_101;
        }
        tmp_dictset_value = mod_consts[140];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__33_HTTPLengthRequired_300, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_101;
        }
        if (isFrameUnusable(cache_frame_de2bddd7e35a811b3091eb861bb3130e_30)) {
            Py_XDECREF(cache_frame_de2bddd7e35a811b3091eb861bb3130e_30);

#if _DEBUG_REFCOUNTS
            if (cache_frame_de2bddd7e35a811b3091eb861bb3130e_30 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_de2bddd7e35a811b3091eb861bb3130e_30 = MAKE_FUNCTION_FRAME(codeobj_de2bddd7e35a811b3091eb861bb3130e, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_de2bddd7e35a811b3091eb861bb3130e_30->m_type_description == NULL);
        frame_de2bddd7e35a811b3091eb861bb3130e_30 = cache_frame_de2bddd7e35a811b3091eb861bb3130e_30;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_de2bddd7e35a811b3091eb861bb3130e_30);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_de2bddd7e35a811b3091eb861bb3130e_30) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[141];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__33_HTTPLengthRequired_300, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 301;
            type_description_2 = "o";
            goto frame_exception_exit_30;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_de2bddd7e35a811b3091eb861bb3130e_30);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_29;

        frame_exception_exit_30:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_de2bddd7e35a811b3091eb861bb3130e_30);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_de2bddd7e35a811b3091eb861bb3130e_30, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_de2bddd7e35a811b3091eb861bb3130e_30->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_de2bddd7e35a811b3091eb861bb3130e_30, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_de2bddd7e35a811b3091eb861bb3130e_30,
            type_description_2,
            outline_32_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_de2bddd7e35a811b3091eb861bb3130e_30 == cache_frame_de2bddd7e35a811b3091eb861bb3130e_30) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_de2bddd7e35a811b3091eb861bb3130e_30);
            cache_frame_de2bddd7e35a811b3091eb861bb3130e_30 = NULL;
        }

        assertFrameObject(frame_de2bddd7e35a811b3091eb861bb3130e_30);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_29;

        frame_no_exception_29:;
        goto skip_nested_handling_29;
        nested_frame_exit_29:;

        goto try_except_handler_101;
        skip_nested_handling_29:;
        {
            nuitka_bool tmp_condition_result_198;
            PyObject *tmp_cmp_expr_left_33;
            PyObject *tmp_cmp_expr_right_33;
            CHECK_OBJECT(tmp_class_creation_33__bases);
            tmp_cmp_expr_left_33 = tmp_class_creation_33__bases;
            CHECK_OBJECT(tmp_class_creation_33__bases_orig);
            tmp_cmp_expr_right_33 = tmp_class_creation_33__bases_orig;
            tmp_condition_result_198 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_33, tmp_cmp_expr_right_33);
            if (tmp_condition_result_198 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 300;

                goto try_except_handler_101;
            }
            if (tmp_condition_result_198 == NUITKA_BOOL_TRUE) {
                goto branch_yes_132;
            } else {
                goto branch_no_132;
            }
            assert(tmp_condition_result_198 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_132:;
        CHECK_OBJECT(tmp_class_creation_33__bases_orig);
        tmp_dictset_value = tmp_class_creation_33__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__33_HTTPLengthRequired_300, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_101;
        }
        branch_no_132:;
        {
            PyObject *tmp_assign_source_281;
            PyObject *tmp_called_value_66;
            PyObject *tmp_args_value_66;
            PyObject *tmp_tuple_element_132;
            PyObject *tmp_kwargs_value_66;
            CHECK_OBJECT(tmp_class_creation_33__metaclass);
            tmp_called_value_66 = tmp_class_creation_33__metaclass;
            tmp_tuple_element_132 = mod_consts[140];
            tmp_args_value_66 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_66, 0, tmp_tuple_element_132);
            CHECK_OBJECT(tmp_class_creation_33__bases);
            tmp_tuple_element_132 = tmp_class_creation_33__bases;
            PyTuple_SET_ITEM0(tmp_args_value_66, 1, tmp_tuple_element_132);
            tmp_tuple_element_132 = locals_aiohttp$web_exceptions$$$class__33_HTTPLengthRequired_300;
            PyTuple_SET_ITEM0(tmp_args_value_66, 2, tmp_tuple_element_132);
            CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
            tmp_kwargs_value_66 = tmp_class_creation_33__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 300;
            tmp_assign_source_281 = CALL_FUNCTION(tmp_called_value_66, tmp_args_value_66, tmp_kwargs_value_66);
            Py_DECREF(tmp_args_value_66);
            if (tmp_assign_source_281 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 300;

                goto try_except_handler_101;
            }
            assert(outline_32_var___class__ == NULL);
            outline_32_var___class__ = tmp_assign_source_281;
        }
        CHECK_OBJECT(outline_32_var___class__);
        tmp_assign_source_280 = outline_32_var___class__;
        Py_INCREF(tmp_assign_source_280);
        goto try_return_handler_101;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_101:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__33_HTTPLengthRequired_300);
        locals_aiohttp$web_exceptions$$$class__33_HTTPLengthRequired_300 = NULL;
        goto try_return_handler_100;
        // Exception handler code:
        try_except_handler_101:;
        exception_keeper_type_99 = exception_type;
        exception_keeper_value_99 = exception_value;
        exception_keeper_tb_99 = exception_tb;
        exception_keeper_lineno_99 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__33_HTTPLengthRequired_300);
        locals_aiohttp$web_exceptions$$$class__33_HTTPLengthRequired_300 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_99;
        exception_value = exception_keeper_value_99;
        exception_tb = exception_keeper_tb_99;
        exception_lineno = exception_keeper_lineno_99;

        goto try_except_handler_100;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_100:;
        CHECK_OBJECT(outline_32_var___class__);
        Py_DECREF(outline_32_var___class__);
        outline_32_var___class__ = NULL;
        goto outline_result_33;
        // Exception handler code:
        try_except_handler_100:;
        exception_keeper_type_100 = exception_type;
        exception_keeper_value_100 = exception_value;
        exception_keeper_tb_100 = exception_tb;
        exception_keeper_lineno_100 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_100;
        exception_value = exception_keeper_value_100;
        exception_tb = exception_keeper_tb_100;
        exception_lineno = exception_keeper_lineno_100;

        goto outline_exception_33;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_33:;
        exception_lineno = 300;
        goto try_except_handler_99;
        outline_result_33:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[140], tmp_assign_source_280);
    }
    goto try_end_35;
    // Exception handler code:
    try_except_handler_99:;
    exception_keeper_type_101 = exception_type;
    exception_keeper_value_101 = exception_value;
    exception_keeper_tb_101 = exception_tb;
    exception_keeper_lineno_101 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_33__bases_orig);
    tmp_class_creation_33__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_33__bases);
    tmp_class_creation_33__bases = NULL;
    Py_XDECREF(tmp_class_creation_33__class_decl_dict);
    tmp_class_creation_33__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_33__metaclass);
    tmp_class_creation_33__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_33__prepared);
    tmp_class_creation_33__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_101;
    exception_value = exception_keeper_value_101;
    exception_tb = exception_keeper_tb_101;
    exception_lineno = exception_keeper_lineno_101;

    goto frame_exception_exit_1;
    // End of try:
    try_end_35:;
    CHECK_OBJECT(tmp_class_creation_33__bases_orig);
    Py_DECREF(tmp_class_creation_33__bases_orig);
    tmp_class_creation_33__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_33__bases);
    Py_DECREF(tmp_class_creation_33__bases);
    tmp_class_creation_33__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
    Py_DECREF(tmp_class_creation_33__class_decl_dict);
    tmp_class_creation_33__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_33__metaclass);
    Py_DECREF(tmp_class_creation_33__metaclass);
    tmp_class_creation_33__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_33__prepared);
    Py_DECREF(tmp_class_creation_33__prepared);
    tmp_class_creation_33__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_282;
        PyObject *tmp_tuple_element_133;
        tmp_tuple_element_133 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[116]);

        if (unlikely(tmp_tuple_element_133 == NULL)) {
            tmp_tuple_element_133 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[116]);
        }

        if (tmp_tuple_element_133 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 304;

            goto try_except_handler_102;
        }
        tmp_assign_source_282 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_282, 0, tmp_tuple_element_133);
        assert(tmp_class_creation_34__bases_orig == NULL);
        tmp_class_creation_34__bases_orig = tmp_assign_source_282;
    }
    {
        PyObject *tmp_assign_source_283;
        PyObject *tmp_dircall_arg1_34;
        CHECK_OBJECT(tmp_class_creation_34__bases_orig);
        tmp_dircall_arg1_34 = tmp_class_creation_34__bases_orig;
        Py_INCREF(tmp_dircall_arg1_34);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_34};
            tmp_assign_source_283 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_283 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 304;

            goto try_except_handler_102;
        }
        assert(tmp_class_creation_34__bases == NULL);
        tmp_class_creation_34__bases = tmp_assign_source_283;
    }
    {
        PyObject *tmp_assign_source_284;
        tmp_assign_source_284 = PyDict_New();
        assert(tmp_class_creation_34__class_decl_dict == NULL);
        tmp_class_creation_34__class_decl_dict = tmp_assign_source_284;
    }
    {
        PyObject *tmp_assign_source_285;
        PyObject *tmp_metaclass_value_34;
        bool tmp_condition_result_199;
        PyObject *tmp_key_value_100;
        PyObject *tmp_dict_arg_value_100;
        PyObject *tmp_dict_arg_value_101;
        PyObject *tmp_key_value_101;
        nuitka_bool tmp_condition_result_200;
        int tmp_truth_name_34;
        PyObject *tmp_type_arg_67;
        PyObject *tmp_expression_value_179;
        PyObject *tmp_subscript_value_47;
        PyObject *tmp_bases_value_34;
        tmp_key_value_100 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
        tmp_dict_arg_value_100 = tmp_class_creation_34__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_100, tmp_key_value_100);
        assert(!(tmp_res == -1));
        tmp_condition_result_199 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_199 != false) {
            goto condexpr_true_67;
        } else {
            goto condexpr_false_67;
        }
        condexpr_true_67:;
        CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
        tmp_dict_arg_value_101 = tmp_class_creation_34__class_decl_dict;
        tmp_key_value_101 = mod_consts[57];
        tmp_metaclass_value_34 = DICT_GET_ITEM0(tmp_dict_arg_value_101, tmp_key_value_101);
        if (tmp_metaclass_value_34 == NULL) {
            tmp_metaclass_value_34 = Py_None;
        }
        assert(!(tmp_metaclass_value_34 == NULL));
        Py_INCREF(tmp_metaclass_value_34);
        goto condexpr_end_67;
        condexpr_false_67:;
        CHECK_OBJECT(tmp_class_creation_34__bases);
        tmp_truth_name_34 = CHECK_IF_TRUE(tmp_class_creation_34__bases);
        if (tmp_truth_name_34 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 304;

            goto try_except_handler_102;
        }
        tmp_condition_result_200 = tmp_truth_name_34 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_200 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_68;
        } else {
            goto condexpr_false_68;
        }
        condexpr_true_68:;
        CHECK_OBJECT(tmp_class_creation_34__bases);
        tmp_expression_value_179 = tmp_class_creation_34__bases;
        tmp_subscript_value_47 = mod_consts[39];
        tmp_type_arg_67 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_179, tmp_subscript_value_47, 0);
        if (tmp_type_arg_67 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 304;

            goto try_except_handler_102;
        }
        tmp_metaclass_value_34 = BUILTIN_TYPE1(tmp_type_arg_67);
        Py_DECREF(tmp_type_arg_67);
        if (tmp_metaclass_value_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 304;

            goto try_except_handler_102;
        }
        goto condexpr_end_68;
        condexpr_false_68:;
        tmp_metaclass_value_34 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_34);
        condexpr_end_68:;
        condexpr_end_67:;
        CHECK_OBJECT(tmp_class_creation_34__bases);
        tmp_bases_value_34 = tmp_class_creation_34__bases;
        tmp_assign_source_285 = SELECT_METACLASS(tmp_metaclass_value_34, tmp_bases_value_34);
        Py_DECREF(tmp_metaclass_value_34);
        if (tmp_assign_source_285 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 304;

            goto try_except_handler_102;
        }
        assert(tmp_class_creation_34__metaclass == NULL);
        tmp_class_creation_34__metaclass = tmp_assign_source_285;
    }
    {
        bool tmp_condition_result_201;
        PyObject *tmp_key_value_102;
        PyObject *tmp_dict_arg_value_102;
        tmp_key_value_102 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
        tmp_dict_arg_value_102 = tmp_class_creation_34__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_102, tmp_key_value_102);
        assert(!(tmp_res == -1));
        tmp_condition_result_201 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_201 != false) {
            goto branch_yes_133;
        } else {
            goto branch_no_133;
        }
    }
    branch_yes_133:;
    CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_34__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 304;

        goto try_except_handler_102;
    }
    branch_no_133:;
    {
        nuitka_bool tmp_condition_result_202;
        PyObject *tmp_expression_value_180;
        CHECK_OBJECT(tmp_class_creation_34__metaclass);
        tmp_expression_value_180 = tmp_class_creation_34__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_180, mod_consts[58]);
        tmp_condition_result_202 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_202 == NUITKA_BOOL_TRUE) {
            goto branch_yes_134;
        } else {
            goto branch_no_134;
        }
    }
    branch_yes_134:;
    {
        PyObject *tmp_assign_source_286;
        PyObject *tmp_called_value_67;
        PyObject *tmp_expression_value_181;
        PyObject *tmp_args_value_67;
        PyObject *tmp_tuple_element_134;
        PyObject *tmp_kwargs_value_67;
        CHECK_OBJECT(tmp_class_creation_34__metaclass);
        tmp_expression_value_181 = tmp_class_creation_34__metaclass;
        tmp_called_value_67 = LOOKUP_ATTRIBUTE(tmp_expression_value_181, mod_consts[58]);
        if (tmp_called_value_67 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 304;

            goto try_except_handler_102;
        }
        tmp_tuple_element_134 = mod_consts[142];
        tmp_args_value_67 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_67, 0, tmp_tuple_element_134);
        CHECK_OBJECT(tmp_class_creation_34__bases);
        tmp_tuple_element_134 = tmp_class_creation_34__bases;
        PyTuple_SET_ITEM0(tmp_args_value_67, 1, tmp_tuple_element_134);
        CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
        tmp_kwargs_value_67 = tmp_class_creation_34__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 304;
        tmp_assign_source_286 = CALL_FUNCTION(tmp_called_value_67, tmp_args_value_67, tmp_kwargs_value_67);
        Py_DECREF(tmp_called_value_67);
        Py_DECREF(tmp_args_value_67);
        if (tmp_assign_source_286 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 304;

            goto try_except_handler_102;
        }
        assert(tmp_class_creation_34__prepared == NULL);
        tmp_class_creation_34__prepared = tmp_assign_source_286;
    }
    {
        bool tmp_condition_result_203;
        PyObject *tmp_operand_value_34;
        PyObject *tmp_expression_value_182;
        CHECK_OBJECT(tmp_class_creation_34__prepared);
        tmp_expression_value_182 = tmp_class_creation_34__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_182, mod_consts[60]);
        tmp_operand_value_34 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_34);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 304;

            goto try_except_handler_102;
        }
        tmp_condition_result_203 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_203 != false) {
            goto branch_yes_135;
        } else {
            goto branch_no_135;
        }
    }
    branch_yes_135:;
    {
        PyObject *tmp_raise_type_34;
        PyObject *tmp_raise_value_34;
        PyObject *tmp_left_value_34;
        PyObject *tmp_right_value_34;
        PyObject *tmp_tuple_element_135;
        PyObject *tmp_getattr_target_34;
        PyObject *tmp_getattr_attr_34;
        PyObject *tmp_getattr_default_34;
        tmp_raise_type_34 = PyExc_TypeError;
        tmp_left_value_34 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_34__metaclass);
        tmp_getattr_target_34 = tmp_class_creation_34__metaclass;
        tmp_getattr_attr_34 = mod_consts[62];
        tmp_getattr_default_34 = mod_consts[63];
        tmp_tuple_element_135 = BUILTIN_GETATTR(tmp_getattr_target_34, tmp_getattr_attr_34, tmp_getattr_default_34);
        if (tmp_tuple_element_135 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 304;

            goto try_except_handler_102;
        }
        tmp_right_value_34 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_183;
            PyObject *tmp_type_arg_68;
            PyTuple_SET_ITEM(tmp_right_value_34, 0, tmp_tuple_element_135);
            CHECK_OBJECT(tmp_class_creation_34__prepared);
            tmp_type_arg_68 = tmp_class_creation_34__prepared;
            tmp_expression_value_183 = BUILTIN_TYPE1(tmp_type_arg_68);
            assert(!(tmp_expression_value_183 == NULL));
            tmp_tuple_element_135 = LOOKUP_ATTRIBUTE(tmp_expression_value_183, mod_consts[62]);
            Py_DECREF(tmp_expression_value_183);
            if (tmp_tuple_element_135 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 304;

                goto tuple_build_exception_34;
            }
            PyTuple_SET_ITEM(tmp_right_value_34, 1, tmp_tuple_element_135);
        }
        goto tuple_build_noexception_34;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_34:;
        Py_DECREF(tmp_right_value_34);
        goto try_except_handler_102;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_34:;
        tmp_raise_value_34 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_34, tmp_right_value_34);
        Py_DECREF(tmp_right_value_34);
        if (tmp_raise_value_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 304;

            goto try_except_handler_102;
        }
        exception_type = tmp_raise_type_34;
        Py_INCREF(tmp_raise_type_34);
        exception_value = tmp_raise_value_34;
        exception_lineno = 304;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_102;
    }
    branch_no_135:;
    goto branch_end_134;
    branch_no_134:;
    {
        PyObject *tmp_assign_source_287;
        tmp_assign_source_287 = PyDict_New();
        assert(tmp_class_creation_34__prepared == NULL);
        tmp_class_creation_34__prepared = tmp_assign_source_287;
    }
    branch_end_134:;
    {
        PyObject *tmp_assign_source_288;
        {
            PyObject *tmp_set_locals_34;
            CHECK_OBJECT(tmp_class_creation_34__prepared);
            tmp_set_locals_34 = tmp_class_creation_34__prepared;
            locals_aiohttp$web_exceptions$$$class__34_HTTPPreconditionFailed_304 = tmp_set_locals_34;
            Py_INCREF(tmp_set_locals_34);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__34_HTTPPreconditionFailed_304, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 304;

            goto try_except_handler_104;
        }
        tmp_dictset_value = mod_consts[142];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__34_HTTPPreconditionFailed_304, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 304;

            goto try_except_handler_104;
        }
        if (isFrameUnusable(cache_frame_e51cc26c7b2ac1910ca557fda89970b0_31)) {
            Py_XDECREF(cache_frame_e51cc26c7b2ac1910ca557fda89970b0_31);

#if _DEBUG_REFCOUNTS
            if (cache_frame_e51cc26c7b2ac1910ca557fda89970b0_31 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_e51cc26c7b2ac1910ca557fda89970b0_31 = MAKE_FUNCTION_FRAME(codeobj_e51cc26c7b2ac1910ca557fda89970b0, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_e51cc26c7b2ac1910ca557fda89970b0_31->m_type_description == NULL);
        frame_e51cc26c7b2ac1910ca557fda89970b0_31 = cache_frame_e51cc26c7b2ac1910ca557fda89970b0_31;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_e51cc26c7b2ac1910ca557fda89970b0_31);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_e51cc26c7b2ac1910ca557fda89970b0_31) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[143];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__34_HTTPPreconditionFailed_304, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 305;
            type_description_2 = "o";
            goto frame_exception_exit_31;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e51cc26c7b2ac1910ca557fda89970b0_31);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_30;

        frame_exception_exit_31:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e51cc26c7b2ac1910ca557fda89970b0_31);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_e51cc26c7b2ac1910ca557fda89970b0_31, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_e51cc26c7b2ac1910ca557fda89970b0_31->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_e51cc26c7b2ac1910ca557fda89970b0_31, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_e51cc26c7b2ac1910ca557fda89970b0_31,
            type_description_2,
            outline_33_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_e51cc26c7b2ac1910ca557fda89970b0_31 == cache_frame_e51cc26c7b2ac1910ca557fda89970b0_31) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_e51cc26c7b2ac1910ca557fda89970b0_31);
            cache_frame_e51cc26c7b2ac1910ca557fda89970b0_31 = NULL;
        }

        assertFrameObject(frame_e51cc26c7b2ac1910ca557fda89970b0_31);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_30;

        frame_no_exception_30:;
        goto skip_nested_handling_30;
        nested_frame_exit_30:;

        goto try_except_handler_104;
        skip_nested_handling_30:;
        {
            nuitka_bool tmp_condition_result_204;
            PyObject *tmp_cmp_expr_left_34;
            PyObject *tmp_cmp_expr_right_34;
            CHECK_OBJECT(tmp_class_creation_34__bases);
            tmp_cmp_expr_left_34 = tmp_class_creation_34__bases;
            CHECK_OBJECT(tmp_class_creation_34__bases_orig);
            tmp_cmp_expr_right_34 = tmp_class_creation_34__bases_orig;
            tmp_condition_result_204 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_34, tmp_cmp_expr_right_34);
            if (tmp_condition_result_204 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 304;

                goto try_except_handler_104;
            }
            if (tmp_condition_result_204 == NUITKA_BOOL_TRUE) {
                goto branch_yes_136;
            } else {
                goto branch_no_136;
            }
            assert(tmp_condition_result_204 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_136:;
        CHECK_OBJECT(tmp_class_creation_34__bases_orig);
        tmp_dictset_value = tmp_class_creation_34__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__34_HTTPPreconditionFailed_304, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 304;

            goto try_except_handler_104;
        }
        branch_no_136:;
        {
            PyObject *tmp_assign_source_289;
            PyObject *tmp_called_value_68;
            PyObject *tmp_args_value_68;
            PyObject *tmp_tuple_element_136;
            PyObject *tmp_kwargs_value_68;
            CHECK_OBJECT(tmp_class_creation_34__metaclass);
            tmp_called_value_68 = tmp_class_creation_34__metaclass;
            tmp_tuple_element_136 = mod_consts[142];
            tmp_args_value_68 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_68, 0, tmp_tuple_element_136);
            CHECK_OBJECT(tmp_class_creation_34__bases);
            tmp_tuple_element_136 = tmp_class_creation_34__bases;
            PyTuple_SET_ITEM0(tmp_args_value_68, 1, tmp_tuple_element_136);
            tmp_tuple_element_136 = locals_aiohttp$web_exceptions$$$class__34_HTTPPreconditionFailed_304;
            PyTuple_SET_ITEM0(tmp_args_value_68, 2, tmp_tuple_element_136);
            CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
            tmp_kwargs_value_68 = tmp_class_creation_34__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 304;
            tmp_assign_source_289 = CALL_FUNCTION(tmp_called_value_68, tmp_args_value_68, tmp_kwargs_value_68);
            Py_DECREF(tmp_args_value_68);
            if (tmp_assign_source_289 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 304;

                goto try_except_handler_104;
            }
            assert(outline_33_var___class__ == NULL);
            outline_33_var___class__ = tmp_assign_source_289;
        }
        CHECK_OBJECT(outline_33_var___class__);
        tmp_assign_source_288 = outline_33_var___class__;
        Py_INCREF(tmp_assign_source_288);
        goto try_return_handler_104;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_104:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__34_HTTPPreconditionFailed_304);
        locals_aiohttp$web_exceptions$$$class__34_HTTPPreconditionFailed_304 = NULL;
        goto try_return_handler_103;
        // Exception handler code:
        try_except_handler_104:;
        exception_keeper_type_102 = exception_type;
        exception_keeper_value_102 = exception_value;
        exception_keeper_tb_102 = exception_tb;
        exception_keeper_lineno_102 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__34_HTTPPreconditionFailed_304);
        locals_aiohttp$web_exceptions$$$class__34_HTTPPreconditionFailed_304 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_102;
        exception_value = exception_keeper_value_102;
        exception_tb = exception_keeper_tb_102;
        exception_lineno = exception_keeper_lineno_102;

        goto try_except_handler_103;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_103:;
        CHECK_OBJECT(outline_33_var___class__);
        Py_DECREF(outline_33_var___class__);
        outline_33_var___class__ = NULL;
        goto outline_result_34;
        // Exception handler code:
        try_except_handler_103:;
        exception_keeper_type_103 = exception_type;
        exception_keeper_value_103 = exception_value;
        exception_keeper_tb_103 = exception_tb;
        exception_keeper_lineno_103 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_103;
        exception_value = exception_keeper_value_103;
        exception_tb = exception_keeper_tb_103;
        exception_lineno = exception_keeper_lineno_103;

        goto outline_exception_34;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_34:;
        exception_lineno = 304;
        goto try_except_handler_102;
        outline_result_34:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[142], tmp_assign_source_288);
    }
    goto try_end_36;
    // Exception handler code:
    try_except_handler_102:;
    exception_keeper_type_104 = exception_type;
    exception_keeper_value_104 = exception_value;
    exception_keeper_tb_104 = exception_tb;
    exception_keeper_lineno_104 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_34__bases_orig);
    tmp_class_creation_34__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_34__bases);
    tmp_class_creation_34__bases = NULL;
    Py_XDECREF(tmp_class_creation_34__class_decl_dict);
    tmp_class_creation_34__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_34__metaclass);
    tmp_class_creation_34__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_34__prepared);
    tmp_class_creation_34__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_104;
    exception_value = exception_keeper_value_104;
    exception_tb = exception_keeper_tb_104;
    exception_lineno = exception_keeper_lineno_104;

    goto frame_exception_exit_1;
    // End of try:
    try_end_36:;
    CHECK_OBJECT(tmp_class_creation_34__bases_orig);
    Py_DECREF(tmp_class_creation_34__bases_orig);
    tmp_class_creation_34__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_34__bases);
    Py_DECREF(tmp_class_creation_34__bases);
    tmp_class_creation_34__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
    Py_DECREF(tmp_class_creation_34__class_decl_dict);
    tmp_class_creation_34__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_34__metaclass);
    Py_DECREF(tmp_class_creation_34__metaclass);
    tmp_class_creation_34__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_34__prepared);
    Py_DECREF(tmp_class_creation_34__prepared);
    tmp_class_creation_34__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_290;
        PyObject *tmp_tuple_element_137;
        tmp_tuple_element_137 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[116]);

        if (unlikely(tmp_tuple_element_137 == NULL)) {
            tmp_tuple_element_137 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[116]);
        }

        if (tmp_tuple_element_137 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;

            goto try_except_handler_105;
        }
        tmp_assign_source_290 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_290, 0, tmp_tuple_element_137);
        assert(tmp_class_creation_35__bases_orig == NULL);
        tmp_class_creation_35__bases_orig = tmp_assign_source_290;
    }
    {
        PyObject *tmp_assign_source_291;
        PyObject *tmp_dircall_arg1_35;
        CHECK_OBJECT(tmp_class_creation_35__bases_orig);
        tmp_dircall_arg1_35 = tmp_class_creation_35__bases_orig;
        Py_INCREF(tmp_dircall_arg1_35);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_35};
            tmp_assign_source_291 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_291 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;

            goto try_except_handler_105;
        }
        assert(tmp_class_creation_35__bases == NULL);
        tmp_class_creation_35__bases = tmp_assign_source_291;
    }
    {
        PyObject *tmp_assign_source_292;
        tmp_assign_source_292 = PyDict_New();
        assert(tmp_class_creation_35__class_decl_dict == NULL);
        tmp_class_creation_35__class_decl_dict = tmp_assign_source_292;
    }
    {
        PyObject *tmp_assign_source_293;
        PyObject *tmp_metaclass_value_35;
        bool tmp_condition_result_205;
        PyObject *tmp_key_value_103;
        PyObject *tmp_dict_arg_value_103;
        PyObject *tmp_dict_arg_value_104;
        PyObject *tmp_key_value_104;
        nuitka_bool tmp_condition_result_206;
        int tmp_truth_name_35;
        PyObject *tmp_type_arg_69;
        PyObject *tmp_expression_value_184;
        PyObject *tmp_subscript_value_48;
        PyObject *tmp_bases_value_35;
        tmp_key_value_103 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
        tmp_dict_arg_value_103 = tmp_class_creation_35__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_103, tmp_key_value_103);
        assert(!(tmp_res == -1));
        tmp_condition_result_205 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_205 != false) {
            goto condexpr_true_69;
        } else {
            goto condexpr_false_69;
        }
        condexpr_true_69:;
        CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
        tmp_dict_arg_value_104 = tmp_class_creation_35__class_decl_dict;
        tmp_key_value_104 = mod_consts[57];
        tmp_metaclass_value_35 = DICT_GET_ITEM0(tmp_dict_arg_value_104, tmp_key_value_104);
        if (tmp_metaclass_value_35 == NULL) {
            tmp_metaclass_value_35 = Py_None;
        }
        assert(!(tmp_metaclass_value_35 == NULL));
        Py_INCREF(tmp_metaclass_value_35);
        goto condexpr_end_69;
        condexpr_false_69:;
        CHECK_OBJECT(tmp_class_creation_35__bases);
        tmp_truth_name_35 = CHECK_IF_TRUE(tmp_class_creation_35__bases);
        if (tmp_truth_name_35 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;

            goto try_except_handler_105;
        }
        tmp_condition_result_206 = tmp_truth_name_35 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_206 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_70;
        } else {
            goto condexpr_false_70;
        }
        condexpr_true_70:;
        CHECK_OBJECT(tmp_class_creation_35__bases);
        tmp_expression_value_184 = tmp_class_creation_35__bases;
        tmp_subscript_value_48 = mod_consts[39];
        tmp_type_arg_69 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_184, tmp_subscript_value_48, 0);
        if (tmp_type_arg_69 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;

            goto try_except_handler_105;
        }
        tmp_metaclass_value_35 = BUILTIN_TYPE1(tmp_type_arg_69);
        Py_DECREF(tmp_type_arg_69);
        if (tmp_metaclass_value_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;

            goto try_except_handler_105;
        }
        goto condexpr_end_70;
        condexpr_false_70:;
        tmp_metaclass_value_35 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_35);
        condexpr_end_70:;
        condexpr_end_69:;
        CHECK_OBJECT(tmp_class_creation_35__bases);
        tmp_bases_value_35 = tmp_class_creation_35__bases;
        tmp_assign_source_293 = SELECT_METACLASS(tmp_metaclass_value_35, tmp_bases_value_35);
        Py_DECREF(tmp_metaclass_value_35);
        if (tmp_assign_source_293 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;

            goto try_except_handler_105;
        }
        assert(tmp_class_creation_35__metaclass == NULL);
        tmp_class_creation_35__metaclass = tmp_assign_source_293;
    }
    {
        bool tmp_condition_result_207;
        PyObject *tmp_key_value_105;
        PyObject *tmp_dict_arg_value_105;
        tmp_key_value_105 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
        tmp_dict_arg_value_105 = tmp_class_creation_35__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_105, tmp_key_value_105);
        assert(!(tmp_res == -1));
        tmp_condition_result_207 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_207 != false) {
            goto branch_yes_137;
        } else {
            goto branch_no_137;
        }
    }
    branch_yes_137:;
    CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_35__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 308;

        goto try_except_handler_105;
    }
    branch_no_137:;
    {
        nuitka_bool tmp_condition_result_208;
        PyObject *tmp_expression_value_185;
        CHECK_OBJECT(tmp_class_creation_35__metaclass);
        tmp_expression_value_185 = tmp_class_creation_35__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_185, mod_consts[58]);
        tmp_condition_result_208 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_208 == NUITKA_BOOL_TRUE) {
            goto branch_yes_138;
        } else {
            goto branch_no_138;
        }
    }
    branch_yes_138:;
    {
        PyObject *tmp_assign_source_294;
        PyObject *tmp_called_value_69;
        PyObject *tmp_expression_value_186;
        PyObject *tmp_args_value_69;
        PyObject *tmp_tuple_element_138;
        PyObject *tmp_kwargs_value_69;
        CHECK_OBJECT(tmp_class_creation_35__metaclass);
        tmp_expression_value_186 = tmp_class_creation_35__metaclass;
        tmp_called_value_69 = LOOKUP_ATTRIBUTE(tmp_expression_value_186, mod_consts[58]);
        if (tmp_called_value_69 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;

            goto try_except_handler_105;
        }
        tmp_tuple_element_138 = mod_consts[144];
        tmp_args_value_69 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_69, 0, tmp_tuple_element_138);
        CHECK_OBJECT(tmp_class_creation_35__bases);
        tmp_tuple_element_138 = tmp_class_creation_35__bases;
        PyTuple_SET_ITEM0(tmp_args_value_69, 1, tmp_tuple_element_138);
        CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
        tmp_kwargs_value_69 = tmp_class_creation_35__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 308;
        tmp_assign_source_294 = CALL_FUNCTION(tmp_called_value_69, tmp_args_value_69, tmp_kwargs_value_69);
        Py_DECREF(tmp_called_value_69);
        Py_DECREF(tmp_args_value_69);
        if (tmp_assign_source_294 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;

            goto try_except_handler_105;
        }
        assert(tmp_class_creation_35__prepared == NULL);
        tmp_class_creation_35__prepared = tmp_assign_source_294;
    }
    {
        bool tmp_condition_result_209;
        PyObject *tmp_operand_value_35;
        PyObject *tmp_expression_value_187;
        CHECK_OBJECT(tmp_class_creation_35__prepared);
        tmp_expression_value_187 = tmp_class_creation_35__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_187, mod_consts[60]);
        tmp_operand_value_35 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_35);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;

            goto try_except_handler_105;
        }
        tmp_condition_result_209 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_209 != false) {
            goto branch_yes_139;
        } else {
            goto branch_no_139;
        }
    }
    branch_yes_139:;
    {
        PyObject *tmp_raise_type_35;
        PyObject *tmp_raise_value_35;
        PyObject *tmp_left_value_35;
        PyObject *tmp_right_value_35;
        PyObject *tmp_tuple_element_139;
        PyObject *tmp_getattr_target_35;
        PyObject *tmp_getattr_attr_35;
        PyObject *tmp_getattr_default_35;
        tmp_raise_type_35 = PyExc_TypeError;
        tmp_left_value_35 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_35__metaclass);
        tmp_getattr_target_35 = tmp_class_creation_35__metaclass;
        tmp_getattr_attr_35 = mod_consts[62];
        tmp_getattr_default_35 = mod_consts[63];
        tmp_tuple_element_139 = BUILTIN_GETATTR(tmp_getattr_target_35, tmp_getattr_attr_35, tmp_getattr_default_35);
        if (tmp_tuple_element_139 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;

            goto try_except_handler_105;
        }
        tmp_right_value_35 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_188;
            PyObject *tmp_type_arg_70;
            PyTuple_SET_ITEM(tmp_right_value_35, 0, tmp_tuple_element_139);
            CHECK_OBJECT(tmp_class_creation_35__prepared);
            tmp_type_arg_70 = tmp_class_creation_35__prepared;
            tmp_expression_value_188 = BUILTIN_TYPE1(tmp_type_arg_70);
            assert(!(tmp_expression_value_188 == NULL));
            tmp_tuple_element_139 = LOOKUP_ATTRIBUTE(tmp_expression_value_188, mod_consts[62]);
            Py_DECREF(tmp_expression_value_188);
            if (tmp_tuple_element_139 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 308;

                goto tuple_build_exception_35;
            }
            PyTuple_SET_ITEM(tmp_right_value_35, 1, tmp_tuple_element_139);
        }
        goto tuple_build_noexception_35;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_35:;
        Py_DECREF(tmp_right_value_35);
        goto try_except_handler_105;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_35:;
        tmp_raise_value_35 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_35, tmp_right_value_35);
        Py_DECREF(tmp_right_value_35);
        if (tmp_raise_value_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;

            goto try_except_handler_105;
        }
        exception_type = tmp_raise_type_35;
        Py_INCREF(tmp_raise_type_35);
        exception_value = tmp_raise_value_35;
        exception_lineno = 308;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_105;
    }
    branch_no_139:;
    goto branch_end_138;
    branch_no_138:;
    {
        PyObject *tmp_assign_source_295;
        tmp_assign_source_295 = PyDict_New();
        assert(tmp_class_creation_35__prepared == NULL);
        tmp_class_creation_35__prepared = tmp_assign_source_295;
    }
    branch_end_138:;
    {
        PyObject *tmp_assign_source_296;
        {
            PyObject *tmp_set_locals_35;
            CHECK_OBJECT(tmp_class_creation_35__prepared);
            tmp_set_locals_35 = tmp_class_creation_35__prepared;
            locals_aiohttp$web_exceptions$$$class__35_HTTPRequestEntityTooLarge_308 = tmp_set_locals_35;
            Py_INCREF(tmp_set_locals_35);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__35_HTTPRequestEntityTooLarge_308, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;

            goto try_except_handler_107;
        }
        tmp_dictset_value = mod_consts[144];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__35_HTTPRequestEntityTooLarge_308, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;

            goto try_except_handler_107;
        }
        if (isFrameUnusable(cache_frame_15a6f6e6299c3b077a96876bf02a4c05_32)) {
            Py_XDECREF(cache_frame_15a6f6e6299c3b077a96876bf02a4c05_32);

#if _DEBUG_REFCOUNTS
            if (cache_frame_15a6f6e6299c3b077a96876bf02a4c05_32 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_15a6f6e6299c3b077a96876bf02a4c05_32 = MAKE_FUNCTION_FRAME(codeobj_15a6f6e6299c3b077a96876bf02a4c05, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_15a6f6e6299c3b077a96876bf02a4c05_32->m_type_description == NULL);
        frame_15a6f6e6299c3b077a96876bf02a4c05_32 = cache_frame_15a6f6e6299c3b077a96876bf02a4c05_32;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_15a6f6e6299c3b077a96876bf02a4c05_32);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_15a6f6e6299c3b077a96876bf02a4c05_32) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[145];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__35_HTTPRequestEntityTooLarge_308, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 309;
            type_description_2 = "c";
            goto frame_exception_exit_32;
        }
        {
            PyObject *tmp_annotations_5;
            PyObject *tmp_dict_key_5;
            PyObject *tmp_dict_value_5;
            struct Nuitka_CellObject *tmp_closure_3[1];
            tmp_dict_key_5 = mod_consts[146];
            tmp_dict_value_5 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__35_HTTPRequestEntityTooLarge_308, mod_consts[147]);

            if (tmp_dict_value_5 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_dict_value_5 = (PyObject *)&PyFloat_Type;
                    Py_INCREF(tmp_dict_value_5);
                } else {
                    goto frame_exception_exit_32;
                }
            }

            tmp_annotations_5 = _PyDict_NewPresized( 4 );
            tmp_res = PyDict_SetItem(tmp_annotations_5, tmp_dict_key_5, tmp_dict_value_5);
            Py_DECREF(tmp_dict_value_5);
            assert(!(tmp_res != 0));
            tmp_dict_key_5 = mod_consts[148];
            tmp_dict_value_5 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__35_HTTPRequestEntityTooLarge_308, mod_consts[147]);

            if (tmp_dict_value_5 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_dict_value_5 = (PyObject *)&PyFloat_Type;
                    Py_INCREF(tmp_dict_value_5);
                } else {
                    goto dict_build_exception_4;
                }
            }

            tmp_res = PyDict_SetItem(tmp_annotations_5, tmp_dict_key_5, tmp_dict_value_5);
            Py_DECREF(tmp_dict_value_5);
            assert(!(tmp_res != 0));
            tmp_dict_key_5 = mod_consts[149];
            tmp_dict_value_5 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__35_HTTPRequestEntityTooLarge_308, mod_consts[40]);

            if (tmp_dict_value_5 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_dict_value_5 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[40]);

                    if (unlikely(tmp_dict_value_5 == NULL)) {
                        tmp_dict_value_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[40]);
                    }

                    if (tmp_dict_value_5 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 311;
                        type_description_2 = "c";
                        goto dict_build_exception_4;
                    }
                    Py_INCREF(tmp_dict_value_5);
                } else {
                    goto dict_build_exception_4;
                }
            }

            tmp_res = PyDict_SetItem(tmp_annotations_5, tmp_dict_key_5, tmp_dict_value_5);
            Py_DECREF(tmp_dict_value_5);
            assert(!(tmp_res != 0));
            tmp_dict_key_5 = mod_consts[72];
            tmp_dict_value_5 = Py_None;
            tmp_res = PyDict_SetItem(tmp_annotations_5, tmp_dict_key_5, tmp_dict_value_5);
            assert(!(tmp_res != 0));
            goto dict_build_noexception_4;
            // Exception handling pass through code for dict_build:
            dict_build_exception_4:;
            Py_DECREF(tmp_annotations_5);
            goto frame_exception_exit_32;
            // Finished with no exception for dict_build:
            dict_build_noexception_4:;

            tmp_closure_3[0] = outline_34_var___class__;
            Py_INCREF(tmp_closure_3[0]);

            tmp_dictset_value = MAKE_FUNCTION_aiohttp$web_exceptions$$$function__5___init__(tmp_annotations_5, tmp_closure_3);

            tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__35_HTTPRequestEntityTooLarge_308, mod_consts[5], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 311;
                type_description_2 = "c";
                goto frame_exception_exit_32;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_15a6f6e6299c3b077a96876bf02a4c05_32);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_31;

        frame_exception_exit_32:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_15a6f6e6299c3b077a96876bf02a4c05_32);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_15a6f6e6299c3b077a96876bf02a4c05_32, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_15a6f6e6299c3b077a96876bf02a4c05_32->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_15a6f6e6299c3b077a96876bf02a4c05_32, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_15a6f6e6299c3b077a96876bf02a4c05_32,
            type_description_2,
            outline_34_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_15a6f6e6299c3b077a96876bf02a4c05_32 == cache_frame_15a6f6e6299c3b077a96876bf02a4c05_32) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_15a6f6e6299c3b077a96876bf02a4c05_32);
            cache_frame_15a6f6e6299c3b077a96876bf02a4c05_32 = NULL;
        }

        assertFrameObject(frame_15a6f6e6299c3b077a96876bf02a4c05_32);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_31;

        frame_no_exception_31:;
        goto skip_nested_handling_31;
        nested_frame_exit_31:;

        goto try_except_handler_107;
        skip_nested_handling_31:;
        {
            nuitka_bool tmp_condition_result_210;
            PyObject *tmp_cmp_expr_left_35;
            PyObject *tmp_cmp_expr_right_35;
            CHECK_OBJECT(tmp_class_creation_35__bases);
            tmp_cmp_expr_left_35 = tmp_class_creation_35__bases;
            CHECK_OBJECT(tmp_class_creation_35__bases_orig);
            tmp_cmp_expr_right_35 = tmp_class_creation_35__bases_orig;
            tmp_condition_result_210 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_35, tmp_cmp_expr_right_35);
            if (tmp_condition_result_210 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 308;

                goto try_except_handler_107;
            }
            if (tmp_condition_result_210 == NUITKA_BOOL_TRUE) {
                goto branch_yes_140;
            } else {
                goto branch_no_140;
            }
            assert(tmp_condition_result_210 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_140:;
        CHECK_OBJECT(tmp_class_creation_35__bases_orig);
        tmp_dictset_value = tmp_class_creation_35__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__35_HTTPRequestEntityTooLarge_308, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;

            goto try_except_handler_107;
        }
        branch_no_140:;
        {
            PyObject *tmp_assign_source_297;
            PyObject *tmp_called_value_70;
            PyObject *tmp_args_value_70;
            PyObject *tmp_tuple_element_140;
            PyObject *tmp_kwargs_value_70;
            CHECK_OBJECT(tmp_class_creation_35__metaclass);
            tmp_called_value_70 = tmp_class_creation_35__metaclass;
            tmp_tuple_element_140 = mod_consts[144];
            tmp_args_value_70 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_70, 0, tmp_tuple_element_140);
            CHECK_OBJECT(tmp_class_creation_35__bases);
            tmp_tuple_element_140 = tmp_class_creation_35__bases;
            PyTuple_SET_ITEM0(tmp_args_value_70, 1, tmp_tuple_element_140);
            tmp_tuple_element_140 = locals_aiohttp$web_exceptions$$$class__35_HTTPRequestEntityTooLarge_308;
            PyTuple_SET_ITEM0(tmp_args_value_70, 2, tmp_tuple_element_140);
            CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
            tmp_kwargs_value_70 = tmp_class_creation_35__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 308;
            tmp_assign_source_297 = CALL_FUNCTION(tmp_called_value_70, tmp_args_value_70, tmp_kwargs_value_70);
            Py_DECREF(tmp_args_value_70);
            if (tmp_assign_source_297 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 308;

                goto try_except_handler_107;
            }
            assert(Nuitka_Cell_GET(outline_34_var___class__) == NULL);
            PyCell_SET(outline_34_var___class__, tmp_assign_source_297);

        }
        CHECK_OBJECT(Nuitka_Cell_GET(outline_34_var___class__));
        tmp_assign_source_296 = Nuitka_Cell_GET(outline_34_var___class__);
        Py_INCREF(tmp_assign_source_296);
        goto try_return_handler_107;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_107:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__35_HTTPRequestEntityTooLarge_308);
        locals_aiohttp$web_exceptions$$$class__35_HTTPRequestEntityTooLarge_308 = NULL;
        goto try_return_handler_106;
        // Exception handler code:
        try_except_handler_107:;
        exception_keeper_type_105 = exception_type;
        exception_keeper_value_105 = exception_value;
        exception_keeper_tb_105 = exception_tb;
        exception_keeper_lineno_105 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__35_HTTPRequestEntityTooLarge_308);
        locals_aiohttp$web_exceptions$$$class__35_HTTPRequestEntityTooLarge_308 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_105;
        exception_value = exception_keeper_value_105;
        exception_tb = exception_keeper_tb_105;
        exception_lineno = exception_keeper_lineno_105;

        goto try_except_handler_106;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_106:;
        CHECK_OBJECT(outline_34_var___class__);
        Py_DECREF(outline_34_var___class__);
        outline_34_var___class__ = NULL;
        goto outline_result_35;
        // Exception handler code:
        try_except_handler_106:;
        exception_keeper_type_106 = exception_type;
        exception_keeper_value_106 = exception_value;
        exception_keeper_tb_106 = exception_tb;
        exception_keeper_lineno_106 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_106;
        exception_value = exception_keeper_value_106;
        exception_tb = exception_keeper_tb_106;
        exception_lineno = exception_keeper_lineno_106;

        goto outline_exception_35;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_35:;
        exception_lineno = 308;
        goto try_except_handler_105;
        outline_result_35:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[144], tmp_assign_source_296);
    }
    goto try_end_37;
    // Exception handler code:
    try_except_handler_105:;
    exception_keeper_type_107 = exception_type;
    exception_keeper_value_107 = exception_value;
    exception_keeper_tb_107 = exception_tb;
    exception_keeper_lineno_107 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_35__bases_orig);
    tmp_class_creation_35__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_35__bases);
    tmp_class_creation_35__bases = NULL;
    Py_XDECREF(tmp_class_creation_35__class_decl_dict);
    tmp_class_creation_35__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_35__metaclass);
    tmp_class_creation_35__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_35__prepared);
    tmp_class_creation_35__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_107;
    exception_value = exception_keeper_value_107;
    exception_tb = exception_keeper_tb_107;
    exception_lineno = exception_keeper_lineno_107;

    goto frame_exception_exit_1;
    // End of try:
    try_end_37:;
    CHECK_OBJECT(tmp_class_creation_35__bases_orig);
    Py_DECREF(tmp_class_creation_35__bases_orig);
    tmp_class_creation_35__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_35__bases);
    Py_DECREF(tmp_class_creation_35__bases);
    tmp_class_creation_35__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
    Py_DECREF(tmp_class_creation_35__class_decl_dict);
    tmp_class_creation_35__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_35__metaclass);
    Py_DECREF(tmp_class_creation_35__metaclass);
    tmp_class_creation_35__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_35__prepared);
    Py_DECREF(tmp_class_creation_35__prepared);
    tmp_class_creation_35__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_298;
        PyObject *tmp_tuple_element_141;
        tmp_tuple_element_141 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[116]);

        if (unlikely(tmp_tuple_element_141 == NULL)) {
            tmp_tuple_element_141 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[116]);
        }

        if (tmp_tuple_element_141 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 320;

            goto try_except_handler_108;
        }
        tmp_assign_source_298 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_298, 0, tmp_tuple_element_141);
        assert(tmp_class_creation_36__bases_orig == NULL);
        tmp_class_creation_36__bases_orig = tmp_assign_source_298;
    }
    {
        PyObject *tmp_assign_source_299;
        PyObject *tmp_dircall_arg1_36;
        CHECK_OBJECT(tmp_class_creation_36__bases_orig);
        tmp_dircall_arg1_36 = tmp_class_creation_36__bases_orig;
        Py_INCREF(tmp_dircall_arg1_36);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_36};
            tmp_assign_source_299 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_299 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 320;

            goto try_except_handler_108;
        }
        assert(tmp_class_creation_36__bases == NULL);
        tmp_class_creation_36__bases = tmp_assign_source_299;
    }
    {
        PyObject *tmp_assign_source_300;
        tmp_assign_source_300 = PyDict_New();
        assert(tmp_class_creation_36__class_decl_dict == NULL);
        tmp_class_creation_36__class_decl_dict = tmp_assign_source_300;
    }
    {
        PyObject *tmp_assign_source_301;
        PyObject *tmp_metaclass_value_36;
        bool tmp_condition_result_211;
        PyObject *tmp_key_value_106;
        PyObject *tmp_dict_arg_value_106;
        PyObject *tmp_dict_arg_value_107;
        PyObject *tmp_key_value_107;
        nuitka_bool tmp_condition_result_212;
        int tmp_truth_name_36;
        PyObject *tmp_type_arg_71;
        PyObject *tmp_expression_value_189;
        PyObject *tmp_subscript_value_49;
        PyObject *tmp_bases_value_36;
        tmp_key_value_106 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
        tmp_dict_arg_value_106 = tmp_class_creation_36__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_106, tmp_key_value_106);
        assert(!(tmp_res == -1));
        tmp_condition_result_211 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_211 != false) {
            goto condexpr_true_71;
        } else {
            goto condexpr_false_71;
        }
        condexpr_true_71:;
        CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
        tmp_dict_arg_value_107 = tmp_class_creation_36__class_decl_dict;
        tmp_key_value_107 = mod_consts[57];
        tmp_metaclass_value_36 = DICT_GET_ITEM0(tmp_dict_arg_value_107, tmp_key_value_107);
        if (tmp_metaclass_value_36 == NULL) {
            tmp_metaclass_value_36 = Py_None;
        }
        assert(!(tmp_metaclass_value_36 == NULL));
        Py_INCREF(tmp_metaclass_value_36);
        goto condexpr_end_71;
        condexpr_false_71:;
        CHECK_OBJECT(tmp_class_creation_36__bases);
        tmp_truth_name_36 = CHECK_IF_TRUE(tmp_class_creation_36__bases);
        if (tmp_truth_name_36 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 320;

            goto try_except_handler_108;
        }
        tmp_condition_result_212 = tmp_truth_name_36 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_212 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_72;
        } else {
            goto condexpr_false_72;
        }
        condexpr_true_72:;
        CHECK_OBJECT(tmp_class_creation_36__bases);
        tmp_expression_value_189 = tmp_class_creation_36__bases;
        tmp_subscript_value_49 = mod_consts[39];
        tmp_type_arg_71 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_189, tmp_subscript_value_49, 0);
        if (tmp_type_arg_71 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 320;

            goto try_except_handler_108;
        }
        tmp_metaclass_value_36 = BUILTIN_TYPE1(tmp_type_arg_71);
        Py_DECREF(tmp_type_arg_71);
        if (tmp_metaclass_value_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 320;

            goto try_except_handler_108;
        }
        goto condexpr_end_72;
        condexpr_false_72:;
        tmp_metaclass_value_36 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_36);
        condexpr_end_72:;
        condexpr_end_71:;
        CHECK_OBJECT(tmp_class_creation_36__bases);
        tmp_bases_value_36 = tmp_class_creation_36__bases;
        tmp_assign_source_301 = SELECT_METACLASS(tmp_metaclass_value_36, tmp_bases_value_36);
        Py_DECREF(tmp_metaclass_value_36);
        if (tmp_assign_source_301 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 320;

            goto try_except_handler_108;
        }
        assert(tmp_class_creation_36__metaclass == NULL);
        tmp_class_creation_36__metaclass = tmp_assign_source_301;
    }
    {
        bool tmp_condition_result_213;
        PyObject *tmp_key_value_108;
        PyObject *tmp_dict_arg_value_108;
        tmp_key_value_108 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
        tmp_dict_arg_value_108 = tmp_class_creation_36__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_108, tmp_key_value_108);
        assert(!(tmp_res == -1));
        tmp_condition_result_213 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_213 != false) {
            goto branch_yes_141;
        } else {
            goto branch_no_141;
        }
    }
    branch_yes_141:;
    CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_36__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 320;

        goto try_except_handler_108;
    }
    branch_no_141:;
    {
        nuitka_bool tmp_condition_result_214;
        PyObject *tmp_expression_value_190;
        CHECK_OBJECT(tmp_class_creation_36__metaclass);
        tmp_expression_value_190 = tmp_class_creation_36__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_190, mod_consts[58]);
        tmp_condition_result_214 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_214 == NUITKA_BOOL_TRUE) {
            goto branch_yes_142;
        } else {
            goto branch_no_142;
        }
    }
    branch_yes_142:;
    {
        PyObject *tmp_assign_source_302;
        PyObject *tmp_called_value_71;
        PyObject *tmp_expression_value_191;
        PyObject *tmp_args_value_71;
        PyObject *tmp_tuple_element_142;
        PyObject *tmp_kwargs_value_71;
        CHECK_OBJECT(tmp_class_creation_36__metaclass);
        tmp_expression_value_191 = tmp_class_creation_36__metaclass;
        tmp_called_value_71 = LOOKUP_ATTRIBUTE(tmp_expression_value_191, mod_consts[58]);
        if (tmp_called_value_71 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 320;

            goto try_except_handler_108;
        }
        tmp_tuple_element_142 = mod_consts[151];
        tmp_args_value_71 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_71, 0, tmp_tuple_element_142);
        CHECK_OBJECT(tmp_class_creation_36__bases);
        tmp_tuple_element_142 = tmp_class_creation_36__bases;
        PyTuple_SET_ITEM0(tmp_args_value_71, 1, tmp_tuple_element_142);
        CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
        tmp_kwargs_value_71 = tmp_class_creation_36__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 320;
        tmp_assign_source_302 = CALL_FUNCTION(tmp_called_value_71, tmp_args_value_71, tmp_kwargs_value_71);
        Py_DECREF(tmp_called_value_71);
        Py_DECREF(tmp_args_value_71);
        if (tmp_assign_source_302 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 320;

            goto try_except_handler_108;
        }
        assert(tmp_class_creation_36__prepared == NULL);
        tmp_class_creation_36__prepared = tmp_assign_source_302;
    }
    {
        bool tmp_condition_result_215;
        PyObject *tmp_operand_value_36;
        PyObject *tmp_expression_value_192;
        CHECK_OBJECT(tmp_class_creation_36__prepared);
        tmp_expression_value_192 = tmp_class_creation_36__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_192, mod_consts[60]);
        tmp_operand_value_36 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_36);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 320;

            goto try_except_handler_108;
        }
        tmp_condition_result_215 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_215 != false) {
            goto branch_yes_143;
        } else {
            goto branch_no_143;
        }
    }
    branch_yes_143:;
    {
        PyObject *tmp_raise_type_36;
        PyObject *tmp_raise_value_36;
        PyObject *tmp_left_value_36;
        PyObject *tmp_right_value_36;
        PyObject *tmp_tuple_element_143;
        PyObject *tmp_getattr_target_36;
        PyObject *tmp_getattr_attr_36;
        PyObject *tmp_getattr_default_36;
        tmp_raise_type_36 = PyExc_TypeError;
        tmp_left_value_36 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_36__metaclass);
        tmp_getattr_target_36 = tmp_class_creation_36__metaclass;
        tmp_getattr_attr_36 = mod_consts[62];
        tmp_getattr_default_36 = mod_consts[63];
        tmp_tuple_element_143 = BUILTIN_GETATTR(tmp_getattr_target_36, tmp_getattr_attr_36, tmp_getattr_default_36);
        if (tmp_tuple_element_143 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 320;

            goto try_except_handler_108;
        }
        tmp_right_value_36 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_193;
            PyObject *tmp_type_arg_72;
            PyTuple_SET_ITEM(tmp_right_value_36, 0, tmp_tuple_element_143);
            CHECK_OBJECT(tmp_class_creation_36__prepared);
            tmp_type_arg_72 = tmp_class_creation_36__prepared;
            tmp_expression_value_193 = BUILTIN_TYPE1(tmp_type_arg_72);
            assert(!(tmp_expression_value_193 == NULL));
            tmp_tuple_element_143 = LOOKUP_ATTRIBUTE(tmp_expression_value_193, mod_consts[62]);
            Py_DECREF(tmp_expression_value_193);
            if (tmp_tuple_element_143 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 320;

                goto tuple_build_exception_36;
            }
            PyTuple_SET_ITEM(tmp_right_value_36, 1, tmp_tuple_element_143);
        }
        goto tuple_build_noexception_36;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_36:;
        Py_DECREF(tmp_right_value_36);
        goto try_except_handler_108;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_36:;
        tmp_raise_value_36 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_36, tmp_right_value_36);
        Py_DECREF(tmp_right_value_36);
        if (tmp_raise_value_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 320;

            goto try_except_handler_108;
        }
        exception_type = tmp_raise_type_36;
        Py_INCREF(tmp_raise_type_36);
        exception_value = tmp_raise_value_36;
        exception_lineno = 320;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_108;
    }
    branch_no_143:;
    goto branch_end_142;
    branch_no_142:;
    {
        PyObject *tmp_assign_source_303;
        tmp_assign_source_303 = PyDict_New();
        assert(tmp_class_creation_36__prepared == NULL);
        tmp_class_creation_36__prepared = tmp_assign_source_303;
    }
    branch_end_142:;
    {
        PyObject *tmp_assign_source_304;
        {
            PyObject *tmp_set_locals_36;
            CHECK_OBJECT(tmp_class_creation_36__prepared);
            tmp_set_locals_36 = tmp_class_creation_36__prepared;
            locals_aiohttp$web_exceptions$$$class__36_HTTPRequestURITooLong_320 = tmp_set_locals_36;
            Py_INCREF(tmp_set_locals_36);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__36_HTTPRequestURITooLong_320, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 320;

            goto try_except_handler_110;
        }
        tmp_dictset_value = mod_consts[151];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__36_HTTPRequestURITooLong_320, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 320;

            goto try_except_handler_110;
        }
        if (isFrameUnusable(cache_frame_01261c52d8188d40d0a4e5d8b40ac498_33)) {
            Py_XDECREF(cache_frame_01261c52d8188d40d0a4e5d8b40ac498_33);

#if _DEBUG_REFCOUNTS
            if (cache_frame_01261c52d8188d40d0a4e5d8b40ac498_33 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_01261c52d8188d40d0a4e5d8b40ac498_33 = MAKE_FUNCTION_FRAME(codeobj_01261c52d8188d40d0a4e5d8b40ac498, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_01261c52d8188d40d0a4e5d8b40ac498_33->m_type_description == NULL);
        frame_01261c52d8188d40d0a4e5d8b40ac498_33 = cache_frame_01261c52d8188d40d0a4e5d8b40ac498_33;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_01261c52d8188d40d0a4e5d8b40ac498_33);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_01261c52d8188d40d0a4e5d8b40ac498_33) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[152];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__36_HTTPRequestURITooLong_320, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 321;
            type_description_2 = "o";
            goto frame_exception_exit_33;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_01261c52d8188d40d0a4e5d8b40ac498_33);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_32;

        frame_exception_exit_33:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_01261c52d8188d40d0a4e5d8b40ac498_33);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_01261c52d8188d40d0a4e5d8b40ac498_33, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_01261c52d8188d40d0a4e5d8b40ac498_33->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_01261c52d8188d40d0a4e5d8b40ac498_33, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_01261c52d8188d40d0a4e5d8b40ac498_33,
            type_description_2,
            outline_35_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_01261c52d8188d40d0a4e5d8b40ac498_33 == cache_frame_01261c52d8188d40d0a4e5d8b40ac498_33) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_01261c52d8188d40d0a4e5d8b40ac498_33);
            cache_frame_01261c52d8188d40d0a4e5d8b40ac498_33 = NULL;
        }

        assertFrameObject(frame_01261c52d8188d40d0a4e5d8b40ac498_33);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_32;

        frame_no_exception_32:;
        goto skip_nested_handling_32;
        nested_frame_exit_32:;

        goto try_except_handler_110;
        skip_nested_handling_32:;
        {
            nuitka_bool tmp_condition_result_216;
            PyObject *tmp_cmp_expr_left_36;
            PyObject *tmp_cmp_expr_right_36;
            CHECK_OBJECT(tmp_class_creation_36__bases);
            tmp_cmp_expr_left_36 = tmp_class_creation_36__bases;
            CHECK_OBJECT(tmp_class_creation_36__bases_orig);
            tmp_cmp_expr_right_36 = tmp_class_creation_36__bases_orig;
            tmp_condition_result_216 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_36, tmp_cmp_expr_right_36);
            if (tmp_condition_result_216 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 320;

                goto try_except_handler_110;
            }
            if (tmp_condition_result_216 == NUITKA_BOOL_TRUE) {
                goto branch_yes_144;
            } else {
                goto branch_no_144;
            }
            assert(tmp_condition_result_216 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_144:;
        CHECK_OBJECT(tmp_class_creation_36__bases_orig);
        tmp_dictset_value = tmp_class_creation_36__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__36_HTTPRequestURITooLong_320, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 320;

            goto try_except_handler_110;
        }
        branch_no_144:;
        {
            PyObject *tmp_assign_source_305;
            PyObject *tmp_called_value_72;
            PyObject *tmp_args_value_72;
            PyObject *tmp_tuple_element_144;
            PyObject *tmp_kwargs_value_72;
            CHECK_OBJECT(tmp_class_creation_36__metaclass);
            tmp_called_value_72 = tmp_class_creation_36__metaclass;
            tmp_tuple_element_144 = mod_consts[151];
            tmp_args_value_72 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_72, 0, tmp_tuple_element_144);
            CHECK_OBJECT(tmp_class_creation_36__bases);
            tmp_tuple_element_144 = tmp_class_creation_36__bases;
            PyTuple_SET_ITEM0(tmp_args_value_72, 1, tmp_tuple_element_144);
            tmp_tuple_element_144 = locals_aiohttp$web_exceptions$$$class__36_HTTPRequestURITooLong_320;
            PyTuple_SET_ITEM0(tmp_args_value_72, 2, tmp_tuple_element_144);
            CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
            tmp_kwargs_value_72 = tmp_class_creation_36__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 320;
            tmp_assign_source_305 = CALL_FUNCTION(tmp_called_value_72, tmp_args_value_72, tmp_kwargs_value_72);
            Py_DECREF(tmp_args_value_72);
            if (tmp_assign_source_305 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 320;

                goto try_except_handler_110;
            }
            assert(outline_35_var___class__ == NULL);
            outline_35_var___class__ = tmp_assign_source_305;
        }
        CHECK_OBJECT(outline_35_var___class__);
        tmp_assign_source_304 = outline_35_var___class__;
        Py_INCREF(tmp_assign_source_304);
        goto try_return_handler_110;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_110:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__36_HTTPRequestURITooLong_320);
        locals_aiohttp$web_exceptions$$$class__36_HTTPRequestURITooLong_320 = NULL;
        goto try_return_handler_109;
        // Exception handler code:
        try_except_handler_110:;
        exception_keeper_type_108 = exception_type;
        exception_keeper_value_108 = exception_value;
        exception_keeper_tb_108 = exception_tb;
        exception_keeper_lineno_108 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__36_HTTPRequestURITooLong_320);
        locals_aiohttp$web_exceptions$$$class__36_HTTPRequestURITooLong_320 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_108;
        exception_value = exception_keeper_value_108;
        exception_tb = exception_keeper_tb_108;
        exception_lineno = exception_keeper_lineno_108;

        goto try_except_handler_109;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_109:;
        CHECK_OBJECT(outline_35_var___class__);
        Py_DECREF(outline_35_var___class__);
        outline_35_var___class__ = NULL;
        goto outline_result_36;
        // Exception handler code:
        try_except_handler_109:;
        exception_keeper_type_109 = exception_type;
        exception_keeper_value_109 = exception_value;
        exception_keeper_tb_109 = exception_tb;
        exception_keeper_lineno_109 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_109;
        exception_value = exception_keeper_value_109;
        exception_tb = exception_keeper_tb_109;
        exception_lineno = exception_keeper_lineno_109;

        goto outline_exception_36;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_36:;
        exception_lineno = 320;
        goto try_except_handler_108;
        outline_result_36:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[151], tmp_assign_source_304);
    }
    goto try_end_38;
    // Exception handler code:
    try_except_handler_108:;
    exception_keeper_type_110 = exception_type;
    exception_keeper_value_110 = exception_value;
    exception_keeper_tb_110 = exception_tb;
    exception_keeper_lineno_110 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_36__bases_orig);
    tmp_class_creation_36__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_36__bases);
    tmp_class_creation_36__bases = NULL;
    Py_XDECREF(tmp_class_creation_36__class_decl_dict);
    tmp_class_creation_36__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_36__metaclass);
    tmp_class_creation_36__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_36__prepared);
    tmp_class_creation_36__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_110;
    exception_value = exception_keeper_value_110;
    exception_tb = exception_keeper_tb_110;
    exception_lineno = exception_keeper_lineno_110;

    goto frame_exception_exit_1;
    // End of try:
    try_end_38:;
    CHECK_OBJECT(tmp_class_creation_36__bases_orig);
    Py_DECREF(tmp_class_creation_36__bases_orig);
    tmp_class_creation_36__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_36__bases);
    Py_DECREF(tmp_class_creation_36__bases);
    tmp_class_creation_36__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
    Py_DECREF(tmp_class_creation_36__class_decl_dict);
    tmp_class_creation_36__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_36__metaclass);
    Py_DECREF(tmp_class_creation_36__metaclass);
    tmp_class_creation_36__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_36__prepared);
    Py_DECREF(tmp_class_creation_36__prepared);
    tmp_class_creation_36__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_306;
        PyObject *tmp_tuple_element_145;
        tmp_tuple_element_145 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[116]);

        if (unlikely(tmp_tuple_element_145 == NULL)) {
            tmp_tuple_element_145 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[116]);
        }

        if (tmp_tuple_element_145 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_111;
        }
        tmp_assign_source_306 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_306, 0, tmp_tuple_element_145);
        assert(tmp_class_creation_37__bases_orig == NULL);
        tmp_class_creation_37__bases_orig = tmp_assign_source_306;
    }
    {
        PyObject *tmp_assign_source_307;
        PyObject *tmp_dircall_arg1_37;
        CHECK_OBJECT(tmp_class_creation_37__bases_orig);
        tmp_dircall_arg1_37 = tmp_class_creation_37__bases_orig;
        Py_INCREF(tmp_dircall_arg1_37);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_37};
            tmp_assign_source_307 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_307 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_111;
        }
        assert(tmp_class_creation_37__bases == NULL);
        tmp_class_creation_37__bases = tmp_assign_source_307;
    }
    {
        PyObject *tmp_assign_source_308;
        tmp_assign_source_308 = PyDict_New();
        assert(tmp_class_creation_37__class_decl_dict == NULL);
        tmp_class_creation_37__class_decl_dict = tmp_assign_source_308;
    }
    {
        PyObject *tmp_assign_source_309;
        PyObject *tmp_metaclass_value_37;
        bool tmp_condition_result_217;
        PyObject *tmp_key_value_109;
        PyObject *tmp_dict_arg_value_109;
        PyObject *tmp_dict_arg_value_110;
        PyObject *tmp_key_value_110;
        nuitka_bool tmp_condition_result_218;
        int tmp_truth_name_37;
        PyObject *tmp_type_arg_73;
        PyObject *tmp_expression_value_194;
        PyObject *tmp_subscript_value_50;
        PyObject *tmp_bases_value_37;
        tmp_key_value_109 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
        tmp_dict_arg_value_109 = tmp_class_creation_37__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_109, tmp_key_value_109);
        assert(!(tmp_res == -1));
        tmp_condition_result_217 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_217 != false) {
            goto condexpr_true_73;
        } else {
            goto condexpr_false_73;
        }
        condexpr_true_73:;
        CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
        tmp_dict_arg_value_110 = tmp_class_creation_37__class_decl_dict;
        tmp_key_value_110 = mod_consts[57];
        tmp_metaclass_value_37 = DICT_GET_ITEM0(tmp_dict_arg_value_110, tmp_key_value_110);
        if (tmp_metaclass_value_37 == NULL) {
            tmp_metaclass_value_37 = Py_None;
        }
        assert(!(tmp_metaclass_value_37 == NULL));
        Py_INCREF(tmp_metaclass_value_37);
        goto condexpr_end_73;
        condexpr_false_73:;
        CHECK_OBJECT(tmp_class_creation_37__bases);
        tmp_truth_name_37 = CHECK_IF_TRUE(tmp_class_creation_37__bases);
        if (tmp_truth_name_37 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_111;
        }
        tmp_condition_result_218 = tmp_truth_name_37 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_218 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_74;
        } else {
            goto condexpr_false_74;
        }
        condexpr_true_74:;
        CHECK_OBJECT(tmp_class_creation_37__bases);
        tmp_expression_value_194 = tmp_class_creation_37__bases;
        tmp_subscript_value_50 = mod_consts[39];
        tmp_type_arg_73 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_194, tmp_subscript_value_50, 0);
        if (tmp_type_arg_73 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_111;
        }
        tmp_metaclass_value_37 = BUILTIN_TYPE1(tmp_type_arg_73);
        Py_DECREF(tmp_type_arg_73);
        if (tmp_metaclass_value_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_111;
        }
        goto condexpr_end_74;
        condexpr_false_74:;
        tmp_metaclass_value_37 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_37);
        condexpr_end_74:;
        condexpr_end_73:;
        CHECK_OBJECT(tmp_class_creation_37__bases);
        tmp_bases_value_37 = tmp_class_creation_37__bases;
        tmp_assign_source_309 = SELECT_METACLASS(tmp_metaclass_value_37, tmp_bases_value_37);
        Py_DECREF(tmp_metaclass_value_37);
        if (tmp_assign_source_309 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_111;
        }
        assert(tmp_class_creation_37__metaclass == NULL);
        tmp_class_creation_37__metaclass = tmp_assign_source_309;
    }
    {
        bool tmp_condition_result_219;
        PyObject *tmp_key_value_111;
        PyObject *tmp_dict_arg_value_111;
        tmp_key_value_111 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
        tmp_dict_arg_value_111 = tmp_class_creation_37__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_111, tmp_key_value_111);
        assert(!(tmp_res == -1));
        tmp_condition_result_219 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_219 != false) {
            goto branch_yes_145;
        } else {
            goto branch_no_145;
        }
    }
    branch_yes_145:;
    CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_37__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 324;

        goto try_except_handler_111;
    }
    branch_no_145:;
    {
        nuitka_bool tmp_condition_result_220;
        PyObject *tmp_expression_value_195;
        CHECK_OBJECT(tmp_class_creation_37__metaclass);
        tmp_expression_value_195 = tmp_class_creation_37__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_195, mod_consts[58]);
        tmp_condition_result_220 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_220 == NUITKA_BOOL_TRUE) {
            goto branch_yes_146;
        } else {
            goto branch_no_146;
        }
    }
    branch_yes_146:;
    {
        PyObject *tmp_assign_source_310;
        PyObject *tmp_called_value_73;
        PyObject *tmp_expression_value_196;
        PyObject *tmp_args_value_73;
        PyObject *tmp_tuple_element_146;
        PyObject *tmp_kwargs_value_73;
        CHECK_OBJECT(tmp_class_creation_37__metaclass);
        tmp_expression_value_196 = tmp_class_creation_37__metaclass;
        tmp_called_value_73 = LOOKUP_ATTRIBUTE(tmp_expression_value_196, mod_consts[58]);
        if (tmp_called_value_73 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_111;
        }
        tmp_tuple_element_146 = mod_consts[153];
        tmp_args_value_73 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_73, 0, tmp_tuple_element_146);
        CHECK_OBJECT(tmp_class_creation_37__bases);
        tmp_tuple_element_146 = tmp_class_creation_37__bases;
        PyTuple_SET_ITEM0(tmp_args_value_73, 1, tmp_tuple_element_146);
        CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
        tmp_kwargs_value_73 = tmp_class_creation_37__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 324;
        tmp_assign_source_310 = CALL_FUNCTION(tmp_called_value_73, tmp_args_value_73, tmp_kwargs_value_73);
        Py_DECREF(tmp_called_value_73);
        Py_DECREF(tmp_args_value_73);
        if (tmp_assign_source_310 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_111;
        }
        assert(tmp_class_creation_37__prepared == NULL);
        tmp_class_creation_37__prepared = tmp_assign_source_310;
    }
    {
        bool tmp_condition_result_221;
        PyObject *tmp_operand_value_37;
        PyObject *tmp_expression_value_197;
        CHECK_OBJECT(tmp_class_creation_37__prepared);
        tmp_expression_value_197 = tmp_class_creation_37__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_197, mod_consts[60]);
        tmp_operand_value_37 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_37);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_111;
        }
        tmp_condition_result_221 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_221 != false) {
            goto branch_yes_147;
        } else {
            goto branch_no_147;
        }
    }
    branch_yes_147:;
    {
        PyObject *tmp_raise_type_37;
        PyObject *tmp_raise_value_37;
        PyObject *tmp_left_value_37;
        PyObject *tmp_right_value_37;
        PyObject *tmp_tuple_element_147;
        PyObject *tmp_getattr_target_37;
        PyObject *tmp_getattr_attr_37;
        PyObject *tmp_getattr_default_37;
        tmp_raise_type_37 = PyExc_TypeError;
        tmp_left_value_37 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_37__metaclass);
        tmp_getattr_target_37 = tmp_class_creation_37__metaclass;
        tmp_getattr_attr_37 = mod_consts[62];
        tmp_getattr_default_37 = mod_consts[63];
        tmp_tuple_element_147 = BUILTIN_GETATTR(tmp_getattr_target_37, tmp_getattr_attr_37, tmp_getattr_default_37);
        if (tmp_tuple_element_147 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_111;
        }
        tmp_right_value_37 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_198;
            PyObject *tmp_type_arg_74;
            PyTuple_SET_ITEM(tmp_right_value_37, 0, tmp_tuple_element_147);
            CHECK_OBJECT(tmp_class_creation_37__prepared);
            tmp_type_arg_74 = tmp_class_creation_37__prepared;
            tmp_expression_value_198 = BUILTIN_TYPE1(tmp_type_arg_74);
            assert(!(tmp_expression_value_198 == NULL));
            tmp_tuple_element_147 = LOOKUP_ATTRIBUTE(tmp_expression_value_198, mod_consts[62]);
            Py_DECREF(tmp_expression_value_198);
            if (tmp_tuple_element_147 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 324;

                goto tuple_build_exception_37;
            }
            PyTuple_SET_ITEM(tmp_right_value_37, 1, tmp_tuple_element_147);
        }
        goto tuple_build_noexception_37;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_37:;
        Py_DECREF(tmp_right_value_37);
        goto try_except_handler_111;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_37:;
        tmp_raise_value_37 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_37, tmp_right_value_37);
        Py_DECREF(tmp_right_value_37);
        if (tmp_raise_value_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_111;
        }
        exception_type = tmp_raise_type_37;
        Py_INCREF(tmp_raise_type_37);
        exception_value = tmp_raise_value_37;
        exception_lineno = 324;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_111;
    }
    branch_no_147:;
    goto branch_end_146;
    branch_no_146:;
    {
        PyObject *tmp_assign_source_311;
        tmp_assign_source_311 = PyDict_New();
        assert(tmp_class_creation_37__prepared == NULL);
        tmp_class_creation_37__prepared = tmp_assign_source_311;
    }
    branch_end_146:;
    {
        PyObject *tmp_assign_source_312;
        {
            PyObject *tmp_set_locals_37;
            CHECK_OBJECT(tmp_class_creation_37__prepared);
            tmp_set_locals_37 = tmp_class_creation_37__prepared;
            locals_aiohttp$web_exceptions$$$class__37_HTTPUnsupportedMediaType_324 = tmp_set_locals_37;
            Py_INCREF(tmp_set_locals_37);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__37_HTTPUnsupportedMediaType_324, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_113;
        }
        tmp_dictset_value = mod_consts[153];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__37_HTTPUnsupportedMediaType_324, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_113;
        }
        if (isFrameUnusable(cache_frame_2af87b89d09c5805b18af331cdb15cbf_34)) {
            Py_XDECREF(cache_frame_2af87b89d09c5805b18af331cdb15cbf_34);

#if _DEBUG_REFCOUNTS
            if (cache_frame_2af87b89d09c5805b18af331cdb15cbf_34 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_2af87b89d09c5805b18af331cdb15cbf_34 = MAKE_FUNCTION_FRAME(codeobj_2af87b89d09c5805b18af331cdb15cbf, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_2af87b89d09c5805b18af331cdb15cbf_34->m_type_description == NULL);
        frame_2af87b89d09c5805b18af331cdb15cbf_34 = cache_frame_2af87b89d09c5805b18af331cdb15cbf_34;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_2af87b89d09c5805b18af331cdb15cbf_34);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_2af87b89d09c5805b18af331cdb15cbf_34) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[154];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__37_HTTPUnsupportedMediaType_324, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 325;
            type_description_2 = "o";
            goto frame_exception_exit_34;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_2af87b89d09c5805b18af331cdb15cbf_34);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_33;

        frame_exception_exit_34:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_2af87b89d09c5805b18af331cdb15cbf_34);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_2af87b89d09c5805b18af331cdb15cbf_34, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_2af87b89d09c5805b18af331cdb15cbf_34->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_2af87b89d09c5805b18af331cdb15cbf_34, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_2af87b89d09c5805b18af331cdb15cbf_34,
            type_description_2,
            outline_36_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_2af87b89d09c5805b18af331cdb15cbf_34 == cache_frame_2af87b89d09c5805b18af331cdb15cbf_34) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_2af87b89d09c5805b18af331cdb15cbf_34);
            cache_frame_2af87b89d09c5805b18af331cdb15cbf_34 = NULL;
        }

        assertFrameObject(frame_2af87b89d09c5805b18af331cdb15cbf_34);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_33;

        frame_no_exception_33:;
        goto skip_nested_handling_33;
        nested_frame_exit_33:;

        goto try_except_handler_113;
        skip_nested_handling_33:;
        {
            nuitka_bool tmp_condition_result_222;
            PyObject *tmp_cmp_expr_left_37;
            PyObject *tmp_cmp_expr_right_37;
            CHECK_OBJECT(tmp_class_creation_37__bases);
            tmp_cmp_expr_left_37 = tmp_class_creation_37__bases;
            CHECK_OBJECT(tmp_class_creation_37__bases_orig);
            tmp_cmp_expr_right_37 = tmp_class_creation_37__bases_orig;
            tmp_condition_result_222 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_37, tmp_cmp_expr_right_37);
            if (tmp_condition_result_222 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 324;

                goto try_except_handler_113;
            }
            if (tmp_condition_result_222 == NUITKA_BOOL_TRUE) {
                goto branch_yes_148;
            } else {
                goto branch_no_148;
            }
            assert(tmp_condition_result_222 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_148:;
        CHECK_OBJECT(tmp_class_creation_37__bases_orig);
        tmp_dictset_value = tmp_class_creation_37__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__37_HTTPUnsupportedMediaType_324, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;

            goto try_except_handler_113;
        }
        branch_no_148:;
        {
            PyObject *tmp_assign_source_313;
            PyObject *tmp_called_value_74;
            PyObject *tmp_args_value_74;
            PyObject *tmp_tuple_element_148;
            PyObject *tmp_kwargs_value_74;
            CHECK_OBJECT(tmp_class_creation_37__metaclass);
            tmp_called_value_74 = tmp_class_creation_37__metaclass;
            tmp_tuple_element_148 = mod_consts[153];
            tmp_args_value_74 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_74, 0, tmp_tuple_element_148);
            CHECK_OBJECT(tmp_class_creation_37__bases);
            tmp_tuple_element_148 = tmp_class_creation_37__bases;
            PyTuple_SET_ITEM0(tmp_args_value_74, 1, tmp_tuple_element_148);
            tmp_tuple_element_148 = locals_aiohttp$web_exceptions$$$class__37_HTTPUnsupportedMediaType_324;
            PyTuple_SET_ITEM0(tmp_args_value_74, 2, tmp_tuple_element_148);
            CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
            tmp_kwargs_value_74 = tmp_class_creation_37__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 324;
            tmp_assign_source_313 = CALL_FUNCTION(tmp_called_value_74, tmp_args_value_74, tmp_kwargs_value_74);
            Py_DECREF(tmp_args_value_74);
            if (tmp_assign_source_313 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 324;

                goto try_except_handler_113;
            }
            assert(outline_36_var___class__ == NULL);
            outline_36_var___class__ = tmp_assign_source_313;
        }
        CHECK_OBJECT(outline_36_var___class__);
        tmp_assign_source_312 = outline_36_var___class__;
        Py_INCREF(tmp_assign_source_312);
        goto try_return_handler_113;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_113:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__37_HTTPUnsupportedMediaType_324);
        locals_aiohttp$web_exceptions$$$class__37_HTTPUnsupportedMediaType_324 = NULL;
        goto try_return_handler_112;
        // Exception handler code:
        try_except_handler_113:;
        exception_keeper_type_111 = exception_type;
        exception_keeper_value_111 = exception_value;
        exception_keeper_tb_111 = exception_tb;
        exception_keeper_lineno_111 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__37_HTTPUnsupportedMediaType_324);
        locals_aiohttp$web_exceptions$$$class__37_HTTPUnsupportedMediaType_324 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_111;
        exception_value = exception_keeper_value_111;
        exception_tb = exception_keeper_tb_111;
        exception_lineno = exception_keeper_lineno_111;

        goto try_except_handler_112;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_112:;
        CHECK_OBJECT(outline_36_var___class__);
        Py_DECREF(outline_36_var___class__);
        outline_36_var___class__ = NULL;
        goto outline_result_37;
        // Exception handler code:
        try_except_handler_112:;
        exception_keeper_type_112 = exception_type;
        exception_keeper_value_112 = exception_value;
        exception_keeper_tb_112 = exception_tb;
        exception_keeper_lineno_112 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_112;
        exception_value = exception_keeper_value_112;
        exception_tb = exception_keeper_tb_112;
        exception_lineno = exception_keeper_lineno_112;

        goto outline_exception_37;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_37:;
        exception_lineno = 324;
        goto try_except_handler_111;
        outline_result_37:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[153], tmp_assign_source_312);
    }
    goto try_end_39;
    // Exception handler code:
    try_except_handler_111:;
    exception_keeper_type_113 = exception_type;
    exception_keeper_value_113 = exception_value;
    exception_keeper_tb_113 = exception_tb;
    exception_keeper_lineno_113 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_37__bases_orig);
    tmp_class_creation_37__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_37__bases);
    tmp_class_creation_37__bases = NULL;
    Py_XDECREF(tmp_class_creation_37__class_decl_dict);
    tmp_class_creation_37__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_37__metaclass);
    tmp_class_creation_37__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_37__prepared);
    tmp_class_creation_37__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_113;
    exception_value = exception_keeper_value_113;
    exception_tb = exception_keeper_tb_113;
    exception_lineno = exception_keeper_lineno_113;

    goto frame_exception_exit_1;
    // End of try:
    try_end_39:;
    CHECK_OBJECT(tmp_class_creation_37__bases_orig);
    Py_DECREF(tmp_class_creation_37__bases_orig);
    tmp_class_creation_37__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_37__bases);
    Py_DECREF(tmp_class_creation_37__bases);
    tmp_class_creation_37__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
    Py_DECREF(tmp_class_creation_37__class_decl_dict);
    tmp_class_creation_37__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_37__metaclass);
    Py_DECREF(tmp_class_creation_37__metaclass);
    tmp_class_creation_37__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_37__prepared);
    Py_DECREF(tmp_class_creation_37__prepared);
    tmp_class_creation_37__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_314;
        PyObject *tmp_tuple_element_149;
        tmp_tuple_element_149 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[116]);

        if (unlikely(tmp_tuple_element_149 == NULL)) {
            tmp_tuple_element_149 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[116]);
        }

        if (tmp_tuple_element_149 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_114;
        }
        tmp_assign_source_314 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_314, 0, tmp_tuple_element_149);
        assert(tmp_class_creation_38__bases_orig == NULL);
        tmp_class_creation_38__bases_orig = tmp_assign_source_314;
    }
    {
        PyObject *tmp_assign_source_315;
        PyObject *tmp_dircall_arg1_38;
        CHECK_OBJECT(tmp_class_creation_38__bases_orig);
        tmp_dircall_arg1_38 = tmp_class_creation_38__bases_orig;
        Py_INCREF(tmp_dircall_arg1_38);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_38};
            tmp_assign_source_315 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_315 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_114;
        }
        assert(tmp_class_creation_38__bases == NULL);
        tmp_class_creation_38__bases = tmp_assign_source_315;
    }
    {
        PyObject *tmp_assign_source_316;
        tmp_assign_source_316 = PyDict_New();
        assert(tmp_class_creation_38__class_decl_dict == NULL);
        tmp_class_creation_38__class_decl_dict = tmp_assign_source_316;
    }
    {
        PyObject *tmp_assign_source_317;
        PyObject *tmp_metaclass_value_38;
        bool tmp_condition_result_223;
        PyObject *tmp_key_value_112;
        PyObject *tmp_dict_arg_value_112;
        PyObject *tmp_dict_arg_value_113;
        PyObject *tmp_key_value_113;
        nuitka_bool tmp_condition_result_224;
        int tmp_truth_name_38;
        PyObject *tmp_type_arg_75;
        PyObject *tmp_expression_value_199;
        PyObject *tmp_subscript_value_51;
        PyObject *tmp_bases_value_38;
        tmp_key_value_112 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
        tmp_dict_arg_value_112 = tmp_class_creation_38__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_112, tmp_key_value_112);
        assert(!(tmp_res == -1));
        tmp_condition_result_223 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_223 != false) {
            goto condexpr_true_75;
        } else {
            goto condexpr_false_75;
        }
        condexpr_true_75:;
        CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
        tmp_dict_arg_value_113 = tmp_class_creation_38__class_decl_dict;
        tmp_key_value_113 = mod_consts[57];
        tmp_metaclass_value_38 = DICT_GET_ITEM0(tmp_dict_arg_value_113, tmp_key_value_113);
        if (tmp_metaclass_value_38 == NULL) {
            tmp_metaclass_value_38 = Py_None;
        }
        assert(!(tmp_metaclass_value_38 == NULL));
        Py_INCREF(tmp_metaclass_value_38);
        goto condexpr_end_75;
        condexpr_false_75:;
        CHECK_OBJECT(tmp_class_creation_38__bases);
        tmp_truth_name_38 = CHECK_IF_TRUE(tmp_class_creation_38__bases);
        if (tmp_truth_name_38 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_114;
        }
        tmp_condition_result_224 = tmp_truth_name_38 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_224 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_76;
        } else {
            goto condexpr_false_76;
        }
        condexpr_true_76:;
        CHECK_OBJECT(tmp_class_creation_38__bases);
        tmp_expression_value_199 = tmp_class_creation_38__bases;
        tmp_subscript_value_51 = mod_consts[39];
        tmp_type_arg_75 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_199, tmp_subscript_value_51, 0);
        if (tmp_type_arg_75 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_114;
        }
        tmp_metaclass_value_38 = BUILTIN_TYPE1(tmp_type_arg_75);
        Py_DECREF(tmp_type_arg_75);
        if (tmp_metaclass_value_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_114;
        }
        goto condexpr_end_76;
        condexpr_false_76:;
        tmp_metaclass_value_38 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_38);
        condexpr_end_76:;
        condexpr_end_75:;
        CHECK_OBJECT(tmp_class_creation_38__bases);
        tmp_bases_value_38 = tmp_class_creation_38__bases;
        tmp_assign_source_317 = SELECT_METACLASS(tmp_metaclass_value_38, tmp_bases_value_38);
        Py_DECREF(tmp_metaclass_value_38);
        if (tmp_assign_source_317 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_114;
        }
        assert(tmp_class_creation_38__metaclass == NULL);
        tmp_class_creation_38__metaclass = tmp_assign_source_317;
    }
    {
        bool tmp_condition_result_225;
        PyObject *tmp_key_value_114;
        PyObject *tmp_dict_arg_value_114;
        tmp_key_value_114 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
        tmp_dict_arg_value_114 = tmp_class_creation_38__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_114, tmp_key_value_114);
        assert(!(tmp_res == -1));
        tmp_condition_result_225 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_225 != false) {
            goto branch_yes_149;
        } else {
            goto branch_no_149;
        }
    }
    branch_yes_149:;
    CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_38__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 328;

        goto try_except_handler_114;
    }
    branch_no_149:;
    {
        nuitka_bool tmp_condition_result_226;
        PyObject *tmp_expression_value_200;
        CHECK_OBJECT(tmp_class_creation_38__metaclass);
        tmp_expression_value_200 = tmp_class_creation_38__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_200, mod_consts[58]);
        tmp_condition_result_226 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_226 == NUITKA_BOOL_TRUE) {
            goto branch_yes_150;
        } else {
            goto branch_no_150;
        }
    }
    branch_yes_150:;
    {
        PyObject *tmp_assign_source_318;
        PyObject *tmp_called_value_75;
        PyObject *tmp_expression_value_201;
        PyObject *tmp_args_value_75;
        PyObject *tmp_tuple_element_150;
        PyObject *tmp_kwargs_value_75;
        CHECK_OBJECT(tmp_class_creation_38__metaclass);
        tmp_expression_value_201 = tmp_class_creation_38__metaclass;
        tmp_called_value_75 = LOOKUP_ATTRIBUTE(tmp_expression_value_201, mod_consts[58]);
        if (tmp_called_value_75 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_114;
        }
        tmp_tuple_element_150 = mod_consts[155];
        tmp_args_value_75 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_75, 0, tmp_tuple_element_150);
        CHECK_OBJECT(tmp_class_creation_38__bases);
        tmp_tuple_element_150 = tmp_class_creation_38__bases;
        PyTuple_SET_ITEM0(tmp_args_value_75, 1, tmp_tuple_element_150);
        CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
        tmp_kwargs_value_75 = tmp_class_creation_38__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 328;
        tmp_assign_source_318 = CALL_FUNCTION(tmp_called_value_75, tmp_args_value_75, tmp_kwargs_value_75);
        Py_DECREF(tmp_called_value_75);
        Py_DECREF(tmp_args_value_75);
        if (tmp_assign_source_318 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_114;
        }
        assert(tmp_class_creation_38__prepared == NULL);
        tmp_class_creation_38__prepared = tmp_assign_source_318;
    }
    {
        bool tmp_condition_result_227;
        PyObject *tmp_operand_value_38;
        PyObject *tmp_expression_value_202;
        CHECK_OBJECT(tmp_class_creation_38__prepared);
        tmp_expression_value_202 = tmp_class_creation_38__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_202, mod_consts[60]);
        tmp_operand_value_38 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_38);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_114;
        }
        tmp_condition_result_227 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_227 != false) {
            goto branch_yes_151;
        } else {
            goto branch_no_151;
        }
    }
    branch_yes_151:;
    {
        PyObject *tmp_raise_type_38;
        PyObject *tmp_raise_value_38;
        PyObject *tmp_left_value_38;
        PyObject *tmp_right_value_38;
        PyObject *tmp_tuple_element_151;
        PyObject *tmp_getattr_target_38;
        PyObject *tmp_getattr_attr_38;
        PyObject *tmp_getattr_default_38;
        tmp_raise_type_38 = PyExc_TypeError;
        tmp_left_value_38 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_38__metaclass);
        tmp_getattr_target_38 = tmp_class_creation_38__metaclass;
        tmp_getattr_attr_38 = mod_consts[62];
        tmp_getattr_default_38 = mod_consts[63];
        tmp_tuple_element_151 = BUILTIN_GETATTR(tmp_getattr_target_38, tmp_getattr_attr_38, tmp_getattr_default_38);
        if (tmp_tuple_element_151 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_114;
        }
        tmp_right_value_38 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_203;
            PyObject *tmp_type_arg_76;
            PyTuple_SET_ITEM(tmp_right_value_38, 0, tmp_tuple_element_151);
            CHECK_OBJECT(tmp_class_creation_38__prepared);
            tmp_type_arg_76 = tmp_class_creation_38__prepared;
            tmp_expression_value_203 = BUILTIN_TYPE1(tmp_type_arg_76);
            assert(!(tmp_expression_value_203 == NULL));
            tmp_tuple_element_151 = LOOKUP_ATTRIBUTE(tmp_expression_value_203, mod_consts[62]);
            Py_DECREF(tmp_expression_value_203);
            if (tmp_tuple_element_151 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 328;

                goto tuple_build_exception_38;
            }
            PyTuple_SET_ITEM(tmp_right_value_38, 1, tmp_tuple_element_151);
        }
        goto tuple_build_noexception_38;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_38:;
        Py_DECREF(tmp_right_value_38);
        goto try_except_handler_114;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_38:;
        tmp_raise_value_38 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_38, tmp_right_value_38);
        Py_DECREF(tmp_right_value_38);
        if (tmp_raise_value_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_114;
        }
        exception_type = tmp_raise_type_38;
        Py_INCREF(tmp_raise_type_38);
        exception_value = tmp_raise_value_38;
        exception_lineno = 328;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_114;
    }
    branch_no_151:;
    goto branch_end_150;
    branch_no_150:;
    {
        PyObject *tmp_assign_source_319;
        tmp_assign_source_319 = PyDict_New();
        assert(tmp_class_creation_38__prepared == NULL);
        tmp_class_creation_38__prepared = tmp_assign_source_319;
    }
    branch_end_150:;
    {
        PyObject *tmp_assign_source_320;
        {
            PyObject *tmp_set_locals_38;
            CHECK_OBJECT(tmp_class_creation_38__prepared);
            tmp_set_locals_38 = tmp_class_creation_38__prepared;
            locals_aiohttp$web_exceptions$$$class__38_HTTPRequestRangeNotSatisfiable_328 = tmp_set_locals_38;
            Py_INCREF(tmp_set_locals_38);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__38_HTTPRequestRangeNotSatisfiable_328, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_116;
        }
        tmp_dictset_value = mod_consts[155];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__38_HTTPRequestRangeNotSatisfiable_328, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_116;
        }
        if (isFrameUnusable(cache_frame_a9c95723eb0c85289c3d8f02ca34f1a9_35)) {
            Py_XDECREF(cache_frame_a9c95723eb0c85289c3d8f02ca34f1a9_35);

#if _DEBUG_REFCOUNTS
            if (cache_frame_a9c95723eb0c85289c3d8f02ca34f1a9_35 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_a9c95723eb0c85289c3d8f02ca34f1a9_35 = MAKE_FUNCTION_FRAME(codeobj_a9c95723eb0c85289c3d8f02ca34f1a9, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_a9c95723eb0c85289c3d8f02ca34f1a9_35->m_type_description == NULL);
        frame_a9c95723eb0c85289c3d8f02ca34f1a9_35 = cache_frame_a9c95723eb0c85289c3d8f02ca34f1a9_35;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_a9c95723eb0c85289c3d8f02ca34f1a9_35);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_a9c95723eb0c85289c3d8f02ca34f1a9_35) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[156];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__38_HTTPRequestRangeNotSatisfiable_328, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 329;
            type_description_2 = "o";
            goto frame_exception_exit_35;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a9c95723eb0c85289c3d8f02ca34f1a9_35);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_34;

        frame_exception_exit_35:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a9c95723eb0c85289c3d8f02ca34f1a9_35);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_a9c95723eb0c85289c3d8f02ca34f1a9_35, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_a9c95723eb0c85289c3d8f02ca34f1a9_35->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_a9c95723eb0c85289c3d8f02ca34f1a9_35, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_a9c95723eb0c85289c3d8f02ca34f1a9_35,
            type_description_2,
            outline_37_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_a9c95723eb0c85289c3d8f02ca34f1a9_35 == cache_frame_a9c95723eb0c85289c3d8f02ca34f1a9_35) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_a9c95723eb0c85289c3d8f02ca34f1a9_35);
            cache_frame_a9c95723eb0c85289c3d8f02ca34f1a9_35 = NULL;
        }

        assertFrameObject(frame_a9c95723eb0c85289c3d8f02ca34f1a9_35);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_34;

        frame_no_exception_34:;
        goto skip_nested_handling_34;
        nested_frame_exit_34:;

        goto try_except_handler_116;
        skip_nested_handling_34:;
        {
            nuitka_bool tmp_condition_result_228;
            PyObject *tmp_cmp_expr_left_38;
            PyObject *tmp_cmp_expr_right_38;
            CHECK_OBJECT(tmp_class_creation_38__bases);
            tmp_cmp_expr_left_38 = tmp_class_creation_38__bases;
            CHECK_OBJECT(tmp_class_creation_38__bases_orig);
            tmp_cmp_expr_right_38 = tmp_class_creation_38__bases_orig;
            tmp_condition_result_228 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_38, tmp_cmp_expr_right_38);
            if (tmp_condition_result_228 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 328;

                goto try_except_handler_116;
            }
            if (tmp_condition_result_228 == NUITKA_BOOL_TRUE) {
                goto branch_yes_152;
            } else {
                goto branch_no_152;
            }
            assert(tmp_condition_result_228 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_152:;
        CHECK_OBJECT(tmp_class_creation_38__bases_orig);
        tmp_dictset_value = tmp_class_creation_38__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__38_HTTPRequestRangeNotSatisfiable_328, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;

            goto try_except_handler_116;
        }
        branch_no_152:;
        {
            PyObject *tmp_assign_source_321;
            PyObject *tmp_called_value_76;
            PyObject *tmp_args_value_76;
            PyObject *tmp_tuple_element_152;
            PyObject *tmp_kwargs_value_76;
            CHECK_OBJECT(tmp_class_creation_38__metaclass);
            tmp_called_value_76 = tmp_class_creation_38__metaclass;
            tmp_tuple_element_152 = mod_consts[155];
            tmp_args_value_76 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_76, 0, tmp_tuple_element_152);
            CHECK_OBJECT(tmp_class_creation_38__bases);
            tmp_tuple_element_152 = tmp_class_creation_38__bases;
            PyTuple_SET_ITEM0(tmp_args_value_76, 1, tmp_tuple_element_152);
            tmp_tuple_element_152 = locals_aiohttp$web_exceptions$$$class__38_HTTPRequestRangeNotSatisfiable_328;
            PyTuple_SET_ITEM0(tmp_args_value_76, 2, tmp_tuple_element_152);
            CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
            tmp_kwargs_value_76 = tmp_class_creation_38__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 328;
            tmp_assign_source_321 = CALL_FUNCTION(tmp_called_value_76, tmp_args_value_76, tmp_kwargs_value_76);
            Py_DECREF(tmp_args_value_76);
            if (tmp_assign_source_321 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 328;

                goto try_except_handler_116;
            }
            assert(outline_37_var___class__ == NULL);
            outline_37_var___class__ = tmp_assign_source_321;
        }
        CHECK_OBJECT(outline_37_var___class__);
        tmp_assign_source_320 = outline_37_var___class__;
        Py_INCREF(tmp_assign_source_320);
        goto try_return_handler_116;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_116:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__38_HTTPRequestRangeNotSatisfiable_328);
        locals_aiohttp$web_exceptions$$$class__38_HTTPRequestRangeNotSatisfiable_328 = NULL;
        goto try_return_handler_115;
        // Exception handler code:
        try_except_handler_116:;
        exception_keeper_type_114 = exception_type;
        exception_keeper_value_114 = exception_value;
        exception_keeper_tb_114 = exception_tb;
        exception_keeper_lineno_114 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__38_HTTPRequestRangeNotSatisfiable_328);
        locals_aiohttp$web_exceptions$$$class__38_HTTPRequestRangeNotSatisfiable_328 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_114;
        exception_value = exception_keeper_value_114;
        exception_tb = exception_keeper_tb_114;
        exception_lineno = exception_keeper_lineno_114;

        goto try_except_handler_115;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_115:;
        CHECK_OBJECT(outline_37_var___class__);
        Py_DECREF(outline_37_var___class__);
        outline_37_var___class__ = NULL;
        goto outline_result_38;
        // Exception handler code:
        try_except_handler_115:;
        exception_keeper_type_115 = exception_type;
        exception_keeper_value_115 = exception_value;
        exception_keeper_tb_115 = exception_tb;
        exception_keeper_lineno_115 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_115;
        exception_value = exception_keeper_value_115;
        exception_tb = exception_keeper_tb_115;
        exception_lineno = exception_keeper_lineno_115;

        goto outline_exception_38;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_38:;
        exception_lineno = 328;
        goto try_except_handler_114;
        outline_result_38:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[155], tmp_assign_source_320);
    }
    goto try_end_40;
    // Exception handler code:
    try_except_handler_114:;
    exception_keeper_type_116 = exception_type;
    exception_keeper_value_116 = exception_value;
    exception_keeper_tb_116 = exception_tb;
    exception_keeper_lineno_116 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_38__bases_orig);
    tmp_class_creation_38__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_38__bases);
    tmp_class_creation_38__bases = NULL;
    Py_XDECREF(tmp_class_creation_38__class_decl_dict);
    tmp_class_creation_38__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_38__metaclass);
    tmp_class_creation_38__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_38__prepared);
    tmp_class_creation_38__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_116;
    exception_value = exception_keeper_value_116;
    exception_tb = exception_keeper_tb_116;
    exception_lineno = exception_keeper_lineno_116;

    goto frame_exception_exit_1;
    // End of try:
    try_end_40:;
    CHECK_OBJECT(tmp_class_creation_38__bases_orig);
    Py_DECREF(tmp_class_creation_38__bases_orig);
    tmp_class_creation_38__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_38__bases);
    Py_DECREF(tmp_class_creation_38__bases);
    tmp_class_creation_38__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
    Py_DECREF(tmp_class_creation_38__class_decl_dict);
    tmp_class_creation_38__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_38__metaclass);
    Py_DECREF(tmp_class_creation_38__metaclass);
    tmp_class_creation_38__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_38__prepared);
    Py_DECREF(tmp_class_creation_38__prepared);
    tmp_class_creation_38__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_322;
        PyObject *tmp_tuple_element_153;
        tmp_tuple_element_153 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[116]);

        if (unlikely(tmp_tuple_element_153 == NULL)) {
            tmp_tuple_element_153 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[116]);
        }

        if (tmp_tuple_element_153 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_117;
        }
        tmp_assign_source_322 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_322, 0, tmp_tuple_element_153);
        assert(tmp_class_creation_39__bases_orig == NULL);
        tmp_class_creation_39__bases_orig = tmp_assign_source_322;
    }
    {
        PyObject *tmp_assign_source_323;
        PyObject *tmp_dircall_arg1_39;
        CHECK_OBJECT(tmp_class_creation_39__bases_orig);
        tmp_dircall_arg1_39 = tmp_class_creation_39__bases_orig;
        Py_INCREF(tmp_dircall_arg1_39);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_39};
            tmp_assign_source_323 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_323 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_117;
        }
        assert(tmp_class_creation_39__bases == NULL);
        tmp_class_creation_39__bases = tmp_assign_source_323;
    }
    {
        PyObject *tmp_assign_source_324;
        tmp_assign_source_324 = PyDict_New();
        assert(tmp_class_creation_39__class_decl_dict == NULL);
        tmp_class_creation_39__class_decl_dict = tmp_assign_source_324;
    }
    {
        PyObject *tmp_assign_source_325;
        PyObject *tmp_metaclass_value_39;
        bool tmp_condition_result_229;
        PyObject *tmp_key_value_115;
        PyObject *tmp_dict_arg_value_115;
        PyObject *tmp_dict_arg_value_116;
        PyObject *tmp_key_value_116;
        nuitka_bool tmp_condition_result_230;
        int tmp_truth_name_39;
        PyObject *tmp_type_arg_77;
        PyObject *tmp_expression_value_204;
        PyObject *tmp_subscript_value_52;
        PyObject *tmp_bases_value_39;
        tmp_key_value_115 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
        tmp_dict_arg_value_115 = tmp_class_creation_39__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_115, tmp_key_value_115);
        assert(!(tmp_res == -1));
        tmp_condition_result_229 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_229 != false) {
            goto condexpr_true_77;
        } else {
            goto condexpr_false_77;
        }
        condexpr_true_77:;
        CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
        tmp_dict_arg_value_116 = tmp_class_creation_39__class_decl_dict;
        tmp_key_value_116 = mod_consts[57];
        tmp_metaclass_value_39 = DICT_GET_ITEM0(tmp_dict_arg_value_116, tmp_key_value_116);
        if (tmp_metaclass_value_39 == NULL) {
            tmp_metaclass_value_39 = Py_None;
        }
        assert(!(tmp_metaclass_value_39 == NULL));
        Py_INCREF(tmp_metaclass_value_39);
        goto condexpr_end_77;
        condexpr_false_77:;
        CHECK_OBJECT(tmp_class_creation_39__bases);
        tmp_truth_name_39 = CHECK_IF_TRUE(tmp_class_creation_39__bases);
        if (tmp_truth_name_39 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_117;
        }
        tmp_condition_result_230 = tmp_truth_name_39 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_230 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_78;
        } else {
            goto condexpr_false_78;
        }
        condexpr_true_78:;
        CHECK_OBJECT(tmp_class_creation_39__bases);
        tmp_expression_value_204 = tmp_class_creation_39__bases;
        tmp_subscript_value_52 = mod_consts[39];
        tmp_type_arg_77 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_204, tmp_subscript_value_52, 0);
        if (tmp_type_arg_77 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_117;
        }
        tmp_metaclass_value_39 = BUILTIN_TYPE1(tmp_type_arg_77);
        Py_DECREF(tmp_type_arg_77);
        if (tmp_metaclass_value_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_117;
        }
        goto condexpr_end_78;
        condexpr_false_78:;
        tmp_metaclass_value_39 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_39);
        condexpr_end_78:;
        condexpr_end_77:;
        CHECK_OBJECT(tmp_class_creation_39__bases);
        tmp_bases_value_39 = tmp_class_creation_39__bases;
        tmp_assign_source_325 = SELECT_METACLASS(tmp_metaclass_value_39, tmp_bases_value_39);
        Py_DECREF(tmp_metaclass_value_39);
        if (tmp_assign_source_325 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_117;
        }
        assert(tmp_class_creation_39__metaclass == NULL);
        tmp_class_creation_39__metaclass = tmp_assign_source_325;
    }
    {
        bool tmp_condition_result_231;
        PyObject *tmp_key_value_117;
        PyObject *tmp_dict_arg_value_117;
        tmp_key_value_117 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
        tmp_dict_arg_value_117 = tmp_class_creation_39__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_117, tmp_key_value_117);
        assert(!(tmp_res == -1));
        tmp_condition_result_231 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_231 != false) {
            goto branch_yes_153;
        } else {
            goto branch_no_153;
        }
    }
    branch_yes_153:;
    CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_39__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 332;

        goto try_except_handler_117;
    }
    branch_no_153:;
    {
        nuitka_bool tmp_condition_result_232;
        PyObject *tmp_expression_value_205;
        CHECK_OBJECT(tmp_class_creation_39__metaclass);
        tmp_expression_value_205 = tmp_class_creation_39__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_205, mod_consts[58]);
        tmp_condition_result_232 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_232 == NUITKA_BOOL_TRUE) {
            goto branch_yes_154;
        } else {
            goto branch_no_154;
        }
    }
    branch_yes_154:;
    {
        PyObject *tmp_assign_source_326;
        PyObject *tmp_called_value_77;
        PyObject *tmp_expression_value_206;
        PyObject *tmp_args_value_77;
        PyObject *tmp_tuple_element_154;
        PyObject *tmp_kwargs_value_77;
        CHECK_OBJECT(tmp_class_creation_39__metaclass);
        tmp_expression_value_206 = tmp_class_creation_39__metaclass;
        tmp_called_value_77 = LOOKUP_ATTRIBUTE(tmp_expression_value_206, mod_consts[58]);
        if (tmp_called_value_77 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_117;
        }
        tmp_tuple_element_154 = mod_consts[157];
        tmp_args_value_77 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_77, 0, tmp_tuple_element_154);
        CHECK_OBJECT(tmp_class_creation_39__bases);
        tmp_tuple_element_154 = tmp_class_creation_39__bases;
        PyTuple_SET_ITEM0(tmp_args_value_77, 1, tmp_tuple_element_154);
        CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
        tmp_kwargs_value_77 = tmp_class_creation_39__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 332;
        tmp_assign_source_326 = CALL_FUNCTION(tmp_called_value_77, tmp_args_value_77, tmp_kwargs_value_77);
        Py_DECREF(tmp_called_value_77);
        Py_DECREF(tmp_args_value_77);
        if (tmp_assign_source_326 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_117;
        }
        assert(tmp_class_creation_39__prepared == NULL);
        tmp_class_creation_39__prepared = tmp_assign_source_326;
    }
    {
        bool tmp_condition_result_233;
        PyObject *tmp_operand_value_39;
        PyObject *tmp_expression_value_207;
        CHECK_OBJECT(tmp_class_creation_39__prepared);
        tmp_expression_value_207 = tmp_class_creation_39__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_207, mod_consts[60]);
        tmp_operand_value_39 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_39);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_117;
        }
        tmp_condition_result_233 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_233 != false) {
            goto branch_yes_155;
        } else {
            goto branch_no_155;
        }
    }
    branch_yes_155:;
    {
        PyObject *tmp_raise_type_39;
        PyObject *tmp_raise_value_39;
        PyObject *tmp_left_value_39;
        PyObject *tmp_right_value_39;
        PyObject *tmp_tuple_element_155;
        PyObject *tmp_getattr_target_39;
        PyObject *tmp_getattr_attr_39;
        PyObject *tmp_getattr_default_39;
        tmp_raise_type_39 = PyExc_TypeError;
        tmp_left_value_39 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_39__metaclass);
        tmp_getattr_target_39 = tmp_class_creation_39__metaclass;
        tmp_getattr_attr_39 = mod_consts[62];
        tmp_getattr_default_39 = mod_consts[63];
        tmp_tuple_element_155 = BUILTIN_GETATTR(tmp_getattr_target_39, tmp_getattr_attr_39, tmp_getattr_default_39);
        if (tmp_tuple_element_155 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_117;
        }
        tmp_right_value_39 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_208;
            PyObject *tmp_type_arg_78;
            PyTuple_SET_ITEM(tmp_right_value_39, 0, tmp_tuple_element_155);
            CHECK_OBJECT(tmp_class_creation_39__prepared);
            tmp_type_arg_78 = tmp_class_creation_39__prepared;
            tmp_expression_value_208 = BUILTIN_TYPE1(tmp_type_arg_78);
            assert(!(tmp_expression_value_208 == NULL));
            tmp_tuple_element_155 = LOOKUP_ATTRIBUTE(tmp_expression_value_208, mod_consts[62]);
            Py_DECREF(tmp_expression_value_208);
            if (tmp_tuple_element_155 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 332;

                goto tuple_build_exception_39;
            }
            PyTuple_SET_ITEM(tmp_right_value_39, 1, tmp_tuple_element_155);
        }
        goto tuple_build_noexception_39;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_39:;
        Py_DECREF(tmp_right_value_39);
        goto try_except_handler_117;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_39:;
        tmp_raise_value_39 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_39, tmp_right_value_39);
        Py_DECREF(tmp_right_value_39);
        if (tmp_raise_value_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_117;
        }
        exception_type = tmp_raise_type_39;
        Py_INCREF(tmp_raise_type_39);
        exception_value = tmp_raise_value_39;
        exception_lineno = 332;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_117;
    }
    branch_no_155:;
    goto branch_end_154;
    branch_no_154:;
    {
        PyObject *tmp_assign_source_327;
        tmp_assign_source_327 = PyDict_New();
        assert(tmp_class_creation_39__prepared == NULL);
        tmp_class_creation_39__prepared = tmp_assign_source_327;
    }
    branch_end_154:;
    {
        PyObject *tmp_assign_source_328;
        {
            PyObject *tmp_set_locals_39;
            CHECK_OBJECT(tmp_class_creation_39__prepared);
            tmp_set_locals_39 = tmp_class_creation_39__prepared;
            locals_aiohttp$web_exceptions$$$class__39_HTTPExpectationFailed_332 = tmp_set_locals_39;
            Py_INCREF(tmp_set_locals_39);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__39_HTTPExpectationFailed_332, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_119;
        }
        tmp_dictset_value = mod_consts[157];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__39_HTTPExpectationFailed_332, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_119;
        }
        if (isFrameUnusable(cache_frame_c4a26f5fe9959d9818187a46bdfb5bad_36)) {
            Py_XDECREF(cache_frame_c4a26f5fe9959d9818187a46bdfb5bad_36);

#if _DEBUG_REFCOUNTS
            if (cache_frame_c4a26f5fe9959d9818187a46bdfb5bad_36 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_c4a26f5fe9959d9818187a46bdfb5bad_36 = MAKE_FUNCTION_FRAME(codeobj_c4a26f5fe9959d9818187a46bdfb5bad, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_c4a26f5fe9959d9818187a46bdfb5bad_36->m_type_description == NULL);
        frame_c4a26f5fe9959d9818187a46bdfb5bad_36 = cache_frame_c4a26f5fe9959d9818187a46bdfb5bad_36;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_c4a26f5fe9959d9818187a46bdfb5bad_36);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_c4a26f5fe9959d9818187a46bdfb5bad_36) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[158];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__39_HTTPExpectationFailed_332, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 333;
            type_description_2 = "o";
            goto frame_exception_exit_36;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c4a26f5fe9959d9818187a46bdfb5bad_36);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_35;

        frame_exception_exit_36:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c4a26f5fe9959d9818187a46bdfb5bad_36);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_c4a26f5fe9959d9818187a46bdfb5bad_36, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_c4a26f5fe9959d9818187a46bdfb5bad_36->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_c4a26f5fe9959d9818187a46bdfb5bad_36, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_c4a26f5fe9959d9818187a46bdfb5bad_36,
            type_description_2,
            outline_38_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_c4a26f5fe9959d9818187a46bdfb5bad_36 == cache_frame_c4a26f5fe9959d9818187a46bdfb5bad_36) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_c4a26f5fe9959d9818187a46bdfb5bad_36);
            cache_frame_c4a26f5fe9959d9818187a46bdfb5bad_36 = NULL;
        }

        assertFrameObject(frame_c4a26f5fe9959d9818187a46bdfb5bad_36);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_35;

        frame_no_exception_35:;
        goto skip_nested_handling_35;
        nested_frame_exit_35:;

        goto try_except_handler_119;
        skip_nested_handling_35:;
        {
            nuitka_bool tmp_condition_result_234;
            PyObject *tmp_cmp_expr_left_39;
            PyObject *tmp_cmp_expr_right_39;
            CHECK_OBJECT(tmp_class_creation_39__bases);
            tmp_cmp_expr_left_39 = tmp_class_creation_39__bases;
            CHECK_OBJECT(tmp_class_creation_39__bases_orig);
            tmp_cmp_expr_right_39 = tmp_class_creation_39__bases_orig;
            tmp_condition_result_234 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_39, tmp_cmp_expr_right_39);
            if (tmp_condition_result_234 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 332;

                goto try_except_handler_119;
            }
            if (tmp_condition_result_234 == NUITKA_BOOL_TRUE) {
                goto branch_yes_156;
            } else {
                goto branch_no_156;
            }
            assert(tmp_condition_result_234 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_156:;
        CHECK_OBJECT(tmp_class_creation_39__bases_orig);
        tmp_dictset_value = tmp_class_creation_39__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__39_HTTPExpectationFailed_332, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_119;
        }
        branch_no_156:;
        {
            PyObject *tmp_assign_source_329;
            PyObject *tmp_called_value_78;
            PyObject *tmp_args_value_78;
            PyObject *tmp_tuple_element_156;
            PyObject *tmp_kwargs_value_78;
            CHECK_OBJECT(tmp_class_creation_39__metaclass);
            tmp_called_value_78 = tmp_class_creation_39__metaclass;
            tmp_tuple_element_156 = mod_consts[157];
            tmp_args_value_78 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_78, 0, tmp_tuple_element_156);
            CHECK_OBJECT(tmp_class_creation_39__bases);
            tmp_tuple_element_156 = tmp_class_creation_39__bases;
            PyTuple_SET_ITEM0(tmp_args_value_78, 1, tmp_tuple_element_156);
            tmp_tuple_element_156 = locals_aiohttp$web_exceptions$$$class__39_HTTPExpectationFailed_332;
            PyTuple_SET_ITEM0(tmp_args_value_78, 2, tmp_tuple_element_156);
            CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
            tmp_kwargs_value_78 = tmp_class_creation_39__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 332;
            tmp_assign_source_329 = CALL_FUNCTION(tmp_called_value_78, tmp_args_value_78, tmp_kwargs_value_78);
            Py_DECREF(tmp_args_value_78);
            if (tmp_assign_source_329 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 332;

                goto try_except_handler_119;
            }
            assert(outline_38_var___class__ == NULL);
            outline_38_var___class__ = tmp_assign_source_329;
        }
        CHECK_OBJECT(outline_38_var___class__);
        tmp_assign_source_328 = outline_38_var___class__;
        Py_INCREF(tmp_assign_source_328);
        goto try_return_handler_119;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_119:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__39_HTTPExpectationFailed_332);
        locals_aiohttp$web_exceptions$$$class__39_HTTPExpectationFailed_332 = NULL;
        goto try_return_handler_118;
        // Exception handler code:
        try_except_handler_119:;
        exception_keeper_type_117 = exception_type;
        exception_keeper_value_117 = exception_value;
        exception_keeper_tb_117 = exception_tb;
        exception_keeper_lineno_117 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__39_HTTPExpectationFailed_332);
        locals_aiohttp$web_exceptions$$$class__39_HTTPExpectationFailed_332 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_117;
        exception_value = exception_keeper_value_117;
        exception_tb = exception_keeper_tb_117;
        exception_lineno = exception_keeper_lineno_117;

        goto try_except_handler_118;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_118:;
        CHECK_OBJECT(outline_38_var___class__);
        Py_DECREF(outline_38_var___class__);
        outline_38_var___class__ = NULL;
        goto outline_result_39;
        // Exception handler code:
        try_except_handler_118:;
        exception_keeper_type_118 = exception_type;
        exception_keeper_value_118 = exception_value;
        exception_keeper_tb_118 = exception_tb;
        exception_keeper_lineno_118 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_118;
        exception_value = exception_keeper_value_118;
        exception_tb = exception_keeper_tb_118;
        exception_lineno = exception_keeper_lineno_118;

        goto outline_exception_39;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_39:;
        exception_lineno = 332;
        goto try_except_handler_117;
        outline_result_39:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[157], tmp_assign_source_328);
    }
    goto try_end_41;
    // Exception handler code:
    try_except_handler_117:;
    exception_keeper_type_119 = exception_type;
    exception_keeper_value_119 = exception_value;
    exception_keeper_tb_119 = exception_tb;
    exception_keeper_lineno_119 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_39__bases_orig);
    tmp_class_creation_39__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_39__bases);
    tmp_class_creation_39__bases = NULL;
    Py_XDECREF(tmp_class_creation_39__class_decl_dict);
    tmp_class_creation_39__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_39__metaclass);
    tmp_class_creation_39__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_39__prepared);
    tmp_class_creation_39__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_119;
    exception_value = exception_keeper_value_119;
    exception_tb = exception_keeper_tb_119;
    exception_lineno = exception_keeper_lineno_119;

    goto frame_exception_exit_1;
    // End of try:
    try_end_41:;
    CHECK_OBJECT(tmp_class_creation_39__bases_orig);
    Py_DECREF(tmp_class_creation_39__bases_orig);
    tmp_class_creation_39__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_39__bases);
    Py_DECREF(tmp_class_creation_39__bases);
    tmp_class_creation_39__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
    Py_DECREF(tmp_class_creation_39__class_decl_dict);
    tmp_class_creation_39__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_39__metaclass);
    Py_DECREF(tmp_class_creation_39__metaclass);
    tmp_class_creation_39__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_39__prepared);
    Py_DECREF(tmp_class_creation_39__prepared);
    tmp_class_creation_39__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_330;
        PyObject *tmp_tuple_element_157;
        tmp_tuple_element_157 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[116]);

        if (unlikely(tmp_tuple_element_157 == NULL)) {
            tmp_tuple_element_157 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[116]);
        }

        if (tmp_tuple_element_157 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_120;
        }
        tmp_assign_source_330 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_330, 0, tmp_tuple_element_157);
        assert(tmp_class_creation_40__bases_orig == NULL);
        tmp_class_creation_40__bases_orig = tmp_assign_source_330;
    }
    {
        PyObject *tmp_assign_source_331;
        PyObject *tmp_dircall_arg1_40;
        CHECK_OBJECT(tmp_class_creation_40__bases_orig);
        tmp_dircall_arg1_40 = tmp_class_creation_40__bases_orig;
        Py_INCREF(tmp_dircall_arg1_40);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_40};
            tmp_assign_source_331 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_331 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_120;
        }
        assert(tmp_class_creation_40__bases == NULL);
        tmp_class_creation_40__bases = tmp_assign_source_331;
    }
    {
        PyObject *tmp_assign_source_332;
        tmp_assign_source_332 = PyDict_New();
        assert(tmp_class_creation_40__class_decl_dict == NULL);
        tmp_class_creation_40__class_decl_dict = tmp_assign_source_332;
    }
    {
        PyObject *tmp_assign_source_333;
        PyObject *tmp_metaclass_value_40;
        bool tmp_condition_result_235;
        PyObject *tmp_key_value_118;
        PyObject *tmp_dict_arg_value_118;
        PyObject *tmp_dict_arg_value_119;
        PyObject *tmp_key_value_119;
        nuitka_bool tmp_condition_result_236;
        int tmp_truth_name_40;
        PyObject *tmp_type_arg_79;
        PyObject *tmp_expression_value_209;
        PyObject *tmp_subscript_value_53;
        PyObject *tmp_bases_value_40;
        tmp_key_value_118 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
        tmp_dict_arg_value_118 = tmp_class_creation_40__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_118, tmp_key_value_118);
        assert(!(tmp_res == -1));
        tmp_condition_result_235 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_235 != false) {
            goto condexpr_true_79;
        } else {
            goto condexpr_false_79;
        }
        condexpr_true_79:;
        CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
        tmp_dict_arg_value_119 = tmp_class_creation_40__class_decl_dict;
        tmp_key_value_119 = mod_consts[57];
        tmp_metaclass_value_40 = DICT_GET_ITEM0(tmp_dict_arg_value_119, tmp_key_value_119);
        if (tmp_metaclass_value_40 == NULL) {
            tmp_metaclass_value_40 = Py_None;
        }
        assert(!(tmp_metaclass_value_40 == NULL));
        Py_INCREF(tmp_metaclass_value_40);
        goto condexpr_end_79;
        condexpr_false_79:;
        CHECK_OBJECT(tmp_class_creation_40__bases);
        tmp_truth_name_40 = CHECK_IF_TRUE(tmp_class_creation_40__bases);
        if (tmp_truth_name_40 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_120;
        }
        tmp_condition_result_236 = tmp_truth_name_40 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_236 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_80;
        } else {
            goto condexpr_false_80;
        }
        condexpr_true_80:;
        CHECK_OBJECT(tmp_class_creation_40__bases);
        tmp_expression_value_209 = tmp_class_creation_40__bases;
        tmp_subscript_value_53 = mod_consts[39];
        tmp_type_arg_79 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_209, tmp_subscript_value_53, 0);
        if (tmp_type_arg_79 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_120;
        }
        tmp_metaclass_value_40 = BUILTIN_TYPE1(tmp_type_arg_79);
        Py_DECREF(tmp_type_arg_79);
        if (tmp_metaclass_value_40 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_120;
        }
        goto condexpr_end_80;
        condexpr_false_80:;
        tmp_metaclass_value_40 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_40);
        condexpr_end_80:;
        condexpr_end_79:;
        CHECK_OBJECT(tmp_class_creation_40__bases);
        tmp_bases_value_40 = tmp_class_creation_40__bases;
        tmp_assign_source_333 = SELECT_METACLASS(tmp_metaclass_value_40, tmp_bases_value_40);
        Py_DECREF(tmp_metaclass_value_40);
        if (tmp_assign_source_333 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_120;
        }
        assert(tmp_class_creation_40__metaclass == NULL);
        tmp_class_creation_40__metaclass = tmp_assign_source_333;
    }
    {
        bool tmp_condition_result_237;
        PyObject *tmp_key_value_120;
        PyObject *tmp_dict_arg_value_120;
        tmp_key_value_120 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
        tmp_dict_arg_value_120 = tmp_class_creation_40__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_120, tmp_key_value_120);
        assert(!(tmp_res == -1));
        tmp_condition_result_237 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_237 != false) {
            goto branch_yes_157;
        } else {
            goto branch_no_157;
        }
    }
    branch_yes_157:;
    CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_40__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 336;

        goto try_except_handler_120;
    }
    branch_no_157:;
    {
        nuitka_bool tmp_condition_result_238;
        PyObject *tmp_expression_value_210;
        CHECK_OBJECT(tmp_class_creation_40__metaclass);
        tmp_expression_value_210 = tmp_class_creation_40__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_210, mod_consts[58]);
        tmp_condition_result_238 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_238 == NUITKA_BOOL_TRUE) {
            goto branch_yes_158;
        } else {
            goto branch_no_158;
        }
    }
    branch_yes_158:;
    {
        PyObject *tmp_assign_source_334;
        PyObject *tmp_called_value_79;
        PyObject *tmp_expression_value_211;
        PyObject *tmp_args_value_79;
        PyObject *tmp_tuple_element_158;
        PyObject *tmp_kwargs_value_79;
        CHECK_OBJECT(tmp_class_creation_40__metaclass);
        tmp_expression_value_211 = tmp_class_creation_40__metaclass;
        tmp_called_value_79 = LOOKUP_ATTRIBUTE(tmp_expression_value_211, mod_consts[58]);
        if (tmp_called_value_79 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_120;
        }
        tmp_tuple_element_158 = mod_consts[159];
        tmp_args_value_79 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_79, 0, tmp_tuple_element_158);
        CHECK_OBJECT(tmp_class_creation_40__bases);
        tmp_tuple_element_158 = tmp_class_creation_40__bases;
        PyTuple_SET_ITEM0(tmp_args_value_79, 1, tmp_tuple_element_158);
        CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
        tmp_kwargs_value_79 = tmp_class_creation_40__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 336;
        tmp_assign_source_334 = CALL_FUNCTION(tmp_called_value_79, tmp_args_value_79, tmp_kwargs_value_79);
        Py_DECREF(tmp_called_value_79);
        Py_DECREF(tmp_args_value_79);
        if (tmp_assign_source_334 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_120;
        }
        assert(tmp_class_creation_40__prepared == NULL);
        tmp_class_creation_40__prepared = tmp_assign_source_334;
    }
    {
        bool tmp_condition_result_239;
        PyObject *tmp_operand_value_40;
        PyObject *tmp_expression_value_212;
        CHECK_OBJECT(tmp_class_creation_40__prepared);
        tmp_expression_value_212 = tmp_class_creation_40__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_212, mod_consts[60]);
        tmp_operand_value_40 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_40);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_120;
        }
        tmp_condition_result_239 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_239 != false) {
            goto branch_yes_159;
        } else {
            goto branch_no_159;
        }
    }
    branch_yes_159:;
    {
        PyObject *tmp_raise_type_40;
        PyObject *tmp_raise_value_40;
        PyObject *tmp_left_value_40;
        PyObject *tmp_right_value_40;
        PyObject *tmp_tuple_element_159;
        PyObject *tmp_getattr_target_40;
        PyObject *tmp_getattr_attr_40;
        PyObject *tmp_getattr_default_40;
        tmp_raise_type_40 = PyExc_TypeError;
        tmp_left_value_40 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_40__metaclass);
        tmp_getattr_target_40 = tmp_class_creation_40__metaclass;
        tmp_getattr_attr_40 = mod_consts[62];
        tmp_getattr_default_40 = mod_consts[63];
        tmp_tuple_element_159 = BUILTIN_GETATTR(tmp_getattr_target_40, tmp_getattr_attr_40, tmp_getattr_default_40);
        if (tmp_tuple_element_159 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_120;
        }
        tmp_right_value_40 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_213;
            PyObject *tmp_type_arg_80;
            PyTuple_SET_ITEM(tmp_right_value_40, 0, tmp_tuple_element_159);
            CHECK_OBJECT(tmp_class_creation_40__prepared);
            tmp_type_arg_80 = tmp_class_creation_40__prepared;
            tmp_expression_value_213 = BUILTIN_TYPE1(tmp_type_arg_80);
            assert(!(tmp_expression_value_213 == NULL));
            tmp_tuple_element_159 = LOOKUP_ATTRIBUTE(tmp_expression_value_213, mod_consts[62]);
            Py_DECREF(tmp_expression_value_213);
            if (tmp_tuple_element_159 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 336;

                goto tuple_build_exception_40;
            }
            PyTuple_SET_ITEM(tmp_right_value_40, 1, tmp_tuple_element_159);
        }
        goto tuple_build_noexception_40;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_40:;
        Py_DECREF(tmp_right_value_40);
        goto try_except_handler_120;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_40:;
        tmp_raise_value_40 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_40, tmp_right_value_40);
        Py_DECREF(tmp_right_value_40);
        if (tmp_raise_value_40 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_120;
        }
        exception_type = tmp_raise_type_40;
        Py_INCREF(tmp_raise_type_40);
        exception_value = tmp_raise_value_40;
        exception_lineno = 336;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_120;
    }
    branch_no_159:;
    goto branch_end_158;
    branch_no_158:;
    {
        PyObject *tmp_assign_source_335;
        tmp_assign_source_335 = PyDict_New();
        assert(tmp_class_creation_40__prepared == NULL);
        tmp_class_creation_40__prepared = tmp_assign_source_335;
    }
    branch_end_158:;
    {
        PyObject *tmp_assign_source_336;
        {
            PyObject *tmp_set_locals_40;
            CHECK_OBJECT(tmp_class_creation_40__prepared);
            tmp_set_locals_40 = tmp_class_creation_40__prepared;
            locals_aiohttp$web_exceptions$$$class__40_HTTPMisdirectedRequest_336 = tmp_set_locals_40;
            Py_INCREF(tmp_set_locals_40);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__40_HTTPMisdirectedRequest_336, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_122;
        }
        tmp_dictset_value = mod_consts[159];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__40_HTTPMisdirectedRequest_336, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_122;
        }
        if (isFrameUnusable(cache_frame_01fcbdf2f4502716019041a2a602baba_37)) {
            Py_XDECREF(cache_frame_01fcbdf2f4502716019041a2a602baba_37);

#if _DEBUG_REFCOUNTS
            if (cache_frame_01fcbdf2f4502716019041a2a602baba_37 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_01fcbdf2f4502716019041a2a602baba_37 = MAKE_FUNCTION_FRAME(codeobj_01fcbdf2f4502716019041a2a602baba, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_01fcbdf2f4502716019041a2a602baba_37->m_type_description == NULL);
        frame_01fcbdf2f4502716019041a2a602baba_37 = cache_frame_01fcbdf2f4502716019041a2a602baba_37;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_01fcbdf2f4502716019041a2a602baba_37);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_01fcbdf2f4502716019041a2a602baba_37) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[160];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__40_HTTPMisdirectedRequest_336, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 337;
            type_description_2 = "o";
            goto frame_exception_exit_37;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_01fcbdf2f4502716019041a2a602baba_37);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_36;

        frame_exception_exit_37:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_01fcbdf2f4502716019041a2a602baba_37);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_01fcbdf2f4502716019041a2a602baba_37, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_01fcbdf2f4502716019041a2a602baba_37->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_01fcbdf2f4502716019041a2a602baba_37, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_01fcbdf2f4502716019041a2a602baba_37,
            type_description_2,
            outline_39_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_01fcbdf2f4502716019041a2a602baba_37 == cache_frame_01fcbdf2f4502716019041a2a602baba_37) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_01fcbdf2f4502716019041a2a602baba_37);
            cache_frame_01fcbdf2f4502716019041a2a602baba_37 = NULL;
        }

        assertFrameObject(frame_01fcbdf2f4502716019041a2a602baba_37);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_36;

        frame_no_exception_36:;
        goto skip_nested_handling_36;
        nested_frame_exit_36:;

        goto try_except_handler_122;
        skip_nested_handling_36:;
        {
            nuitka_bool tmp_condition_result_240;
            PyObject *tmp_cmp_expr_left_40;
            PyObject *tmp_cmp_expr_right_40;
            CHECK_OBJECT(tmp_class_creation_40__bases);
            tmp_cmp_expr_left_40 = tmp_class_creation_40__bases;
            CHECK_OBJECT(tmp_class_creation_40__bases_orig);
            tmp_cmp_expr_right_40 = tmp_class_creation_40__bases_orig;
            tmp_condition_result_240 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_40, tmp_cmp_expr_right_40);
            if (tmp_condition_result_240 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 336;

                goto try_except_handler_122;
            }
            if (tmp_condition_result_240 == NUITKA_BOOL_TRUE) {
                goto branch_yes_160;
            } else {
                goto branch_no_160;
            }
            assert(tmp_condition_result_240 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_160:;
        CHECK_OBJECT(tmp_class_creation_40__bases_orig);
        tmp_dictset_value = tmp_class_creation_40__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__40_HTTPMisdirectedRequest_336, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;

            goto try_except_handler_122;
        }
        branch_no_160:;
        {
            PyObject *tmp_assign_source_337;
            PyObject *tmp_called_value_80;
            PyObject *tmp_args_value_80;
            PyObject *tmp_tuple_element_160;
            PyObject *tmp_kwargs_value_80;
            CHECK_OBJECT(tmp_class_creation_40__metaclass);
            tmp_called_value_80 = tmp_class_creation_40__metaclass;
            tmp_tuple_element_160 = mod_consts[159];
            tmp_args_value_80 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_80, 0, tmp_tuple_element_160);
            CHECK_OBJECT(tmp_class_creation_40__bases);
            tmp_tuple_element_160 = tmp_class_creation_40__bases;
            PyTuple_SET_ITEM0(tmp_args_value_80, 1, tmp_tuple_element_160);
            tmp_tuple_element_160 = locals_aiohttp$web_exceptions$$$class__40_HTTPMisdirectedRequest_336;
            PyTuple_SET_ITEM0(tmp_args_value_80, 2, tmp_tuple_element_160);
            CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
            tmp_kwargs_value_80 = tmp_class_creation_40__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 336;
            tmp_assign_source_337 = CALL_FUNCTION(tmp_called_value_80, tmp_args_value_80, tmp_kwargs_value_80);
            Py_DECREF(tmp_args_value_80);
            if (tmp_assign_source_337 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 336;

                goto try_except_handler_122;
            }
            assert(outline_39_var___class__ == NULL);
            outline_39_var___class__ = tmp_assign_source_337;
        }
        CHECK_OBJECT(outline_39_var___class__);
        tmp_assign_source_336 = outline_39_var___class__;
        Py_INCREF(tmp_assign_source_336);
        goto try_return_handler_122;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_122:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__40_HTTPMisdirectedRequest_336);
        locals_aiohttp$web_exceptions$$$class__40_HTTPMisdirectedRequest_336 = NULL;
        goto try_return_handler_121;
        // Exception handler code:
        try_except_handler_122:;
        exception_keeper_type_120 = exception_type;
        exception_keeper_value_120 = exception_value;
        exception_keeper_tb_120 = exception_tb;
        exception_keeper_lineno_120 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__40_HTTPMisdirectedRequest_336);
        locals_aiohttp$web_exceptions$$$class__40_HTTPMisdirectedRequest_336 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_120;
        exception_value = exception_keeper_value_120;
        exception_tb = exception_keeper_tb_120;
        exception_lineno = exception_keeper_lineno_120;

        goto try_except_handler_121;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_121:;
        CHECK_OBJECT(outline_39_var___class__);
        Py_DECREF(outline_39_var___class__);
        outline_39_var___class__ = NULL;
        goto outline_result_40;
        // Exception handler code:
        try_except_handler_121:;
        exception_keeper_type_121 = exception_type;
        exception_keeper_value_121 = exception_value;
        exception_keeper_tb_121 = exception_tb;
        exception_keeper_lineno_121 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_121;
        exception_value = exception_keeper_value_121;
        exception_tb = exception_keeper_tb_121;
        exception_lineno = exception_keeper_lineno_121;

        goto outline_exception_40;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_40:;
        exception_lineno = 336;
        goto try_except_handler_120;
        outline_result_40:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[159], tmp_assign_source_336);
    }
    goto try_end_42;
    // Exception handler code:
    try_except_handler_120:;
    exception_keeper_type_122 = exception_type;
    exception_keeper_value_122 = exception_value;
    exception_keeper_tb_122 = exception_tb;
    exception_keeper_lineno_122 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_40__bases_orig);
    tmp_class_creation_40__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_40__bases);
    tmp_class_creation_40__bases = NULL;
    Py_XDECREF(tmp_class_creation_40__class_decl_dict);
    tmp_class_creation_40__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_40__metaclass);
    tmp_class_creation_40__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_40__prepared);
    tmp_class_creation_40__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_122;
    exception_value = exception_keeper_value_122;
    exception_tb = exception_keeper_tb_122;
    exception_lineno = exception_keeper_lineno_122;

    goto frame_exception_exit_1;
    // End of try:
    try_end_42:;
    CHECK_OBJECT(tmp_class_creation_40__bases_orig);
    Py_DECREF(tmp_class_creation_40__bases_orig);
    tmp_class_creation_40__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_40__bases);
    Py_DECREF(tmp_class_creation_40__bases);
    tmp_class_creation_40__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
    Py_DECREF(tmp_class_creation_40__class_decl_dict);
    tmp_class_creation_40__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_40__metaclass);
    Py_DECREF(tmp_class_creation_40__metaclass);
    tmp_class_creation_40__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_40__prepared);
    Py_DECREF(tmp_class_creation_40__prepared);
    tmp_class_creation_40__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_338;
        PyObject *tmp_tuple_element_161;
        tmp_tuple_element_161 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[116]);

        if (unlikely(tmp_tuple_element_161 == NULL)) {
            tmp_tuple_element_161 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[116]);
        }

        if (tmp_tuple_element_161 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 340;

            goto try_except_handler_123;
        }
        tmp_assign_source_338 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_338, 0, tmp_tuple_element_161);
        assert(tmp_class_creation_41__bases_orig == NULL);
        tmp_class_creation_41__bases_orig = tmp_assign_source_338;
    }
    {
        PyObject *tmp_assign_source_339;
        PyObject *tmp_dircall_arg1_41;
        CHECK_OBJECT(tmp_class_creation_41__bases_orig);
        tmp_dircall_arg1_41 = tmp_class_creation_41__bases_orig;
        Py_INCREF(tmp_dircall_arg1_41);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_41};
            tmp_assign_source_339 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_339 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 340;

            goto try_except_handler_123;
        }
        assert(tmp_class_creation_41__bases == NULL);
        tmp_class_creation_41__bases = tmp_assign_source_339;
    }
    {
        PyObject *tmp_assign_source_340;
        tmp_assign_source_340 = PyDict_New();
        assert(tmp_class_creation_41__class_decl_dict == NULL);
        tmp_class_creation_41__class_decl_dict = tmp_assign_source_340;
    }
    {
        PyObject *tmp_assign_source_341;
        PyObject *tmp_metaclass_value_41;
        bool tmp_condition_result_241;
        PyObject *tmp_key_value_121;
        PyObject *tmp_dict_arg_value_121;
        PyObject *tmp_dict_arg_value_122;
        PyObject *tmp_key_value_122;
        nuitka_bool tmp_condition_result_242;
        int tmp_truth_name_41;
        PyObject *tmp_type_arg_81;
        PyObject *tmp_expression_value_214;
        PyObject *tmp_subscript_value_54;
        PyObject *tmp_bases_value_41;
        tmp_key_value_121 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
        tmp_dict_arg_value_121 = tmp_class_creation_41__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_121, tmp_key_value_121);
        assert(!(tmp_res == -1));
        tmp_condition_result_241 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_241 != false) {
            goto condexpr_true_81;
        } else {
            goto condexpr_false_81;
        }
        condexpr_true_81:;
        CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
        tmp_dict_arg_value_122 = tmp_class_creation_41__class_decl_dict;
        tmp_key_value_122 = mod_consts[57];
        tmp_metaclass_value_41 = DICT_GET_ITEM0(tmp_dict_arg_value_122, tmp_key_value_122);
        if (tmp_metaclass_value_41 == NULL) {
            tmp_metaclass_value_41 = Py_None;
        }
        assert(!(tmp_metaclass_value_41 == NULL));
        Py_INCREF(tmp_metaclass_value_41);
        goto condexpr_end_81;
        condexpr_false_81:;
        CHECK_OBJECT(tmp_class_creation_41__bases);
        tmp_truth_name_41 = CHECK_IF_TRUE(tmp_class_creation_41__bases);
        if (tmp_truth_name_41 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 340;

            goto try_except_handler_123;
        }
        tmp_condition_result_242 = tmp_truth_name_41 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_242 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_82;
        } else {
            goto condexpr_false_82;
        }
        condexpr_true_82:;
        CHECK_OBJECT(tmp_class_creation_41__bases);
        tmp_expression_value_214 = tmp_class_creation_41__bases;
        tmp_subscript_value_54 = mod_consts[39];
        tmp_type_arg_81 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_214, tmp_subscript_value_54, 0);
        if (tmp_type_arg_81 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 340;

            goto try_except_handler_123;
        }
        tmp_metaclass_value_41 = BUILTIN_TYPE1(tmp_type_arg_81);
        Py_DECREF(tmp_type_arg_81);
        if (tmp_metaclass_value_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 340;

            goto try_except_handler_123;
        }
        goto condexpr_end_82;
        condexpr_false_82:;
        tmp_metaclass_value_41 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_41);
        condexpr_end_82:;
        condexpr_end_81:;
        CHECK_OBJECT(tmp_class_creation_41__bases);
        tmp_bases_value_41 = tmp_class_creation_41__bases;
        tmp_assign_source_341 = SELECT_METACLASS(tmp_metaclass_value_41, tmp_bases_value_41);
        Py_DECREF(tmp_metaclass_value_41);
        if (tmp_assign_source_341 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 340;

            goto try_except_handler_123;
        }
        assert(tmp_class_creation_41__metaclass == NULL);
        tmp_class_creation_41__metaclass = tmp_assign_source_341;
    }
    {
        bool tmp_condition_result_243;
        PyObject *tmp_key_value_123;
        PyObject *tmp_dict_arg_value_123;
        tmp_key_value_123 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
        tmp_dict_arg_value_123 = tmp_class_creation_41__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_123, tmp_key_value_123);
        assert(!(tmp_res == -1));
        tmp_condition_result_243 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_243 != false) {
            goto branch_yes_161;
        } else {
            goto branch_no_161;
        }
    }
    branch_yes_161:;
    CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_41__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 340;

        goto try_except_handler_123;
    }
    branch_no_161:;
    {
        nuitka_bool tmp_condition_result_244;
        PyObject *tmp_expression_value_215;
        CHECK_OBJECT(tmp_class_creation_41__metaclass);
        tmp_expression_value_215 = tmp_class_creation_41__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_215, mod_consts[58]);
        tmp_condition_result_244 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_244 == NUITKA_BOOL_TRUE) {
            goto branch_yes_162;
        } else {
            goto branch_no_162;
        }
    }
    branch_yes_162:;
    {
        PyObject *tmp_assign_source_342;
        PyObject *tmp_called_value_81;
        PyObject *tmp_expression_value_216;
        PyObject *tmp_args_value_81;
        PyObject *tmp_tuple_element_162;
        PyObject *tmp_kwargs_value_81;
        CHECK_OBJECT(tmp_class_creation_41__metaclass);
        tmp_expression_value_216 = tmp_class_creation_41__metaclass;
        tmp_called_value_81 = LOOKUP_ATTRIBUTE(tmp_expression_value_216, mod_consts[58]);
        if (tmp_called_value_81 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 340;

            goto try_except_handler_123;
        }
        tmp_tuple_element_162 = mod_consts[161];
        tmp_args_value_81 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_81, 0, tmp_tuple_element_162);
        CHECK_OBJECT(tmp_class_creation_41__bases);
        tmp_tuple_element_162 = tmp_class_creation_41__bases;
        PyTuple_SET_ITEM0(tmp_args_value_81, 1, tmp_tuple_element_162);
        CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
        tmp_kwargs_value_81 = tmp_class_creation_41__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 340;
        tmp_assign_source_342 = CALL_FUNCTION(tmp_called_value_81, tmp_args_value_81, tmp_kwargs_value_81);
        Py_DECREF(tmp_called_value_81);
        Py_DECREF(tmp_args_value_81);
        if (tmp_assign_source_342 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 340;

            goto try_except_handler_123;
        }
        assert(tmp_class_creation_41__prepared == NULL);
        tmp_class_creation_41__prepared = tmp_assign_source_342;
    }
    {
        bool tmp_condition_result_245;
        PyObject *tmp_operand_value_41;
        PyObject *tmp_expression_value_217;
        CHECK_OBJECT(tmp_class_creation_41__prepared);
        tmp_expression_value_217 = tmp_class_creation_41__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_217, mod_consts[60]);
        tmp_operand_value_41 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_41);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 340;

            goto try_except_handler_123;
        }
        tmp_condition_result_245 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_245 != false) {
            goto branch_yes_163;
        } else {
            goto branch_no_163;
        }
    }
    branch_yes_163:;
    {
        PyObject *tmp_raise_type_41;
        PyObject *tmp_raise_value_41;
        PyObject *tmp_left_value_41;
        PyObject *tmp_right_value_41;
        PyObject *tmp_tuple_element_163;
        PyObject *tmp_getattr_target_41;
        PyObject *tmp_getattr_attr_41;
        PyObject *tmp_getattr_default_41;
        tmp_raise_type_41 = PyExc_TypeError;
        tmp_left_value_41 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_41__metaclass);
        tmp_getattr_target_41 = tmp_class_creation_41__metaclass;
        tmp_getattr_attr_41 = mod_consts[62];
        tmp_getattr_default_41 = mod_consts[63];
        tmp_tuple_element_163 = BUILTIN_GETATTR(tmp_getattr_target_41, tmp_getattr_attr_41, tmp_getattr_default_41);
        if (tmp_tuple_element_163 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 340;

            goto try_except_handler_123;
        }
        tmp_right_value_41 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_218;
            PyObject *tmp_type_arg_82;
            PyTuple_SET_ITEM(tmp_right_value_41, 0, tmp_tuple_element_163);
            CHECK_OBJECT(tmp_class_creation_41__prepared);
            tmp_type_arg_82 = tmp_class_creation_41__prepared;
            tmp_expression_value_218 = BUILTIN_TYPE1(tmp_type_arg_82);
            assert(!(tmp_expression_value_218 == NULL));
            tmp_tuple_element_163 = LOOKUP_ATTRIBUTE(tmp_expression_value_218, mod_consts[62]);
            Py_DECREF(tmp_expression_value_218);
            if (tmp_tuple_element_163 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 340;

                goto tuple_build_exception_41;
            }
            PyTuple_SET_ITEM(tmp_right_value_41, 1, tmp_tuple_element_163);
        }
        goto tuple_build_noexception_41;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_41:;
        Py_DECREF(tmp_right_value_41);
        goto try_except_handler_123;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_41:;
        tmp_raise_value_41 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_41, tmp_right_value_41);
        Py_DECREF(tmp_right_value_41);
        if (tmp_raise_value_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 340;

            goto try_except_handler_123;
        }
        exception_type = tmp_raise_type_41;
        Py_INCREF(tmp_raise_type_41);
        exception_value = tmp_raise_value_41;
        exception_lineno = 340;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_123;
    }
    branch_no_163:;
    goto branch_end_162;
    branch_no_162:;
    {
        PyObject *tmp_assign_source_343;
        tmp_assign_source_343 = PyDict_New();
        assert(tmp_class_creation_41__prepared == NULL);
        tmp_class_creation_41__prepared = tmp_assign_source_343;
    }
    branch_end_162:;
    {
        PyObject *tmp_assign_source_344;
        {
            PyObject *tmp_set_locals_41;
            CHECK_OBJECT(tmp_class_creation_41__prepared);
            tmp_set_locals_41 = tmp_class_creation_41__prepared;
            locals_aiohttp$web_exceptions$$$class__41_HTTPUnprocessableEntity_340 = tmp_set_locals_41;
            Py_INCREF(tmp_set_locals_41);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__41_HTTPUnprocessableEntity_340, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 340;

            goto try_except_handler_125;
        }
        tmp_dictset_value = mod_consts[161];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__41_HTTPUnprocessableEntity_340, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 340;

            goto try_except_handler_125;
        }
        if (isFrameUnusable(cache_frame_42436eb2d657bbc44709221a8551bf5b_38)) {
            Py_XDECREF(cache_frame_42436eb2d657bbc44709221a8551bf5b_38);

#if _DEBUG_REFCOUNTS
            if (cache_frame_42436eb2d657bbc44709221a8551bf5b_38 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_42436eb2d657bbc44709221a8551bf5b_38 = MAKE_FUNCTION_FRAME(codeobj_42436eb2d657bbc44709221a8551bf5b, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_42436eb2d657bbc44709221a8551bf5b_38->m_type_description == NULL);
        frame_42436eb2d657bbc44709221a8551bf5b_38 = cache_frame_42436eb2d657bbc44709221a8551bf5b_38;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_42436eb2d657bbc44709221a8551bf5b_38);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_42436eb2d657bbc44709221a8551bf5b_38) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[162];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__41_HTTPUnprocessableEntity_340, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;
            type_description_2 = "o";
            goto frame_exception_exit_38;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_42436eb2d657bbc44709221a8551bf5b_38);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_37;

        frame_exception_exit_38:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_42436eb2d657bbc44709221a8551bf5b_38);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_42436eb2d657bbc44709221a8551bf5b_38, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_42436eb2d657bbc44709221a8551bf5b_38->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_42436eb2d657bbc44709221a8551bf5b_38, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_42436eb2d657bbc44709221a8551bf5b_38,
            type_description_2,
            outline_40_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_42436eb2d657bbc44709221a8551bf5b_38 == cache_frame_42436eb2d657bbc44709221a8551bf5b_38) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_42436eb2d657bbc44709221a8551bf5b_38);
            cache_frame_42436eb2d657bbc44709221a8551bf5b_38 = NULL;
        }

        assertFrameObject(frame_42436eb2d657bbc44709221a8551bf5b_38);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_37;

        frame_no_exception_37:;
        goto skip_nested_handling_37;
        nested_frame_exit_37:;

        goto try_except_handler_125;
        skip_nested_handling_37:;
        {
            nuitka_bool tmp_condition_result_246;
            PyObject *tmp_cmp_expr_left_41;
            PyObject *tmp_cmp_expr_right_41;
            CHECK_OBJECT(tmp_class_creation_41__bases);
            tmp_cmp_expr_left_41 = tmp_class_creation_41__bases;
            CHECK_OBJECT(tmp_class_creation_41__bases_orig);
            tmp_cmp_expr_right_41 = tmp_class_creation_41__bases_orig;
            tmp_condition_result_246 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_41, tmp_cmp_expr_right_41);
            if (tmp_condition_result_246 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 340;

                goto try_except_handler_125;
            }
            if (tmp_condition_result_246 == NUITKA_BOOL_TRUE) {
                goto branch_yes_164;
            } else {
                goto branch_no_164;
            }
            assert(tmp_condition_result_246 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_164:;
        CHECK_OBJECT(tmp_class_creation_41__bases_orig);
        tmp_dictset_value = tmp_class_creation_41__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__41_HTTPUnprocessableEntity_340, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 340;

            goto try_except_handler_125;
        }
        branch_no_164:;
        {
            PyObject *tmp_assign_source_345;
            PyObject *tmp_called_value_82;
            PyObject *tmp_args_value_82;
            PyObject *tmp_tuple_element_164;
            PyObject *tmp_kwargs_value_82;
            CHECK_OBJECT(tmp_class_creation_41__metaclass);
            tmp_called_value_82 = tmp_class_creation_41__metaclass;
            tmp_tuple_element_164 = mod_consts[161];
            tmp_args_value_82 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_82, 0, tmp_tuple_element_164);
            CHECK_OBJECT(tmp_class_creation_41__bases);
            tmp_tuple_element_164 = tmp_class_creation_41__bases;
            PyTuple_SET_ITEM0(tmp_args_value_82, 1, tmp_tuple_element_164);
            tmp_tuple_element_164 = locals_aiohttp$web_exceptions$$$class__41_HTTPUnprocessableEntity_340;
            PyTuple_SET_ITEM0(tmp_args_value_82, 2, tmp_tuple_element_164);
            CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
            tmp_kwargs_value_82 = tmp_class_creation_41__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 340;
            tmp_assign_source_345 = CALL_FUNCTION(tmp_called_value_82, tmp_args_value_82, tmp_kwargs_value_82);
            Py_DECREF(tmp_args_value_82);
            if (tmp_assign_source_345 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 340;

                goto try_except_handler_125;
            }
            assert(outline_40_var___class__ == NULL);
            outline_40_var___class__ = tmp_assign_source_345;
        }
        CHECK_OBJECT(outline_40_var___class__);
        tmp_assign_source_344 = outline_40_var___class__;
        Py_INCREF(tmp_assign_source_344);
        goto try_return_handler_125;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_125:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__41_HTTPUnprocessableEntity_340);
        locals_aiohttp$web_exceptions$$$class__41_HTTPUnprocessableEntity_340 = NULL;
        goto try_return_handler_124;
        // Exception handler code:
        try_except_handler_125:;
        exception_keeper_type_123 = exception_type;
        exception_keeper_value_123 = exception_value;
        exception_keeper_tb_123 = exception_tb;
        exception_keeper_lineno_123 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__41_HTTPUnprocessableEntity_340);
        locals_aiohttp$web_exceptions$$$class__41_HTTPUnprocessableEntity_340 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_123;
        exception_value = exception_keeper_value_123;
        exception_tb = exception_keeper_tb_123;
        exception_lineno = exception_keeper_lineno_123;

        goto try_except_handler_124;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_124:;
        CHECK_OBJECT(outline_40_var___class__);
        Py_DECREF(outline_40_var___class__);
        outline_40_var___class__ = NULL;
        goto outline_result_41;
        // Exception handler code:
        try_except_handler_124:;
        exception_keeper_type_124 = exception_type;
        exception_keeper_value_124 = exception_value;
        exception_keeper_tb_124 = exception_tb;
        exception_keeper_lineno_124 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_124;
        exception_value = exception_keeper_value_124;
        exception_tb = exception_keeper_tb_124;
        exception_lineno = exception_keeper_lineno_124;

        goto outline_exception_41;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_41:;
        exception_lineno = 340;
        goto try_except_handler_123;
        outline_result_41:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[161], tmp_assign_source_344);
    }
    goto try_end_43;
    // Exception handler code:
    try_except_handler_123:;
    exception_keeper_type_125 = exception_type;
    exception_keeper_value_125 = exception_value;
    exception_keeper_tb_125 = exception_tb;
    exception_keeper_lineno_125 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_41__bases_orig);
    tmp_class_creation_41__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_41__bases);
    tmp_class_creation_41__bases = NULL;
    Py_XDECREF(tmp_class_creation_41__class_decl_dict);
    tmp_class_creation_41__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_41__metaclass);
    tmp_class_creation_41__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_41__prepared);
    tmp_class_creation_41__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_125;
    exception_value = exception_keeper_value_125;
    exception_tb = exception_keeper_tb_125;
    exception_lineno = exception_keeper_lineno_125;

    goto frame_exception_exit_1;
    // End of try:
    try_end_43:;
    CHECK_OBJECT(tmp_class_creation_41__bases_orig);
    Py_DECREF(tmp_class_creation_41__bases_orig);
    tmp_class_creation_41__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_41__bases);
    Py_DECREF(tmp_class_creation_41__bases);
    tmp_class_creation_41__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
    Py_DECREF(tmp_class_creation_41__class_decl_dict);
    tmp_class_creation_41__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_41__metaclass);
    Py_DECREF(tmp_class_creation_41__metaclass);
    tmp_class_creation_41__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_41__prepared);
    Py_DECREF(tmp_class_creation_41__prepared);
    tmp_class_creation_41__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_346;
        PyObject *tmp_tuple_element_165;
        tmp_tuple_element_165 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[116]);

        if (unlikely(tmp_tuple_element_165 == NULL)) {
            tmp_tuple_element_165 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[116]);
        }

        if (tmp_tuple_element_165 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 344;

            goto try_except_handler_126;
        }
        tmp_assign_source_346 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_346, 0, tmp_tuple_element_165);
        assert(tmp_class_creation_42__bases_orig == NULL);
        tmp_class_creation_42__bases_orig = tmp_assign_source_346;
    }
    {
        PyObject *tmp_assign_source_347;
        PyObject *tmp_dircall_arg1_42;
        CHECK_OBJECT(tmp_class_creation_42__bases_orig);
        tmp_dircall_arg1_42 = tmp_class_creation_42__bases_orig;
        Py_INCREF(tmp_dircall_arg1_42);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_42};
            tmp_assign_source_347 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_347 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 344;

            goto try_except_handler_126;
        }
        assert(tmp_class_creation_42__bases == NULL);
        tmp_class_creation_42__bases = tmp_assign_source_347;
    }
    {
        PyObject *tmp_assign_source_348;
        tmp_assign_source_348 = PyDict_New();
        assert(tmp_class_creation_42__class_decl_dict == NULL);
        tmp_class_creation_42__class_decl_dict = tmp_assign_source_348;
    }
    {
        PyObject *tmp_assign_source_349;
        PyObject *tmp_metaclass_value_42;
        bool tmp_condition_result_247;
        PyObject *tmp_key_value_124;
        PyObject *tmp_dict_arg_value_124;
        PyObject *tmp_dict_arg_value_125;
        PyObject *tmp_key_value_125;
        nuitka_bool tmp_condition_result_248;
        int tmp_truth_name_42;
        PyObject *tmp_type_arg_83;
        PyObject *tmp_expression_value_219;
        PyObject *tmp_subscript_value_55;
        PyObject *tmp_bases_value_42;
        tmp_key_value_124 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
        tmp_dict_arg_value_124 = tmp_class_creation_42__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_124, tmp_key_value_124);
        assert(!(tmp_res == -1));
        tmp_condition_result_247 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_247 != false) {
            goto condexpr_true_83;
        } else {
            goto condexpr_false_83;
        }
        condexpr_true_83:;
        CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
        tmp_dict_arg_value_125 = tmp_class_creation_42__class_decl_dict;
        tmp_key_value_125 = mod_consts[57];
        tmp_metaclass_value_42 = DICT_GET_ITEM0(tmp_dict_arg_value_125, tmp_key_value_125);
        if (tmp_metaclass_value_42 == NULL) {
            tmp_metaclass_value_42 = Py_None;
        }
        assert(!(tmp_metaclass_value_42 == NULL));
        Py_INCREF(tmp_metaclass_value_42);
        goto condexpr_end_83;
        condexpr_false_83:;
        CHECK_OBJECT(tmp_class_creation_42__bases);
        tmp_truth_name_42 = CHECK_IF_TRUE(tmp_class_creation_42__bases);
        if (tmp_truth_name_42 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 344;

            goto try_except_handler_126;
        }
        tmp_condition_result_248 = tmp_truth_name_42 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_248 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_84;
        } else {
            goto condexpr_false_84;
        }
        condexpr_true_84:;
        CHECK_OBJECT(tmp_class_creation_42__bases);
        tmp_expression_value_219 = tmp_class_creation_42__bases;
        tmp_subscript_value_55 = mod_consts[39];
        tmp_type_arg_83 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_219, tmp_subscript_value_55, 0);
        if (tmp_type_arg_83 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 344;

            goto try_except_handler_126;
        }
        tmp_metaclass_value_42 = BUILTIN_TYPE1(tmp_type_arg_83);
        Py_DECREF(tmp_type_arg_83);
        if (tmp_metaclass_value_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 344;

            goto try_except_handler_126;
        }
        goto condexpr_end_84;
        condexpr_false_84:;
        tmp_metaclass_value_42 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_42);
        condexpr_end_84:;
        condexpr_end_83:;
        CHECK_OBJECT(tmp_class_creation_42__bases);
        tmp_bases_value_42 = tmp_class_creation_42__bases;
        tmp_assign_source_349 = SELECT_METACLASS(tmp_metaclass_value_42, tmp_bases_value_42);
        Py_DECREF(tmp_metaclass_value_42);
        if (tmp_assign_source_349 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 344;

            goto try_except_handler_126;
        }
        assert(tmp_class_creation_42__metaclass == NULL);
        tmp_class_creation_42__metaclass = tmp_assign_source_349;
    }
    {
        bool tmp_condition_result_249;
        PyObject *tmp_key_value_126;
        PyObject *tmp_dict_arg_value_126;
        tmp_key_value_126 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
        tmp_dict_arg_value_126 = tmp_class_creation_42__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_126, tmp_key_value_126);
        assert(!(tmp_res == -1));
        tmp_condition_result_249 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_249 != false) {
            goto branch_yes_165;
        } else {
            goto branch_no_165;
        }
    }
    branch_yes_165:;
    CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_42__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 344;

        goto try_except_handler_126;
    }
    branch_no_165:;
    {
        nuitka_bool tmp_condition_result_250;
        PyObject *tmp_expression_value_220;
        CHECK_OBJECT(tmp_class_creation_42__metaclass);
        tmp_expression_value_220 = tmp_class_creation_42__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_220, mod_consts[58]);
        tmp_condition_result_250 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_250 == NUITKA_BOOL_TRUE) {
            goto branch_yes_166;
        } else {
            goto branch_no_166;
        }
    }
    branch_yes_166:;
    {
        PyObject *tmp_assign_source_350;
        PyObject *tmp_called_value_83;
        PyObject *tmp_expression_value_221;
        PyObject *tmp_args_value_83;
        PyObject *tmp_tuple_element_166;
        PyObject *tmp_kwargs_value_83;
        CHECK_OBJECT(tmp_class_creation_42__metaclass);
        tmp_expression_value_221 = tmp_class_creation_42__metaclass;
        tmp_called_value_83 = LOOKUP_ATTRIBUTE(tmp_expression_value_221, mod_consts[58]);
        if (tmp_called_value_83 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 344;

            goto try_except_handler_126;
        }
        tmp_tuple_element_166 = mod_consts[163];
        tmp_args_value_83 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_83, 0, tmp_tuple_element_166);
        CHECK_OBJECT(tmp_class_creation_42__bases);
        tmp_tuple_element_166 = tmp_class_creation_42__bases;
        PyTuple_SET_ITEM0(tmp_args_value_83, 1, tmp_tuple_element_166);
        CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
        tmp_kwargs_value_83 = tmp_class_creation_42__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 344;
        tmp_assign_source_350 = CALL_FUNCTION(tmp_called_value_83, tmp_args_value_83, tmp_kwargs_value_83);
        Py_DECREF(tmp_called_value_83);
        Py_DECREF(tmp_args_value_83);
        if (tmp_assign_source_350 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 344;

            goto try_except_handler_126;
        }
        assert(tmp_class_creation_42__prepared == NULL);
        tmp_class_creation_42__prepared = tmp_assign_source_350;
    }
    {
        bool tmp_condition_result_251;
        PyObject *tmp_operand_value_42;
        PyObject *tmp_expression_value_222;
        CHECK_OBJECT(tmp_class_creation_42__prepared);
        tmp_expression_value_222 = tmp_class_creation_42__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_222, mod_consts[60]);
        tmp_operand_value_42 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_42);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 344;

            goto try_except_handler_126;
        }
        tmp_condition_result_251 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_251 != false) {
            goto branch_yes_167;
        } else {
            goto branch_no_167;
        }
    }
    branch_yes_167:;
    {
        PyObject *tmp_raise_type_42;
        PyObject *tmp_raise_value_42;
        PyObject *tmp_left_value_42;
        PyObject *tmp_right_value_42;
        PyObject *tmp_tuple_element_167;
        PyObject *tmp_getattr_target_42;
        PyObject *tmp_getattr_attr_42;
        PyObject *tmp_getattr_default_42;
        tmp_raise_type_42 = PyExc_TypeError;
        tmp_left_value_42 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_42__metaclass);
        tmp_getattr_target_42 = tmp_class_creation_42__metaclass;
        tmp_getattr_attr_42 = mod_consts[62];
        tmp_getattr_default_42 = mod_consts[63];
        tmp_tuple_element_167 = BUILTIN_GETATTR(tmp_getattr_target_42, tmp_getattr_attr_42, tmp_getattr_default_42);
        if (tmp_tuple_element_167 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 344;

            goto try_except_handler_126;
        }
        tmp_right_value_42 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_223;
            PyObject *tmp_type_arg_84;
            PyTuple_SET_ITEM(tmp_right_value_42, 0, tmp_tuple_element_167);
            CHECK_OBJECT(tmp_class_creation_42__prepared);
            tmp_type_arg_84 = tmp_class_creation_42__prepared;
            tmp_expression_value_223 = BUILTIN_TYPE1(tmp_type_arg_84);
            assert(!(tmp_expression_value_223 == NULL));
            tmp_tuple_element_167 = LOOKUP_ATTRIBUTE(tmp_expression_value_223, mod_consts[62]);
            Py_DECREF(tmp_expression_value_223);
            if (tmp_tuple_element_167 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 344;

                goto tuple_build_exception_42;
            }
            PyTuple_SET_ITEM(tmp_right_value_42, 1, tmp_tuple_element_167);
        }
        goto tuple_build_noexception_42;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_42:;
        Py_DECREF(tmp_right_value_42);
        goto try_except_handler_126;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_42:;
        tmp_raise_value_42 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_42, tmp_right_value_42);
        Py_DECREF(tmp_right_value_42);
        if (tmp_raise_value_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 344;

            goto try_except_handler_126;
        }
        exception_type = tmp_raise_type_42;
        Py_INCREF(tmp_raise_type_42);
        exception_value = tmp_raise_value_42;
        exception_lineno = 344;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_126;
    }
    branch_no_167:;
    goto branch_end_166;
    branch_no_166:;
    {
        PyObject *tmp_assign_source_351;
        tmp_assign_source_351 = PyDict_New();
        assert(tmp_class_creation_42__prepared == NULL);
        tmp_class_creation_42__prepared = tmp_assign_source_351;
    }
    branch_end_166:;
    {
        PyObject *tmp_assign_source_352;
        {
            PyObject *tmp_set_locals_42;
            CHECK_OBJECT(tmp_class_creation_42__prepared);
            tmp_set_locals_42 = tmp_class_creation_42__prepared;
            locals_aiohttp$web_exceptions$$$class__42_HTTPFailedDependency_344 = tmp_set_locals_42;
            Py_INCREF(tmp_set_locals_42);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__42_HTTPFailedDependency_344, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 344;

            goto try_except_handler_128;
        }
        tmp_dictset_value = mod_consts[163];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__42_HTTPFailedDependency_344, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 344;

            goto try_except_handler_128;
        }
        if (isFrameUnusable(cache_frame_b9359806fd69eb34ab65f4475b632b3b_39)) {
            Py_XDECREF(cache_frame_b9359806fd69eb34ab65f4475b632b3b_39);

#if _DEBUG_REFCOUNTS
            if (cache_frame_b9359806fd69eb34ab65f4475b632b3b_39 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_b9359806fd69eb34ab65f4475b632b3b_39 = MAKE_FUNCTION_FRAME(codeobj_b9359806fd69eb34ab65f4475b632b3b, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_b9359806fd69eb34ab65f4475b632b3b_39->m_type_description == NULL);
        frame_b9359806fd69eb34ab65f4475b632b3b_39 = cache_frame_b9359806fd69eb34ab65f4475b632b3b_39;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_b9359806fd69eb34ab65f4475b632b3b_39);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_b9359806fd69eb34ab65f4475b632b3b_39) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[164];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__42_HTTPFailedDependency_344, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 345;
            type_description_2 = "o";
            goto frame_exception_exit_39;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b9359806fd69eb34ab65f4475b632b3b_39);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_38;

        frame_exception_exit_39:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b9359806fd69eb34ab65f4475b632b3b_39);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_b9359806fd69eb34ab65f4475b632b3b_39, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_b9359806fd69eb34ab65f4475b632b3b_39->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_b9359806fd69eb34ab65f4475b632b3b_39, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_b9359806fd69eb34ab65f4475b632b3b_39,
            type_description_2,
            outline_41_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_b9359806fd69eb34ab65f4475b632b3b_39 == cache_frame_b9359806fd69eb34ab65f4475b632b3b_39) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_b9359806fd69eb34ab65f4475b632b3b_39);
            cache_frame_b9359806fd69eb34ab65f4475b632b3b_39 = NULL;
        }

        assertFrameObject(frame_b9359806fd69eb34ab65f4475b632b3b_39);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_38;

        frame_no_exception_38:;
        goto skip_nested_handling_38;
        nested_frame_exit_38:;

        goto try_except_handler_128;
        skip_nested_handling_38:;
        {
            nuitka_bool tmp_condition_result_252;
            PyObject *tmp_cmp_expr_left_42;
            PyObject *tmp_cmp_expr_right_42;
            CHECK_OBJECT(tmp_class_creation_42__bases);
            tmp_cmp_expr_left_42 = tmp_class_creation_42__bases;
            CHECK_OBJECT(tmp_class_creation_42__bases_orig);
            tmp_cmp_expr_right_42 = tmp_class_creation_42__bases_orig;
            tmp_condition_result_252 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_42, tmp_cmp_expr_right_42);
            if (tmp_condition_result_252 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 344;

                goto try_except_handler_128;
            }
            if (tmp_condition_result_252 == NUITKA_BOOL_TRUE) {
                goto branch_yes_168;
            } else {
                goto branch_no_168;
            }
            assert(tmp_condition_result_252 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_168:;
        CHECK_OBJECT(tmp_class_creation_42__bases_orig);
        tmp_dictset_value = tmp_class_creation_42__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__42_HTTPFailedDependency_344, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 344;

            goto try_except_handler_128;
        }
        branch_no_168:;
        {
            PyObject *tmp_assign_source_353;
            PyObject *tmp_called_value_84;
            PyObject *tmp_args_value_84;
            PyObject *tmp_tuple_element_168;
            PyObject *tmp_kwargs_value_84;
            CHECK_OBJECT(tmp_class_creation_42__metaclass);
            tmp_called_value_84 = tmp_class_creation_42__metaclass;
            tmp_tuple_element_168 = mod_consts[163];
            tmp_args_value_84 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_84, 0, tmp_tuple_element_168);
            CHECK_OBJECT(tmp_class_creation_42__bases);
            tmp_tuple_element_168 = tmp_class_creation_42__bases;
            PyTuple_SET_ITEM0(tmp_args_value_84, 1, tmp_tuple_element_168);
            tmp_tuple_element_168 = locals_aiohttp$web_exceptions$$$class__42_HTTPFailedDependency_344;
            PyTuple_SET_ITEM0(tmp_args_value_84, 2, tmp_tuple_element_168);
            CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
            tmp_kwargs_value_84 = tmp_class_creation_42__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 344;
            tmp_assign_source_353 = CALL_FUNCTION(tmp_called_value_84, tmp_args_value_84, tmp_kwargs_value_84);
            Py_DECREF(tmp_args_value_84);
            if (tmp_assign_source_353 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 344;

                goto try_except_handler_128;
            }
            assert(outline_41_var___class__ == NULL);
            outline_41_var___class__ = tmp_assign_source_353;
        }
        CHECK_OBJECT(outline_41_var___class__);
        tmp_assign_source_352 = outline_41_var___class__;
        Py_INCREF(tmp_assign_source_352);
        goto try_return_handler_128;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_128:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__42_HTTPFailedDependency_344);
        locals_aiohttp$web_exceptions$$$class__42_HTTPFailedDependency_344 = NULL;
        goto try_return_handler_127;
        // Exception handler code:
        try_except_handler_128:;
        exception_keeper_type_126 = exception_type;
        exception_keeper_value_126 = exception_value;
        exception_keeper_tb_126 = exception_tb;
        exception_keeper_lineno_126 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__42_HTTPFailedDependency_344);
        locals_aiohttp$web_exceptions$$$class__42_HTTPFailedDependency_344 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_126;
        exception_value = exception_keeper_value_126;
        exception_tb = exception_keeper_tb_126;
        exception_lineno = exception_keeper_lineno_126;

        goto try_except_handler_127;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_127:;
        CHECK_OBJECT(outline_41_var___class__);
        Py_DECREF(outline_41_var___class__);
        outline_41_var___class__ = NULL;
        goto outline_result_42;
        // Exception handler code:
        try_except_handler_127:;
        exception_keeper_type_127 = exception_type;
        exception_keeper_value_127 = exception_value;
        exception_keeper_tb_127 = exception_tb;
        exception_keeper_lineno_127 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_127;
        exception_value = exception_keeper_value_127;
        exception_tb = exception_keeper_tb_127;
        exception_lineno = exception_keeper_lineno_127;

        goto outline_exception_42;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_42:;
        exception_lineno = 344;
        goto try_except_handler_126;
        outline_result_42:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[163], tmp_assign_source_352);
    }
    goto try_end_44;
    // Exception handler code:
    try_except_handler_126:;
    exception_keeper_type_128 = exception_type;
    exception_keeper_value_128 = exception_value;
    exception_keeper_tb_128 = exception_tb;
    exception_keeper_lineno_128 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_42__bases_orig);
    tmp_class_creation_42__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_42__bases);
    tmp_class_creation_42__bases = NULL;
    Py_XDECREF(tmp_class_creation_42__class_decl_dict);
    tmp_class_creation_42__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_42__metaclass);
    tmp_class_creation_42__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_42__prepared);
    tmp_class_creation_42__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_128;
    exception_value = exception_keeper_value_128;
    exception_tb = exception_keeper_tb_128;
    exception_lineno = exception_keeper_lineno_128;

    goto frame_exception_exit_1;
    // End of try:
    try_end_44:;
    CHECK_OBJECT(tmp_class_creation_42__bases_orig);
    Py_DECREF(tmp_class_creation_42__bases_orig);
    tmp_class_creation_42__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_42__bases);
    Py_DECREF(tmp_class_creation_42__bases);
    tmp_class_creation_42__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
    Py_DECREF(tmp_class_creation_42__class_decl_dict);
    tmp_class_creation_42__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_42__metaclass);
    Py_DECREF(tmp_class_creation_42__metaclass);
    tmp_class_creation_42__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_42__prepared);
    Py_DECREF(tmp_class_creation_42__prepared);
    tmp_class_creation_42__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_354;
        PyObject *tmp_tuple_element_169;
        tmp_tuple_element_169 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[116]);

        if (unlikely(tmp_tuple_element_169 == NULL)) {
            tmp_tuple_element_169 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[116]);
        }

        if (tmp_tuple_element_169 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 348;

            goto try_except_handler_129;
        }
        tmp_assign_source_354 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_354, 0, tmp_tuple_element_169);
        assert(tmp_class_creation_43__bases_orig == NULL);
        tmp_class_creation_43__bases_orig = tmp_assign_source_354;
    }
    {
        PyObject *tmp_assign_source_355;
        PyObject *tmp_dircall_arg1_43;
        CHECK_OBJECT(tmp_class_creation_43__bases_orig);
        tmp_dircall_arg1_43 = tmp_class_creation_43__bases_orig;
        Py_INCREF(tmp_dircall_arg1_43);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_43};
            tmp_assign_source_355 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_355 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 348;

            goto try_except_handler_129;
        }
        assert(tmp_class_creation_43__bases == NULL);
        tmp_class_creation_43__bases = tmp_assign_source_355;
    }
    {
        PyObject *tmp_assign_source_356;
        tmp_assign_source_356 = PyDict_New();
        assert(tmp_class_creation_43__class_decl_dict == NULL);
        tmp_class_creation_43__class_decl_dict = tmp_assign_source_356;
    }
    {
        PyObject *tmp_assign_source_357;
        PyObject *tmp_metaclass_value_43;
        bool tmp_condition_result_253;
        PyObject *tmp_key_value_127;
        PyObject *tmp_dict_arg_value_127;
        PyObject *tmp_dict_arg_value_128;
        PyObject *tmp_key_value_128;
        nuitka_bool tmp_condition_result_254;
        int tmp_truth_name_43;
        PyObject *tmp_type_arg_85;
        PyObject *tmp_expression_value_224;
        PyObject *tmp_subscript_value_56;
        PyObject *tmp_bases_value_43;
        tmp_key_value_127 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
        tmp_dict_arg_value_127 = tmp_class_creation_43__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_127, tmp_key_value_127);
        assert(!(tmp_res == -1));
        tmp_condition_result_253 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_253 != false) {
            goto condexpr_true_85;
        } else {
            goto condexpr_false_85;
        }
        condexpr_true_85:;
        CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
        tmp_dict_arg_value_128 = tmp_class_creation_43__class_decl_dict;
        tmp_key_value_128 = mod_consts[57];
        tmp_metaclass_value_43 = DICT_GET_ITEM0(tmp_dict_arg_value_128, tmp_key_value_128);
        if (tmp_metaclass_value_43 == NULL) {
            tmp_metaclass_value_43 = Py_None;
        }
        assert(!(tmp_metaclass_value_43 == NULL));
        Py_INCREF(tmp_metaclass_value_43);
        goto condexpr_end_85;
        condexpr_false_85:;
        CHECK_OBJECT(tmp_class_creation_43__bases);
        tmp_truth_name_43 = CHECK_IF_TRUE(tmp_class_creation_43__bases);
        if (tmp_truth_name_43 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 348;

            goto try_except_handler_129;
        }
        tmp_condition_result_254 = tmp_truth_name_43 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_254 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_86;
        } else {
            goto condexpr_false_86;
        }
        condexpr_true_86:;
        CHECK_OBJECT(tmp_class_creation_43__bases);
        tmp_expression_value_224 = tmp_class_creation_43__bases;
        tmp_subscript_value_56 = mod_consts[39];
        tmp_type_arg_85 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_224, tmp_subscript_value_56, 0);
        if (tmp_type_arg_85 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 348;

            goto try_except_handler_129;
        }
        tmp_metaclass_value_43 = BUILTIN_TYPE1(tmp_type_arg_85);
        Py_DECREF(tmp_type_arg_85);
        if (tmp_metaclass_value_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 348;

            goto try_except_handler_129;
        }
        goto condexpr_end_86;
        condexpr_false_86:;
        tmp_metaclass_value_43 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_43);
        condexpr_end_86:;
        condexpr_end_85:;
        CHECK_OBJECT(tmp_class_creation_43__bases);
        tmp_bases_value_43 = tmp_class_creation_43__bases;
        tmp_assign_source_357 = SELECT_METACLASS(tmp_metaclass_value_43, tmp_bases_value_43);
        Py_DECREF(tmp_metaclass_value_43);
        if (tmp_assign_source_357 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 348;

            goto try_except_handler_129;
        }
        assert(tmp_class_creation_43__metaclass == NULL);
        tmp_class_creation_43__metaclass = tmp_assign_source_357;
    }
    {
        bool tmp_condition_result_255;
        PyObject *tmp_key_value_129;
        PyObject *tmp_dict_arg_value_129;
        tmp_key_value_129 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
        tmp_dict_arg_value_129 = tmp_class_creation_43__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_129, tmp_key_value_129);
        assert(!(tmp_res == -1));
        tmp_condition_result_255 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_255 != false) {
            goto branch_yes_169;
        } else {
            goto branch_no_169;
        }
    }
    branch_yes_169:;
    CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_43__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 348;

        goto try_except_handler_129;
    }
    branch_no_169:;
    {
        nuitka_bool tmp_condition_result_256;
        PyObject *tmp_expression_value_225;
        CHECK_OBJECT(tmp_class_creation_43__metaclass);
        tmp_expression_value_225 = tmp_class_creation_43__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_225, mod_consts[58]);
        tmp_condition_result_256 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_256 == NUITKA_BOOL_TRUE) {
            goto branch_yes_170;
        } else {
            goto branch_no_170;
        }
    }
    branch_yes_170:;
    {
        PyObject *tmp_assign_source_358;
        PyObject *tmp_called_value_85;
        PyObject *tmp_expression_value_226;
        PyObject *tmp_args_value_85;
        PyObject *tmp_tuple_element_170;
        PyObject *tmp_kwargs_value_85;
        CHECK_OBJECT(tmp_class_creation_43__metaclass);
        tmp_expression_value_226 = tmp_class_creation_43__metaclass;
        tmp_called_value_85 = LOOKUP_ATTRIBUTE(tmp_expression_value_226, mod_consts[58]);
        if (tmp_called_value_85 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 348;

            goto try_except_handler_129;
        }
        tmp_tuple_element_170 = mod_consts[165];
        tmp_args_value_85 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_85, 0, tmp_tuple_element_170);
        CHECK_OBJECT(tmp_class_creation_43__bases);
        tmp_tuple_element_170 = tmp_class_creation_43__bases;
        PyTuple_SET_ITEM0(tmp_args_value_85, 1, tmp_tuple_element_170);
        CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
        tmp_kwargs_value_85 = tmp_class_creation_43__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 348;
        tmp_assign_source_358 = CALL_FUNCTION(tmp_called_value_85, tmp_args_value_85, tmp_kwargs_value_85);
        Py_DECREF(tmp_called_value_85);
        Py_DECREF(tmp_args_value_85);
        if (tmp_assign_source_358 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 348;

            goto try_except_handler_129;
        }
        assert(tmp_class_creation_43__prepared == NULL);
        tmp_class_creation_43__prepared = tmp_assign_source_358;
    }
    {
        bool tmp_condition_result_257;
        PyObject *tmp_operand_value_43;
        PyObject *tmp_expression_value_227;
        CHECK_OBJECT(tmp_class_creation_43__prepared);
        tmp_expression_value_227 = tmp_class_creation_43__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_227, mod_consts[60]);
        tmp_operand_value_43 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_43);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 348;

            goto try_except_handler_129;
        }
        tmp_condition_result_257 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_257 != false) {
            goto branch_yes_171;
        } else {
            goto branch_no_171;
        }
    }
    branch_yes_171:;
    {
        PyObject *tmp_raise_type_43;
        PyObject *tmp_raise_value_43;
        PyObject *tmp_left_value_43;
        PyObject *tmp_right_value_43;
        PyObject *tmp_tuple_element_171;
        PyObject *tmp_getattr_target_43;
        PyObject *tmp_getattr_attr_43;
        PyObject *tmp_getattr_default_43;
        tmp_raise_type_43 = PyExc_TypeError;
        tmp_left_value_43 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_43__metaclass);
        tmp_getattr_target_43 = tmp_class_creation_43__metaclass;
        tmp_getattr_attr_43 = mod_consts[62];
        tmp_getattr_default_43 = mod_consts[63];
        tmp_tuple_element_171 = BUILTIN_GETATTR(tmp_getattr_target_43, tmp_getattr_attr_43, tmp_getattr_default_43);
        if (tmp_tuple_element_171 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 348;

            goto try_except_handler_129;
        }
        tmp_right_value_43 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_228;
            PyObject *tmp_type_arg_86;
            PyTuple_SET_ITEM(tmp_right_value_43, 0, tmp_tuple_element_171);
            CHECK_OBJECT(tmp_class_creation_43__prepared);
            tmp_type_arg_86 = tmp_class_creation_43__prepared;
            tmp_expression_value_228 = BUILTIN_TYPE1(tmp_type_arg_86);
            assert(!(tmp_expression_value_228 == NULL));
            tmp_tuple_element_171 = LOOKUP_ATTRIBUTE(tmp_expression_value_228, mod_consts[62]);
            Py_DECREF(tmp_expression_value_228);
            if (tmp_tuple_element_171 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 348;

                goto tuple_build_exception_43;
            }
            PyTuple_SET_ITEM(tmp_right_value_43, 1, tmp_tuple_element_171);
        }
        goto tuple_build_noexception_43;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_43:;
        Py_DECREF(tmp_right_value_43);
        goto try_except_handler_129;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_43:;
        tmp_raise_value_43 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_43, tmp_right_value_43);
        Py_DECREF(tmp_right_value_43);
        if (tmp_raise_value_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 348;

            goto try_except_handler_129;
        }
        exception_type = tmp_raise_type_43;
        Py_INCREF(tmp_raise_type_43);
        exception_value = tmp_raise_value_43;
        exception_lineno = 348;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_129;
    }
    branch_no_171:;
    goto branch_end_170;
    branch_no_170:;
    {
        PyObject *tmp_assign_source_359;
        tmp_assign_source_359 = PyDict_New();
        assert(tmp_class_creation_43__prepared == NULL);
        tmp_class_creation_43__prepared = tmp_assign_source_359;
    }
    branch_end_170:;
    {
        PyObject *tmp_assign_source_360;
        {
            PyObject *tmp_set_locals_43;
            CHECK_OBJECT(tmp_class_creation_43__prepared);
            tmp_set_locals_43 = tmp_class_creation_43__prepared;
            locals_aiohttp$web_exceptions$$$class__43_HTTPUpgradeRequired_348 = tmp_set_locals_43;
            Py_INCREF(tmp_set_locals_43);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__43_HTTPUpgradeRequired_348, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 348;

            goto try_except_handler_131;
        }
        tmp_dictset_value = mod_consts[165];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__43_HTTPUpgradeRequired_348, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 348;

            goto try_except_handler_131;
        }
        if (isFrameUnusable(cache_frame_bef66d9d272a1b169590545e494b1c63_40)) {
            Py_XDECREF(cache_frame_bef66d9d272a1b169590545e494b1c63_40);

#if _DEBUG_REFCOUNTS
            if (cache_frame_bef66d9d272a1b169590545e494b1c63_40 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_bef66d9d272a1b169590545e494b1c63_40 = MAKE_FUNCTION_FRAME(codeobj_bef66d9d272a1b169590545e494b1c63, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_bef66d9d272a1b169590545e494b1c63_40->m_type_description == NULL);
        frame_bef66d9d272a1b169590545e494b1c63_40 = cache_frame_bef66d9d272a1b169590545e494b1c63_40;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_bef66d9d272a1b169590545e494b1c63_40);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_bef66d9d272a1b169590545e494b1c63_40) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[166];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__43_HTTPUpgradeRequired_348, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 349;
            type_description_2 = "o";
            goto frame_exception_exit_40;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bef66d9d272a1b169590545e494b1c63_40);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_39;

        frame_exception_exit_40:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bef66d9d272a1b169590545e494b1c63_40);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_bef66d9d272a1b169590545e494b1c63_40, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_bef66d9d272a1b169590545e494b1c63_40->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_bef66d9d272a1b169590545e494b1c63_40, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_bef66d9d272a1b169590545e494b1c63_40,
            type_description_2,
            outline_42_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_bef66d9d272a1b169590545e494b1c63_40 == cache_frame_bef66d9d272a1b169590545e494b1c63_40) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_bef66d9d272a1b169590545e494b1c63_40);
            cache_frame_bef66d9d272a1b169590545e494b1c63_40 = NULL;
        }

        assertFrameObject(frame_bef66d9d272a1b169590545e494b1c63_40);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_39;

        frame_no_exception_39:;
        goto skip_nested_handling_39;
        nested_frame_exit_39:;

        goto try_except_handler_131;
        skip_nested_handling_39:;
        {
            nuitka_bool tmp_condition_result_258;
            PyObject *tmp_cmp_expr_left_43;
            PyObject *tmp_cmp_expr_right_43;
            CHECK_OBJECT(tmp_class_creation_43__bases);
            tmp_cmp_expr_left_43 = tmp_class_creation_43__bases;
            CHECK_OBJECT(tmp_class_creation_43__bases_orig);
            tmp_cmp_expr_right_43 = tmp_class_creation_43__bases_orig;
            tmp_condition_result_258 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_43, tmp_cmp_expr_right_43);
            if (tmp_condition_result_258 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 348;

                goto try_except_handler_131;
            }
            if (tmp_condition_result_258 == NUITKA_BOOL_TRUE) {
                goto branch_yes_172;
            } else {
                goto branch_no_172;
            }
            assert(tmp_condition_result_258 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_172:;
        CHECK_OBJECT(tmp_class_creation_43__bases_orig);
        tmp_dictset_value = tmp_class_creation_43__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__43_HTTPUpgradeRequired_348, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 348;

            goto try_except_handler_131;
        }
        branch_no_172:;
        {
            PyObject *tmp_assign_source_361;
            PyObject *tmp_called_value_86;
            PyObject *tmp_args_value_86;
            PyObject *tmp_tuple_element_172;
            PyObject *tmp_kwargs_value_86;
            CHECK_OBJECT(tmp_class_creation_43__metaclass);
            tmp_called_value_86 = tmp_class_creation_43__metaclass;
            tmp_tuple_element_172 = mod_consts[165];
            tmp_args_value_86 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_86, 0, tmp_tuple_element_172);
            CHECK_OBJECT(tmp_class_creation_43__bases);
            tmp_tuple_element_172 = tmp_class_creation_43__bases;
            PyTuple_SET_ITEM0(tmp_args_value_86, 1, tmp_tuple_element_172);
            tmp_tuple_element_172 = locals_aiohttp$web_exceptions$$$class__43_HTTPUpgradeRequired_348;
            PyTuple_SET_ITEM0(tmp_args_value_86, 2, tmp_tuple_element_172);
            CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
            tmp_kwargs_value_86 = tmp_class_creation_43__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 348;
            tmp_assign_source_361 = CALL_FUNCTION(tmp_called_value_86, tmp_args_value_86, tmp_kwargs_value_86);
            Py_DECREF(tmp_args_value_86);
            if (tmp_assign_source_361 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 348;

                goto try_except_handler_131;
            }
            assert(outline_42_var___class__ == NULL);
            outline_42_var___class__ = tmp_assign_source_361;
        }
        CHECK_OBJECT(outline_42_var___class__);
        tmp_assign_source_360 = outline_42_var___class__;
        Py_INCREF(tmp_assign_source_360);
        goto try_return_handler_131;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_131:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__43_HTTPUpgradeRequired_348);
        locals_aiohttp$web_exceptions$$$class__43_HTTPUpgradeRequired_348 = NULL;
        goto try_return_handler_130;
        // Exception handler code:
        try_except_handler_131:;
        exception_keeper_type_129 = exception_type;
        exception_keeper_value_129 = exception_value;
        exception_keeper_tb_129 = exception_tb;
        exception_keeper_lineno_129 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__43_HTTPUpgradeRequired_348);
        locals_aiohttp$web_exceptions$$$class__43_HTTPUpgradeRequired_348 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_129;
        exception_value = exception_keeper_value_129;
        exception_tb = exception_keeper_tb_129;
        exception_lineno = exception_keeper_lineno_129;

        goto try_except_handler_130;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_130:;
        CHECK_OBJECT(outline_42_var___class__);
        Py_DECREF(outline_42_var___class__);
        outline_42_var___class__ = NULL;
        goto outline_result_43;
        // Exception handler code:
        try_except_handler_130:;
        exception_keeper_type_130 = exception_type;
        exception_keeper_value_130 = exception_value;
        exception_keeper_tb_130 = exception_tb;
        exception_keeper_lineno_130 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_130;
        exception_value = exception_keeper_value_130;
        exception_tb = exception_keeper_tb_130;
        exception_lineno = exception_keeper_lineno_130;

        goto outline_exception_43;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_43:;
        exception_lineno = 348;
        goto try_except_handler_129;
        outline_result_43:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[165], tmp_assign_source_360);
    }
    goto try_end_45;
    // Exception handler code:
    try_except_handler_129:;
    exception_keeper_type_131 = exception_type;
    exception_keeper_value_131 = exception_value;
    exception_keeper_tb_131 = exception_tb;
    exception_keeper_lineno_131 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_43__bases_orig);
    tmp_class_creation_43__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_43__bases);
    tmp_class_creation_43__bases = NULL;
    Py_XDECREF(tmp_class_creation_43__class_decl_dict);
    tmp_class_creation_43__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_43__metaclass);
    tmp_class_creation_43__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_43__prepared);
    tmp_class_creation_43__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_131;
    exception_value = exception_keeper_value_131;
    exception_tb = exception_keeper_tb_131;
    exception_lineno = exception_keeper_lineno_131;

    goto frame_exception_exit_1;
    // End of try:
    try_end_45:;
    CHECK_OBJECT(tmp_class_creation_43__bases_orig);
    Py_DECREF(tmp_class_creation_43__bases_orig);
    tmp_class_creation_43__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_43__bases);
    Py_DECREF(tmp_class_creation_43__bases);
    tmp_class_creation_43__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
    Py_DECREF(tmp_class_creation_43__class_decl_dict);
    tmp_class_creation_43__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_43__metaclass);
    Py_DECREF(tmp_class_creation_43__metaclass);
    tmp_class_creation_43__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_43__prepared);
    Py_DECREF(tmp_class_creation_43__prepared);
    tmp_class_creation_43__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_362;
        PyObject *tmp_tuple_element_173;
        tmp_tuple_element_173 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[116]);

        if (unlikely(tmp_tuple_element_173 == NULL)) {
            tmp_tuple_element_173 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[116]);
        }

        if (tmp_tuple_element_173 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 352;

            goto try_except_handler_132;
        }
        tmp_assign_source_362 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_362, 0, tmp_tuple_element_173);
        assert(tmp_class_creation_44__bases_orig == NULL);
        tmp_class_creation_44__bases_orig = tmp_assign_source_362;
    }
    {
        PyObject *tmp_assign_source_363;
        PyObject *tmp_dircall_arg1_44;
        CHECK_OBJECT(tmp_class_creation_44__bases_orig);
        tmp_dircall_arg1_44 = tmp_class_creation_44__bases_orig;
        Py_INCREF(tmp_dircall_arg1_44);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_44};
            tmp_assign_source_363 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_363 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 352;

            goto try_except_handler_132;
        }
        assert(tmp_class_creation_44__bases == NULL);
        tmp_class_creation_44__bases = tmp_assign_source_363;
    }
    {
        PyObject *tmp_assign_source_364;
        tmp_assign_source_364 = PyDict_New();
        assert(tmp_class_creation_44__class_decl_dict == NULL);
        tmp_class_creation_44__class_decl_dict = tmp_assign_source_364;
    }
    {
        PyObject *tmp_assign_source_365;
        PyObject *tmp_metaclass_value_44;
        bool tmp_condition_result_259;
        PyObject *tmp_key_value_130;
        PyObject *tmp_dict_arg_value_130;
        PyObject *tmp_dict_arg_value_131;
        PyObject *tmp_key_value_131;
        nuitka_bool tmp_condition_result_260;
        int tmp_truth_name_44;
        PyObject *tmp_type_arg_87;
        PyObject *tmp_expression_value_229;
        PyObject *tmp_subscript_value_57;
        PyObject *tmp_bases_value_44;
        tmp_key_value_130 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
        tmp_dict_arg_value_130 = tmp_class_creation_44__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_130, tmp_key_value_130);
        assert(!(tmp_res == -1));
        tmp_condition_result_259 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_259 != false) {
            goto condexpr_true_87;
        } else {
            goto condexpr_false_87;
        }
        condexpr_true_87:;
        CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
        tmp_dict_arg_value_131 = tmp_class_creation_44__class_decl_dict;
        tmp_key_value_131 = mod_consts[57];
        tmp_metaclass_value_44 = DICT_GET_ITEM0(tmp_dict_arg_value_131, tmp_key_value_131);
        if (tmp_metaclass_value_44 == NULL) {
            tmp_metaclass_value_44 = Py_None;
        }
        assert(!(tmp_metaclass_value_44 == NULL));
        Py_INCREF(tmp_metaclass_value_44);
        goto condexpr_end_87;
        condexpr_false_87:;
        CHECK_OBJECT(tmp_class_creation_44__bases);
        tmp_truth_name_44 = CHECK_IF_TRUE(tmp_class_creation_44__bases);
        if (tmp_truth_name_44 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 352;

            goto try_except_handler_132;
        }
        tmp_condition_result_260 = tmp_truth_name_44 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_260 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_88;
        } else {
            goto condexpr_false_88;
        }
        condexpr_true_88:;
        CHECK_OBJECT(tmp_class_creation_44__bases);
        tmp_expression_value_229 = tmp_class_creation_44__bases;
        tmp_subscript_value_57 = mod_consts[39];
        tmp_type_arg_87 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_229, tmp_subscript_value_57, 0);
        if (tmp_type_arg_87 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 352;

            goto try_except_handler_132;
        }
        tmp_metaclass_value_44 = BUILTIN_TYPE1(tmp_type_arg_87);
        Py_DECREF(tmp_type_arg_87);
        if (tmp_metaclass_value_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 352;

            goto try_except_handler_132;
        }
        goto condexpr_end_88;
        condexpr_false_88:;
        tmp_metaclass_value_44 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_44);
        condexpr_end_88:;
        condexpr_end_87:;
        CHECK_OBJECT(tmp_class_creation_44__bases);
        tmp_bases_value_44 = tmp_class_creation_44__bases;
        tmp_assign_source_365 = SELECT_METACLASS(tmp_metaclass_value_44, tmp_bases_value_44);
        Py_DECREF(tmp_metaclass_value_44);
        if (tmp_assign_source_365 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 352;

            goto try_except_handler_132;
        }
        assert(tmp_class_creation_44__metaclass == NULL);
        tmp_class_creation_44__metaclass = tmp_assign_source_365;
    }
    {
        bool tmp_condition_result_261;
        PyObject *tmp_key_value_132;
        PyObject *tmp_dict_arg_value_132;
        tmp_key_value_132 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
        tmp_dict_arg_value_132 = tmp_class_creation_44__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_132, tmp_key_value_132);
        assert(!(tmp_res == -1));
        tmp_condition_result_261 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_261 != false) {
            goto branch_yes_173;
        } else {
            goto branch_no_173;
        }
    }
    branch_yes_173:;
    CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_44__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 352;

        goto try_except_handler_132;
    }
    branch_no_173:;
    {
        nuitka_bool tmp_condition_result_262;
        PyObject *tmp_expression_value_230;
        CHECK_OBJECT(tmp_class_creation_44__metaclass);
        tmp_expression_value_230 = tmp_class_creation_44__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_230, mod_consts[58]);
        tmp_condition_result_262 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_262 == NUITKA_BOOL_TRUE) {
            goto branch_yes_174;
        } else {
            goto branch_no_174;
        }
    }
    branch_yes_174:;
    {
        PyObject *tmp_assign_source_366;
        PyObject *tmp_called_value_87;
        PyObject *tmp_expression_value_231;
        PyObject *tmp_args_value_87;
        PyObject *tmp_tuple_element_174;
        PyObject *tmp_kwargs_value_87;
        CHECK_OBJECT(tmp_class_creation_44__metaclass);
        tmp_expression_value_231 = tmp_class_creation_44__metaclass;
        tmp_called_value_87 = LOOKUP_ATTRIBUTE(tmp_expression_value_231, mod_consts[58]);
        if (tmp_called_value_87 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 352;

            goto try_except_handler_132;
        }
        tmp_tuple_element_174 = mod_consts[167];
        tmp_args_value_87 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_87, 0, tmp_tuple_element_174);
        CHECK_OBJECT(tmp_class_creation_44__bases);
        tmp_tuple_element_174 = tmp_class_creation_44__bases;
        PyTuple_SET_ITEM0(tmp_args_value_87, 1, tmp_tuple_element_174);
        CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
        tmp_kwargs_value_87 = tmp_class_creation_44__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 352;
        tmp_assign_source_366 = CALL_FUNCTION(tmp_called_value_87, tmp_args_value_87, tmp_kwargs_value_87);
        Py_DECREF(tmp_called_value_87);
        Py_DECREF(tmp_args_value_87);
        if (tmp_assign_source_366 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 352;

            goto try_except_handler_132;
        }
        assert(tmp_class_creation_44__prepared == NULL);
        tmp_class_creation_44__prepared = tmp_assign_source_366;
    }
    {
        bool tmp_condition_result_263;
        PyObject *tmp_operand_value_44;
        PyObject *tmp_expression_value_232;
        CHECK_OBJECT(tmp_class_creation_44__prepared);
        tmp_expression_value_232 = tmp_class_creation_44__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_232, mod_consts[60]);
        tmp_operand_value_44 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_44);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 352;

            goto try_except_handler_132;
        }
        tmp_condition_result_263 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_263 != false) {
            goto branch_yes_175;
        } else {
            goto branch_no_175;
        }
    }
    branch_yes_175:;
    {
        PyObject *tmp_raise_type_44;
        PyObject *tmp_raise_value_44;
        PyObject *tmp_left_value_44;
        PyObject *tmp_right_value_44;
        PyObject *tmp_tuple_element_175;
        PyObject *tmp_getattr_target_44;
        PyObject *tmp_getattr_attr_44;
        PyObject *tmp_getattr_default_44;
        tmp_raise_type_44 = PyExc_TypeError;
        tmp_left_value_44 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_44__metaclass);
        tmp_getattr_target_44 = tmp_class_creation_44__metaclass;
        tmp_getattr_attr_44 = mod_consts[62];
        tmp_getattr_default_44 = mod_consts[63];
        tmp_tuple_element_175 = BUILTIN_GETATTR(tmp_getattr_target_44, tmp_getattr_attr_44, tmp_getattr_default_44);
        if (tmp_tuple_element_175 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 352;

            goto try_except_handler_132;
        }
        tmp_right_value_44 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_233;
            PyObject *tmp_type_arg_88;
            PyTuple_SET_ITEM(tmp_right_value_44, 0, tmp_tuple_element_175);
            CHECK_OBJECT(tmp_class_creation_44__prepared);
            tmp_type_arg_88 = tmp_class_creation_44__prepared;
            tmp_expression_value_233 = BUILTIN_TYPE1(tmp_type_arg_88);
            assert(!(tmp_expression_value_233 == NULL));
            tmp_tuple_element_175 = LOOKUP_ATTRIBUTE(tmp_expression_value_233, mod_consts[62]);
            Py_DECREF(tmp_expression_value_233);
            if (tmp_tuple_element_175 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 352;

                goto tuple_build_exception_44;
            }
            PyTuple_SET_ITEM(tmp_right_value_44, 1, tmp_tuple_element_175);
        }
        goto tuple_build_noexception_44;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_44:;
        Py_DECREF(tmp_right_value_44);
        goto try_except_handler_132;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_44:;
        tmp_raise_value_44 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_44, tmp_right_value_44);
        Py_DECREF(tmp_right_value_44);
        if (tmp_raise_value_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 352;

            goto try_except_handler_132;
        }
        exception_type = tmp_raise_type_44;
        Py_INCREF(tmp_raise_type_44);
        exception_value = tmp_raise_value_44;
        exception_lineno = 352;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_132;
    }
    branch_no_175:;
    goto branch_end_174;
    branch_no_174:;
    {
        PyObject *tmp_assign_source_367;
        tmp_assign_source_367 = PyDict_New();
        assert(tmp_class_creation_44__prepared == NULL);
        tmp_class_creation_44__prepared = tmp_assign_source_367;
    }
    branch_end_174:;
    {
        PyObject *tmp_assign_source_368;
        {
            PyObject *tmp_set_locals_44;
            CHECK_OBJECT(tmp_class_creation_44__prepared);
            tmp_set_locals_44 = tmp_class_creation_44__prepared;
            locals_aiohttp$web_exceptions$$$class__44_HTTPPreconditionRequired_352 = tmp_set_locals_44;
            Py_INCREF(tmp_set_locals_44);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__44_HTTPPreconditionRequired_352, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 352;

            goto try_except_handler_134;
        }
        tmp_dictset_value = mod_consts[167];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__44_HTTPPreconditionRequired_352, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 352;

            goto try_except_handler_134;
        }
        if (isFrameUnusable(cache_frame_6012f98e075057dbf8f05f7da0e41c76_41)) {
            Py_XDECREF(cache_frame_6012f98e075057dbf8f05f7da0e41c76_41);

#if _DEBUG_REFCOUNTS
            if (cache_frame_6012f98e075057dbf8f05f7da0e41c76_41 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_6012f98e075057dbf8f05f7da0e41c76_41 = MAKE_FUNCTION_FRAME(codeobj_6012f98e075057dbf8f05f7da0e41c76, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_6012f98e075057dbf8f05f7da0e41c76_41->m_type_description == NULL);
        frame_6012f98e075057dbf8f05f7da0e41c76_41 = cache_frame_6012f98e075057dbf8f05f7da0e41c76_41;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_6012f98e075057dbf8f05f7da0e41c76_41);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_6012f98e075057dbf8f05f7da0e41c76_41) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[168];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__44_HTTPPreconditionRequired_352, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 353;
            type_description_2 = "o";
            goto frame_exception_exit_41;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_6012f98e075057dbf8f05f7da0e41c76_41);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_40;

        frame_exception_exit_41:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_6012f98e075057dbf8f05f7da0e41c76_41);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_6012f98e075057dbf8f05f7da0e41c76_41, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_6012f98e075057dbf8f05f7da0e41c76_41->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_6012f98e075057dbf8f05f7da0e41c76_41, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_6012f98e075057dbf8f05f7da0e41c76_41,
            type_description_2,
            outline_43_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_6012f98e075057dbf8f05f7da0e41c76_41 == cache_frame_6012f98e075057dbf8f05f7da0e41c76_41) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_6012f98e075057dbf8f05f7da0e41c76_41);
            cache_frame_6012f98e075057dbf8f05f7da0e41c76_41 = NULL;
        }

        assertFrameObject(frame_6012f98e075057dbf8f05f7da0e41c76_41);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_40;

        frame_no_exception_40:;
        goto skip_nested_handling_40;
        nested_frame_exit_40:;

        goto try_except_handler_134;
        skip_nested_handling_40:;
        {
            nuitka_bool tmp_condition_result_264;
            PyObject *tmp_cmp_expr_left_44;
            PyObject *tmp_cmp_expr_right_44;
            CHECK_OBJECT(tmp_class_creation_44__bases);
            tmp_cmp_expr_left_44 = tmp_class_creation_44__bases;
            CHECK_OBJECT(tmp_class_creation_44__bases_orig);
            tmp_cmp_expr_right_44 = tmp_class_creation_44__bases_orig;
            tmp_condition_result_264 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_44, tmp_cmp_expr_right_44);
            if (tmp_condition_result_264 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 352;

                goto try_except_handler_134;
            }
            if (tmp_condition_result_264 == NUITKA_BOOL_TRUE) {
                goto branch_yes_176;
            } else {
                goto branch_no_176;
            }
            assert(tmp_condition_result_264 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_176:;
        CHECK_OBJECT(tmp_class_creation_44__bases_orig);
        tmp_dictset_value = tmp_class_creation_44__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__44_HTTPPreconditionRequired_352, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 352;

            goto try_except_handler_134;
        }
        branch_no_176:;
        {
            PyObject *tmp_assign_source_369;
            PyObject *tmp_called_value_88;
            PyObject *tmp_args_value_88;
            PyObject *tmp_tuple_element_176;
            PyObject *tmp_kwargs_value_88;
            CHECK_OBJECT(tmp_class_creation_44__metaclass);
            tmp_called_value_88 = tmp_class_creation_44__metaclass;
            tmp_tuple_element_176 = mod_consts[167];
            tmp_args_value_88 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_88, 0, tmp_tuple_element_176);
            CHECK_OBJECT(tmp_class_creation_44__bases);
            tmp_tuple_element_176 = tmp_class_creation_44__bases;
            PyTuple_SET_ITEM0(tmp_args_value_88, 1, tmp_tuple_element_176);
            tmp_tuple_element_176 = locals_aiohttp$web_exceptions$$$class__44_HTTPPreconditionRequired_352;
            PyTuple_SET_ITEM0(tmp_args_value_88, 2, tmp_tuple_element_176);
            CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
            tmp_kwargs_value_88 = tmp_class_creation_44__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 352;
            tmp_assign_source_369 = CALL_FUNCTION(tmp_called_value_88, tmp_args_value_88, tmp_kwargs_value_88);
            Py_DECREF(tmp_args_value_88);
            if (tmp_assign_source_369 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 352;

                goto try_except_handler_134;
            }
            assert(outline_43_var___class__ == NULL);
            outline_43_var___class__ = tmp_assign_source_369;
        }
        CHECK_OBJECT(outline_43_var___class__);
        tmp_assign_source_368 = outline_43_var___class__;
        Py_INCREF(tmp_assign_source_368);
        goto try_return_handler_134;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_134:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__44_HTTPPreconditionRequired_352);
        locals_aiohttp$web_exceptions$$$class__44_HTTPPreconditionRequired_352 = NULL;
        goto try_return_handler_133;
        // Exception handler code:
        try_except_handler_134:;
        exception_keeper_type_132 = exception_type;
        exception_keeper_value_132 = exception_value;
        exception_keeper_tb_132 = exception_tb;
        exception_keeper_lineno_132 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__44_HTTPPreconditionRequired_352);
        locals_aiohttp$web_exceptions$$$class__44_HTTPPreconditionRequired_352 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_132;
        exception_value = exception_keeper_value_132;
        exception_tb = exception_keeper_tb_132;
        exception_lineno = exception_keeper_lineno_132;

        goto try_except_handler_133;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_133:;
        CHECK_OBJECT(outline_43_var___class__);
        Py_DECREF(outline_43_var___class__);
        outline_43_var___class__ = NULL;
        goto outline_result_44;
        // Exception handler code:
        try_except_handler_133:;
        exception_keeper_type_133 = exception_type;
        exception_keeper_value_133 = exception_value;
        exception_keeper_tb_133 = exception_tb;
        exception_keeper_lineno_133 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_133;
        exception_value = exception_keeper_value_133;
        exception_tb = exception_keeper_tb_133;
        exception_lineno = exception_keeper_lineno_133;

        goto outline_exception_44;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_44:;
        exception_lineno = 352;
        goto try_except_handler_132;
        outline_result_44:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[167], tmp_assign_source_368);
    }
    goto try_end_46;
    // Exception handler code:
    try_except_handler_132:;
    exception_keeper_type_134 = exception_type;
    exception_keeper_value_134 = exception_value;
    exception_keeper_tb_134 = exception_tb;
    exception_keeper_lineno_134 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_44__bases_orig);
    tmp_class_creation_44__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_44__bases);
    tmp_class_creation_44__bases = NULL;
    Py_XDECREF(tmp_class_creation_44__class_decl_dict);
    tmp_class_creation_44__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_44__metaclass);
    tmp_class_creation_44__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_44__prepared);
    tmp_class_creation_44__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_134;
    exception_value = exception_keeper_value_134;
    exception_tb = exception_keeper_tb_134;
    exception_lineno = exception_keeper_lineno_134;

    goto frame_exception_exit_1;
    // End of try:
    try_end_46:;
    CHECK_OBJECT(tmp_class_creation_44__bases_orig);
    Py_DECREF(tmp_class_creation_44__bases_orig);
    tmp_class_creation_44__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_44__bases);
    Py_DECREF(tmp_class_creation_44__bases);
    tmp_class_creation_44__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
    Py_DECREF(tmp_class_creation_44__class_decl_dict);
    tmp_class_creation_44__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_44__metaclass);
    Py_DECREF(tmp_class_creation_44__metaclass);
    tmp_class_creation_44__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_44__prepared);
    Py_DECREF(tmp_class_creation_44__prepared);
    tmp_class_creation_44__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_370;
        PyObject *tmp_tuple_element_177;
        tmp_tuple_element_177 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[116]);

        if (unlikely(tmp_tuple_element_177 == NULL)) {
            tmp_tuple_element_177 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[116]);
        }

        if (tmp_tuple_element_177 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_135;
        }
        tmp_assign_source_370 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_370, 0, tmp_tuple_element_177);
        assert(tmp_class_creation_45__bases_orig == NULL);
        tmp_class_creation_45__bases_orig = tmp_assign_source_370;
    }
    {
        PyObject *tmp_assign_source_371;
        PyObject *tmp_dircall_arg1_45;
        CHECK_OBJECT(tmp_class_creation_45__bases_orig);
        tmp_dircall_arg1_45 = tmp_class_creation_45__bases_orig;
        Py_INCREF(tmp_dircall_arg1_45);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_45};
            tmp_assign_source_371 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_371 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_135;
        }
        assert(tmp_class_creation_45__bases == NULL);
        tmp_class_creation_45__bases = tmp_assign_source_371;
    }
    {
        PyObject *tmp_assign_source_372;
        tmp_assign_source_372 = PyDict_New();
        assert(tmp_class_creation_45__class_decl_dict == NULL);
        tmp_class_creation_45__class_decl_dict = tmp_assign_source_372;
    }
    {
        PyObject *tmp_assign_source_373;
        PyObject *tmp_metaclass_value_45;
        bool tmp_condition_result_265;
        PyObject *tmp_key_value_133;
        PyObject *tmp_dict_arg_value_133;
        PyObject *tmp_dict_arg_value_134;
        PyObject *tmp_key_value_134;
        nuitka_bool tmp_condition_result_266;
        int tmp_truth_name_45;
        PyObject *tmp_type_arg_89;
        PyObject *tmp_expression_value_234;
        PyObject *tmp_subscript_value_58;
        PyObject *tmp_bases_value_45;
        tmp_key_value_133 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
        tmp_dict_arg_value_133 = tmp_class_creation_45__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_133, tmp_key_value_133);
        assert(!(tmp_res == -1));
        tmp_condition_result_265 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_265 != false) {
            goto condexpr_true_89;
        } else {
            goto condexpr_false_89;
        }
        condexpr_true_89:;
        CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
        tmp_dict_arg_value_134 = tmp_class_creation_45__class_decl_dict;
        tmp_key_value_134 = mod_consts[57];
        tmp_metaclass_value_45 = DICT_GET_ITEM0(tmp_dict_arg_value_134, tmp_key_value_134);
        if (tmp_metaclass_value_45 == NULL) {
            tmp_metaclass_value_45 = Py_None;
        }
        assert(!(tmp_metaclass_value_45 == NULL));
        Py_INCREF(tmp_metaclass_value_45);
        goto condexpr_end_89;
        condexpr_false_89:;
        CHECK_OBJECT(tmp_class_creation_45__bases);
        tmp_truth_name_45 = CHECK_IF_TRUE(tmp_class_creation_45__bases);
        if (tmp_truth_name_45 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_135;
        }
        tmp_condition_result_266 = tmp_truth_name_45 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_266 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_90;
        } else {
            goto condexpr_false_90;
        }
        condexpr_true_90:;
        CHECK_OBJECT(tmp_class_creation_45__bases);
        tmp_expression_value_234 = tmp_class_creation_45__bases;
        tmp_subscript_value_58 = mod_consts[39];
        tmp_type_arg_89 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_234, tmp_subscript_value_58, 0);
        if (tmp_type_arg_89 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_135;
        }
        tmp_metaclass_value_45 = BUILTIN_TYPE1(tmp_type_arg_89);
        Py_DECREF(tmp_type_arg_89);
        if (tmp_metaclass_value_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_135;
        }
        goto condexpr_end_90;
        condexpr_false_90:;
        tmp_metaclass_value_45 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_45);
        condexpr_end_90:;
        condexpr_end_89:;
        CHECK_OBJECT(tmp_class_creation_45__bases);
        tmp_bases_value_45 = tmp_class_creation_45__bases;
        tmp_assign_source_373 = SELECT_METACLASS(tmp_metaclass_value_45, tmp_bases_value_45);
        Py_DECREF(tmp_metaclass_value_45);
        if (tmp_assign_source_373 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_135;
        }
        assert(tmp_class_creation_45__metaclass == NULL);
        tmp_class_creation_45__metaclass = tmp_assign_source_373;
    }
    {
        bool tmp_condition_result_267;
        PyObject *tmp_key_value_135;
        PyObject *tmp_dict_arg_value_135;
        tmp_key_value_135 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
        tmp_dict_arg_value_135 = tmp_class_creation_45__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_135, tmp_key_value_135);
        assert(!(tmp_res == -1));
        tmp_condition_result_267 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_267 != false) {
            goto branch_yes_177;
        } else {
            goto branch_no_177;
        }
    }
    branch_yes_177:;
    CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_45__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 356;

        goto try_except_handler_135;
    }
    branch_no_177:;
    {
        nuitka_bool tmp_condition_result_268;
        PyObject *tmp_expression_value_235;
        CHECK_OBJECT(tmp_class_creation_45__metaclass);
        tmp_expression_value_235 = tmp_class_creation_45__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_235, mod_consts[58]);
        tmp_condition_result_268 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_268 == NUITKA_BOOL_TRUE) {
            goto branch_yes_178;
        } else {
            goto branch_no_178;
        }
    }
    branch_yes_178:;
    {
        PyObject *tmp_assign_source_374;
        PyObject *tmp_called_value_89;
        PyObject *tmp_expression_value_236;
        PyObject *tmp_args_value_89;
        PyObject *tmp_tuple_element_178;
        PyObject *tmp_kwargs_value_89;
        CHECK_OBJECT(tmp_class_creation_45__metaclass);
        tmp_expression_value_236 = tmp_class_creation_45__metaclass;
        tmp_called_value_89 = LOOKUP_ATTRIBUTE(tmp_expression_value_236, mod_consts[58]);
        if (tmp_called_value_89 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_135;
        }
        tmp_tuple_element_178 = mod_consts[169];
        tmp_args_value_89 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_89, 0, tmp_tuple_element_178);
        CHECK_OBJECT(tmp_class_creation_45__bases);
        tmp_tuple_element_178 = tmp_class_creation_45__bases;
        PyTuple_SET_ITEM0(tmp_args_value_89, 1, tmp_tuple_element_178);
        CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
        tmp_kwargs_value_89 = tmp_class_creation_45__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 356;
        tmp_assign_source_374 = CALL_FUNCTION(tmp_called_value_89, tmp_args_value_89, tmp_kwargs_value_89);
        Py_DECREF(tmp_called_value_89);
        Py_DECREF(tmp_args_value_89);
        if (tmp_assign_source_374 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_135;
        }
        assert(tmp_class_creation_45__prepared == NULL);
        tmp_class_creation_45__prepared = tmp_assign_source_374;
    }
    {
        bool tmp_condition_result_269;
        PyObject *tmp_operand_value_45;
        PyObject *tmp_expression_value_237;
        CHECK_OBJECT(tmp_class_creation_45__prepared);
        tmp_expression_value_237 = tmp_class_creation_45__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_237, mod_consts[60]);
        tmp_operand_value_45 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_45);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_135;
        }
        tmp_condition_result_269 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_269 != false) {
            goto branch_yes_179;
        } else {
            goto branch_no_179;
        }
    }
    branch_yes_179:;
    {
        PyObject *tmp_raise_type_45;
        PyObject *tmp_raise_value_45;
        PyObject *tmp_left_value_45;
        PyObject *tmp_right_value_45;
        PyObject *tmp_tuple_element_179;
        PyObject *tmp_getattr_target_45;
        PyObject *tmp_getattr_attr_45;
        PyObject *tmp_getattr_default_45;
        tmp_raise_type_45 = PyExc_TypeError;
        tmp_left_value_45 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_45__metaclass);
        tmp_getattr_target_45 = tmp_class_creation_45__metaclass;
        tmp_getattr_attr_45 = mod_consts[62];
        tmp_getattr_default_45 = mod_consts[63];
        tmp_tuple_element_179 = BUILTIN_GETATTR(tmp_getattr_target_45, tmp_getattr_attr_45, tmp_getattr_default_45);
        if (tmp_tuple_element_179 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_135;
        }
        tmp_right_value_45 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_238;
            PyObject *tmp_type_arg_90;
            PyTuple_SET_ITEM(tmp_right_value_45, 0, tmp_tuple_element_179);
            CHECK_OBJECT(tmp_class_creation_45__prepared);
            tmp_type_arg_90 = tmp_class_creation_45__prepared;
            tmp_expression_value_238 = BUILTIN_TYPE1(tmp_type_arg_90);
            assert(!(tmp_expression_value_238 == NULL));
            tmp_tuple_element_179 = LOOKUP_ATTRIBUTE(tmp_expression_value_238, mod_consts[62]);
            Py_DECREF(tmp_expression_value_238);
            if (tmp_tuple_element_179 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 356;

                goto tuple_build_exception_45;
            }
            PyTuple_SET_ITEM(tmp_right_value_45, 1, tmp_tuple_element_179);
        }
        goto tuple_build_noexception_45;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_45:;
        Py_DECREF(tmp_right_value_45);
        goto try_except_handler_135;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_45:;
        tmp_raise_value_45 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_45, tmp_right_value_45);
        Py_DECREF(tmp_right_value_45);
        if (tmp_raise_value_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_135;
        }
        exception_type = tmp_raise_type_45;
        Py_INCREF(tmp_raise_type_45);
        exception_value = tmp_raise_value_45;
        exception_lineno = 356;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_135;
    }
    branch_no_179:;
    goto branch_end_178;
    branch_no_178:;
    {
        PyObject *tmp_assign_source_375;
        tmp_assign_source_375 = PyDict_New();
        assert(tmp_class_creation_45__prepared == NULL);
        tmp_class_creation_45__prepared = tmp_assign_source_375;
    }
    branch_end_178:;
    {
        PyObject *tmp_assign_source_376;
        {
            PyObject *tmp_set_locals_45;
            CHECK_OBJECT(tmp_class_creation_45__prepared);
            tmp_set_locals_45 = tmp_class_creation_45__prepared;
            locals_aiohttp$web_exceptions$$$class__45_HTTPTooManyRequests_356 = tmp_set_locals_45;
            Py_INCREF(tmp_set_locals_45);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__45_HTTPTooManyRequests_356, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_137;
        }
        tmp_dictset_value = mod_consts[169];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__45_HTTPTooManyRequests_356, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_137;
        }
        if (isFrameUnusable(cache_frame_08772f8718f00154fa2a03650fa59b0f_42)) {
            Py_XDECREF(cache_frame_08772f8718f00154fa2a03650fa59b0f_42);

#if _DEBUG_REFCOUNTS
            if (cache_frame_08772f8718f00154fa2a03650fa59b0f_42 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_08772f8718f00154fa2a03650fa59b0f_42 = MAKE_FUNCTION_FRAME(codeobj_08772f8718f00154fa2a03650fa59b0f, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_08772f8718f00154fa2a03650fa59b0f_42->m_type_description == NULL);
        frame_08772f8718f00154fa2a03650fa59b0f_42 = cache_frame_08772f8718f00154fa2a03650fa59b0f_42;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_08772f8718f00154fa2a03650fa59b0f_42);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_08772f8718f00154fa2a03650fa59b0f_42) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[170];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__45_HTTPTooManyRequests_356, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 357;
            type_description_2 = "o";
            goto frame_exception_exit_42;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_08772f8718f00154fa2a03650fa59b0f_42);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_41;

        frame_exception_exit_42:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_08772f8718f00154fa2a03650fa59b0f_42);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_08772f8718f00154fa2a03650fa59b0f_42, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_08772f8718f00154fa2a03650fa59b0f_42->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_08772f8718f00154fa2a03650fa59b0f_42, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_08772f8718f00154fa2a03650fa59b0f_42,
            type_description_2,
            outline_44_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_08772f8718f00154fa2a03650fa59b0f_42 == cache_frame_08772f8718f00154fa2a03650fa59b0f_42) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_08772f8718f00154fa2a03650fa59b0f_42);
            cache_frame_08772f8718f00154fa2a03650fa59b0f_42 = NULL;
        }

        assertFrameObject(frame_08772f8718f00154fa2a03650fa59b0f_42);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_41;

        frame_no_exception_41:;
        goto skip_nested_handling_41;
        nested_frame_exit_41:;

        goto try_except_handler_137;
        skip_nested_handling_41:;
        {
            nuitka_bool tmp_condition_result_270;
            PyObject *tmp_cmp_expr_left_45;
            PyObject *tmp_cmp_expr_right_45;
            CHECK_OBJECT(tmp_class_creation_45__bases);
            tmp_cmp_expr_left_45 = tmp_class_creation_45__bases;
            CHECK_OBJECT(tmp_class_creation_45__bases_orig);
            tmp_cmp_expr_right_45 = tmp_class_creation_45__bases_orig;
            tmp_condition_result_270 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_45, tmp_cmp_expr_right_45);
            if (tmp_condition_result_270 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 356;

                goto try_except_handler_137;
            }
            if (tmp_condition_result_270 == NUITKA_BOOL_TRUE) {
                goto branch_yes_180;
            } else {
                goto branch_no_180;
            }
            assert(tmp_condition_result_270 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_180:;
        CHECK_OBJECT(tmp_class_creation_45__bases_orig);
        tmp_dictset_value = tmp_class_creation_45__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__45_HTTPTooManyRequests_356, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_137;
        }
        branch_no_180:;
        {
            PyObject *tmp_assign_source_377;
            PyObject *tmp_called_value_90;
            PyObject *tmp_args_value_90;
            PyObject *tmp_tuple_element_180;
            PyObject *tmp_kwargs_value_90;
            CHECK_OBJECT(tmp_class_creation_45__metaclass);
            tmp_called_value_90 = tmp_class_creation_45__metaclass;
            tmp_tuple_element_180 = mod_consts[169];
            tmp_args_value_90 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_90, 0, tmp_tuple_element_180);
            CHECK_OBJECT(tmp_class_creation_45__bases);
            tmp_tuple_element_180 = tmp_class_creation_45__bases;
            PyTuple_SET_ITEM0(tmp_args_value_90, 1, tmp_tuple_element_180);
            tmp_tuple_element_180 = locals_aiohttp$web_exceptions$$$class__45_HTTPTooManyRequests_356;
            PyTuple_SET_ITEM0(tmp_args_value_90, 2, tmp_tuple_element_180);
            CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
            tmp_kwargs_value_90 = tmp_class_creation_45__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 356;
            tmp_assign_source_377 = CALL_FUNCTION(tmp_called_value_90, tmp_args_value_90, tmp_kwargs_value_90);
            Py_DECREF(tmp_args_value_90);
            if (tmp_assign_source_377 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 356;

                goto try_except_handler_137;
            }
            assert(outline_44_var___class__ == NULL);
            outline_44_var___class__ = tmp_assign_source_377;
        }
        CHECK_OBJECT(outline_44_var___class__);
        tmp_assign_source_376 = outline_44_var___class__;
        Py_INCREF(tmp_assign_source_376);
        goto try_return_handler_137;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_137:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__45_HTTPTooManyRequests_356);
        locals_aiohttp$web_exceptions$$$class__45_HTTPTooManyRequests_356 = NULL;
        goto try_return_handler_136;
        // Exception handler code:
        try_except_handler_137:;
        exception_keeper_type_135 = exception_type;
        exception_keeper_value_135 = exception_value;
        exception_keeper_tb_135 = exception_tb;
        exception_keeper_lineno_135 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__45_HTTPTooManyRequests_356);
        locals_aiohttp$web_exceptions$$$class__45_HTTPTooManyRequests_356 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_135;
        exception_value = exception_keeper_value_135;
        exception_tb = exception_keeper_tb_135;
        exception_lineno = exception_keeper_lineno_135;

        goto try_except_handler_136;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_136:;
        CHECK_OBJECT(outline_44_var___class__);
        Py_DECREF(outline_44_var___class__);
        outline_44_var___class__ = NULL;
        goto outline_result_45;
        // Exception handler code:
        try_except_handler_136:;
        exception_keeper_type_136 = exception_type;
        exception_keeper_value_136 = exception_value;
        exception_keeper_tb_136 = exception_tb;
        exception_keeper_lineno_136 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_136;
        exception_value = exception_keeper_value_136;
        exception_tb = exception_keeper_tb_136;
        exception_lineno = exception_keeper_lineno_136;

        goto outline_exception_45;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_45:;
        exception_lineno = 356;
        goto try_except_handler_135;
        outline_result_45:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[169], tmp_assign_source_376);
    }
    goto try_end_47;
    // Exception handler code:
    try_except_handler_135:;
    exception_keeper_type_137 = exception_type;
    exception_keeper_value_137 = exception_value;
    exception_keeper_tb_137 = exception_tb;
    exception_keeper_lineno_137 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_45__bases_orig);
    tmp_class_creation_45__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_45__bases);
    tmp_class_creation_45__bases = NULL;
    Py_XDECREF(tmp_class_creation_45__class_decl_dict);
    tmp_class_creation_45__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_45__metaclass);
    tmp_class_creation_45__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_45__prepared);
    tmp_class_creation_45__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_137;
    exception_value = exception_keeper_value_137;
    exception_tb = exception_keeper_tb_137;
    exception_lineno = exception_keeper_lineno_137;

    goto frame_exception_exit_1;
    // End of try:
    try_end_47:;
    CHECK_OBJECT(tmp_class_creation_45__bases_orig);
    Py_DECREF(tmp_class_creation_45__bases_orig);
    tmp_class_creation_45__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_45__bases);
    Py_DECREF(tmp_class_creation_45__bases);
    tmp_class_creation_45__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
    Py_DECREF(tmp_class_creation_45__class_decl_dict);
    tmp_class_creation_45__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_45__metaclass);
    Py_DECREF(tmp_class_creation_45__metaclass);
    tmp_class_creation_45__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_45__prepared);
    Py_DECREF(tmp_class_creation_45__prepared);
    tmp_class_creation_45__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_378;
        PyObject *tmp_tuple_element_181;
        tmp_tuple_element_181 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[116]);

        if (unlikely(tmp_tuple_element_181 == NULL)) {
            tmp_tuple_element_181 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[116]);
        }

        if (tmp_tuple_element_181 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 360;

            goto try_except_handler_138;
        }
        tmp_assign_source_378 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_378, 0, tmp_tuple_element_181);
        assert(tmp_class_creation_46__bases_orig == NULL);
        tmp_class_creation_46__bases_orig = tmp_assign_source_378;
    }
    {
        PyObject *tmp_assign_source_379;
        PyObject *tmp_dircall_arg1_46;
        CHECK_OBJECT(tmp_class_creation_46__bases_orig);
        tmp_dircall_arg1_46 = tmp_class_creation_46__bases_orig;
        Py_INCREF(tmp_dircall_arg1_46);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_46};
            tmp_assign_source_379 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_379 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 360;

            goto try_except_handler_138;
        }
        assert(tmp_class_creation_46__bases == NULL);
        tmp_class_creation_46__bases = tmp_assign_source_379;
    }
    {
        PyObject *tmp_assign_source_380;
        tmp_assign_source_380 = PyDict_New();
        assert(tmp_class_creation_46__class_decl_dict == NULL);
        tmp_class_creation_46__class_decl_dict = tmp_assign_source_380;
    }
    {
        PyObject *tmp_assign_source_381;
        PyObject *tmp_metaclass_value_46;
        bool tmp_condition_result_271;
        PyObject *tmp_key_value_136;
        PyObject *tmp_dict_arg_value_136;
        PyObject *tmp_dict_arg_value_137;
        PyObject *tmp_key_value_137;
        nuitka_bool tmp_condition_result_272;
        int tmp_truth_name_46;
        PyObject *tmp_type_arg_91;
        PyObject *tmp_expression_value_239;
        PyObject *tmp_subscript_value_59;
        PyObject *tmp_bases_value_46;
        tmp_key_value_136 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
        tmp_dict_arg_value_136 = tmp_class_creation_46__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_136, tmp_key_value_136);
        assert(!(tmp_res == -1));
        tmp_condition_result_271 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_271 != false) {
            goto condexpr_true_91;
        } else {
            goto condexpr_false_91;
        }
        condexpr_true_91:;
        CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
        tmp_dict_arg_value_137 = tmp_class_creation_46__class_decl_dict;
        tmp_key_value_137 = mod_consts[57];
        tmp_metaclass_value_46 = DICT_GET_ITEM0(tmp_dict_arg_value_137, tmp_key_value_137);
        if (tmp_metaclass_value_46 == NULL) {
            tmp_metaclass_value_46 = Py_None;
        }
        assert(!(tmp_metaclass_value_46 == NULL));
        Py_INCREF(tmp_metaclass_value_46);
        goto condexpr_end_91;
        condexpr_false_91:;
        CHECK_OBJECT(tmp_class_creation_46__bases);
        tmp_truth_name_46 = CHECK_IF_TRUE(tmp_class_creation_46__bases);
        if (tmp_truth_name_46 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 360;

            goto try_except_handler_138;
        }
        tmp_condition_result_272 = tmp_truth_name_46 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_272 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_92;
        } else {
            goto condexpr_false_92;
        }
        condexpr_true_92:;
        CHECK_OBJECT(tmp_class_creation_46__bases);
        tmp_expression_value_239 = tmp_class_creation_46__bases;
        tmp_subscript_value_59 = mod_consts[39];
        tmp_type_arg_91 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_239, tmp_subscript_value_59, 0);
        if (tmp_type_arg_91 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 360;

            goto try_except_handler_138;
        }
        tmp_metaclass_value_46 = BUILTIN_TYPE1(tmp_type_arg_91);
        Py_DECREF(tmp_type_arg_91);
        if (tmp_metaclass_value_46 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 360;

            goto try_except_handler_138;
        }
        goto condexpr_end_92;
        condexpr_false_92:;
        tmp_metaclass_value_46 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_46);
        condexpr_end_92:;
        condexpr_end_91:;
        CHECK_OBJECT(tmp_class_creation_46__bases);
        tmp_bases_value_46 = tmp_class_creation_46__bases;
        tmp_assign_source_381 = SELECT_METACLASS(tmp_metaclass_value_46, tmp_bases_value_46);
        Py_DECREF(tmp_metaclass_value_46);
        if (tmp_assign_source_381 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 360;

            goto try_except_handler_138;
        }
        assert(tmp_class_creation_46__metaclass == NULL);
        tmp_class_creation_46__metaclass = tmp_assign_source_381;
    }
    {
        bool tmp_condition_result_273;
        PyObject *tmp_key_value_138;
        PyObject *tmp_dict_arg_value_138;
        tmp_key_value_138 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
        tmp_dict_arg_value_138 = tmp_class_creation_46__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_138, tmp_key_value_138);
        assert(!(tmp_res == -1));
        tmp_condition_result_273 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_273 != false) {
            goto branch_yes_181;
        } else {
            goto branch_no_181;
        }
    }
    branch_yes_181:;
    CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_46__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 360;

        goto try_except_handler_138;
    }
    branch_no_181:;
    {
        nuitka_bool tmp_condition_result_274;
        PyObject *tmp_expression_value_240;
        CHECK_OBJECT(tmp_class_creation_46__metaclass);
        tmp_expression_value_240 = tmp_class_creation_46__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_240, mod_consts[58]);
        tmp_condition_result_274 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_274 == NUITKA_BOOL_TRUE) {
            goto branch_yes_182;
        } else {
            goto branch_no_182;
        }
    }
    branch_yes_182:;
    {
        PyObject *tmp_assign_source_382;
        PyObject *tmp_called_value_91;
        PyObject *tmp_expression_value_241;
        PyObject *tmp_args_value_91;
        PyObject *tmp_tuple_element_182;
        PyObject *tmp_kwargs_value_91;
        CHECK_OBJECT(tmp_class_creation_46__metaclass);
        tmp_expression_value_241 = tmp_class_creation_46__metaclass;
        tmp_called_value_91 = LOOKUP_ATTRIBUTE(tmp_expression_value_241, mod_consts[58]);
        if (tmp_called_value_91 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 360;

            goto try_except_handler_138;
        }
        tmp_tuple_element_182 = mod_consts[171];
        tmp_args_value_91 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_91, 0, tmp_tuple_element_182);
        CHECK_OBJECT(tmp_class_creation_46__bases);
        tmp_tuple_element_182 = tmp_class_creation_46__bases;
        PyTuple_SET_ITEM0(tmp_args_value_91, 1, tmp_tuple_element_182);
        CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
        tmp_kwargs_value_91 = tmp_class_creation_46__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 360;
        tmp_assign_source_382 = CALL_FUNCTION(tmp_called_value_91, tmp_args_value_91, tmp_kwargs_value_91);
        Py_DECREF(tmp_called_value_91);
        Py_DECREF(tmp_args_value_91);
        if (tmp_assign_source_382 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 360;

            goto try_except_handler_138;
        }
        assert(tmp_class_creation_46__prepared == NULL);
        tmp_class_creation_46__prepared = tmp_assign_source_382;
    }
    {
        bool tmp_condition_result_275;
        PyObject *tmp_operand_value_46;
        PyObject *tmp_expression_value_242;
        CHECK_OBJECT(tmp_class_creation_46__prepared);
        tmp_expression_value_242 = tmp_class_creation_46__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_242, mod_consts[60]);
        tmp_operand_value_46 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_46);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 360;

            goto try_except_handler_138;
        }
        tmp_condition_result_275 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_275 != false) {
            goto branch_yes_183;
        } else {
            goto branch_no_183;
        }
    }
    branch_yes_183:;
    {
        PyObject *tmp_raise_type_46;
        PyObject *tmp_raise_value_46;
        PyObject *tmp_left_value_46;
        PyObject *tmp_right_value_46;
        PyObject *tmp_tuple_element_183;
        PyObject *tmp_getattr_target_46;
        PyObject *tmp_getattr_attr_46;
        PyObject *tmp_getattr_default_46;
        tmp_raise_type_46 = PyExc_TypeError;
        tmp_left_value_46 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_46__metaclass);
        tmp_getattr_target_46 = tmp_class_creation_46__metaclass;
        tmp_getattr_attr_46 = mod_consts[62];
        tmp_getattr_default_46 = mod_consts[63];
        tmp_tuple_element_183 = BUILTIN_GETATTR(tmp_getattr_target_46, tmp_getattr_attr_46, tmp_getattr_default_46);
        if (tmp_tuple_element_183 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 360;

            goto try_except_handler_138;
        }
        tmp_right_value_46 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_243;
            PyObject *tmp_type_arg_92;
            PyTuple_SET_ITEM(tmp_right_value_46, 0, tmp_tuple_element_183);
            CHECK_OBJECT(tmp_class_creation_46__prepared);
            tmp_type_arg_92 = tmp_class_creation_46__prepared;
            tmp_expression_value_243 = BUILTIN_TYPE1(tmp_type_arg_92);
            assert(!(tmp_expression_value_243 == NULL));
            tmp_tuple_element_183 = LOOKUP_ATTRIBUTE(tmp_expression_value_243, mod_consts[62]);
            Py_DECREF(tmp_expression_value_243);
            if (tmp_tuple_element_183 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 360;

                goto tuple_build_exception_46;
            }
            PyTuple_SET_ITEM(tmp_right_value_46, 1, tmp_tuple_element_183);
        }
        goto tuple_build_noexception_46;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_46:;
        Py_DECREF(tmp_right_value_46);
        goto try_except_handler_138;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_46:;
        tmp_raise_value_46 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_46, tmp_right_value_46);
        Py_DECREF(tmp_right_value_46);
        if (tmp_raise_value_46 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 360;

            goto try_except_handler_138;
        }
        exception_type = tmp_raise_type_46;
        Py_INCREF(tmp_raise_type_46);
        exception_value = tmp_raise_value_46;
        exception_lineno = 360;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_138;
    }
    branch_no_183:;
    goto branch_end_182;
    branch_no_182:;
    {
        PyObject *tmp_assign_source_383;
        tmp_assign_source_383 = PyDict_New();
        assert(tmp_class_creation_46__prepared == NULL);
        tmp_class_creation_46__prepared = tmp_assign_source_383;
    }
    branch_end_182:;
    {
        PyObject *tmp_assign_source_384;
        {
            PyObject *tmp_set_locals_46;
            CHECK_OBJECT(tmp_class_creation_46__prepared);
            tmp_set_locals_46 = tmp_class_creation_46__prepared;
            locals_aiohttp$web_exceptions$$$class__46_HTTPRequestHeaderFieldsTooLarge_360 = tmp_set_locals_46;
            Py_INCREF(tmp_set_locals_46);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__46_HTTPRequestHeaderFieldsTooLarge_360, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 360;

            goto try_except_handler_140;
        }
        tmp_dictset_value = mod_consts[171];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__46_HTTPRequestHeaderFieldsTooLarge_360, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 360;

            goto try_except_handler_140;
        }
        if (isFrameUnusable(cache_frame_fe9477504f315378ef668bd520edff9f_43)) {
            Py_XDECREF(cache_frame_fe9477504f315378ef668bd520edff9f_43);

#if _DEBUG_REFCOUNTS
            if (cache_frame_fe9477504f315378ef668bd520edff9f_43 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_fe9477504f315378ef668bd520edff9f_43 = MAKE_FUNCTION_FRAME(codeobj_fe9477504f315378ef668bd520edff9f, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_fe9477504f315378ef668bd520edff9f_43->m_type_description == NULL);
        frame_fe9477504f315378ef668bd520edff9f_43 = cache_frame_fe9477504f315378ef668bd520edff9f_43;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_fe9477504f315378ef668bd520edff9f_43);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_fe9477504f315378ef668bd520edff9f_43) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[172];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__46_HTTPRequestHeaderFieldsTooLarge_360, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 361;
            type_description_2 = "o";
            goto frame_exception_exit_43;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_fe9477504f315378ef668bd520edff9f_43);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_42;

        frame_exception_exit_43:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_fe9477504f315378ef668bd520edff9f_43);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_fe9477504f315378ef668bd520edff9f_43, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_fe9477504f315378ef668bd520edff9f_43->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_fe9477504f315378ef668bd520edff9f_43, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_fe9477504f315378ef668bd520edff9f_43,
            type_description_2,
            outline_45_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_fe9477504f315378ef668bd520edff9f_43 == cache_frame_fe9477504f315378ef668bd520edff9f_43) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_fe9477504f315378ef668bd520edff9f_43);
            cache_frame_fe9477504f315378ef668bd520edff9f_43 = NULL;
        }

        assertFrameObject(frame_fe9477504f315378ef668bd520edff9f_43);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_42;

        frame_no_exception_42:;
        goto skip_nested_handling_42;
        nested_frame_exit_42:;

        goto try_except_handler_140;
        skip_nested_handling_42:;
        {
            nuitka_bool tmp_condition_result_276;
            PyObject *tmp_cmp_expr_left_46;
            PyObject *tmp_cmp_expr_right_46;
            CHECK_OBJECT(tmp_class_creation_46__bases);
            tmp_cmp_expr_left_46 = tmp_class_creation_46__bases;
            CHECK_OBJECT(tmp_class_creation_46__bases_orig);
            tmp_cmp_expr_right_46 = tmp_class_creation_46__bases_orig;
            tmp_condition_result_276 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_46, tmp_cmp_expr_right_46);
            if (tmp_condition_result_276 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 360;

                goto try_except_handler_140;
            }
            if (tmp_condition_result_276 == NUITKA_BOOL_TRUE) {
                goto branch_yes_184;
            } else {
                goto branch_no_184;
            }
            assert(tmp_condition_result_276 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_184:;
        CHECK_OBJECT(tmp_class_creation_46__bases_orig);
        tmp_dictset_value = tmp_class_creation_46__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__46_HTTPRequestHeaderFieldsTooLarge_360, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 360;

            goto try_except_handler_140;
        }
        branch_no_184:;
        {
            PyObject *tmp_assign_source_385;
            PyObject *tmp_called_value_92;
            PyObject *tmp_args_value_92;
            PyObject *tmp_tuple_element_184;
            PyObject *tmp_kwargs_value_92;
            CHECK_OBJECT(tmp_class_creation_46__metaclass);
            tmp_called_value_92 = tmp_class_creation_46__metaclass;
            tmp_tuple_element_184 = mod_consts[171];
            tmp_args_value_92 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_92, 0, tmp_tuple_element_184);
            CHECK_OBJECT(tmp_class_creation_46__bases);
            tmp_tuple_element_184 = tmp_class_creation_46__bases;
            PyTuple_SET_ITEM0(tmp_args_value_92, 1, tmp_tuple_element_184);
            tmp_tuple_element_184 = locals_aiohttp$web_exceptions$$$class__46_HTTPRequestHeaderFieldsTooLarge_360;
            PyTuple_SET_ITEM0(tmp_args_value_92, 2, tmp_tuple_element_184);
            CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
            tmp_kwargs_value_92 = tmp_class_creation_46__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 360;
            tmp_assign_source_385 = CALL_FUNCTION(tmp_called_value_92, tmp_args_value_92, tmp_kwargs_value_92);
            Py_DECREF(tmp_args_value_92);
            if (tmp_assign_source_385 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 360;

                goto try_except_handler_140;
            }
            assert(outline_45_var___class__ == NULL);
            outline_45_var___class__ = tmp_assign_source_385;
        }
        CHECK_OBJECT(outline_45_var___class__);
        tmp_assign_source_384 = outline_45_var___class__;
        Py_INCREF(tmp_assign_source_384);
        goto try_return_handler_140;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_140:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__46_HTTPRequestHeaderFieldsTooLarge_360);
        locals_aiohttp$web_exceptions$$$class__46_HTTPRequestHeaderFieldsTooLarge_360 = NULL;
        goto try_return_handler_139;
        // Exception handler code:
        try_except_handler_140:;
        exception_keeper_type_138 = exception_type;
        exception_keeper_value_138 = exception_value;
        exception_keeper_tb_138 = exception_tb;
        exception_keeper_lineno_138 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__46_HTTPRequestHeaderFieldsTooLarge_360);
        locals_aiohttp$web_exceptions$$$class__46_HTTPRequestHeaderFieldsTooLarge_360 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_138;
        exception_value = exception_keeper_value_138;
        exception_tb = exception_keeper_tb_138;
        exception_lineno = exception_keeper_lineno_138;

        goto try_except_handler_139;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_139:;
        CHECK_OBJECT(outline_45_var___class__);
        Py_DECREF(outline_45_var___class__);
        outline_45_var___class__ = NULL;
        goto outline_result_46;
        // Exception handler code:
        try_except_handler_139:;
        exception_keeper_type_139 = exception_type;
        exception_keeper_value_139 = exception_value;
        exception_keeper_tb_139 = exception_tb;
        exception_keeper_lineno_139 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_139;
        exception_value = exception_keeper_value_139;
        exception_tb = exception_keeper_tb_139;
        exception_lineno = exception_keeper_lineno_139;

        goto outline_exception_46;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_46:;
        exception_lineno = 360;
        goto try_except_handler_138;
        outline_result_46:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[171], tmp_assign_source_384);
    }
    goto try_end_48;
    // Exception handler code:
    try_except_handler_138:;
    exception_keeper_type_140 = exception_type;
    exception_keeper_value_140 = exception_value;
    exception_keeper_tb_140 = exception_tb;
    exception_keeper_lineno_140 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_46__bases_orig);
    tmp_class_creation_46__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_46__bases);
    tmp_class_creation_46__bases = NULL;
    Py_XDECREF(tmp_class_creation_46__class_decl_dict);
    tmp_class_creation_46__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_46__metaclass);
    tmp_class_creation_46__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_46__prepared);
    tmp_class_creation_46__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_140;
    exception_value = exception_keeper_value_140;
    exception_tb = exception_keeper_tb_140;
    exception_lineno = exception_keeper_lineno_140;

    goto frame_exception_exit_1;
    // End of try:
    try_end_48:;
    CHECK_OBJECT(tmp_class_creation_46__bases_orig);
    Py_DECREF(tmp_class_creation_46__bases_orig);
    tmp_class_creation_46__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_46__bases);
    Py_DECREF(tmp_class_creation_46__bases);
    tmp_class_creation_46__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
    Py_DECREF(tmp_class_creation_46__class_decl_dict);
    tmp_class_creation_46__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_46__metaclass);
    Py_DECREF(tmp_class_creation_46__metaclass);
    tmp_class_creation_46__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_46__prepared);
    Py_DECREF(tmp_class_creation_46__prepared);
    tmp_class_creation_46__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_386;
        PyObject *tmp_tuple_element_185;
        tmp_tuple_element_185 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[116]);

        if (unlikely(tmp_tuple_element_185 == NULL)) {
            tmp_tuple_element_185 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[116]);
        }

        if (tmp_tuple_element_185 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_141;
        }
        tmp_assign_source_386 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_386, 0, tmp_tuple_element_185);
        assert(tmp_class_creation_47__bases_orig == NULL);
        tmp_class_creation_47__bases_orig = tmp_assign_source_386;
    }
    {
        PyObject *tmp_assign_source_387;
        PyObject *tmp_dircall_arg1_47;
        CHECK_OBJECT(tmp_class_creation_47__bases_orig);
        tmp_dircall_arg1_47 = tmp_class_creation_47__bases_orig;
        Py_INCREF(tmp_dircall_arg1_47);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_47};
            tmp_assign_source_387 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_387 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_141;
        }
        assert(tmp_class_creation_47__bases == NULL);
        tmp_class_creation_47__bases = tmp_assign_source_387;
    }
    {
        PyObject *tmp_assign_source_388;
        tmp_assign_source_388 = PyDict_New();
        assert(tmp_class_creation_47__class_decl_dict == NULL);
        tmp_class_creation_47__class_decl_dict = tmp_assign_source_388;
    }
    {
        PyObject *tmp_assign_source_389;
        PyObject *tmp_metaclass_value_47;
        bool tmp_condition_result_277;
        PyObject *tmp_key_value_139;
        PyObject *tmp_dict_arg_value_139;
        PyObject *tmp_dict_arg_value_140;
        PyObject *tmp_key_value_140;
        nuitka_bool tmp_condition_result_278;
        int tmp_truth_name_47;
        PyObject *tmp_type_arg_93;
        PyObject *tmp_expression_value_244;
        PyObject *tmp_subscript_value_60;
        PyObject *tmp_bases_value_47;
        tmp_key_value_139 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
        tmp_dict_arg_value_139 = tmp_class_creation_47__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_139, tmp_key_value_139);
        assert(!(tmp_res == -1));
        tmp_condition_result_277 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_277 != false) {
            goto condexpr_true_93;
        } else {
            goto condexpr_false_93;
        }
        condexpr_true_93:;
        CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
        tmp_dict_arg_value_140 = tmp_class_creation_47__class_decl_dict;
        tmp_key_value_140 = mod_consts[57];
        tmp_metaclass_value_47 = DICT_GET_ITEM0(tmp_dict_arg_value_140, tmp_key_value_140);
        if (tmp_metaclass_value_47 == NULL) {
            tmp_metaclass_value_47 = Py_None;
        }
        assert(!(tmp_metaclass_value_47 == NULL));
        Py_INCREF(tmp_metaclass_value_47);
        goto condexpr_end_93;
        condexpr_false_93:;
        CHECK_OBJECT(tmp_class_creation_47__bases);
        tmp_truth_name_47 = CHECK_IF_TRUE(tmp_class_creation_47__bases);
        if (tmp_truth_name_47 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_141;
        }
        tmp_condition_result_278 = tmp_truth_name_47 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_278 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_94;
        } else {
            goto condexpr_false_94;
        }
        condexpr_true_94:;
        CHECK_OBJECT(tmp_class_creation_47__bases);
        tmp_expression_value_244 = tmp_class_creation_47__bases;
        tmp_subscript_value_60 = mod_consts[39];
        tmp_type_arg_93 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_244, tmp_subscript_value_60, 0);
        if (tmp_type_arg_93 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_141;
        }
        tmp_metaclass_value_47 = BUILTIN_TYPE1(tmp_type_arg_93);
        Py_DECREF(tmp_type_arg_93);
        if (tmp_metaclass_value_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_141;
        }
        goto condexpr_end_94;
        condexpr_false_94:;
        tmp_metaclass_value_47 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_47);
        condexpr_end_94:;
        condexpr_end_93:;
        CHECK_OBJECT(tmp_class_creation_47__bases);
        tmp_bases_value_47 = tmp_class_creation_47__bases;
        tmp_assign_source_389 = SELECT_METACLASS(tmp_metaclass_value_47, tmp_bases_value_47);
        Py_DECREF(tmp_metaclass_value_47);
        if (tmp_assign_source_389 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_141;
        }
        assert(tmp_class_creation_47__metaclass == NULL);
        tmp_class_creation_47__metaclass = tmp_assign_source_389;
    }
    {
        bool tmp_condition_result_279;
        PyObject *tmp_key_value_141;
        PyObject *tmp_dict_arg_value_141;
        tmp_key_value_141 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
        tmp_dict_arg_value_141 = tmp_class_creation_47__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_141, tmp_key_value_141);
        assert(!(tmp_res == -1));
        tmp_condition_result_279 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_279 != false) {
            goto branch_yes_185;
        } else {
            goto branch_no_185;
        }
    }
    branch_yes_185:;
    CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_47__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 364;

        goto try_except_handler_141;
    }
    branch_no_185:;
    {
        nuitka_bool tmp_condition_result_280;
        PyObject *tmp_expression_value_245;
        CHECK_OBJECT(tmp_class_creation_47__metaclass);
        tmp_expression_value_245 = tmp_class_creation_47__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_245, mod_consts[58]);
        tmp_condition_result_280 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_280 == NUITKA_BOOL_TRUE) {
            goto branch_yes_186;
        } else {
            goto branch_no_186;
        }
    }
    branch_yes_186:;
    {
        PyObject *tmp_assign_source_390;
        PyObject *tmp_called_value_93;
        PyObject *tmp_expression_value_246;
        PyObject *tmp_args_value_93;
        PyObject *tmp_tuple_element_186;
        PyObject *tmp_kwargs_value_93;
        CHECK_OBJECT(tmp_class_creation_47__metaclass);
        tmp_expression_value_246 = tmp_class_creation_47__metaclass;
        tmp_called_value_93 = LOOKUP_ATTRIBUTE(tmp_expression_value_246, mod_consts[58]);
        if (tmp_called_value_93 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_141;
        }
        tmp_tuple_element_186 = mod_consts[173];
        tmp_args_value_93 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_93, 0, tmp_tuple_element_186);
        CHECK_OBJECT(tmp_class_creation_47__bases);
        tmp_tuple_element_186 = tmp_class_creation_47__bases;
        PyTuple_SET_ITEM0(tmp_args_value_93, 1, tmp_tuple_element_186);
        CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
        tmp_kwargs_value_93 = tmp_class_creation_47__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 364;
        tmp_assign_source_390 = CALL_FUNCTION(tmp_called_value_93, tmp_args_value_93, tmp_kwargs_value_93);
        Py_DECREF(tmp_called_value_93);
        Py_DECREF(tmp_args_value_93);
        if (tmp_assign_source_390 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_141;
        }
        assert(tmp_class_creation_47__prepared == NULL);
        tmp_class_creation_47__prepared = tmp_assign_source_390;
    }
    {
        bool tmp_condition_result_281;
        PyObject *tmp_operand_value_47;
        PyObject *tmp_expression_value_247;
        CHECK_OBJECT(tmp_class_creation_47__prepared);
        tmp_expression_value_247 = tmp_class_creation_47__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_247, mod_consts[60]);
        tmp_operand_value_47 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_47);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_141;
        }
        tmp_condition_result_281 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_281 != false) {
            goto branch_yes_187;
        } else {
            goto branch_no_187;
        }
    }
    branch_yes_187:;
    {
        PyObject *tmp_raise_type_47;
        PyObject *tmp_raise_value_47;
        PyObject *tmp_left_value_47;
        PyObject *tmp_right_value_47;
        PyObject *tmp_tuple_element_187;
        PyObject *tmp_getattr_target_47;
        PyObject *tmp_getattr_attr_47;
        PyObject *tmp_getattr_default_47;
        tmp_raise_type_47 = PyExc_TypeError;
        tmp_left_value_47 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_47__metaclass);
        tmp_getattr_target_47 = tmp_class_creation_47__metaclass;
        tmp_getattr_attr_47 = mod_consts[62];
        tmp_getattr_default_47 = mod_consts[63];
        tmp_tuple_element_187 = BUILTIN_GETATTR(tmp_getattr_target_47, tmp_getattr_attr_47, tmp_getattr_default_47);
        if (tmp_tuple_element_187 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_141;
        }
        tmp_right_value_47 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_248;
            PyObject *tmp_type_arg_94;
            PyTuple_SET_ITEM(tmp_right_value_47, 0, tmp_tuple_element_187);
            CHECK_OBJECT(tmp_class_creation_47__prepared);
            tmp_type_arg_94 = tmp_class_creation_47__prepared;
            tmp_expression_value_248 = BUILTIN_TYPE1(tmp_type_arg_94);
            assert(!(tmp_expression_value_248 == NULL));
            tmp_tuple_element_187 = LOOKUP_ATTRIBUTE(tmp_expression_value_248, mod_consts[62]);
            Py_DECREF(tmp_expression_value_248);
            if (tmp_tuple_element_187 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 364;

                goto tuple_build_exception_47;
            }
            PyTuple_SET_ITEM(tmp_right_value_47, 1, tmp_tuple_element_187);
        }
        goto tuple_build_noexception_47;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_47:;
        Py_DECREF(tmp_right_value_47);
        goto try_except_handler_141;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_47:;
        tmp_raise_value_47 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_47, tmp_right_value_47);
        Py_DECREF(tmp_right_value_47);
        if (tmp_raise_value_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_141;
        }
        exception_type = tmp_raise_type_47;
        Py_INCREF(tmp_raise_type_47);
        exception_value = tmp_raise_value_47;
        exception_lineno = 364;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_141;
    }
    branch_no_187:;
    goto branch_end_186;
    branch_no_186:;
    {
        PyObject *tmp_assign_source_391;
        tmp_assign_source_391 = PyDict_New();
        assert(tmp_class_creation_47__prepared == NULL);
        tmp_class_creation_47__prepared = tmp_assign_source_391;
    }
    branch_end_186:;
    {
        PyObject *tmp_assign_source_392;
        {
            PyObject *tmp_set_locals_47;
            CHECK_OBJECT(tmp_class_creation_47__prepared);
            tmp_set_locals_47 = tmp_class_creation_47__prepared;
            locals_aiohttp$web_exceptions$$$class__47_HTTPUnavailableForLegalReasons_364 = tmp_set_locals_47;
            Py_INCREF(tmp_set_locals_47);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__47_HTTPUnavailableForLegalReasons_364, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_143;
        }
        tmp_dictset_value = mod_consts[173];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__47_HTTPUnavailableForLegalReasons_364, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_143;
        }
        if (isFrameUnusable(cache_frame_5aef0c65e990ae5a2e475e7167364ce1_44)) {
            Py_XDECREF(cache_frame_5aef0c65e990ae5a2e475e7167364ce1_44);

#if _DEBUG_REFCOUNTS
            if (cache_frame_5aef0c65e990ae5a2e475e7167364ce1_44 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_5aef0c65e990ae5a2e475e7167364ce1_44 = MAKE_FUNCTION_FRAME(codeobj_5aef0c65e990ae5a2e475e7167364ce1, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_5aef0c65e990ae5a2e475e7167364ce1_44->m_type_description == NULL);
        frame_5aef0c65e990ae5a2e475e7167364ce1_44 = cache_frame_5aef0c65e990ae5a2e475e7167364ce1_44;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_5aef0c65e990ae5a2e475e7167364ce1_44);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_5aef0c65e990ae5a2e475e7167364ce1_44) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[174];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__47_HTTPUnavailableForLegalReasons_364, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 365;
            type_description_2 = "c";
            goto frame_exception_exit_44;
        }
        {
            PyObject *tmp_kw_defaults_4;
            PyObject *tmp_annotations_6;
            PyObject *tmp_dict_key_6;
            PyObject *tmp_dict_value_6;
            struct Nuitka_CellObject *tmp_closure_4[1];
            tmp_kw_defaults_4 = PyDict_Copy(mod_consts[69]);
            tmp_dict_key_6 = mod_consts[32];
            tmp_dict_value_6 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__47_HTTPUnavailableForLegalReasons_364, mod_consts[70]);

            if (tmp_dict_value_6 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_dict_value_6 = (PyObject *)&PyUnicode_Type;
                    Py_INCREF(tmp_dict_value_6);
                } else {
                    goto frame_exception_exit_44;
                }
            }

            tmp_annotations_6 = _PyDict_NewPresized( 7 );
            {
                PyObject *tmp_expression_value_249;
                PyObject *tmp_subscript_value_61;
                PyObject *tmp_expression_value_250;
                PyObject *tmp_subscript_value_62;
                PyObject *tmp_expression_value_251;
                PyObject *tmp_subscript_value_63;
                PyObject *tmp_expression_value_252;
                PyObject *tmp_subscript_value_64;
                tmp_res = PyDict_SetItem(tmp_annotations_6, tmp_dict_key_6, tmp_dict_value_6);
                Py_DECREF(tmp_dict_value_6);
                assert(!(tmp_res != 0));
                tmp_dict_key_6 = mod_consts[19];
                tmp_expression_value_249 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__47_HTTPUnavailableForLegalReasons_364, mod_consts[44]);

                if (tmp_expression_value_249 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_249 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[44]);

                        if (unlikely(tmp_expression_value_249 == NULL)) {
                            tmp_expression_value_249 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[44]);
                        }

                        if (tmp_expression_value_249 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 371;
                            type_description_2 = "c";
                            goto dict_build_exception_5;
                        }
                        Py_INCREF(tmp_expression_value_249);
                    } else {
                        goto dict_build_exception_5;
                    }
                }

                tmp_subscript_value_61 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__47_HTTPUnavailableForLegalReasons_364, mod_consts[51]);

                if (tmp_subscript_value_61 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_subscript_value_61 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[51]);

                        if (unlikely(tmp_subscript_value_61 == NULL)) {
                            tmp_subscript_value_61 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[51]);
                        }

                        if (tmp_subscript_value_61 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_expression_value_249);

                            exception_lineno = 371;
                            type_description_2 = "c";
                            goto dict_build_exception_5;
                        }
                        Py_INCREF(tmp_subscript_value_61);
                    } else {
                        goto dict_build_exception_5;
                    }
                }

                tmp_dict_value_6 = LOOKUP_SUBSCRIPT(tmp_expression_value_249, tmp_subscript_value_61);
                Py_DECREF(tmp_expression_value_249);
                Py_DECREF(tmp_subscript_value_61);
                if (tmp_dict_value_6 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 371;
                    type_description_2 = "c";
                    goto dict_build_exception_5;
                }
                tmp_res = PyDict_SetItem(tmp_annotations_6, tmp_dict_key_6, tmp_dict_value_6);
                Py_DECREF(tmp_dict_value_6);
                assert(!(tmp_res != 0));
                tmp_dict_key_6 = mod_consts[8];
                tmp_expression_value_250 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__47_HTTPUnavailableForLegalReasons_364, mod_consts[44]);

                if (tmp_expression_value_250 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_250 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[44]);

                        if (unlikely(tmp_expression_value_250 == NULL)) {
                            tmp_expression_value_250 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[44]);
                        }

                        if (tmp_expression_value_250 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 372;
                            type_description_2 = "c";
                            goto dict_build_exception_5;
                        }
                        Py_INCREF(tmp_expression_value_250);
                    } else {
                        goto dict_build_exception_5;
                    }
                }

                tmp_subscript_value_62 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__47_HTTPUnavailableForLegalReasons_364, mod_consts[70]);

                if (tmp_subscript_value_62 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_subscript_value_62 = (PyObject *)&PyUnicode_Type;
                        Py_INCREF(tmp_subscript_value_62);
                    } else {
                        goto dict_build_exception_5;
                    }
                }

                tmp_dict_value_6 = LOOKUP_SUBSCRIPT(tmp_expression_value_250, tmp_subscript_value_62);
                Py_DECREF(tmp_expression_value_250);
                Py_DECREF(tmp_subscript_value_62);
                if (tmp_dict_value_6 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 372;
                    type_description_2 = "c";
                    goto dict_build_exception_5;
                }
                tmp_res = PyDict_SetItem(tmp_annotations_6, tmp_dict_key_6, tmp_dict_value_6);
                Py_DECREF(tmp_dict_value_6);
                assert(!(tmp_res != 0));
                tmp_dict_key_6 = mod_consts[9];
                tmp_dict_value_6 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__47_HTTPUnavailableForLegalReasons_364, mod_consts[40]);

                if (tmp_dict_value_6 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_dict_value_6 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[40]);

                        if (unlikely(tmp_dict_value_6 == NULL)) {
                            tmp_dict_value_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[40]);
                        }

                        if (tmp_dict_value_6 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 373;
                            type_description_2 = "c";
                            goto dict_build_exception_5;
                        }
                        Py_INCREF(tmp_dict_value_6);
                    } else {
                        goto dict_build_exception_5;
                    }
                }

                tmp_res = PyDict_SetItem(tmp_annotations_6, tmp_dict_key_6, tmp_dict_value_6);
                Py_DECREF(tmp_dict_value_6);
                assert(!(tmp_res != 0));
                tmp_dict_key_6 = mod_consts[14];
                tmp_expression_value_251 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__47_HTTPUnavailableForLegalReasons_364, mod_consts[44]);

                if (tmp_expression_value_251 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_251 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[44]);

                        if (unlikely(tmp_expression_value_251 == NULL)) {
                            tmp_expression_value_251 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[44]);
                        }

                        if (tmp_expression_value_251 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 374;
                            type_description_2 = "c";
                            goto dict_build_exception_5;
                        }
                        Py_INCREF(tmp_expression_value_251);
                    } else {
                        goto dict_build_exception_5;
                    }
                }

                tmp_subscript_value_63 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__47_HTTPUnavailableForLegalReasons_364, mod_consts[70]);

                if (tmp_subscript_value_63 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_subscript_value_63 = (PyObject *)&PyUnicode_Type;
                        Py_INCREF(tmp_subscript_value_63);
                    } else {
                        goto dict_build_exception_5;
                    }
                }

                tmp_dict_value_6 = LOOKUP_SUBSCRIPT(tmp_expression_value_251, tmp_subscript_value_63);
                Py_DECREF(tmp_expression_value_251);
                Py_DECREF(tmp_subscript_value_63);
                if (tmp_dict_value_6 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 374;
                    type_description_2 = "c";
                    goto dict_build_exception_5;
                }
                tmp_res = PyDict_SetItem(tmp_annotations_6, tmp_dict_key_6, tmp_dict_value_6);
                Py_DECREF(tmp_dict_value_6);
                assert(!(tmp_res != 0));
                tmp_dict_key_6 = mod_consts[71];
                tmp_expression_value_252 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__47_HTTPUnavailableForLegalReasons_364, mod_consts[44]);

                if (tmp_expression_value_252 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_252 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[44]);

                        if (unlikely(tmp_expression_value_252 == NULL)) {
                            tmp_expression_value_252 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[44]);
                        }

                        if (tmp_expression_value_252 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 375;
                            type_description_2 = "c";
                            goto dict_build_exception_5;
                        }
                        Py_INCREF(tmp_expression_value_252);
                    } else {
                        goto dict_build_exception_5;
                    }
                }

                tmp_subscript_value_64 = PyObject_GetItem(locals_aiohttp$web_exceptions$$$class__47_HTTPUnavailableForLegalReasons_364, mod_consts[70]);

                if (tmp_subscript_value_64 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_subscript_value_64 = (PyObject *)&PyUnicode_Type;
                        Py_INCREF(tmp_subscript_value_64);
                    } else {
                        goto dict_build_exception_5;
                    }
                }

                tmp_dict_value_6 = LOOKUP_SUBSCRIPT(tmp_expression_value_252, tmp_subscript_value_64);
                Py_DECREF(tmp_expression_value_252);
                Py_DECREF(tmp_subscript_value_64);
                if (tmp_dict_value_6 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 375;
                    type_description_2 = "c";
                    goto dict_build_exception_5;
                }
                tmp_res = PyDict_SetItem(tmp_annotations_6, tmp_dict_key_6, tmp_dict_value_6);
                Py_DECREF(tmp_dict_value_6);
                assert(!(tmp_res != 0));
                tmp_dict_key_6 = mod_consts[72];
                tmp_dict_value_6 = Py_None;
                tmp_res = PyDict_SetItem(tmp_annotations_6, tmp_dict_key_6, tmp_dict_value_6);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_5;
            // Exception handling pass through code for dict_build:
            dict_build_exception_5:;
            Py_DECREF(tmp_kw_defaults_4);
            Py_DECREF(tmp_annotations_6);
            goto frame_exception_exit_44;
            // Finished with no exception for dict_build:
            dict_build_noexception_5:;

            tmp_closure_4[0] = outline_46_var___class__;
            Py_INCREF(tmp_closure_4[0]);

            tmp_dictset_value = MAKE_FUNCTION_aiohttp$web_exceptions$$$function__6___init__(tmp_kw_defaults_4, tmp_annotations_6, tmp_closure_4);

            tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__47_HTTPUnavailableForLegalReasons_364, mod_consts[5], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 367;
                type_description_2 = "c";
                goto frame_exception_exit_44;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_5aef0c65e990ae5a2e475e7167364ce1_44);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_43;

        frame_exception_exit_44:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_5aef0c65e990ae5a2e475e7167364ce1_44);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_5aef0c65e990ae5a2e475e7167364ce1_44, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_5aef0c65e990ae5a2e475e7167364ce1_44->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_5aef0c65e990ae5a2e475e7167364ce1_44, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_5aef0c65e990ae5a2e475e7167364ce1_44,
            type_description_2,
            outline_46_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_5aef0c65e990ae5a2e475e7167364ce1_44 == cache_frame_5aef0c65e990ae5a2e475e7167364ce1_44) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_5aef0c65e990ae5a2e475e7167364ce1_44);
            cache_frame_5aef0c65e990ae5a2e475e7167364ce1_44 = NULL;
        }

        assertFrameObject(frame_5aef0c65e990ae5a2e475e7167364ce1_44);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_43;

        frame_no_exception_43:;
        goto skip_nested_handling_43;
        nested_frame_exit_43:;

        goto try_except_handler_143;
        skip_nested_handling_43:;
        {
            nuitka_bool tmp_condition_result_282;
            PyObject *tmp_cmp_expr_left_47;
            PyObject *tmp_cmp_expr_right_47;
            CHECK_OBJECT(tmp_class_creation_47__bases);
            tmp_cmp_expr_left_47 = tmp_class_creation_47__bases;
            CHECK_OBJECT(tmp_class_creation_47__bases_orig);
            tmp_cmp_expr_right_47 = tmp_class_creation_47__bases_orig;
            tmp_condition_result_282 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_47, tmp_cmp_expr_right_47);
            if (tmp_condition_result_282 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 364;

                goto try_except_handler_143;
            }
            if (tmp_condition_result_282 == NUITKA_BOOL_TRUE) {
                goto branch_yes_188;
            } else {
                goto branch_no_188;
            }
            assert(tmp_condition_result_282 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_188:;
        CHECK_OBJECT(tmp_class_creation_47__bases_orig);
        tmp_dictset_value = tmp_class_creation_47__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__47_HTTPUnavailableForLegalReasons_364, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_143;
        }
        branch_no_188:;
        {
            PyObject *tmp_assign_source_393;
            PyObject *tmp_called_value_94;
            PyObject *tmp_args_value_94;
            PyObject *tmp_tuple_element_188;
            PyObject *tmp_kwargs_value_94;
            CHECK_OBJECT(tmp_class_creation_47__metaclass);
            tmp_called_value_94 = tmp_class_creation_47__metaclass;
            tmp_tuple_element_188 = mod_consts[173];
            tmp_args_value_94 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_94, 0, tmp_tuple_element_188);
            CHECK_OBJECT(tmp_class_creation_47__bases);
            tmp_tuple_element_188 = tmp_class_creation_47__bases;
            PyTuple_SET_ITEM0(tmp_args_value_94, 1, tmp_tuple_element_188);
            tmp_tuple_element_188 = locals_aiohttp$web_exceptions$$$class__47_HTTPUnavailableForLegalReasons_364;
            PyTuple_SET_ITEM0(tmp_args_value_94, 2, tmp_tuple_element_188);
            CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
            tmp_kwargs_value_94 = tmp_class_creation_47__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 364;
            tmp_assign_source_393 = CALL_FUNCTION(tmp_called_value_94, tmp_args_value_94, tmp_kwargs_value_94);
            Py_DECREF(tmp_args_value_94);
            if (tmp_assign_source_393 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 364;

                goto try_except_handler_143;
            }
            assert(Nuitka_Cell_GET(outline_46_var___class__) == NULL);
            PyCell_SET(outline_46_var___class__, tmp_assign_source_393);

        }
        CHECK_OBJECT(Nuitka_Cell_GET(outline_46_var___class__));
        tmp_assign_source_392 = Nuitka_Cell_GET(outline_46_var___class__);
        Py_INCREF(tmp_assign_source_392);
        goto try_return_handler_143;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_143:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__47_HTTPUnavailableForLegalReasons_364);
        locals_aiohttp$web_exceptions$$$class__47_HTTPUnavailableForLegalReasons_364 = NULL;
        goto try_return_handler_142;
        // Exception handler code:
        try_except_handler_143:;
        exception_keeper_type_141 = exception_type;
        exception_keeper_value_141 = exception_value;
        exception_keeper_tb_141 = exception_tb;
        exception_keeper_lineno_141 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__47_HTTPUnavailableForLegalReasons_364);
        locals_aiohttp$web_exceptions$$$class__47_HTTPUnavailableForLegalReasons_364 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_141;
        exception_value = exception_keeper_value_141;
        exception_tb = exception_keeper_tb_141;
        exception_lineno = exception_keeper_lineno_141;

        goto try_except_handler_142;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_142:;
        CHECK_OBJECT(outline_46_var___class__);
        Py_DECREF(outline_46_var___class__);
        outline_46_var___class__ = NULL;
        goto outline_result_47;
        // Exception handler code:
        try_except_handler_142:;
        exception_keeper_type_142 = exception_type;
        exception_keeper_value_142 = exception_value;
        exception_keeper_tb_142 = exception_tb;
        exception_keeper_lineno_142 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_142;
        exception_value = exception_keeper_value_142;
        exception_tb = exception_keeper_tb_142;
        exception_lineno = exception_keeper_lineno_142;

        goto outline_exception_47;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_47:;
        exception_lineno = 364;
        goto try_except_handler_141;
        outline_result_47:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[173], tmp_assign_source_392);
    }
    goto try_end_49;
    // Exception handler code:
    try_except_handler_141:;
    exception_keeper_type_143 = exception_type;
    exception_keeper_value_143 = exception_value;
    exception_keeper_tb_143 = exception_tb;
    exception_keeper_lineno_143 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_47__bases_orig);
    tmp_class_creation_47__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_47__bases);
    tmp_class_creation_47__bases = NULL;
    Py_XDECREF(tmp_class_creation_47__class_decl_dict);
    tmp_class_creation_47__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_47__metaclass);
    tmp_class_creation_47__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_47__prepared);
    tmp_class_creation_47__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_143;
    exception_value = exception_keeper_value_143;
    exception_tb = exception_keeper_tb_143;
    exception_lineno = exception_keeper_lineno_143;

    goto frame_exception_exit_1;
    // End of try:
    try_end_49:;
    CHECK_OBJECT(tmp_class_creation_47__bases_orig);
    Py_DECREF(tmp_class_creation_47__bases_orig);
    tmp_class_creation_47__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_47__bases);
    Py_DECREF(tmp_class_creation_47__bases);
    tmp_class_creation_47__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
    Py_DECREF(tmp_class_creation_47__class_decl_dict);
    tmp_class_creation_47__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_47__metaclass);
    Py_DECREF(tmp_class_creation_47__metaclass);
    tmp_class_creation_47__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_47__prepared);
    Py_DECREF(tmp_class_creation_47__prepared);
    tmp_class_creation_47__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_394;
        PyObject *tmp_tuple_element_189;
        tmp_tuple_element_189 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[78]);

        if (unlikely(tmp_tuple_element_189 == NULL)) {
            tmp_tuple_element_189 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[78]);
        }

        if (tmp_tuple_element_189 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 400;

            goto try_except_handler_144;
        }
        tmp_assign_source_394 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_394, 0, tmp_tuple_element_189);
        assert(tmp_class_creation_48__bases_orig == NULL);
        tmp_class_creation_48__bases_orig = tmp_assign_source_394;
    }
    {
        PyObject *tmp_assign_source_395;
        PyObject *tmp_dircall_arg1_48;
        CHECK_OBJECT(tmp_class_creation_48__bases_orig);
        tmp_dircall_arg1_48 = tmp_class_creation_48__bases_orig;
        Py_INCREF(tmp_dircall_arg1_48);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_48};
            tmp_assign_source_395 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_395 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 400;

            goto try_except_handler_144;
        }
        assert(tmp_class_creation_48__bases == NULL);
        tmp_class_creation_48__bases = tmp_assign_source_395;
    }
    {
        PyObject *tmp_assign_source_396;
        tmp_assign_source_396 = PyDict_New();
        assert(tmp_class_creation_48__class_decl_dict == NULL);
        tmp_class_creation_48__class_decl_dict = tmp_assign_source_396;
    }
    {
        PyObject *tmp_assign_source_397;
        PyObject *tmp_metaclass_value_48;
        bool tmp_condition_result_283;
        PyObject *tmp_key_value_142;
        PyObject *tmp_dict_arg_value_142;
        PyObject *tmp_dict_arg_value_143;
        PyObject *tmp_key_value_143;
        nuitka_bool tmp_condition_result_284;
        int tmp_truth_name_48;
        PyObject *tmp_type_arg_95;
        PyObject *tmp_expression_value_253;
        PyObject *tmp_subscript_value_65;
        PyObject *tmp_bases_value_48;
        tmp_key_value_142 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
        tmp_dict_arg_value_142 = tmp_class_creation_48__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_142, tmp_key_value_142);
        assert(!(tmp_res == -1));
        tmp_condition_result_283 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_283 != false) {
            goto condexpr_true_95;
        } else {
            goto condexpr_false_95;
        }
        condexpr_true_95:;
        CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
        tmp_dict_arg_value_143 = tmp_class_creation_48__class_decl_dict;
        tmp_key_value_143 = mod_consts[57];
        tmp_metaclass_value_48 = DICT_GET_ITEM0(tmp_dict_arg_value_143, tmp_key_value_143);
        if (tmp_metaclass_value_48 == NULL) {
            tmp_metaclass_value_48 = Py_None;
        }
        assert(!(tmp_metaclass_value_48 == NULL));
        Py_INCREF(tmp_metaclass_value_48);
        goto condexpr_end_95;
        condexpr_false_95:;
        CHECK_OBJECT(tmp_class_creation_48__bases);
        tmp_truth_name_48 = CHECK_IF_TRUE(tmp_class_creation_48__bases);
        if (tmp_truth_name_48 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 400;

            goto try_except_handler_144;
        }
        tmp_condition_result_284 = tmp_truth_name_48 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_284 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_96;
        } else {
            goto condexpr_false_96;
        }
        condexpr_true_96:;
        CHECK_OBJECT(tmp_class_creation_48__bases);
        tmp_expression_value_253 = tmp_class_creation_48__bases;
        tmp_subscript_value_65 = mod_consts[39];
        tmp_type_arg_95 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_253, tmp_subscript_value_65, 0);
        if (tmp_type_arg_95 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 400;

            goto try_except_handler_144;
        }
        tmp_metaclass_value_48 = BUILTIN_TYPE1(tmp_type_arg_95);
        Py_DECREF(tmp_type_arg_95);
        if (tmp_metaclass_value_48 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 400;

            goto try_except_handler_144;
        }
        goto condexpr_end_96;
        condexpr_false_96:;
        tmp_metaclass_value_48 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_48);
        condexpr_end_96:;
        condexpr_end_95:;
        CHECK_OBJECT(tmp_class_creation_48__bases);
        tmp_bases_value_48 = tmp_class_creation_48__bases;
        tmp_assign_source_397 = SELECT_METACLASS(tmp_metaclass_value_48, tmp_bases_value_48);
        Py_DECREF(tmp_metaclass_value_48);
        if (tmp_assign_source_397 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 400;

            goto try_except_handler_144;
        }
        assert(tmp_class_creation_48__metaclass == NULL);
        tmp_class_creation_48__metaclass = tmp_assign_source_397;
    }
    {
        bool tmp_condition_result_285;
        PyObject *tmp_key_value_144;
        PyObject *tmp_dict_arg_value_144;
        tmp_key_value_144 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
        tmp_dict_arg_value_144 = tmp_class_creation_48__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_144, tmp_key_value_144);
        assert(!(tmp_res == -1));
        tmp_condition_result_285 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_285 != false) {
            goto branch_yes_189;
        } else {
            goto branch_no_189;
        }
    }
    branch_yes_189:;
    CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_48__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 400;

        goto try_except_handler_144;
    }
    branch_no_189:;
    {
        nuitka_bool tmp_condition_result_286;
        PyObject *tmp_expression_value_254;
        CHECK_OBJECT(tmp_class_creation_48__metaclass);
        tmp_expression_value_254 = tmp_class_creation_48__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_254, mod_consts[58]);
        tmp_condition_result_286 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_286 == NUITKA_BOOL_TRUE) {
            goto branch_yes_190;
        } else {
            goto branch_no_190;
        }
    }
    branch_yes_190:;
    {
        PyObject *tmp_assign_source_398;
        PyObject *tmp_called_value_95;
        PyObject *tmp_expression_value_255;
        PyObject *tmp_args_value_95;
        PyObject *tmp_tuple_element_190;
        PyObject *tmp_kwargs_value_95;
        CHECK_OBJECT(tmp_class_creation_48__metaclass);
        tmp_expression_value_255 = tmp_class_creation_48__metaclass;
        tmp_called_value_95 = LOOKUP_ATTRIBUTE(tmp_expression_value_255, mod_consts[58]);
        if (tmp_called_value_95 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 400;

            goto try_except_handler_144;
        }
        tmp_tuple_element_190 = mod_consts[176];
        tmp_args_value_95 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_95, 0, tmp_tuple_element_190);
        CHECK_OBJECT(tmp_class_creation_48__bases);
        tmp_tuple_element_190 = tmp_class_creation_48__bases;
        PyTuple_SET_ITEM0(tmp_args_value_95, 1, tmp_tuple_element_190);
        CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
        tmp_kwargs_value_95 = tmp_class_creation_48__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 400;
        tmp_assign_source_398 = CALL_FUNCTION(tmp_called_value_95, tmp_args_value_95, tmp_kwargs_value_95);
        Py_DECREF(tmp_called_value_95);
        Py_DECREF(tmp_args_value_95);
        if (tmp_assign_source_398 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 400;

            goto try_except_handler_144;
        }
        assert(tmp_class_creation_48__prepared == NULL);
        tmp_class_creation_48__prepared = tmp_assign_source_398;
    }
    {
        bool tmp_condition_result_287;
        PyObject *tmp_operand_value_48;
        PyObject *tmp_expression_value_256;
        CHECK_OBJECT(tmp_class_creation_48__prepared);
        tmp_expression_value_256 = tmp_class_creation_48__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_256, mod_consts[60]);
        tmp_operand_value_48 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_48);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 400;

            goto try_except_handler_144;
        }
        tmp_condition_result_287 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_287 != false) {
            goto branch_yes_191;
        } else {
            goto branch_no_191;
        }
    }
    branch_yes_191:;
    {
        PyObject *tmp_raise_type_48;
        PyObject *tmp_raise_value_48;
        PyObject *tmp_left_value_48;
        PyObject *tmp_right_value_48;
        PyObject *tmp_tuple_element_191;
        PyObject *tmp_getattr_target_48;
        PyObject *tmp_getattr_attr_48;
        PyObject *tmp_getattr_default_48;
        tmp_raise_type_48 = PyExc_TypeError;
        tmp_left_value_48 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_48__metaclass);
        tmp_getattr_target_48 = tmp_class_creation_48__metaclass;
        tmp_getattr_attr_48 = mod_consts[62];
        tmp_getattr_default_48 = mod_consts[63];
        tmp_tuple_element_191 = BUILTIN_GETATTR(tmp_getattr_target_48, tmp_getattr_attr_48, tmp_getattr_default_48);
        if (tmp_tuple_element_191 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 400;

            goto try_except_handler_144;
        }
        tmp_right_value_48 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_257;
            PyObject *tmp_type_arg_96;
            PyTuple_SET_ITEM(tmp_right_value_48, 0, tmp_tuple_element_191);
            CHECK_OBJECT(tmp_class_creation_48__prepared);
            tmp_type_arg_96 = tmp_class_creation_48__prepared;
            tmp_expression_value_257 = BUILTIN_TYPE1(tmp_type_arg_96);
            assert(!(tmp_expression_value_257 == NULL));
            tmp_tuple_element_191 = LOOKUP_ATTRIBUTE(tmp_expression_value_257, mod_consts[62]);
            Py_DECREF(tmp_expression_value_257);
            if (tmp_tuple_element_191 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 400;

                goto tuple_build_exception_48;
            }
            PyTuple_SET_ITEM(tmp_right_value_48, 1, tmp_tuple_element_191);
        }
        goto tuple_build_noexception_48;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_48:;
        Py_DECREF(tmp_right_value_48);
        goto try_except_handler_144;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_48:;
        tmp_raise_value_48 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_48, tmp_right_value_48);
        Py_DECREF(tmp_right_value_48);
        if (tmp_raise_value_48 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 400;

            goto try_except_handler_144;
        }
        exception_type = tmp_raise_type_48;
        Py_INCREF(tmp_raise_type_48);
        exception_value = tmp_raise_value_48;
        exception_lineno = 400;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_144;
    }
    branch_no_191:;
    goto branch_end_190;
    branch_no_190:;
    {
        PyObject *tmp_assign_source_399;
        tmp_assign_source_399 = PyDict_New();
        assert(tmp_class_creation_48__prepared == NULL);
        tmp_class_creation_48__prepared = tmp_assign_source_399;
    }
    branch_end_190:;
    {
        PyObject *tmp_assign_source_400;
        {
            PyObject *tmp_set_locals_48;
            CHECK_OBJECT(tmp_class_creation_48__prepared);
            tmp_set_locals_48 = tmp_class_creation_48__prepared;
            locals_aiohttp$web_exceptions$$$class__48_HTTPServerError_400 = tmp_set_locals_48;
            Py_INCREF(tmp_set_locals_48);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__48_HTTPServerError_400, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 400;

            goto try_except_handler_146;
        }
        tmp_dictset_value = mod_consts[176];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__48_HTTPServerError_400, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 400;

            goto try_except_handler_146;
        }
        {
            nuitka_bool tmp_condition_result_288;
            PyObject *tmp_cmp_expr_left_48;
            PyObject *tmp_cmp_expr_right_48;
            CHECK_OBJECT(tmp_class_creation_48__bases);
            tmp_cmp_expr_left_48 = tmp_class_creation_48__bases;
            CHECK_OBJECT(tmp_class_creation_48__bases_orig);
            tmp_cmp_expr_right_48 = tmp_class_creation_48__bases_orig;
            tmp_condition_result_288 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_48, tmp_cmp_expr_right_48);
            if (tmp_condition_result_288 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 400;

                goto try_except_handler_146;
            }
            if (tmp_condition_result_288 == NUITKA_BOOL_TRUE) {
                goto branch_yes_192;
            } else {
                goto branch_no_192;
            }
            assert(tmp_condition_result_288 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_192:;
        CHECK_OBJECT(tmp_class_creation_48__bases_orig);
        tmp_dictset_value = tmp_class_creation_48__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__48_HTTPServerError_400, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 400;

            goto try_except_handler_146;
        }
        branch_no_192:;
        {
            PyObject *tmp_assign_source_401;
            PyObject *tmp_called_value_96;
            PyObject *tmp_args_value_96;
            PyObject *tmp_tuple_element_192;
            PyObject *tmp_kwargs_value_96;
            CHECK_OBJECT(tmp_class_creation_48__metaclass);
            tmp_called_value_96 = tmp_class_creation_48__metaclass;
            tmp_tuple_element_192 = mod_consts[176];
            tmp_args_value_96 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_96, 0, tmp_tuple_element_192);
            CHECK_OBJECT(tmp_class_creation_48__bases);
            tmp_tuple_element_192 = tmp_class_creation_48__bases;
            PyTuple_SET_ITEM0(tmp_args_value_96, 1, tmp_tuple_element_192);
            tmp_tuple_element_192 = locals_aiohttp$web_exceptions$$$class__48_HTTPServerError_400;
            PyTuple_SET_ITEM0(tmp_args_value_96, 2, tmp_tuple_element_192);
            CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
            tmp_kwargs_value_96 = tmp_class_creation_48__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 400;
            tmp_assign_source_401 = CALL_FUNCTION(tmp_called_value_96, tmp_args_value_96, tmp_kwargs_value_96);
            Py_DECREF(tmp_args_value_96);
            if (tmp_assign_source_401 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 400;

                goto try_except_handler_146;
            }
            assert(outline_47_var___class__ == NULL);
            outline_47_var___class__ = tmp_assign_source_401;
        }
        CHECK_OBJECT(outline_47_var___class__);
        tmp_assign_source_400 = outline_47_var___class__;
        Py_INCREF(tmp_assign_source_400);
        goto try_return_handler_146;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_146:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__48_HTTPServerError_400);
        locals_aiohttp$web_exceptions$$$class__48_HTTPServerError_400 = NULL;
        goto try_return_handler_145;
        // Exception handler code:
        try_except_handler_146:;
        exception_keeper_type_144 = exception_type;
        exception_keeper_value_144 = exception_value;
        exception_keeper_tb_144 = exception_tb;
        exception_keeper_lineno_144 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__48_HTTPServerError_400);
        locals_aiohttp$web_exceptions$$$class__48_HTTPServerError_400 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_144;
        exception_value = exception_keeper_value_144;
        exception_tb = exception_keeper_tb_144;
        exception_lineno = exception_keeper_lineno_144;

        goto try_except_handler_145;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_145:;
        CHECK_OBJECT(outline_47_var___class__);
        Py_DECREF(outline_47_var___class__);
        outline_47_var___class__ = NULL;
        goto outline_result_48;
        // Exception handler code:
        try_except_handler_145:;
        exception_keeper_type_145 = exception_type;
        exception_keeper_value_145 = exception_value;
        exception_keeper_tb_145 = exception_tb;
        exception_keeper_lineno_145 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_145;
        exception_value = exception_keeper_value_145;
        exception_tb = exception_keeper_tb_145;
        exception_lineno = exception_keeper_lineno_145;

        goto outline_exception_48;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_48:;
        exception_lineno = 400;
        goto try_except_handler_144;
        outline_result_48:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[176], tmp_assign_source_400);
    }
    goto try_end_50;
    // Exception handler code:
    try_except_handler_144:;
    exception_keeper_type_146 = exception_type;
    exception_keeper_value_146 = exception_value;
    exception_keeper_tb_146 = exception_tb;
    exception_keeper_lineno_146 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_48__bases_orig);
    tmp_class_creation_48__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_48__bases);
    tmp_class_creation_48__bases = NULL;
    Py_XDECREF(tmp_class_creation_48__class_decl_dict);
    tmp_class_creation_48__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_48__metaclass);
    tmp_class_creation_48__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_48__prepared);
    tmp_class_creation_48__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_146;
    exception_value = exception_keeper_value_146;
    exception_tb = exception_keeper_tb_146;
    exception_lineno = exception_keeper_lineno_146;

    goto frame_exception_exit_1;
    // End of try:
    try_end_50:;
    CHECK_OBJECT(tmp_class_creation_48__bases_orig);
    Py_DECREF(tmp_class_creation_48__bases_orig);
    tmp_class_creation_48__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_48__bases);
    Py_DECREF(tmp_class_creation_48__bases);
    tmp_class_creation_48__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
    Py_DECREF(tmp_class_creation_48__class_decl_dict);
    tmp_class_creation_48__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_48__metaclass);
    Py_DECREF(tmp_class_creation_48__metaclass);
    tmp_class_creation_48__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_48__prepared);
    Py_DECREF(tmp_class_creation_48__prepared);
    tmp_class_creation_48__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_402;
        PyObject *tmp_tuple_element_193;
        tmp_tuple_element_193 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[176]);

        if (unlikely(tmp_tuple_element_193 == NULL)) {
            tmp_tuple_element_193 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[176]);
        }

        if (tmp_tuple_element_193 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;

            goto try_except_handler_147;
        }
        tmp_assign_source_402 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_402, 0, tmp_tuple_element_193);
        assert(tmp_class_creation_49__bases_orig == NULL);
        tmp_class_creation_49__bases_orig = tmp_assign_source_402;
    }
    {
        PyObject *tmp_assign_source_403;
        PyObject *tmp_dircall_arg1_49;
        CHECK_OBJECT(tmp_class_creation_49__bases_orig);
        tmp_dircall_arg1_49 = tmp_class_creation_49__bases_orig;
        Py_INCREF(tmp_dircall_arg1_49);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_49};
            tmp_assign_source_403 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_403 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;

            goto try_except_handler_147;
        }
        assert(tmp_class_creation_49__bases == NULL);
        tmp_class_creation_49__bases = tmp_assign_source_403;
    }
    {
        PyObject *tmp_assign_source_404;
        tmp_assign_source_404 = PyDict_New();
        assert(tmp_class_creation_49__class_decl_dict == NULL);
        tmp_class_creation_49__class_decl_dict = tmp_assign_source_404;
    }
    {
        PyObject *tmp_assign_source_405;
        PyObject *tmp_metaclass_value_49;
        bool tmp_condition_result_289;
        PyObject *tmp_key_value_145;
        PyObject *tmp_dict_arg_value_145;
        PyObject *tmp_dict_arg_value_146;
        PyObject *tmp_key_value_146;
        nuitka_bool tmp_condition_result_290;
        int tmp_truth_name_49;
        PyObject *tmp_type_arg_97;
        PyObject *tmp_expression_value_258;
        PyObject *tmp_subscript_value_66;
        PyObject *tmp_bases_value_49;
        tmp_key_value_145 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
        tmp_dict_arg_value_145 = tmp_class_creation_49__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_145, tmp_key_value_145);
        assert(!(tmp_res == -1));
        tmp_condition_result_289 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_289 != false) {
            goto condexpr_true_97;
        } else {
            goto condexpr_false_97;
        }
        condexpr_true_97:;
        CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
        tmp_dict_arg_value_146 = tmp_class_creation_49__class_decl_dict;
        tmp_key_value_146 = mod_consts[57];
        tmp_metaclass_value_49 = DICT_GET_ITEM0(tmp_dict_arg_value_146, tmp_key_value_146);
        if (tmp_metaclass_value_49 == NULL) {
            tmp_metaclass_value_49 = Py_None;
        }
        assert(!(tmp_metaclass_value_49 == NULL));
        Py_INCREF(tmp_metaclass_value_49);
        goto condexpr_end_97;
        condexpr_false_97:;
        CHECK_OBJECT(tmp_class_creation_49__bases);
        tmp_truth_name_49 = CHECK_IF_TRUE(tmp_class_creation_49__bases);
        if (tmp_truth_name_49 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;

            goto try_except_handler_147;
        }
        tmp_condition_result_290 = tmp_truth_name_49 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_290 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_98;
        } else {
            goto condexpr_false_98;
        }
        condexpr_true_98:;
        CHECK_OBJECT(tmp_class_creation_49__bases);
        tmp_expression_value_258 = tmp_class_creation_49__bases;
        tmp_subscript_value_66 = mod_consts[39];
        tmp_type_arg_97 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_258, tmp_subscript_value_66, 0);
        if (tmp_type_arg_97 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;

            goto try_except_handler_147;
        }
        tmp_metaclass_value_49 = BUILTIN_TYPE1(tmp_type_arg_97);
        Py_DECREF(tmp_type_arg_97);
        if (tmp_metaclass_value_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;

            goto try_except_handler_147;
        }
        goto condexpr_end_98;
        condexpr_false_98:;
        tmp_metaclass_value_49 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_49);
        condexpr_end_98:;
        condexpr_end_97:;
        CHECK_OBJECT(tmp_class_creation_49__bases);
        tmp_bases_value_49 = tmp_class_creation_49__bases;
        tmp_assign_source_405 = SELECT_METACLASS(tmp_metaclass_value_49, tmp_bases_value_49);
        Py_DECREF(tmp_metaclass_value_49);
        if (tmp_assign_source_405 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;

            goto try_except_handler_147;
        }
        assert(tmp_class_creation_49__metaclass == NULL);
        tmp_class_creation_49__metaclass = tmp_assign_source_405;
    }
    {
        bool tmp_condition_result_291;
        PyObject *tmp_key_value_147;
        PyObject *tmp_dict_arg_value_147;
        tmp_key_value_147 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
        tmp_dict_arg_value_147 = tmp_class_creation_49__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_147, tmp_key_value_147);
        assert(!(tmp_res == -1));
        tmp_condition_result_291 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_291 != false) {
            goto branch_yes_193;
        } else {
            goto branch_no_193;
        }
    }
    branch_yes_193:;
    CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_49__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 404;

        goto try_except_handler_147;
    }
    branch_no_193:;
    {
        nuitka_bool tmp_condition_result_292;
        PyObject *tmp_expression_value_259;
        CHECK_OBJECT(tmp_class_creation_49__metaclass);
        tmp_expression_value_259 = tmp_class_creation_49__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_259, mod_consts[58]);
        tmp_condition_result_292 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_292 == NUITKA_BOOL_TRUE) {
            goto branch_yes_194;
        } else {
            goto branch_no_194;
        }
    }
    branch_yes_194:;
    {
        PyObject *tmp_assign_source_406;
        PyObject *tmp_called_value_97;
        PyObject *tmp_expression_value_260;
        PyObject *tmp_args_value_97;
        PyObject *tmp_tuple_element_194;
        PyObject *tmp_kwargs_value_97;
        CHECK_OBJECT(tmp_class_creation_49__metaclass);
        tmp_expression_value_260 = tmp_class_creation_49__metaclass;
        tmp_called_value_97 = LOOKUP_ATTRIBUTE(tmp_expression_value_260, mod_consts[58]);
        if (tmp_called_value_97 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;

            goto try_except_handler_147;
        }
        tmp_tuple_element_194 = mod_consts[177];
        tmp_args_value_97 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_97, 0, tmp_tuple_element_194);
        CHECK_OBJECT(tmp_class_creation_49__bases);
        tmp_tuple_element_194 = tmp_class_creation_49__bases;
        PyTuple_SET_ITEM0(tmp_args_value_97, 1, tmp_tuple_element_194);
        CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
        tmp_kwargs_value_97 = tmp_class_creation_49__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 404;
        tmp_assign_source_406 = CALL_FUNCTION(tmp_called_value_97, tmp_args_value_97, tmp_kwargs_value_97);
        Py_DECREF(tmp_called_value_97);
        Py_DECREF(tmp_args_value_97);
        if (tmp_assign_source_406 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;

            goto try_except_handler_147;
        }
        assert(tmp_class_creation_49__prepared == NULL);
        tmp_class_creation_49__prepared = tmp_assign_source_406;
    }
    {
        bool tmp_condition_result_293;
        PyObject *tmp_operand_value_49;
        PyObject *tmp_expression_value_261;
        CHECK_OBJECT(tmp_class_creation_49__prepared);
        tmp_expression_value_261 = tmp_class_creation_49__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_261, mod_consts[60]);
        tmp_operand_value_49 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_49);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;

            goto try_except_handler_147;
        }
        tmp_condition_result_293 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_293 != false) {
            goto branch_yes_195;
        } else {
            goto branch_no_195;
        }
    }
    branch_yes_195:;
    {
        PyObject *tmp_raise_type_49;
        PyObject *tmp_raise_value_49;
        PyObject *tmp_left_value_49;
        PyObject *tmp_right_value_49;
        PyObject *tmp_tuple_element_195;
        PyObject *tmp_getattr_target_49;
        PyObject *tmp_getattr_attr_49;
        PyObject *tmp_getattr_default_49;
        tmp_raise_type_49 = PyExc_TypeError;
        tmp_left_value_49 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_49__metaclass);
        tmp_getattr_target_49 = tmp_class_creation_49__metaclass;
        tmp_getattr_attr_49 = mod_consts[62];
        tmp_getattr_default_49 = mod_consts[63];
        tmp_tuple_element_195 = BUILTIN_GETATTR(tmp_getattr_target_49, tmp_getattr_attr_49, tmp_getattr_default_49);
        if (tmp_tuple_element_195 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;

            goto try_except_handler_147;
        }
        tmp_right_value_49 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_262;
            PyObject *tmp_type_arg_98;
            PyTuple_SET_ITEM(tmp_right_value_49, 0, tmp_tuple_element_195);
            CHECK_OBJECT(tmp_class_creation_49__prepared);
            tmp_type_arg_98 = tmp_class_creation_49__prepared;
            tmp_expression_value_262 = BUILTIN_TYPE1(tmp_type_arg_98);
            assert(!(tmp_expression_value_262 == NULL));
            tmp_tuple_element_195 = LOOKUP_ATTRIBUTE(tmp_expression_value_262, mod_consts[62]);
            Py_DECREF(tmp_expression_value_262);
            if (tmp_tuple_element_195 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 404;

                goto tuple_build_exception_49;
            }
            PyTuple_SET_ITEM(tmp_right_value_49, 1, tmp_tuple_element_195);
        }
        goto tuple_build_noexception_49;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_49:;
        Py_DECREF(tmp_right_value_49);
        goto try_except_handler_147;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_49:;
        tmp_raise_value_49 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_49, tmp_right_value_49);
        Py_DECREF(tmp_right_value_49);
        if (tmp_raise_value_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;

            goto try_except_handler_147;
        }
        exception_type = tmp_raise_type_49;
        Py_INCREF(tmp_raise_type_49);
        exception_value = tmp_raise_value_49;
        exception_lineno = 404;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_147;
    }
    branch_no_195:;
    goto branch_end_194;
    branch_no_194:;
    {
        PyObject *tmp_assign_source_407;
        tmp_assign_source_407 = PyDict_New();
        assert(tmp_class_creation_49__prepared == NULL);
        tmp_class_creation_49__prepared = tmp_assign_source_407;
    }
    branch_end_194:;
    {
        PyObject *tmp_assign_source_408;
        {
            PyObject *tmp_set_locals_49;
            CHECK_OBJECT(tmp_class_creation_49__prepared);
            tmp_set_locals_49 = tmp_class_creation_49__prepared;
            locals_aiohttp$web_exceptions$$$class__49_HTTPInternalServerError_404 = tmp_set_locals_49;
            Py_INCREF(tmp_set_locals_49);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__49_HTTPInternalServerError_404, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;

            goto try_except_handler_149;
        }
        tmp_dictset_value = mod_consts[177];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__49_HTTPInternalServerError_404, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;

            goto try_except_handler_149;
        }
        if (isFrameUnusable(cache_frame_43334e89c6d959f581e7f84ba15d7213_45)) {
            Py_XDECREF(cache_frame_43334e89c6d959f581e7f84ba15d7213_45);

#if _DEBUG_REFCOUNTS
            if (cache_frame_43334e89c6d959f581e7f84ba15d7213_45 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_43334e89c6d959f581e7f84ba15d7213_45 = MAKE_FUNCTION_FRAME(codeobj_43334e89c6d959f581e7f84ba15d7213, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_43334e89c6d959f581e7f84ba15d7213_45->m_type_description == NULL);
        frame_43334e89c6d959f581e7f84ba15d7213_45 = cache_frame_43334e89c6d959f581e7f84ba15d7213_45;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_43334e89c6d959f581e7f84ba15d7213_45);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_43334e89c6d959f581e7f84ba15d7213_45) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[178];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__49_HTTPInternalServerError_404, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 405;
            type_description_2 = "o";
            goto frame_exception_exit_45;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_43334e89c6d959f581e7f84ba15d7213_45);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_44;

        frame_exception_exit_45:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_43334e89c6d959f581e7f84ba15d7213_45);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_43334e89c6d959f581e7f84ba15d7213_45, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_43334e89c6d959f581e7f84ba15d7213_45->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_43334e89c6d959f581e7f84ba15d7213_45, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_43334e89c6d959f581e7f84ba15d7213_45,
            type_description_2,
            outline_48_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_43334e89c6d959f581e7f84ba15d7213_45 == cache_frame_43334e89c6d959f581e7f84ba15d7213_45) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_43334e89c6d959f581e7f84ba15d7213_45);
            cache_frame_43334e89c6d959f581e7f84ba15d7213_45 = NULL;
        }

        assertFrameObject(frame_43334e89c6d959f581e7f84ba15d7213_45);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_44;

        frame_no_exception_44:;
        goto skip_nested_handling_44;
        nested_frame_exit_44:;

        goto try_except_handler_149;
        skip_nested_handling_44:;
        {
            nuitka_bool tmp_condition_result_294;
            PyObject *tmp_cmp_expr_left_49;
            PyObject *tmp_cmp_expr_right_49;
            CHECK_OBJECT(tmp_class_creation_49__bases);
            tmp_cmp_expr_left_49 = tmp_class_creation_49__bases;
            CHECK_OBJECT(tmp_class_creation_49__bases_orig);
            tmp_cmp_expr_right_49 = tmp_class_creation_49__bases_orig;
            tmp_condition_result_294 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_49, tmp_cmp_expr_right_49);
            if (tmp_condition_result_294 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 404;

                goto try_except_handler_149;
            }
            if (tmp_condition_result_294 == NUITKA_BOOL_TRUE) {
                goto branch_yes_196;
            } else {
                goto branch_no_196;
            }
            assert(tmp_condition_result_294 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_196:;
        CHECK_OBJECT(tmp_class_creation_49__bases_orig);
        tmp_dictset_value = tmp_class_creation_49__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__49_HTTPInternalServerError_404, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;

            goto try_except_handler_149;
        }
        branch_no_196:;
        {
            PyObject *tmp_assign_source_409;
            PyObject *tmp_called_value_98;
            PyObject *tmp_args_value_98;
            PyObject *tmp_tuple_element_196;
            PyObject *tmp_kwargs_value_98;
            CHECK_OBJECT(tmp_class_creation_49__metaclass);
            tmp_called_value_98 = tmp_class_creation_49__metaclass;
            tmp_tuple_element_196 = mod_consts[177];
            tmp_args_value_98 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_98, 0, tmp_tuple_element_196);
            CHECK_OBJECT(tmp_class_creation_49__bases);
            tmp_tuple_element_196 = tmp_class_creation_49__bases;
            PyTuple_SET_ITEM0(tmp_args_value_98, 1, tmp_tuple_element_196);
            tmp_tuple_element_196 = locals_aiohttp$web_exceptions$$$class__49_HTTPInternalServerError_404;
            PyTuple_SET_ITEM0(tmp_args_value_98, 2, tmp_tuple_element_196);
            CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
            tmp_kwargs_value_98 = tmp_class_creation_49__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 404;
            tmp_assign_source_409 = CALL_FUNCTION(tmp_called_value_98, tmp_args_value_98, tmp_kwargs_value_98);
            Py_DECREF(tmp_args_value_98);
            if (tmp_assign_source_409 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 404;

                goto try_except_handler_149;
            }
            assert(outline_48_var___class__ == NULL);
            outline_48_var___class__ = tmp_assign_source_409;
        }
        CHECK_OBJECT(outline_48_var___class__);
        tmp_assign_source_408 = outline_48_var___class__;
        Py_INCREF(tmp_assign_source_408);
        goto try_return_handler_149;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_149:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__49_HTTPInternalServerError_404);
        locals_aiohttp$web_exceptions$$$class__49_HTTPInternalServerError_404 = NULL;
        goto try_return_handler_148;
        // Exception handler code:
        try_except_handler_149:;
        exception_keeper_type_147 = exception_type;
        exception_keeper_value_147 = exception_value;
        exception_keeper_tb_147 = exception_tb;
        exception_keeper_lineno_147 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__49_HTTPInternalServerError_404);
        locals_aiohttp$web_exceptions$$$class__49_HTTPInternalServerError_404 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_147;
        exception_value = exception_keeper_value_147;
        exception_tb = exception_keeper_tb_147;
        exception_lineno = exception_keeper_lineno_147;

        goto try_except_handler_148;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_148:;
        CHECK_OBJECT(outline_48_var___class__);
        Py_DECREF(outline_48_var___class__);
        outline_48_var___class__ = NULL;
        goto outline_result_49;
        // Exception handler code:
        try_except_handler_148:;
        exception_keeper_type_148 = exception_type;
        exception_keeper_value_148 = exception_value;
        exception_keeper_tb_148 = exception_tb;
        exception_keeper_lineno_148 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_148;
        exception_value = exception_keeper_value_148;
        exception_tb = exception_keeper_tb_148;
        exception_lineno = exception_keeper_lineno_148;

        goto outline_exception_49;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_49:;
        exception_lineno = 404;
        goto try_except_handler_147;
        outline_result_49:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[177], tmp_assign_source_408);
    }
    goto try_end_51;
    // Exception handler code:
    try_except_handler_147:;
    exception_keeper_type_149 = exception_type;
    exception_keeper_value_149 = exception_value;
    exception_keeper_tb_149 = exception_tb;
    exception_keeper_lineno_149 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_49__bases_orig);
    tmp_class_creation_49__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_49__bases);
    tmp_class_creation_49__bases = NULL;
    Py_XDECREF(tmp_class_creation_49__class_decl_dict);
    tmp_class_creation_49__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_49__metaclass);
    tmp_class_creation_49__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_49__prepared);
    tmp_class_creation_49__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_149;
    exception_value = exception_keeper_value_149;
    exception_tb = exception_keeper_tb_149;
    exception_lineno = exception_keeper_lineno_149;

    goto frame_exception_exit_1;
    // End of try:
    try_end_51:;
    CHECK_OBJECT(tmp_class_creation_49__bases_orig);
    Py_DECREF(tmp_class_creation_49__bases_orig);
    tmp_class_creation_49__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_49__bases);
    Py_DECREF(tmp_class_creation_49__bases);
    tmp_class_creation_49__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
    Py_DECREF(tmp_class_creation_49__class_decl_dict);
    tmp_class_creation_49__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_49__metaclass);
    Py_DECREF(tmp_class_creation_49__metaclass);
    tmp_class_creation_49__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_49__prepared);
    Py_DECREF(tmp_class_creation_49__prepared);
    tmp_class_creation_49__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_410;
        PyObject *tmp_tuple_element_197;
        tmp_tuple_element_197 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[176]);

        if (unlikely(tmp_tuple_element_197 == NULL)) {
            tmp_tuple_element_197 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[176]);
        }

        if (tmp_tuple_element_197 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 408;

            goto try_except_handler_150;
        }
        tmp_assign_source_410 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_410, 0, tmp_tuple_element_197);
        assert(tmp_class_creation_50__bases_orig == NULL);
        tmp_class_creation_50__bases_orig = tmp_assign_source_410;
    }
    {
        PyObject *tmp_assign_source_411;
        PyObject *tmp_dircall_arg1_50;
        CHECK_OBJECT(tmp_class_creation_50__bases_orig);
        tmp_dircall_arg1_50 = tmp_class_creation_50__bases_orig;
        Py_INCREF(tmp_dircall_arg1_50);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_50};
            tmp_assign_source_411 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_411 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 408;

            goto try_except_handler_150;
        }
        assert(tmp_class_creation_50__bases == NULL);
        tmp_class_creation_50__bases = tmp_assign_source_411;
    }
    {
        PyObject *tmp_assign_source_412;
        tmp_assign_source_412 = PyDict_New();
        assert(tmp_class_creation_50__class_decl_dict == NULL);
        tmp_class_creation_50__class_decl_dict = tmp_assign_source_412;
    }
    {
        PyObject *tmp_assign_source_413;
        PyObject *tmp_metaclass_value_50;
        bool tmp_condition_result_295;
        PyObject *tmp_key_value_148;
        PyObject *tmp_dict_arg_value_148;
        PyObject *tmp_dict_arg_value_149;
        PyObject *tmp_key_value_149;
        nuitka_bool tmp_condition_result_296;
        int tmp_truth_name_50;
        PyObject *tmp_type_arg_99;
        PyObject *tmp_expression_value_263;
        PyObject *tmp_subscript_value_67;
        PyObject *tmp_bases_value_50;
        tmp_key_value_148 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_50__class_decl_dict);
        tmp_dict_arg_value_148 = tmp_class_creation_50__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_148, tmp_key_value_148);
        assert(!(tmp_res == -1));
        tmp_condition_result_295 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_295 != false) {
            goto condexpr_true_99;
        } else {
            goto condexpr_false_99;
        }
        condexpr_true_99:;
        CHECK_OBJECT(tmp_class_creation_50__class_decl_dict);
        tmp_dict_arg_value_149 = tmp_class_creation_50__class_decl_dict;
        tmp_key_value_149 = mod_consts[57];
        tmp_metaclass_value_50 = DICT_GET_ITEM0(tmp_dict_arg_value_149, tmp_key_value_149);
        if (tmp_metaclass_value_50 == NULL) {
            tmp_metaclass_value_50 = Py_None;
        }
        assert(!(tmp_metaclass_value_50 == NULL));
        Py_INCREF(tmp_metaclass_value_50);
        goto condexpr_end_99;
        condexpr_false_99:;
        CHECK_OBJECT(tmp_class_creation_50__bases);
        tmp_truth_name_50 = CHECK_IF_TRUE(tmp_class_creation_50__bases);
        if (tmp_truth_name_50 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 408;

            goto try_except_handler_150;
        }
        tmp_condition_result_296 = tmp_truth_name_50 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_296 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_100;
        } else {
            goto condexpr_false_100;
        }
        condexpr_true_100:;
        CHECK_OBJECT(tmp_class_creation_50__bases);
        tmp_expression_value_263 = tmp_class_creation_50__bases;
        tmp_subscript_value_67 = mod_consts[39];
        tmp_type_arg_99 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_263, tmp_subscript_value_67, 0);
        if (tmp_type_arg_99 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 408;

            goto try_except_handler_150;
        }
        tmp_metaclass_value_50 = BUILTIN_TYPE1(tmp_type_arg_99);
        Py_DECREF(tmp_type_arg_99);
        if (tmp_metaclass_value_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 408;

            goto try_except_handler_150;
        }
        goto condexpr_end_100;
        condexpr_false_100:;
        tmp_metaclass_value_50 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_50);
        condexpr_end_100:;
        condexpr_end_99:;
        CHECK_OBJECT(tmp_class_creation_50__bases);
        tmp_bases_value_50 = tmp_class_creation_50__bases;
        tmp_assign_source_413 = SELECT_METACLASS(tmp_metaclass_value_50, tmp_bases_value_50);
        Py_DECREF(tmp_metaclass_value_50);
        if (tmp_assign_source_413 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 408;

            goto try_except_handler_150;
        }
        assert(tmp_class_creation_50__metaclass == NULL);
        tmp_class_creation_50__metaclass = tmp_assign_source_413;
    }
    {
        bool tmp_condition_result_297;
        PyObject *tmp_key_value_150;
        PyObject *tmp_dict_arg_value_150;
        tmp_key_value_150 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_50__class_decl_dict);
        tmp_dict_arg_value_150 = tmp_class_creation_50__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_150, tmp_key_value_150);
        assert(!(tmp_res == -1));
        tmp_condition_result_297 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_297 != false) {
            goto branch_yes_197;
        } else {
            goto branch_no_197;
        }
    }
    branch_yes_197:;
    CHECK_OBJECT(tmp_class_creation_50__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_50__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 408;

        goto try_except_handler_150;
    }
    branch_no_197:;
    {
        nuitka_bool tmp_condition_result_298;
        PyObject *tmp_expression_value_264;
        CHECK_OBJECT(tmp_class_creation_50__metaclass);
        tmp_expression_value_264 = tmp_class_creation_50__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_264, mod_consts[58]);
        tmp_condition_result_298 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_298 == NUITKA_BOOL_TRUE) {
            goto branch_yes_198;
        } else {
            goto branch_no_198;
        }
    }
    branch_yes_198:;
    {
        PyObject *tmp_assign_source_414;
        PyObject *tmp_called_value_99;
        PyObject *tmp_expression_value_265;
        PyObject *tmp_args_value_99;
        PyObject *tmp_tuple_element_198;
        PyObject *tmp_kwargs_value_99;
        CHECK_OBJECT(tmp_class_creation_50__metaclass);
        tmp_expression_value_265 = tmp_class_creation_50__metaclass;
        tmp_called_value_99 = LOOKUP_ATTRIBUTE(tmp_expression_value_265, mod_consts[58]);
        if (tmp_called_value_99 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 408;

            goto try_except_handler_150;
        }
        tmp_tuple_element_198 = mod_consts[179];
        tmp_args_value_99 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_99, 0, tmp_tuple_element_198);
        CHECK_OBJECT(tmp_class_creation_50__bases);
        tmp_tuple_element_198 = tmp_class_creation_50__bases;
        PyTuple_SET_ITEM0(tmp_args_value_99, 1, tmp_tuple_element_198);
        CHECK_OBJECT(tmp_class_creation_50__class_decl_dict);
        tmp_kwargs_value_99 = tmp_class_creation_50__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 408;
        tmp_assign_source_414 = CALL_FUNCTION(tmp_called_value_99, tmp_args_value_99, tmp_kwargs_value_99);
        Py_DECREF(tmp_called_value_99);
        Py_DECREF(tmp_args_value_99);
        if (tmp_assign_source_414 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 408;

            goto try_except_handler_150;
        }
        assert(tmp_class_creation_50__prepared == NULL);
        tmp_class_creation_50__prepared = tmp_assign_source_414;
    }
    {
        bool tmp_condition_result_299;
        PyObject *tmp_operand_value_50;
        PyObject *tmp_expression_value_266;
        CHECK_OBJECT(tmp_class_creation_50__prepared);
        tmp_expression_value_266 = tmp_class_creation_50__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_266, mod_consts[60]);
        tmp_operand_value_50 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_50);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 408;

            goto try_except_handler_150;
        }
        tmp_condition_result_299 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_299 != false) {
            goto branch_yes_199;
        } else {
            goto branch_no_199;
        }
    }
    branch_yes_199:;
    {
        PyObject *tmp_raise_type_50;
        PyObject *tmp_raise_value_50;
        PyObject *tmp_left_value_50;
        PyObject *tmp_right_value_50;
        PyObject *tmp_tuple_element_199;
        PyObject *tmp_getattr_target_50;
        PyObject *tmp_getattr_attr_50;
        PyObject *tmp_getattr_default_50;
        tmp_raise_type_50 = PyExc_TypeError;
        tmp_left_value_50 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_50__metaclass);
        tmp_getattr_target_50 = tmp_class_creation_50__metaclass;
        tmp_getattr_attr_50 = mod_consts[62];
        tmp_getattr_default_50 = mod_consts[63];
        tmp_tuple_element_199 = BUILTIN_GETATTR(tmp_getattr_target_50, tmp_getattr_attr_50, tmp_getattr_default_50);
        if (tmp_tuple_element_199 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 408;

            goto try_except_handler_150;
        }
        tmp_right_value_50 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_267;
            PyObject *tmp_type_arg_100;
            PyTuple_SET_ITEM(tmp_right_value_50, 0, tmp_tuple_element_199);
            CHECK_OBJECT(tmp_class_creation_50__prepared);
            tmp_type_arg_100 = tmp_class_creation_50__prepared;
            tmp_expression_value_267 = BUILTIN_TYPE1(tmp_type_arg_100);
            assert(!(tmp_expression_value_267 == NULL));
            tmp_tuple_element_199 = LOOKUP_ATTRIBUTE(tmp_expression_value_267, mod_consts[62]);
            Py_DECREF(tmp_expression_value_267);
            if (tmp_tuple_element_199 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 408;

                goto tuple_build_exception_50;
            }
            PyTuple_SET_ITEM(tmp_right_value_50, 1, tmp_tuple_element_199);
        }
        goto tuple_build_noexception_50;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_50:;
        Py_DECREF(tmp_right_value_50);
        goto try_except_handler_150;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_50:;
        tmp_raise_value_50 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_50, tmp_right_value_50);
        Py_DECREF(tmp_right_value_50);
        if (tmp_raise_value_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 408;

            goto try_except_handler_150;
        }
        exception_type = tmp_raise_type_50;
        Py_INCREF(tmp_raise_type_50);
        exception_value = tmp_raise_value_50;
        exception_lineno = 408;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_150;
    }
    branch_no_199:;
    goto branch_end_198;
    branch_no_198:;
    {
        PyObject *tmp_assign_source_415;
        tmp_assign_source_415 = PyDict_New();
        assert(tmp_class_creation_50__prepared == NULL);
        tmp_class_creation_50__prepared = tmp_assign_source_415;
    }
    branch_end_198:;
    {
        PyObject *tmp_assign_source_416;
        {
            PyObject *tmp_set_locals_50;
            CHECK_OBJECT(tmp_class_creation_50__prepared);
            tmp_set_locals_50 = tmp_class_creation_50__prepared;
            locals_aiohttp$web_exceptions$$$class__50_HTTPNotImplemented_408 = tmp_set_locals_50;
            Py_INCREF(tmp_set_locals_50);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__50_HTTPNotImplemented_408, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 408;

            goto try_except_handler_152;
        }
        tmp_dictset_value = mod_consts[179];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__50_HTTPNotImplemented_408, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 408;

            goto try_except_handler_152;
        }
        if (isFrameUnusable(cache_frame_c9a228b4216d2a6a7d61ecb3f7098702_46)) {
            Py_XDECREF(cache_frame_c9a228b4216d2a6a7d61ecb3f7098702_46);

#if _DEBUG_REFCOUNTS
            if (cache_frame_c9a228b4216d2a6a7d61ecb3f7098702_46 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_c9a228b4216d2a6a7d61ecb3f7098702_46 = MAKE_FUNCTION_FRAME(codeobj_c9a228b4216d2a6a7d61ecb3f7098702, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_c9a228b4216d2a6a7d61ecb3f7098702_46->m_type_description == NULL);
        frame_c9a228b4216d2a6a7d61ecb3f7098702_46 = cache_frame_c9a228b4216d2a6a7d61ecb3f7098702_46;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_c9a228b4216d2a6a7d61ecb3f7098702_46);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_c9a228b4216d2a6a7d61ecb3f7098702_46) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[180];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__50_HTTPNotImplemented_408, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 409;
            type_description_2 = "o";
            goto frame_exception_exit_46;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c9a228b4216d2a6a7d61ecb3f7098702_46);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_45;

        frame_exception_exit_46:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c9a228b4216d2a6a7d61ecb3f7098702_46);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_c9a228b4216d2a6a7d61ecb3f7098702_46, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_c9a228b4216d2a6a7d61ecb3f7098702_46->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_c9a228b4216d2a6a7d61ecb3f7098702_46, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_c9a228b4216d2a6a7d61ecb3f7098702_46,
            type_description_2,
            outline_49_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_c9a228b4216d2a6a7d61ecb3f7098702_46 == cache_frame_c9a228b4216d2a6a7d61ecb3f7098702_46) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_c9a228b4216d2a6a7d61ecb3f7098702_46);
            cache_frame_c9a228b4216d2a6a7d61ecb3f7098702_46 = NULL;
        }

        assertFrameObject(frame_c9a228b4216d2a6a7d61ecb3f7098702_46);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_45;

        frame_no_exception_45:;
        goto skip_nested_handling_45;
        nested_frame_exit_45:;

        goto try_except_handler_152;
        skip_nested_handling_45:;
        {
            nuitka_bool tmp_condition_result_300;
            PyObject *tmp_cmp_expr_left_50;
            PyObject *tmp_cmp_expr_right_50;
            CHECK_OBJECT(tmp_class_creation_50__bases);
            tmp_cmp_expr_left_50 = tmp_class_creation_50__bases;
            CHECK_OBJECT(tmp_class_creation_50__bases_orig);
            tmp_cmp_expr_right_50 = tmp_class_creation_50__bases_orig;
            tmp_condition_result_300 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_50, tmp_cmp_expr_right_50);
            if (tmp_condition_result_300 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 408;

                goto try_except_handler_152;
            }
            if (tmp_condition_result_300 == NUITKA_BOOL_TRUE) {
                goto branch_yes_200;
            } else {
                goto branch_no_200;
            }
            assert(tmp_condition_result_300 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_200:;
        CHECK_OBJECT(tmp_class_creation_50__bases_orig);
        tmp_dictset_value = tmp_class_creation_50__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__50_HTTPNotImplemented_408, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 408;

            goto try_except_handler_152;
        }
        branch_no_200:;
        {
            PyObject *tmp_assign_source_417;
            PyObject *tmp_called_value_100;
            PyObject *tmp_args_value_100;
            PyObject *tmp_tuple_element_200;
            PyObject *tmp_kwargs_value_100;
            CHECK_OBJECT(tmp_class_creation_50__metaclass);
            tmp_called_value_100 = tmp_class_creation_50__metaclass;
            tmp_tuple_element_200 = mod_consts[179];
            tmp_args_value_100 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_100, 0, tmp_tuple_element_200);
            CHECK_OBJECT(tmp_class_creation_50__bases);
            tmp_tuple_element_200 = tmp_class_creation_50__bases;
            PyTuple_SET_ITEM0(tmp_args_value_100, 1, tmp_tuple_element_200);
            tmp_tuple_element_200 = locals_aiohttp$web_exceptions$$$class__50_HTTPNotImplemented_408;
            PyTuple_SET_ITEM0(tmp_args_value_100, 2, tmp_tuple_element_200);
            CHECK_OBJECT(tmp_class_creation_50__class_decl_dict);
            tmp_kwargs_value_100 = tmp_class_creation_50__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 408;
            tmp_assign_source_417 = CALL_FUNCTION(tmp_called_value_100, tmp_args_value_100, tmp_kwargs_value_100);
            Py_DECREF(tmp_args_value_100);
            if (tmp_assign_source_417 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 408;

                goto try_except_handler_152;
            }
            assert(outline_49_var___class__ == NULL);
            outline_49_var___class__ = tmp_assign_source_417;
        }
        CHECK_OBJECT(outline_49_var___class__);
        tmp_assign_source_416 = outline_49_var___class__;
        Py_INCREF(tmp_assign_source_416);
        goto try_return_handler_152;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_152:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__50_HTTPNotImplemented_408);
        locals_aiohttp$web_exceptions$$$class__50_HTTPNotImplemented_408 = NULL;
        goto try_return_handler_151;
        // Exception handler code:
        try_except_handler_152:;
        exception_keeper_type_150 = exception_type;
        exception_keeper_value_150 = exception_value;
        exception_keeper_tb_150 = exception_tb;
        exception_keeper_lineno_150 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__50_HTTPNotImplemented_408);
        locals_aiohttp$web_exceptions$$$class__50_HTTPNotImplemented_408 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_150;
        exception_value = exception_keeper_value_150;
        exception_tb = exception_keeper_tb_150;
        exception_lineno = exception_keeper_lineno_150;

        goto try_except_handler_151;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_151:;
        CHECK_OBJECT(outline_49_var___class__);
        Py_DECREF(outline_49_var___class__);
        outline_49_var___class__ = NULL;
        goto outline_result_50;
        // Exception handler code:
        try_except_handler_151:;
        exception_keeper_type_151 = exception_type;
        exception_keeper_value_151 = exception_value;
        exception_keeper_tb_151 = exception_tb;
        exception_keeper_lineno_151 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_151;
        exception_value = exception_keeper_value_151;
        exception_tb = exception_keeper_tb_151;
        exception_lineno = exception_keeper_lineno_151;

        goto outline_exception_50;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_50:;
        exception_lineno = 408;
        goto try_except_handler_150;
        outline_result_50:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[179], tmp_assign_source_416);
    }
    goto try_end_52;
    // Exception handler code:
    try_except_handler_150:;
    exception_keeper_type_152 = exception_type;
    exception_keeper_value_152 = exception_value;
    exception_keeper_tb_152 = exception_tb;
    exception_keeper_lineno_152 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_50__bases_orig);
    tmp_class_creation_50__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_50__bases);
    tmp_class_creation_50__bases = NULL;
    Py_XDECREF(tmp_class_creation_50__class_decl_dict);
    tmp_class_creation_50__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_50__metaclass);
    tmp_class_creation_50__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_50__prepared);
    tmp_class_creation_50__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_152;
    exception_value = exception_keeper_value_152;
    exception_tb = exception_keeper_tb_152;
    exception_lineno = exception_keeper_lineno_152;

    goto frame_exception_exit_1;
    // End of try:
    try_end_52:;
    CHECK_OBJECT(tmp_class_creation_50__bases_orig);
    Py_DECREF(tmp_class_creation_50__bases_orig);
    tmp_class_creation_50__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_50__bases);
    Py_DECREF(tmp_class_creation_50__bases);
    tmp_class_creation_50__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_50__class_decl_dict);
    Py_DECREF(tmp_class_creation_50__class_decl_dict);
    tmp_class_creation_50__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_50__metaclass);
    Py_DECREF(tmp_class_creation_50__metaclass);
    tmp_class_creation_50__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_50__prepared);
    Py_DECREF(tmp_class_creation_50__prepared);
    tmp_class_creation_50__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_418;
        PyObject *tmp_tuple_element_201;
        tmp_tuple_element_201 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[176]);

        if (unlikely(tmp_tuple_element_201 == NULL)) {
            tmp_tuple_element_201 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[176]);
        }

        if (tmp_tuple_element_201 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;

            goto try_except_handler_153;
        }
        tmp_assign_source_418 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_418, 0, tmp_tuple_element_201);
        assert(tmp_class_creation_51__bases_orig == NULL);
        tmp_class_creation_51__bases_orig = tmp_assign_source_418;
    }
    {
        PyObject *tmp_assign_source_419;
        PyObject *tmp_dircall_arg1_51;
        CHECK_OBJECT(tmp_class_creation_51__bases_orig);
        tmp_dircall_arg1_51 = tmp_class_creation_51__bases_orig;
        Py_INCREF(tmp_dircall_arg1_51);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_51};
            tmp_assign_source_419 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_419 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;

            goto try_except_handler_153;
        }
        assert(tmp_class_creation_51__bases == NULL);
        tmp_class_creation_51__bases = tmp_assign_source_419;
    }
    {
        PyObject *tmp_assign_source_420;
        tmp_assign_source_420 = PyDict_New();
        assert(tmp_class_creation_51__class_decl_dict == NULL);
        tmp_class_creation_51__class_decl_dict = tmp_assign_source_420;
    }
    {
        PyObject *tmp_assign_source_421;
        PyObject *tmp_metaclass_value_51;
        bool tmp_condition_result_301;
        PyObject *tmp_key_value_151;
        PyObject *tmp_dict_arg_value_151;
        PyObject *tmp_dict_arg_value_152;
        PyObject *tmp_key_value_152;
        nuitka_bool tmp_condition_result_302;
        int tmp_truth_name_51;
        PyObject *tmp_type_arg_101;
        PyObject *tmp_expression_value_268;
        PyObject *tmp_subscript_value_68;
        PyObject *tmp_bases_value_51;
        tmp_key_value_151 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_51__class_decl_dict);
        tmp_dict_arg_value_151 = tmp_class_creation_51__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_151, tmp_key_value_151);
        assert(!(tmp_res == -1));
        tmp_condition_result_301 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_301 != false) {
            goto condexpr_true_101;
        } else {
            goto condexpr_false_101;
        }
        condexpr_true_101:;
        CHECK_OBJECT(tmp_class_creation_51__class_decl_dict);
        tmp_dict_arg_value_152 = tmp_class_creation_51__class_decl_dict;
        tmp_key_value_152 = mod_consts[57];
        tmp_metaclass_value_51 = DICT_GET_ITEM0(tmp_dict_arg_value_152, tmp_key_value_152);
        if (tmp_metaclass_value_51 == NULL) {
            tmp_metaclass_value_51 = Py_None;
        }
        assert(!(tmp_metaclass_value_51 == NULL));
        Py_INCREF(tmp_metaclass_value_51);
        goto condexpr_end_101;
        condexpr_false_101:;
        CHECK_OBJECT(tmp_class_creation_51__bases);
        tmp_truth_name_51 = CHECK_IF_TRUE(tmp_class_creation_51__bases);
        if (tmp_truth_name_51 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;

            goto try_except_handler_153;
        }
        tmp_condition_result_302 = tmp_truth_name_51 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_302 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_102;
        } else {
            goto condexpr_false_102;
        }
        condexpr_true_102:;
        CHECK_OBJECT(tmp_class_creation_51__bases);
        tmp_expression_value_268 = tmp_class_creation_51__bases;
        tmp_subscript_value_68 = mod_consts[39];
        tmp_type_arg_101 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_268, tmp_subscript_value_68, 0);
        if (tmp_type_arg_101 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;

            goto try_except_handler_153;
        }
        tmp_metaclass_value_51 = BUILTIN_TYPE1(tmp_type_arg_101);
        Py_DECREF(tmp_type_arg_101);
        if (tmp_metaclass_value_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;

            goto try_except_handler_153;
        }
        goto condexpr_end_102;
        condexpr_false_102:;
        tmp_metaclass_value_51 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_51);
        condexpr_end_102:;
        condexpr_end_101:;
        CHECK_OBJECT(tmp_class_creation_51__bases);
        tmp_bases_value_51 = tmp_class_creation_51__bases;
        tmp_assign_source_421 = SELECT_METACLASS(tmp_metaclass_value_51, tmp_bases_value_51);
        Py_DECREF(tmp_metaclass_value_51);
        if (tmp_assign_source_421 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;

            goto try_except_handler_153;
        }
        assert(tmp_class_creation_51__metaclass == NULL);
        tmp_class_creation_51__metaclass = tmp_assign_source_421;
    }
    {
        bool tmp_condition_result_303;
        PyObject *tmp_key_value_153;
        PyObject *tmp_dict_arg_value_153;
        tmp_key_value_153 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_51__class_decl_dict);
        tmp_dict_arg_value_153 = tmp_class_creation_51__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_153, tmp_key_value_153);
        assert(!(tmp_res == -1));
        tmp_condition_result_303 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_303 != false) {
            goto branch_yes_201;
        } else {
            goto branch_no_201;
        }
    }
    branch_yes_201:;
    CHECK_OBJECT(tmp_class_creation_51__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_51__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 412;

        goto try_except_handler_153;
    }
    branch_no_201:;
    {
        nuitka_bool tmp_condition_result_304;
        PyObject *tmp_expression_value_269;
        CHECK_OBJECT(tmp_class_creation_51__metaclass);
        tmp_expression_value_269 = tmp_class_creation_51__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_269, mod_consts[58]);
        tmp_condition_result_304 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_304 == NUITKA_BOOL_TRUE) {
            goto branch_yes_202;
        } else {
            goto branch_no_202;
        }
    }
    branch_yes_202:;
    {
        PyObject *tmp_assign_source_422;
        PyObject *tmp_called_value_101;
        PyObject *tmp_expression_value_270;
        PyObject *tmp_args_value_101;
        PyObject *tmp_tuple_element_202;
        PyObject *tmp_kwargs_value_101;
        CHECK_OBJECT(tmp_class_creation_51__metaclass);
        tmp_expression_value_270 = tmp_class_creation_51__metaclass;
        tmp_called_value_101 = LOOKUP_ATTRIBUTE(tmp_expression_value_270, mod_consts[58]);
        if (tmp_called_value_101 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;

            goto try_except_handler_153;
        }
        tmp_tuple_element_202 = mod_consts[181];
        tmp_args_value_101 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_101, 0, tmp_tuple_element_202);
        CHECK_OBJECT(tmp_class_creation_51__bases);
        tmp_tuple_element_202 = tmp_class_creation_51__bases;
        PyTuple_SET_ITEM0(tmp_args_value_101, 1, tmp_tuple_element_202);
        CHECK_OBJECT(tmp_class_creation_51__class_decl_dict);
        tmp_kwargs_value_101 = tmp_class_creation_51__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 412;
        tmp_assign_source_422 = CALL_FUNCTION(tmp_called_value_101, tmp_args_value_101, tmp_kwargs_value_101);
        Py_DECREF(tmp_called_value_101);
        Py_DECREF(tmp_args_value_101);
        if (tmp_assign_source_422 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;

            goto try_except_handler_153;
        }
        assert(tmp_class_creation_51__prepared == NULL);
        tmp_class_creation_51__prepared = tmp_assign_source_422;
    }
    {
        bool tmp_condition_result_305;
        PyObject *tmp_operand_value_51;
        PyObject *tmp_expression_value_271;
        CHECK_OBJECT(tmp_class_creation_51__prepared);
        tmp_expression_value_271 = tmp_class_creation_51__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_271, mod_consts[60]);
        tmp_operand_value_51 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_51);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;

            goto try_except_handler_153;
        }
        tmp_condition_result_305 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_305 != false) {
            goto branch_yes_203;
        } else {
            goto branch_no_203;
        }
    }
    branch_yes_203:;
    {
        PyObject *tmp_raise_type_51;
        PyObject *tmp_raise_value_51;
        PyObject *tmp_left_value_51;
        PyObject *tmp_right_value_51;
        PyObject *tmp_tuple_element_203;
        PyObject *tmp_getattr_target_51;
        PyObject *tmp_getattr_attr_51;
        PyObject *tmp_getattr_default_51;
        tmp_raise_type_51 = PyExc_TypeError;
        tmp_left_value_51 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_51__metaclass);
        tmp_getattr_target_51 = tmp_class_creation_51__metaclass;
        tmp_getattr_attr_51 = mod_consts[62];
        tmp_getattr_default_51 = mod_consts[63];
        tmp_tuple_element_203 = BUILTIN_GETATTR(tmp_getattr_target_51, tmp_getattr_attr_51, tmp_getattr_default_51);
        if (tmp_tuple_element_203 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;

            goto try_except_handler_153;
        }
        tmp_right_value_51 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_272;
            PyObject *tmp_type_arg_102;
            PyTuple_SET_ITEM(tmp_right_value_51, 0, tmp_tuple_element_203);
            CHECK_OBJECT(tmp_class_creation_51__prepared);
            tmp_type_arg_102 = tmp_class_creation_51__prepared;
            tmp_expression_value_272 = BUILTIN_TYPE1(tmp_type_arg_102);
            assert(!(tmp_expression_value_272 == NULL));
            tmp_tuple_element_203 = LOOKUP_ATTRIBUTE(tmp_expression_value_272, mod_consts[62]);
            Py_DECREF(tmp_expression_value_272);
            if (tmp_tuple_element_203 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 412;

                goto tuple_build_exception_51;
            }
            PyTuple_SET_ITEM(tmp_right_value_51, 1, tmp_tuple_element_203);
        }
        goto tuple_build_noexception_51;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_51:;
        Py_DECREF(tmp_right_value_51);
        goto try_except_handler_153;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_51:;
        tmp_raise_value_51 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_51, tmp_right_value_51);
        Py_DECREF(tmp_right_value_51);
        if (tmp_raise_value_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;

            goto try_except_handler_153;
        }
        exception_type = tmp_raise_type_51;
        Py_INCREF(tmp_raise_type_51);
        exception_value = tmp_raise_value_51;
        exception_lineno = 412;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_153;
    }
    branch_no_203:;
    goto branch_end_202;
    branch_no_202:;
    {
        PyObject *tmp_assign_source_423;
        tmp_assign_source_423 = PyDict_New();
        assert(tmp_class_creation_51__prepared == NULL);
        tmp_class_creation_51__prepared = tmp_assign_source_423;
    }
    branch_end_202:;
    {
        PyObject *tmp_assign_source_424;
        {
            PyObject *tmp_set_locals_51;
            CHECK_OBJECT(tmp_class_creation_51__prepared);
            tmp_set_locals_51 = tmp_class_creation_51__prepared;
            locals_aiohttp$web_exceptions$$$class__51_HTTPBadGateway_412 = tmp_set_locals_51;
            Py_INCREF(tmp_set_locals_51);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__51_HTTPBadGateway_412, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;

            goto try_except_handler_155;
        }
        tmp_dictset_value = mod_consts[181];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__51_HTTPBadGateway_412, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;

            goto try_except_handler_155;
        }
        if (isFrameUnusable(cache_frame_ca6df3e14563b007807148668134a6e3_47)) {
            Py_XDECREF(cache_frame_ca6df3e14563b007807148668134a6e3_47);

#if _DEBUG_REFCOUNTS
            if (cache_frame_ca6df3e14563b007807148668134a6e3_47 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_ca6df3e14563b007807148668134a6e3_47 = MAKE_FUNCTION_FRAME(codeobj_ca6df3e14563b007807148668134a6e3, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_ca6df3e14563b007807148668134a6e3_47->m_type_description == NULL);
        frame_ca6df3e14563b007807148668134a6e3_47 = cache_frame_ca6df3e14563b007807148668134a6e3_47;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_ca6df3e14563b007807148668134a6e3_47);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_ca6df3e14563b007807148668134a6e3_47) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[182];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__51_HTTPBadGateway_412, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 413;
            type_description_2 = "o";
            goto frame_exception_exit_47;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_ca6df3e14563b007807148668134a6e3_47);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_46;

        frame_exception_exit_47:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_ca6df3e14563b007807148668134a6e3_47);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_ca6df3e14563b007807148668134a6e3_47, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_ca6df3e14563b007807148668134a6e3_47->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_ca6df3e14563b007807148668134a6e3_47, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_ca6df3e14563b007807148668134a6e3_47,
            type_description_2,
            outline_50_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_ca6df3e14563b007807148668134a6e3_47 == cache_frame_ca6df3e14563b007807148668134a6e3_47) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_ca6df3e14563b007807148668134a6e3_47);
            cache_frame_ca6df3e14563b007807148668134a6e3_47 = NULL;
        }

        assertFrameObject(frame_ca6df3e14563b007807148668134a6e3_47);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_46;

        frame_no_exception_46:;
        goto skip_nested_handling_46;
        nested_frame_exit_46:;

        goto try_except_handler_155;
        skip_nested_handling_46:;
        {
            nuitka_bool tmp_condition_result_306;
            PyObject *tmp_cmp_expr_left_51;
            PyObject *tmp_cmp_expr_right_51;
            CHECK_OBJECT(tmp_class_creation_51__bases);
            tmp_cmp_expr_left_51 = tmp_class_creation_51__bases;
            CHECK_OBJECT(tmp_class_creation_51__bases_orig);
            tmp_cmp_expr_right_51 = tmp_class_creation_51__bases_orig;
            tmp_condition_result_306 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_51, tmp_cmp_expr_right_51);
            if (tmp_condition_result_306 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 412;

                goto try_except_handler_155;
            }
            if (tmp_condition_result_306 == NUITKA_BOOL_TRUE) {
                goto branch_yes_204;
            } else {
                goto branch_no_204;
            }
            assert(tmp_condition_result_306 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_204:;
        CHECK_OBJECT(tmp_class_creation_51__bases_orig);
        tmp_dictset_value = tmp_class_creation_51__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__51_HTTPBadGateway_412, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;

            goto try_except_handler_155;
        }
        branch_no_204:;
        {
            PyObject *tmp_assign_source_425;
            PyObject *tmp_called_value_102;
            PyObject *tmp_args_value_102;
            PyObject *tmp_tuple_element_204;
            PyObject *tmp_kwargs_value_102;
            CHECK_OBJECT(tmp_class_creation_51__metaclass);
            tmp_called_value_102 = tmp_class_creation_51__metaclass;
            tmp_tuple_element_204 = mod_consts[181];
            tmp_args_value_102 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_102, 0, tmp_tuple_element_204);
            CHECK_OBJECT(tmp_class_creation_51__bases);
            tmp_tuple_element_204 = tmp_class_creation_51__bases;
            PyTuple_SET_ITEM0(tmp_args_value_102, 1, tmp_tuple_element_204);
            tmp_tuple_element_204 = locals_aiohttp$web_exceptions$$$class__51_HTTPBadGateway_412;
            PyTuple_SET_ITEM0(tmp_args_value_102, 2, tmp_tuple_element_204);
            CHECK_OBJECT(tmp_class_creation_51__class_decl_dict);
            tmp_kwargs_value_102 = tmp_class_creation_51__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 412;
            tmp_assign_source_425 = CALL_FUNCTION(tmp_called_value_102, tmp_args_value_102, tmp_kwargs_value_102);
            Py_DECREF(tmp_args_value_102);
            if (tmp_assign_source_425 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 412;

                goto try_except_handler_155;
            }
            assert(outline_50_var___class__ == NULL);
            outline_50_var___class__ = tmp_assign_source_425;
        }
        CHECK_OBJECT(outline_50_var___class__);
        tmp_assign_source_424 = outline_50_var___class__;
        Py_INCREF(tmp_assign_source_424);
        goto try_return_handler_155;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_155:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__51_HTTPBadGateway_412);
        locals_aiohttp$web_exceptions$$$class__51_HTTPBadGateway_412 = NULL;
        goto try_return_handler_154;
        // Exception handler code:
        try_except_handler_155:;
        exception_keeper_type_153 = exception_type;
        exception_keeper_value_153 = exception_value;
        exception_keeper_tb_153 = exception_tb;
        exception_keeper_lineno_153 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__51_HTTPBadGateway_412);
        locals_aiohttp$web_exceptions$$$class__51_HTTPBadGateway_412 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_153;
        exception_value = exception_keeper_value_153;
        exception_tb = exception_keeper_tb_153;
        exception_lineno = exception_keeper_lineno_153;

        goto try_except_handler_154;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_154:;
        CHECK_OBJECT(outline_50_var___class__);
        Py_DECREF(outline_50_var___class__);
        outline_50_var___class__ = NULL;
        goto outline_result_51;
        // Exception handler code:
        try_except_handler_154:;
        exception_keeper_type_154 = exception_type;
        exception_keeper_value_154 = exception_value;
        exception_keeper_tb_154 = exception_tb;
        exception_keeper_lineno_154 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_154;
        exception_value = exception_keeper_value_154;
        exception_tb = exception_keeper_tb_154;
        exception_lineno = exception_keeper_lineno_154;

        goto outline_exception_51;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_51:;
        exception_lineno = 412;
        goto try_except_handler_153;
        outline_result_51:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[181], tmp_assign_source_424);
    }
    goto try_end_53;
    // Exception handler code:
    try_except_handler_153:;
    exception_keeper_type_155 = exception_type;
    exception_keeper_value_155 = exception_value;
    exception_keeper_tb_155 = exception_tb;
    exception_keeper_lineno_155 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_51__bases_orig);
    tmp_class_creation_51__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_51__bases);
    tmp_class_creation_51__bases = NULL;
    Py_XDECREF(tmp_class_creation_51__class_decl_dict);
    tmp_class_creation_51__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_51__metaclass);
    tmp_class_creation_51__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_51__prepared);
    tmp_class_creation_51__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_155;
    exception_value = exception_keeper_value_155;
    exception_tb = exception_keeper_tb_155;
    exception_lineno = exception_keeper_lineno_155;

    goto frame_exception_exit_1;
    // End of try:
    try_end_53:;
    CHECK_OBJECT(tmp_class_creation_51__bases_orig);
    Py_DECREF(tmp_class_creation_51__bases_orig);
    tmp_class_creation_51__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_51__bases);
    Py_DECREF(tmp_class_creation_51__bases);
    tmp_class_creation_51__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_51__class_decl_dict);
    Py_DECREF(tmp_class_creation_51__class_decl_dict);
    tmp_class_creation_51__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_51__metaclass);
    Py_DECREF(tmp_class_creation_51__metaclass);
    tmp_class_creation_51__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_51__prepared);
    Py_DECREF(tmp_class_creation_51__prepared);
    tmp_class_creation_51__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_426;
        PyObject *tmp_tuple_element_205;
        tmp_tuple_element_205 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[176]);

        if (unlikely(tmp_tuple_element_205 == NULL)) {
            tmp_tuple_element_205 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[176]);
        }

        if (tmp_tuple_element_205 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 416;

            goto try_except_handler_156;
        }
        tmp_assign_source_426 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_426, 0, tmp_tuple_element_205);
        assert(tmp_class_creation_52__bases_orig == NULL);
        tmp_class_creation_52__bases_orig = tmp_assign_source_426;
    }
    {
        PyObject *tmp_assign_source_427;
        PyObject *tmp_dircall_arg1_52;
        CHECK_OBJECT(tmp_class_creation_52__bases_orig);
        tmp_dircall_arg1_52 = tmp_class_creation_52__bases_orig;
        Py_INCREF(tmp_dircall_arg1_52);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_52};
            tmp_assign_source_427 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_427 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 416;

            goto try_except_handler_156;
        }
        assert(tmp_class_creation_52__bases == NULL);
        tmp_class_creation_52__bases = tmp_assign_source_427;
    }
    {
        PyObject *tmp_assign_source_428;
        tmp_assign_source_428 = PyDict_New();
        assert(tmp_class_creation_52__class_decl_dict == NULL);
        tmp_class_creation_52__class_decl_dict = tmp_assign_source_428;
    }
    {
        PyObject *tmp_assign_source_429;
        PyObject *tmp_metaclass_value_52;
        bool tmp_condition_result_307;
        PyObject *tmp_key_value_154;
        PyObject *tmp_dict_arg_value_154;
        PyObject *tmp_dict_arg_value_155;
        PyObject *tmp_key_value_155;
        nuitka_bool tmp_condition_result_308;
        int tmp_truth_name_52;
        PyObject *tmp_type_arg_103;
        PyObject *tmp_expression_value_273;
        PyObject *tmp_subscript_value_69;
        PyObject *tmp_bases_value_52;
        tmp_key_value_154 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_52__class_decl_dict);
        tmp_dict_arg_value_154 = tmp_class_creation_52__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_154, tmp_key_value_154);
        assert(!(tmp_res == -1));
        tmp_condition_result_307 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_307 != false) {
            goto condexpr_true_103;
        } else {
            goto condexpr_false_103;
        }
        condexpr_true_103:;
        CHECK_OBJECT(tmp_class_creation_52__class_decl_dict);
        tmp_dict_arg_value_155 = tmp_class_creation_52__class_decl_dict;
        tmp_key_value_155 = mod_consts[57];
        tmp_metaclass_value_52 = DICT_GET_ITEM0(tmp_dict_arg_value_155, tmp_key_value_155);
        if (tmp_metaclass_value_52 == NULL) {
            tmp_metaclass_value_52 = Py_None;
        }
        assert(!(tmp_metaclass_value_52 == NULL));
        Py_INCREF(tmp_metaclass_value_52);
        goto condexpr_end_103;
        condexpr_false_103:;
        CHECK_OBJECT(tmp_class_creation_52__bases);
        tmp_truth_name_52 = CHECK_IF_TRUE(tmp_class_creation_52__bases);
        if (tmp_truth_name_52 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 416;

            goto try_except_handler_156;
        }
        tmp_condition_result_308 = tmp_truth_name_52 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_308 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_104;
        } else {
            goto condexpr_false_104;
        }
        condexpr_true_104:;
        CHECK_OBJECT(tmp_class_creation_52__bases);
        tmp_expression_value_273 = tmp_class_creation_52__bases;
        tmp_subscript_value_69 = mod_consts[39];
        tmp_type_arg_103 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_273, tmp_subscript_value_69, 0);
        if (tmp_type_arg_103 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 416;

            goto try_except_handler_156;
        }
        tmp_metaclass_value_52 = BUILTIN_TYPE1(tmp_type_arg_103);
        Py_DECREF(tmp_type_arg_103);
        if (tmp_metaclass_value_52 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 416;

            goto try_except_handler_156;
        }
        goto condexpr_end_104;
        condexpr_false_104:;
        tmp_metaclass_value_52 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_52);
        condexpr_end_104:;
        condexpr_end_103:;
        CHECK_OBJECT(tmp_class_creation_52__bases);
        tmp_bases_value_52 = tmp_class_creation_52__bases;
        tmp_assign_source_429 = SELECT_METACLASS(tmp_metaclass_value_52, tmp_bases_value_52);
        Py_DECREF(tmp_metaclass_value_52);
        if (tmp_assign_source_429 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 416;

            goto try_except_handler_156;
        }
        assert(tmp_class_creation_52__metaclass == NULL);
        tmp_class_creation_52__metaclass = tmp_assign_source_429;
    }
    {
        bool tmp_condition_result_309;
        PyObject *tmp_key_value_156;
        PyObject *tmp_dict_arg_value_156;
        tmp_key_value_156 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_52__class_decl_dict);
        tmp_dict_arg_value_156 = tmp_class_creation_52__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_156, tmp_key_value_156);
        assert(!(tmp_res == -1));
        tmp_condition_result_309 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_309 != false) {
            goto branch_yes_205;
        } else {
            goto branch_no_205;
        }
    }
    branch_yes_205:;
    CHECK_OBJECT(tmp_class_creation_52__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_52__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 416;

        goto try_except_handler_156;
    }
    branch_no_205:;
    {
        nuitka_bool tmp_condition_result_310;
        PyObject *tmp_expression_value_274;
        CHECK_OBJECT(tmp_class_creation_52__metaclass);
        tmp_expression_value_274 = tmp_class_creation_52__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_274, mod_consts[58]);
        tmp_condition_result_310 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_310 == NUITKA_BOOL_TRUE) {
            goto branch_yes_206;
        } else {
            goto branch_no_206;
        }
    }
    branch_yes_206:;
    {
        PyObject *tmp_assign_source_430;
        PyObject *tmp_called_value_103;
        PyObject *tmp_expression_value_275;
        PyObject *tmp_args_value_103;
        PyObject *tmp_tuple_element_206;
        PyObject *tmp_kwargs_value_103;
        CHECK_OBJECT(tmp_class_creation_52__metaclass);
        tmp_expression_value_275 = tmp_class_creation_52__metaclass;
        tmp_called_value_103 = LOOKUP_ATTRIBUTE(tmp_expression_value_275, mod_consts[58]);
        if (tmp_called_value_103 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 416;

            goto try_except_handler_156;
        }
        tmp_tuple_element_206 = mod_consts[183];
        tmp_args_value_103 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_103, 0, tmp_tuple_element_206);
        CHECK_OBJECT(tmp_class_creation_52__bases);
        tmp_tuple_element_206 = tmp_class_creation_52__bases;
        PyTuple_SET_ITEM0(tmp_args_value_103, 1, tmp_tuple_element_206);
        CHECK_OBJECT(tmp_class_creation_52__class_decl_dict);
        tmp_kwargs_value_103 = tmp_class_creation_52__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 416;
        tmp_assign_source_430 = CALL_FUNCTION(tmp_called_value_103, tmp_args_value_103, tmp_kwargs_value_103);
        Py_DECREF(tmp_called_value_103);
        Py_DECREF(tmp_args_value_103);
        if (tmp_assign_source_430 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 416;

            goto try_except_handler_156;
        }
        assert(tmp_class_creation_52__prepared == NULL);
        tmp_class_creation_52__prepared = tmp_assign_source_430;
    }
    {
        bool tmp_condition_result_311;
        PyObject *tmp_operand_value_52;
        PyObject *tmp_expression_value_276;
        CHECK_OBJECT(tmp_class_creation_52__prepared);
        tmp_expression_value_276 = tmp_class_creation_52__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_276, mod_consts[60]);
        tmp_operand_value_52 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_52);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 416;

            goto try_except_handler_156;
        }
        tmp_condition_result_311 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_311 != false) {
            goto branch_yes_207;
        } else {
            goto branch_no_207;
        }
    }
    branch_yes_207:;
    {
        PyObject *tmp_raise_type_52;
        PyObject *tmp_raise_value_52;
        PyObject *tmp_left_value_52;
        PyObject *tmp_right_value_52;
        PyObject *tmp_tuple_element_207;
        PyObject *tmp_getattr_target_52;
        PyObject *tmp_getattr_attr_52;
        PyObject *tmp_getattr_default_52;
        tmp_raise_type_52 = PyExc_TypeError;
        tmp_left_value_52 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_52__metaclass);
        tmp_getattr_target_52 = tmp_class_creation_52__metaclass;
        tmp_getattr_attr_52 = mod_consts[62];
        tmp_getattr_default_52 = mod_consts[63];
        tmp_tuple_element_207 = BUILTIN_GETATTR(tmp_getattr_target_52, tmp_getattr_attr_52, tmp_getattr_default_52);
        if (tmp_tuple_element_207 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 416;

            goto try_except_handler_156;
        }
        tmp_right_value_52 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_277;
            PyObject *tmp_type_arg_104;
            PyTuple_SET_ITEM(tmp_right_value_52, 0, tmp_tuple_element_207);
            CHECK_OBJECT(tmp_class_creation_52__prepared);
            tmp_type_arg_104 = tmp_class_creation_52__prepared;
            tmp_expression_value_277 = BUILTIN_TYPE1(tmp_type_arg_104);
            assert(!(tmp_expression_value_277 == NULL));
            tmp_tuple_element_207 = LOOKUP_ATTRIBUTE(tmp_expression_value_277, mod_consts[62]);
            Py_DECREF(tmp_expression_value_277);
            if (tmp_tuple_element_207 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 416;

                goto tuple_build_exception_52;
            }
            PyTuple_SET_ITEM(tmp_right_value_52, 1, tmp_tuple_element_207);
        }
        goto tuple_build_noexception_52;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_52:;
        Py_DECREF(tmp_right_value_52);
        goto try_except_handler_156;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_52:;
        tmp_raise_value_52 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_52, tmp_right_value_52);
        Py_DECREF(tmp_right_value_52);
        if (tmp_raise_value_52 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 416;

            goto try_except_handler_156;
        }
        exception_type = tmp_raise_type_52;
        Py_INCREF(tmp_raise_type_52);
        exception_value = tmp_raise_value_52;
        exception_lineno = 416;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_156;
    }
    branch_no_207:;
    goto branch_end_206;
    branch_no_206:;
    {
        PyObject *tmp_assign_source_431;
        tmp_assign_source_431 = PyDict_New();
        assert(tmp_class_creation_52__prepared == NULL);
        tmp_class_creation_52__prepared = tmp_assign_source_431;
    }
    branch_end_206:;
    {
        PyObject *tmp_assign_source_432;
        {
            PyObject *tmp_set_locals_52;
            CHECK_OBJECT(tmp_class_creation_52__prepared);
            tmp_set_locals_52 = tmp_class_creation_52__prepared;
            locals_aiohttp$web_exceptions$$$class__52_HTTPServiceUnavailable_416 = tmp_set_locals_52;
            Py_INCREF(tmp_set_locals_52);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__52_HTTPServiceUnavailable_416, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 416;

            goto try_except_handler_158;
        }
        tmp_dictset_value = mod_consts[183];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__52_HTTPServiceUnavailable_416, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 416;

            goto try_except_handler_158;
        }
        if (isFrameUnusable(cache_frame_a1c4d66701877ec2f64023dbbfae569e_48)) {
            Py_XDECREF(cache_frame_a1c4d66701877ec2f64023dbbfae569e_48);

#if _DEBUG_REFCOUNTS
            if (cache_frame_a1c4d66701877ec2f64023dbbfae569e_48 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_a1c4d66701877ec2f64023dbbfae569e_48 = MAKE_FUNCTION_FRAME(codeobj_a1c4d66701877ec2f64023dbbfae569e, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_a1c4d66701877ec2f64023dbbfae569e_48->m_type_description == NULL);
        frame_a1c4d66701877ec2f64023dbbfae569e_48 = cache_frame_a1c4d66701877ec2f64023dbbfae569e_48;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_a1c4d66701877ec2f64023dbbfae569e_48);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_a1c4d66701877ec2f64023dbbfae569e_48) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[184];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__52_HTTPServiceUnavailable_416, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 417;
            type_description_2 = "o";
            goto frame_exception_exit_48;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a1c4d66701877ec2f64023dbbfae569e_48);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_47;

        frame_exception_exit_48:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a1c4d66701877ec2f64023dbbfae569e_48);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_a1c4d66701877ec2f64023dbbfae569e_48, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_a1c4d66701877ec2f64023dbbfae569e_48->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_a1c4d66701877ec2f64023dbbfae569e_48, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_a1c4d66701877ec2f64023dbbfae569e_48,
            type_description_2,
            outline_51_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_a1c4d66701877ec2f64023dbbfae569e_48 == cache_frame_a1c4d66701877ec2f64023dbbfae569e_48) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_a1c4d66701877ec2f64023dbbfae569e_48);
            cache_frame_a1c4d66701877ec2f64023dbbfae569e_48 = NULL;
        }

        assertFrameObject(frame_a1c4d66701877ec2f64023dbbfae569e_48);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_47;

        frame_no_exception_47:;
        goto skip_nested_handling_47;
        nested_frame_exit_47:;

        goto try_except_handler_158;
        skip_nested_handling_47:;
        {
            nuitka_bool tmp_condition_result_312;
            PyObject *tmp_cmp_expr_left_52;
            PyObject *tmp_cmp_expr_right_52;
            CHECK_OBJECT(tmp_class_creation_52__bases);
            tmp_cmp_expr_left_52 = tmp_class_creation_52__bases;
            CHECK_OBJECT(tmp_class_creation_52__bases_orig);
            tmp_cmp_expr_right_52 = tmp_class_creation_52__bases_orig;
            tmp_condition_result_312 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_52, tmp_cmp_expr_right_52);
            if (tmp_condition_result_312 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 416;

                goto try_except_handler_158;
            }
            if (tmp_condition_result_312 == NUITKA_BOOL_TRUE) {
                goto branch_yes_208;
            } else {
                goto branch_no_208;
            }
            assert(tmp_condition_result_312 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_208:;
        CHECK_OBJECT(tmp_class_creation_52__bases_orig);
        tmp_dictset_value = tmp_class_creation_52__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__52_HTTPServiceUnavailable_416, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 416;

            goto try_except_handler_158;
        }
        branch_no_208:;
        {
            PyObject *tmp_assign_source_433;
            PyObject *tmp_called_value_104;
            PyObject *tmp_args_value_104;
            PyObject *tmp_tuple_element_208;
            PyObject *tmp_kwargs_value_104;
            CHECK_OBJECT(tmp_class_creation_52__metaclass);
            tmp_called_value_104 = tmp_class_creation_52__metaclass;
            tmp_tuple_element_208 = mod_consts[183];
            tmp_args_value_104 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_104, 0, tmp_tuple_element_208);
            CHECK_OBJECT(tmp_class_creation_52__bases);
            tmp_tuple_element_208 = tmp_class_creation_52__bases;
            PyTuple_SET_ITEM0(tmp_args_value_104, 1, tmp_tuple_element_208);
            tmp_tuple_element_208 = locals_aiohttp$web_exceptions$$$class__52_HTTPServiceUnavailable_416;
            PyTuple_SET_ITEM0(tmp_args_value_104, 2, tmp_tuple_element_208);
            CHECK_OBJECT(tmp_class_creation_52__class_decl_dict);
            tmp_kwargs_value_104 = tmp_class_creation_52__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 416;
            tmp_assign_source_433 = CALL_FUNCTION(tmp_called_value_104, tmp_args_value_104, tmp_kwargs_value_104);
            Py_DECREF(tmp_args_value_104);
            if (tmp_assign_source_433 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 416;

                goto try_except_handler_158;
            }
            assert(outline_51_var___class__ == NULL);
            outline_51_var___class__ = tmp_assign_source_433;
        }
        CHECK_OBJECT(outline_51_var___class__);
        tmp_assign_source_432 = outline_51_var___class__;
        Py_INCREF(tmp_assign_source_432);
        goto try_return_handler_158;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_158:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__52_HTTPServiceUnavailable_416);
        locals_aiohttp$web_exceptions$$$class__52_HTTPServiceUnavailable_416 = NULL;
        goto try_return_handler_157;
        // Exception handler code:
        try_except_handler_158:;
        exception_keeper_type_156 = exception_type;
        exception_keeper_value_156 = exception_value;
        exception_keeper_tb_156 = exception_tb;
        exception_keeper_lineno_156 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__52_HTTPServiceUnavailable_416);
        locals_aiohttp$web_exceptions$$$class__52_HTTPServiceUnavailable_416 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_156;
        exception_value = exception_keeper_value_156;
        exception_tb = exception_keeper_tb_156;
        exception_lineno = exception_keeper_lineno_156;

        goto try_except_handler_157;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_157:;
        CHECK_OBJECT(outline_51_var___class__);
        Py_DECREF(outline_51_var___class__);
        outline_51_var___class__ = NULL;
        goto outline_result_52;
        // Exception handler code:
        try_except_handler_157:;
        exception_keeper_type_157 = exception_type;
        exception_keeper_value_157 = exception_value;
        exception_keeper_tb_157 = exception_tb;
        exception_keeper_lineno_157 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_157;
        exception_value = exception_keeper_value_157;
        exception_tb = exception_keeper_tb_157;
        exception_lineno = exception_keeper_lineno_157;

        goto outline_exception_52;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_52:;
        exception_lineno = 416;
        goto try_except_handler_156;
        outline_result_52:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[183], tmp_assign_source_432);
    }
    goto try_end_54;
    // Exception handler code:
    try_except_handler_156:;
    exception_keeper_type_158 = exception_type;
    exception_keeper_value_158 = exception_value;
    exception_keeper_tb_158 = exception_tb;
    exception_keeper_lineno_158 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_52__bases_orig);
    tmp_class_creation_52__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_52__bases);
    tmp_class_creation_52__bases = NULL;
    Py_XDECREF(tmp_class_creation_52__class_decl_dict);
    tmp_class_creation_52__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_52__metaclass);
    tmp_class_creation_52__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_52__prepared);
    tmp_class_creation_52__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_158;
    exception_value = exception_keeper_value_158;
    exception_tb = exception_keeper_tb_158;
    exception_lineno = exception_keeper_lineno_158;

    goto frame_exception_exit_1;
    // End of try:
    try_end_54:;
    CHECK_OBJECT(tmp_class_creation_52__bases_orig);
    Py_DECREF(tmp_class_creation_52__bases_orig);
    tmp_class_creation_52__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_52__bases);
    Py_DECREF(tmp_class_creation_52__bases);
    tmp_class_creation_52__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_52__class_decl_dict);
    Py_DECREF(tmp_class_creation_52__class_decl_dict);
    tmp_class_creation_52__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_52__metaclass);
    Py_DECREF(tmp_class_creation_52__metaclass);
    tmp_class_creation_52__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_52__prepared);
    Py_DECREF(tmp_class_creation_52__prepared);
    tmp_class_creation_52__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_434;
        PyObject *tmp_tuple_element_209;
        tmp_tuple_element_209 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[176]);

        if (unlikely(tmp_tuple_element_209 == NULL)) {
            tmp_tuple_element_209 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[176]);
        }

        if (tmp_tuple_element_209 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 420;

            goto try_except_handler_159;
        }
        tmp_assign_source_434 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_434, 0, tmp_tuple_element_209);
        assert(tmp_class_creation_53__bases_orig == NULL);
        tmp_class_creation_53__bases_orig = tmp_assign_source_434;
    }
    {
        PyObject *tmp_assign_source_435;
        PyObject *tmp_dircall_arg1_53;
        CHECK_OBJECT(tmp_class_creation_53__bases_orig);
        tmp_dircall_arg1_53 = tmp_class_creation_53__bases_orig;
        Py_INCREF(tmp_dircall_arg1_53);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_53};
            tmp_assign_source_435 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_435 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 420;

            goto try_except_handler_159;
        }
        assert(tmp_class_creation_53__bases == NULL);
        tmp_class_creation_53__bases = tmp_assign_source_435;
    }
    {
        PyObject *tmp_assign_source_436;
        tmp_assign_source_436 = PyDict_New();
        assert(tmp_class_creation_53__class_decl_dict == NULL);
        tmp_class_creation_53__class_decl_dict = tmp_assign_source_436;
    }
    {
        PyObject *tmp_assign_source_437;
        PyObject *tmp_metaclass_value_53;
        bool tmp_condition_result_313;
        PyObject *tmp_key_value_157;
        PyObject *tmp_dict_arg_value_157;
        PyObject *tmp_dict_arg_value_158;
        PyObject *tmp_key_value_158;
        nuitka_bool tmp_condition_result_314;
        int tmp_truth_name_53;
        PyObject *tmp_type_arg_105;
        PyObject *tmp_expression_value_278;
        PyObject *tmp_subscript_value_70;
        PyObject *tmp_bases_value_53;
        tmp_key_value_157 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_53__class_decl_dict);
        tmp_dict_arg_value_157 = tmp_class_creation_53__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_157, tmp_key_value_157);
        assert(!(tmp_res == -1));
        tmp_condition_result_313 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_313 != false) {
            goto condexpr_true_105;
        } else {
            goto condexpr_false_105;
        }
        condexpr_true_105:;
        CHECK_OBJECT(tmp_class_creation_53__class_decl_dict);
        tmp_dict_arg_value_158 = tmp_class_creation_53__class_decl_dict;
        tmp_key_value_158 = mod_consts[57];
        tmp_metaclass_value_53 = DICT_GET_ITEM0(tmp_dict_arg_value_158, tmp_key_value_158);
        if (tmp_metaclass_value_53 == NULL) {
            tmp_metaclass_value_53 = Py_None;
        }
        assert(!(tmp_metaclass_value_53 == NULL));
        Py_INCREF(tmp_metaclass_value_53);
        goto condexpr_end_105;
        condexpr_false_105:;
        CHECK_OBJECT(tmp_class_creation_53__bases);
        tmp_truth_name_53 = CHECK_IF_TRUE(tmp_class_creation_53__bases);
        if (tmp_truth_name_53 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 420;

            goto try_except_handler_159;
        }
        tmp_condition_result_314 = tmp_truth_name_53 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_314 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_106;
        } else {
            goto condexpr_false_106;
        }
        condexpr_true_106:;
        CHECK_OBJECT(tmp_class_creation_53__bases);
        tmp_expression_value_278 = tmp_class_creation_53__bases;
        tmp_subscript_value_70 = mod_consts[39];
        tmp_type_arg_105 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_278, tmp_subscript_value_70, 0);
        if (tmp_type_arg_105 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 420;

            goto try_except_handler_159;
        }
        tmp_metaclass_value_53 = BUILTIN_TYPE1(tmp_type_arg_105);
        Py_DECREF(tmp_type_arg_105);
        if (tmp_metaclass_value_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 420;

            goto try_except_handler_159;
        }
        goto condexpr_end_106;
        condexpr_false_106:;
        tmp_metaclass_value_53 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_53);
        condexpr_end_106:;
        condexpr_end_105:;
        CHECK_OBJECT(tmp_class_creation_53__bases);
        tmp_bases_value_53 = tmp_class_creation_53__bases;
        tmp_assign_source_437 = SELECT_METACLASS(tmp_metaclass_value_53, tmp_bases_value_53);
        Py_DECREF(tmp_metaclass_value_53);
        if (tmp_assign_source_437 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 420;

            goto try_except_handler_159;
        }
        assert(tmp_class_creation_53__metaclass == NULL);
        tmp_class_creation_53__metaclass = tmp_assign_source_437;
    }
    {
        bool tmp_condition_result_315;
        PyObject *tmp_key_value_159;
        PyObject *tmp_dict_arg_value_159;
        tmp_key_value_159 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_53__class_decl_dict);
        tmp_dict_arg_value_159 = tmp_class_creation_53__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_159, tmp_key_value_159);
        assert(!(tmp_res == -1));
        tmp_condition_result_315 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_315 != false) {
            goto branch_yes_209;
        } else {
            goto branch_no_209;
        }
    }
    branch_yes_209:;
    CHECK_OBJECT(tmp_class_creation_53__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_53__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 420;

        goto try_except_handler_159;
    }
    branch_no_209:;
    {
        nuitka_bool tmp_condition_result_316;
        PyObject *tmp_expression_value_279;
        CHECK_OBJECT(tmp_class_creation_53__metaclass);
        tmp_expression_value_279 = tmp_class_creation_53__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_279, mod_consts[58]);
        tmp_condition_result_316 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_316 == NUITKA_BOOL_TRUE) {
            goto branch_yes_210;
        } else {
            goto branch_no_210;
        }
    }
    branch_yes_210:;
    {
        PyObject *tmp_assign_source_438;
        PyObject *tmp_called_value_105;
        PyObject *tmp_expression_value_280;
        PyObject *tmp_args_value_105;
        PyObject *tmp_tuple_element_210;
        PyObject *tmp_kwargs_value_105;
        CHECK_OBJECT(tmp_class_creation_53__metaclass);
        tmp_expression_value_280 = tmp_class_creation_53__metaclass;
        tmp_called_value_105 = LOOKUP_ATTRIBUTE(tmp_expression_value_280, mod_consts[58]);
        if (tmp_called_value_105 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 420;

            goto try_except_handler_159;
        }
        tmp_tuple_element_210 = mod_consts[185];
        tmp_args_value_105 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_105, 0, tmp_tuple_element_210);
        CHECK_OBJECT(tmp_class_creation_53__bases);
        tmp_tuple_element_210 = tmp_class_creation_53__bases;
        PyTuple_SET_ITEM0(tmp_args_value_105, 1, tmp_tuple_element_210);
        CHECK_OBJECT(tmp_class_creation_53__class_decl_dict);
        tmp_kwargs_value_105 = tmp_class_creation_53__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 420;
        tmp_assign_source_438 = CALL_FUNCTION(tmp_called_value_105, tmp_args_value_105, tmp_kwargs_value_105);
        Py_DECREF(tmp_called_value_105);
        Py_DECREF(tmp_args_value_105);
        if (tmp_assign_source_438 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 420;

            goto try_except_handler_159;
        }
        assert(tmp_class_creation_53__prepared == NULL);
        tmp_class_creation_53__prepared = tmp_assign_source_438;
    }
    {
        bool tmp_condition_result_317;
        PyObject *tmp_operand_value_53;
        PyObject *tmp_expression_value_281;
        CHECK_OBJECT(tmp_class_creation_53__prepared);
        tmp_expression_value_281 = tmp_class_creation_53__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_281, mod_consts[60]);
        tmp_operand_value_53 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_53);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 420;

            goto try_except_handler_159;
        }
        tmp_condition_result_317 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_317 != false) {
            goto branch_yes_211;
        } else {
            goto branch_no_211;
        }
    }
    branch_yes_211:;
    {
        PyObject *tmp_raise_type_53;
        PyObject *tmp_raise_value_53;
        PyObject *tmp_left_value_53;
        PyObject *tmp_right_value_53;
        PyObject *tmp_tuple_element_211;
        PyObject *tmp_getattr_target_53;
        PyObject *tmp_getattr_attr_53;
        PyObject *tmp_getattr_default_53;
        tmp_raise_type_53 = PyExc_TypeError;
        tmp_left_value_53 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_53__metaclass);
        tmp_getattr_target_53 = tmp_class_creation_53__metaclass;
        tmp_getattr_attr_53 = mod_consts[62];
        tmp_getattr_default_53 = mod_consts[63];
        tmp_tuple_element_211 = BUILTIN_GETATTR(tmp_getattr_target_53, tmp_getattr_attr_53, tmp_getattr_default_53);
        if (tmp_tuple_element_211 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 420;

            goto try_except_handler_159;
        }
        tmp_right_value_53 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_282;
            PyObject *tmp_type_arg_106;
            PyTuple_SET_ITEM(tmp_right_value_53, 0, tmp_tuple_element_211);
            CHECK_OBJECT(tmp_class_creation_53__prepared);
            tmp_type_arg_106 = tmp_class_creation_53__prepared;
            tmp_expression_value_282 = BUILTIN_TYPE1(tmp_type_arg_106);
            assert(!(tmp_expression_value_282 == NULL));
            tmp_tuple_element_211 = LOOKUP_ATTRIBUTE(tmp_expression_value_282, mod_consts[62]);
            Py_DECREF(tmp_expression_value_282);
            if (tmp_tuple_element_211 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 420;

                goto tuple_build_exception_53;
            }
            PyTuple_SET_ITEM(tmp_right_value_53, 1, tmp_tuple_element_211);
        }
        goto tuple_build_noexception_53;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_53:;
        Py_DECREF(tmp_right_value_53);
        goto try_except_handler_159;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_53:;
        tmp_raise_value_53 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_53, tmp_right_value_53);
        Py_DECREF(tmp_right_value_53);
        if (tmp_raise_value_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 420;

            goto try_except_handler_159;
        }
        exception_type = tmp_raise_type_53;
        Py_INCREF(tmp_raise_type_53);
        exception_value = tmp_raise_value_53;
        exception_lineno = 420;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_159;
    }
    branch_no_211:;
    goto branch_end_210;
    branch_no_210:;
    {
        PyObject *tmp_assign_source_439;
        tmp_assign_source_439 = PyDict_New();
        assert(tmp_class_creation_53__prepared == NULL);
        tmp_class_creation_53__prepared = tmp_assign_source_439;
    }
    branch_end_210:;
    {
        PyObject *tmp_assign_source_440;
        {
            PyObject *tmp_set_locals_53;
            CHECK_OBJECT(tmp_class_creation_53__prepared);
            tmp_set_locals_53 = tmp_class_creation_53__prepared;
            locals_aiohttp$web_exceptions$$$class__53_HTTPGatewayTimeout_420 = tmp_set_locals_53;
            Py_INCREF(tmp_set_locals_53);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__53_HTTPGatewayTimeout_420, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 420;

            goto try_except_handler_161;
        }
        tmp_dictset_value = mod_consts[185];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__53_HTTPGatewayTimeout_420, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 420;

            goto try_except_handler_161;
        }
        if (isFrameUnusable(cache_frame_fad791a764dc605ee6ecfa957aacc083_49)) {
            Py_XDECREF(cache_frame_fad791a764dc605ee6ecfa957aacc083_49);

#if _DEBUG_REFCOUNTS
            if (cache_frame_fad791a764dc605ee6ecfa957aacc083_49 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_fad791a764dc605ee6ecfa957aacc083_49 = MAKE_FUNCTION_FRAME(codeobj_fad791a764dc605ee6ecfa957aacc083, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_fad791a764dc605ee6ecfa957aacc083_49->m_type_description == NULL);
        frame_fad791a764dc605ee6ecfa957aacc083_49 = cache_frame_fad791a764dc605ee6ecfa957aacc083_49;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_fad791a764dc605ee6ecfa957aacc083_49);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_fad791a764dc605ee6ecfa957aacc083_49) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[186];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__53_HTTPGatewayTimeout_420, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 421;
            type_description_2 = "o";
            goto frame_exception_exit_49;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_fad791a764dc605ee6ecfa957aacc083_49);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_48;

        frame_exception_exit_49:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_fad791a764dc605ee6ecfa957aacc083_49);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_fad791a764dc605ee6ecfa957aacc083_49, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_fad791a764dc605ee6ecfa957aacc083_49->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_fad791a764dc605ee6ecfa957aacc083_49, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_fad791a764dc605ee6ecfa957aacc083_49,
            type_description_2,
            outline_52_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_fad791a764dc605ee6ecfa957aacc083_49 == cache_frame_fad791a764dc605ee6ecfa957aacc083_49) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_fad791a764dc605ee6ecfa957aacc083_49);
            cache_frame_fad791a764dc605ee6ecfa957aacc083_49 = NULL;
        }

        assertFrameObject(frame_fad791a764dc605ee6ecfa957aacc083_49);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_48;

        frame_no_exception_48:;
        goto skip_nested_handling_48;
        nested_frame_exit_48:;

        goto try_except_handler_161;
        skip_nested_handling_48:;
        {
            nuitka_bool tmp_condition_result_318;
            PyObject *tmp_cmp_expr_left_53;
            PyObject *tmp_cmp_expr_right_53;
            CHECK_OBJECT(tmp_class_creation_53__bases);
            tmp_cmp_expr_left_53 = tmp_class_creation_53__bases;
            CHECK_OBJECT(tmp_class_creation_53__bases_orig);
            tmp_cmp_expr_right_53 = tmp_class_creation_53__bases_orig;
            tmp_condition_result_318 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_53, tmp_cmp_expr_right_53);
            if (tmp_condition_result_318 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 420;

                goto try_except_handler_161;
            }
            if (tmp_condition_result_318 == NUITKA_BOOL_TRUE) {
                goto branch_yes_212;
            } else {
                goto branch_no_212;
            }
            assert(tmp_condition_result_318 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_212:;
        CHECK_OBJECT(tmp_class_creation_53__bases_orig);
        tmp_dictset_value = tmp_class_creation_53__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__53_HTTPGatewayTimeout_420, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 420;

            goto try_except_handler_161;
        }
        branch_no_212:;
        {
            PyObject *tmp_assign_source_441;
            PyObject *tmp_called_value_106;
            PyObject *tmp_args_value_106;
            PyObject *tmp_tuple_element_212;
            PyObject *tmp_kwargs_value_106;
            CHECK_OBJECT(tmp_class_creation_53__metaclass);
            tmp_called_value_106 = tmp_class_creation_53__metaclass;
            tmp_tuple_element_212 = mod_consts[185];
            tmp_args_value_106 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_106, 0, tmp_tuple_element_212);
            CHECK_OBJECT(tmp_class_creation_53__bases);
            tmp_tuple_element_212 = tmp_class_creation_53__bases;
            PyTuple_SET_ITEM0(tmp_args_value_106, 1, tmp_tuple_element_212);
            tmp_tuple_element_212 = locals_aiohttp$web_exceptions$$$class__53_HTTPGatewayTimeout_420;
            PyTuple_SET_ITEM0(tmp_args_value_106, 2, tmp_tuple_element_212);
            CHECK_OBJECT(tmp_class_creation_53__class_decl_dict);
            tmp_kwargs_value_106 = tmp_class_creation_53__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 420;
            tmp_assign_source_441 = CALL_FUNCTION(tmp_called_value_106, tmp_args_value_106, tmp_kwargs_value_106);
            Py_DECREF(tmp_args_value_106);
            if (tmp_assign_source_441 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 420;

                goto try_except_handler_161;
            }
            assert(outline_52_var___class__ == NULL);
            outline_52_var___class__ = tmp_assign_source_441;
        }
        CHECK_OBJECT(outline_52_var___class__);
        tmp_assign_source_440 = outline_52_var___class__;
        Py_INCREF(tmp_assign_source_440);
        goto try_return_handler_161;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_161:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__53_HTTPGatewayTimeout_420);
        locals_aiohttp$web_exceptions$$$class__53_HTTPGatewayTimeout_420 = NULL;
        goto try_return_handler_160;
        // Exception handler code:
        try_except_handler_161:;
        exception_keeper_type_159 = exception_type;
        exception_keeper_value_159 = exception_value;
        exception_keeper_tb_159 = exception_tb;
        exception_keeper_lineno_159 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__53_HTTPGatewayTimeout_420);
        locals_aiohttp$web_exceptions$$$class__53_HTTPGatewayTimeout_420 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_159;
        exception_value = exception_keeper_value_159;
        exception_tb = exception_keeper_tb_159;
        exception_lineno = exception_keeper_lineno_159;

        goto try_except_handler_160;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_160:;
        CHECK_OBJECT(outline_52_var___class__);
        Py_DECREF(outline_52_var___class__);
        outline_52_var___class__ = NULL;
        goto outline_result_53;
        // Exception handler code:
        try_except_handler_160:;
        exception_keeper_type_160 = exception_type;
        exception_keeper_value_160 = exception_value;
        exception_keeper_tb_160 = exception_tb;
        exception_keeper_lineno_160 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_160;
        exception_value = exception_keeper_value_160;
        exception_tb = exception_keeper_tb_160;
        exception_lineno = exception_keeper_lineno_160;

        goto outline_exception_53;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_53:;
        exception_lineno = 420;
        goto try_except_handler_159;
        outline_result_53:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[185], tmp_assign_source_440);
    }
    goto try_end_55;
    // Exception handler code:
    try_except_handler_159:;
    exception_keeper_type_161 = exception_type;
    exception_keeper_value_161 = exception_value;
    exception_keeper_tb_161 = exception_tb;
    exception_keeper_lineno_161 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_53__bases_orig);
    tmp_class_creation_53__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_53__bases);
    tmp_class_creation_53__bases = NULL;
    Py_XDECREF(tmp_class_creation_53__class_decl_dict);
    tmp_class_creation_53__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_53__metaclass);
    tmp_class_creation_53__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_53__prepared);
    tmp_class_creation_53__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_161;
    exception_value = exception_keeper_value_161;
    exception_tb = exception_keeper_tb_161;
    exception_lineno = exception_keeper_lineno_161;

    goto frame_exception_exit_1;
    // End of try:
    try_end_55:;
    CHECK_OBJECT(tmp_class_creation_53__bases_orig);
    Py_DECREF(tmp_class_creation_53__bases_orig);
    tmp_class_creation_53__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_53__bases);
    Py_DECREF(tmp_class_creation_53__bases);
    tmp_class_creation_53__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_53__class_decl_dict);
    Py_DECREF(tmp_class_creation_53__class_decl_dict);
    tmp_class_creation_53__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_53__metaclass);
    Py_DECREF(tmp_class_creation_53__metaclass);
    tmp_class_creation_53__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_53__prepared);
    Py_DECREF(tmp_class_creation_53__prepared);
    tmp_class_creation_53__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_442;
        PyObject *tmp_tuple_element_213;
        tmp_tuple_element_213 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[176]);

        if (unlikely(tmp_tuple_element_213 == NULL)) {
            tmp_tuple_element_213 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[176]);
        }

        if (tmp_tuple_element_213 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 424;

            goto try_except_handler_162;
        }
        tmp_assign_source_442 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_442, 0, tmp_tuple_element_213);
        assert(tmp_class_creation_54__bases_orig == NULL);
        tmp_class_creation_54__bases_orig = tmp_assign_source_442;
    }
    {
        PyObject *tmp_assign_source_443;
        PyObject *tmp_dircall_arg1_54;
        CHECK_OBJECT(tmp_class_creation_54__bases_orig);
        tmp_dircall_arg1_54 = tmp_class_creation_54__bases_orig;
        Py_INCREF(tmp_dircall_arg1_54);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_54};
            tmp_assign_source_443 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_443 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 424;

            goto try_except_handler_162;
        }
        assert(tmp_class_creation_54__bases == NULL);
        tmp_class_creation_54__bases = tmp_assign_source_443;
    }
    {
        PyObject *tmp_assign_source_444;
        tmp_assign_source_444 = PyDict_New();
        assert(tmp_class_creation_54__class_decl_dict == NULL);
        tmp_class_creation_54__class_decl_dict = tmp_assign_source_444;
    }
    {
        PyObject *tmp_assign_source_445;
        PyObject *tmp_metaclass_value_54;
        bool tmp_condition_result_319;
        PyObject *tmp_key_value_160;
        PyObject *tmp_dict_arg_value_160;
        PyObject *tmp_dict_arg_value_161;
        PyObject *tmp_key_value_161;
        nuitka_bool tmp_condition_result_320;
        int tmp_truth_name_54;
        PyObject *tmp_type_arg_107;
        PyObject *tmp_expression_value_283;
        PyObject *tmp_subscript_value_71;
        PyObject *tmp_bases_value_54;
        tmp_key_value_160 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_54__class_decl_dict);
        tmp_dict_arg_value_160 = tmp_class_creation_54__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_160, tmp_key_value_160);
        assert(!(tmp_res == -1));
        tmp_condition_result_319 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_319 != false) {
            goto condexpr_true_107;
        } else {
            goto condexpr_false_107;
        }
        condexpr_true_107:;
        CHECK_OBJECT(tmp_class_creation_54__class_decl_dict);
        tmp_dict_arg_value_161 = tmp_class_creation_54__class_decl_dict;
        tmp_key_value_161 = mod_consts[57];
        tmp_metaclass_value_54 = DICT_GET_ITEM0(tmp_dict_arg_value_161, tmp_key_value_161);
        if (tmp_metaclass_value_54 == NULL) {
            tmp_metaclass_value_54 = Py_None;
        }
        assert(!(tmp_metaclass_value_54 == NULL));
        Py_INCREF(tmp_metaclass_value_54);
        goto condexpr_end_107;
        condexpr_false_107:;
        CHECK_OBJECT(tmp_class_creation_54__bases);
        tmp_truth_name_54 = CHECK_IF_TRUE(tmp_class_creation_54__bases);
        if (tmp_truth_name_54 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 424;

            goto try_except_handler_162;
        }
        tmp_condition_result_320 = tmp_truth_name_54 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_320 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_108;
        } else {
            goto condexpr_false_108;
        }
        condexpr_true_108:;
        CHECK_OBJECT(tmp_class_creation_54__bases);
        tmp_expression_value_283 = tmp_class_creation_54__bases;
        tmp_subscript_value_71 = mod_consts[39];
        tmp_type_arg_107 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_283, tmp_subscript_value_71, 0);
        if (tmp_type_arg_107 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 424;

            goto try_except_handler_162;
        }
        tmp_metaclass_value_54 = BUILTIN_TYPE1(tmp_type_arg_107);
        Py_DECREF(tmp_type_arg_107);
        if (tmp_metaclass_value_54 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 424;

            goto try_except_handler_162;
        }
        goto condexpr_end_108;
        condexpr_false_108:;
        tmp_metaclass_value_54 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_54);
        condexpr_end_108:;
        condexpr_end_107:;
        CHECK_OBJECT(tmp_class_creation_54__bases);
        tmp_bases_value_54 = tmp_class_creation_54__bases;
        tmp_assign_source_445 = SELECT_METACLASS(tmp_metaclass_value_54, tmp_bases_value_54);
        Py_DECREF(tmp_metaclass_value_54);
        if (tmp_assign_source_445 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 424;

            goto try_except_handler_162;
        }
        assert(tmp_class_creation_54__metaclass == NULL);
        tmp_class_creation_54__metaclass = tmp_assign_source_445;
    }
    {
        bool tmp_condition_result_321;
        PyObject *tmp_key_value_162;
        PyObject *tmp_dict_arg_value_162;
        tmp_key_value_162 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_54__class_decl_dict);
        tmp_dict_arg_value_162 = tmp_class_creation_54__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_162, tmp_key_value_162);
        assert(!(tmp_res == -1));
        tmp_condition_result_321 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_321 != false) {
            goto branch_yes_213;
        } else {
            goto branch_no_213;
        }
    }
    branch_yes_213:;
    CHECK_OBJECT(tmp_class_creation_54__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_54__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 424;

        goto try_except_handler_162;
    }
    branch_no_213:;
    {
        nuitka_bool tmp_condition_result_322;
        PyObject *tmp_expression_value_284;
        CHECK_OBJECT(tmp_class_creation_54__metaclass);
        tmp_expression_value_284 = tmp_class_creation_54__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_284, mod_consts[58]);
        tmp_condition_result_322 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_322 == NUITKA_BOOL_TRUE) {
            goto branch_yes_214;
        } else {
            goto branch_no_214;
        }
    }
    branch_yes_214:;
    {
        PyObject *tmp_assign_source_446;
        PyObject *tmp_called_value_107;
        PyObject *tmp_expression_value_285;
        PyObject *tmp_args_value_107;
        PyObject *tmp_tuple_element_214;
        PyObject *tmp_kwargs_value_107;
        CHECK_OBJECT(tmp_class_creation_54__metaclass);
        tmp_expression_value_285 = tmp_class_creation_54__metaclass;
        tmp_called_value_107 = LOOKUP_ATTRIBUTE(tmp_expression_value_285, mod_consts[58]);
        if (tmp_called_value_107 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 424;

            goto try_except_handler_162;
        }
        tmp_tuple_element_214 = mod_consts[187];
        tmp_args_value_107 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_107, 0, tmp_tuple_element_214);
        CHECK_OBJECT(tmp_class_creation_54__bases);
        tmp_tuple_element_214 = tmp_class_creation_54__bases;
        PyTuple_SET_ITEM0(tmp_args_value_107, 1, tmp_tuple_element_214);
        CHECK_OBJECT(tmp_class_creation_54__class_decl_dict);
        tmp_kwargs_value_107 = tmp_class_creation_54__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 424;
        tmp_assign_source_446 = CALL_FUNCTION(tmp_called_value_107, tmp_args_value_107, tmp_kwargs_value_107);
        Py_DECREF(tmp_called_value_107);
        Py_DECREF(tmp_args_value_107);
        if (tmp_assign_source_446 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 424;

            goto try_except_handler_162;
        }
        assert(tmp_class_creation_54__prepared == NULL);
        tmp_class_creation_54__prepared = tmp_assign_source_446;
    }
    {
        bool tmp_condition_result_323;
        PyObject *tmp_operand_value_54;
        PyObject *tmp_expression_value_286;
        CHECK_OBJECT(tmp_class_creation_54__prepared);
        tmp_expression_value_286 = tmp_class_creation_54__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_286, mod_consts[60]);
        tmp_operand_value_54 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_54);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 424;

            goto try_except_handler_162;
        }
        tmp_condition_result_323 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_323 != false) {
            goto branch_yes_215;
        } else {
            goto branch_no_215;
        }
    }
    branch_yes_215:;
    {
        PyObject *tmp_raise_type_54;
        PyObject *tmp_raise_value_54;
        PyObject *tmp_left_value_54;
        PyObject *tmp_right_value_54;
        PyObject *tmp_tuple_element_215;
        PyObject *tmp_getattr_target_54;
        PyObject *tmp_getattr_attr_54;
        PyObject *tmp_getattr_default_54;
        tmp_raise_type_54 = PyExc_TypeError;
        tmp_left_value_54 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_54__metaclass);
        tmp_getattr_target_54 = tmp_class_creation_54__metaclass;
        tmp_getattr_attr_54 = mod_consts[62];
        tmp_getattr_default_54 = mod_consts[63];
        tmp_tuple_element_215 = BUILTIN_GETATTR(tmp_getattr_target_54, tmp_getattr_attr_54, tmp_getattr_default_54);
        if (tmp_tuple_element_215 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 424;

            goto try_except_handler_162;
        }
        tmp_right_value_54 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_287;
            PyObject *tmp_type_arg_108;
            PyTuple_SET_ITEM(tmp_right_value_54, 0, tmp_tuple_element_215);
            CHECK_OBJECT(tmp_class_creation_54__prepared);
            tmp_type_arg_108 = tmp_class_creation_54__prepared;
            tmp_expression_value_287 = BUILTIN_TYPE1(tmp_type_arg_108);
            assert(!(tmp_expression_value_287 == NULL));
            tmp_tuple_element_215 = LOOKUP_ATTRIBUTE(tmp_expression_value_287, mod_consts[62]);
            Py_DECREF(tmp_expression_value_287);
            if (tmp_tuple_element_215 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 424;

                goto tuple_build_exception_54;
            }
            PyTuple_SET_ITEM(tmp_right_value_54, 1, tmp_tuple_element_215);
        }
        goto tuple_build_noexception_54;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_54:;
        Py_DECREF(tmp_right_value_54);
        goto try_except_handler_162;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_54:;
        tmp_raise_value_54 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_54, tmp_right_value_54);
        Py_DECREF(tmp_right_value_54);
        if (tmp_raise_value_54 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 424;

            goto try_except_handler_162;
        }
        exception_type = tmp_raise_type_54;
        Py_INCREF(tmp_raise_type_54);
        exception_value = tmp_raise_value_54;
        exception_lineno = 424;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_162;
    }
    branch_no_215:;
    goto branch_end_214;
    branch_no_214:;
    {
        PyObject *tmp_assign_source_447;
        tmp_assign_source_447 = PyDict_New();
        assert(tmp_class_creation_54__prepared == NULL);
        tmp_class_creation_54__prepared = tmp_assign_source_447;
    }
    branch_end_214:;
    {
        PyObject *tmp_assign_source_448;
        {
            PyObject *tmp_set_locals_54;
            CHECK_OBJECT(tmp_class_creation_54__prepared);
            tmp_set_locals_54 = tmp_class_creation_54__prepared;
            locals_aiohttp$web_exceptions$$$class__54_HTTPVersionNotSupported_424 = tmp_set_locals_54;
            Py_INCREF(tmp_set_locals_54);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__54_HTTPVersionNotSupported_424, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 424;

            goto try_except_handler_164;
        }
        tmp_dictset_value = mod_consts[187];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__54_HTTPVersionNotSupported_424, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 424;

            goto try_except_handler_164;
        }
        if (isFrameUnusable(cache_frame_e5b444f618430b69c6774bc55db0cf9a_50)) {
            Py_XDECREF(cache_frame_e5b444f618430b69c6774bc55db0cf9a_50);

#if _DEBUG_REFCOUNTS
            if (cache_frame_e5b444f618430b69c6774bc55db0cf9a_50 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_e5b444f618430b69c6774bc55db0cf9a_50 = MAKE_FUNCTION_FRAME(codeobj_e5b444f618430b69c6774bc55db0cf9a, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_e5b444f618430b69c6774bc55db0cf9a_50->m_type_description == NULL);
        frame_e5b444f618430b69c6774bc55db0cf9a_50 = cache_frame_e5b444f618430b69c6774bc55db0cf9a_50;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_e5b444f618430b69c6774bc55db0cf9a_50);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_e5b444f618430b69c6774bc55db0cf9a_50) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[188];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__54_HTTPVersionNotSupported_424, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 425;
            type_description_2 = "o";
            goto frame_exception_exit_50;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e5b444f618430b69c6774bc55db0cf9a_50);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_49;

        frame_exception_exit_50:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e5b444f618430b69c6774bc55db0cf9a_50);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_e5b444f618430b69c6774bc55db0cf9a_50, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_e5b444f618430b69c6774bc55db0cf9a_50->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_e5b444f618430b69c6774bc55db0cf9a_50, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_e5b444f618430b69c6774bc55db0cf9a_50,
            type_description_2,
            outline_53_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_e5b444f618430b69c6774bc55db0cf9a_50 == cache_frame_e5b444f618430b69c6774bc55db0cf9a_50) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_e5b444f618430b69c6774bc55db0cf9a_50);
            cache_frame_e5b444f618430b69c6774bc55db0cf9a_50 = NULL;
        }

        assertFrameObject(frame_e5b444f618430b69c6774bc55db0cf9a_50);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_49;

        frame_no_exception_49:;
        goto skip_nested_handling_49;
        nested_frame_exit_49:;

        goto try_except_handler_164;
        skip_nested_handling_49:;
        {
            nuitka_bool tmp_condition_result_324;
            PyObject *tmp_cmp_expr_left_54;
            PyObject *tmp_cmp_expr_right_54;
            CHECK_OBJECT(tmp_class_creation_54__bases);
            tmp_cmp_expr_left_54 = tmp_class_creation_54__bases;
            CHECK_OBJECT(tmp_class_creation_54__bases_orig);
            tmp_cmp_expr_right_54 = tmp_class_creation_54__bases_orig;
            tmp_condition_result_324 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_54, tmp_cmp_expr_right_54);
            if (tmp_condition_result_324 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 424;

                goto try_except_handler_164;
            }
            if (tmp_condition_result_324 == NUITKA_BOOL_TRUE) {
                goto branch_yes_216;
            } else {
                goto branch_no_216;
            }
            assert(tmp_condition_result_324 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_216:;
        CHECK_OBJECT(tmp_class_creation_54__bases_orig);
        tmp_dictset_value = tmp_class_creation_54__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__54_HTTPVersionNotSupported_424, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 424;

            goto try_except_handler_164;
        }
        branch_no_216:;
        {
            PyObject *tmp_assign_source_449;
            PyObject *tmp_called_value_108;
            PyObject *tmp_args_value_108;
            PyObject *tmp_tuple_element_216;
            PyObject *tmp_kwargs_value_108;
            CHECK_OBJECT(tmp_class_creation_54__metaclass);
            tmp_called_value_108 = tmp_class_creation_54__metaclass;
            tmp_tuple_element_216 = mod_consts[187];
            tmp_args_value_108 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_108, 0, tmp_tuple_element_216);
            CHECK_OBJECT(tmp_class_creation_54__bases);
            tmp_tuple_element_216 = tmp_class_creation_54__bases;
            PyTuple_SET_ITEM0(tmp_args_value_108, 1, tmp_tuple_element_216);
            tmp_tuple_element_216 = locals_aiohttp$web_exceptions$$$class__54_HTTPVersionNotSupported_424;
            PyTuple_SET_ITEM0(tmp_args_value_108, 2, tmp_tuple_element_216);
            CHECK_OBJECT(tmp_class_creation_54__class_decl_dict);
            tmp_kwargs_value_108 = tmp_class_creation_54__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 424;
            tmp_assign_source_449 = CALL_FUNCTION(tmp_called_value_108, tmp_args_value_108, tmp_kwargs_value_108);
            Py_DECREF(tmp_args_value_108);
            if (tmp_assign_source_449 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 424;

                goto try_except_handler_164;
            }
            assert(outline_53_var___class__ == NULL);
            outline_53_var___class__ = tmp_assign_source_449;
        }
        CHECK_OBJECT(outline_53_var___class__);
        tmp_assign_source_448 = outline_53_var___class__;
        Py_INCREF(tmp_assign_source_448);
        goto try_return_handler_164;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_164:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__54_HTTPVersionNotSupported_424);
        locals_aiohttp$web_exceptions$$$class__54_HTTPVersionNotSupported_424 = NULL;
        goto try_return_handler_163;
        // Exception handler code:
        try_except_handler_164:;
        exception_keeper_type_162 = exception_type;
        exception_keeper_value_162 = exception_value;
        exception_keeper_tb_162 = exception_tb;
        exception_keeper_lineno_162 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__54_HTTPVersionNotSupported_424);
        locals_aiohttp$web_exceptions$$$class__54_HTTPVersionNotSupported_424 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_162;
        exception_value = exception_keeper_value_162;
        exception_tb = exception_keeper_tb_162;
        exception_lineno = exception_keeper_lineno_162;

        goto try_except_handler_163;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_163:;
        CHECK_OBJECT(outline_53_var___class__);
        Py_DECREF(outline_53_var___class__);
        outline_53_var___class__ = NULL;
        goto outline_result_54;
        // Exception handler code:
        try_except_handler_163:;
        exception_keeper_type_163 = exception_type;
        exception_keeper_value_163 = exception_value;
        exception_keeper_tb_163 = exception_tb;
        exception_keeper_lineno_163 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_163;
        exception_value = exception_keeper_value_163;
        exception_tb = exception_keeper_tb_163;
        exception_lineno = exception_keeper_lineno_163;

        goto outline_exception_54;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_54:;
        exception_lineno = 424;
        goto try_except_handler_162;
        outline_result_54:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[187], tmp_assign_source_448);
    }
    goto try_end_56;
    // Exception handler code:
    try_except_handler_162:;
    exception_keeper_type_164 = exception_type;
    exception_keeper_value_164 = exception_value;
    exception_keeper_tb_164 = exception_tb;
    exception_keeper_lineno_164 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_54__bases_orig);
    tmp_class_creation_54__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_54__bases);
    tmp_class_creation_54__bases = NULL;
    Py_XDECREF(tmp_class_creation_54__class_decl_dict);
    tmp_class_creation_54__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_54__metaclass);
    tmp_class_creation_54__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_54__prepared);
    tmp_class_creation_54__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_164;
    exception_value = exception_keeper_value_164;
    exception_tb = exception_keeper_tb_164;
    exception_lineno = exception_keeper_lineno_164;

    goto frame_exception_exit_1;
    // End of try:
    try_end_56:;
    CHECK_OBJECT(tmp_class_creation_54__bases_orig);
    Py_DECREF(tmp_class_creation_54__bases_orig);
    tmp_class_creation_54__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_54__bases);
    Py_DECREF(tmp_class_creation_54__bases);
    tmp_class_creation_54__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_54__class_decl_dict);
    Py_DECREF(tmp_class_creation_54__class_decl_dict);
    tmp_class_creation_54__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_54__metaclass);
    Py_DECREF(tmp_class_creation_54__metaclass);
    tmp_class_creation_54__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_54__prepared);
    Py_DECREF(tmp_class_creation_54__prepared);
    tmp_class_creation_54__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_450;
        PyObject *tmp_tuple_element_217;
        tmp_tuple_element_217 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[176]);

        if (unlikely(tmp_tuple_element_217 == NULL)) {
            tmp_tuple_element_217 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[176]);
        }

        if (tmp_tuple_element_217 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;

            goto try_except_handler_165;
        }
        tmp_assign_source_450 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_450, 0, tmp_tuple_element_217);
        assert(tmp_class_creation_55__bases_orig == NULL);
        tmp_class_creation_55__bases_orig = tmp_assign_source_450;
    }
    {
        PyObject *tmp_assign_source_451;
        PyObject *tmp_dircall_arg1_55;
        CHECK_OBJECT(tmp_class_creation_55__bases_orig);
        tmp_dircall_arg1_55 = tmp_class_creation_55__bases_orig;
        Py_INCREF(tmp_dircall_arg1_55);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_55};
            tmp_assign_source_451 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_451 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;

            goto try_except_handler_165;
        }
        assert(tmp_class_creation_55__bases == NULL);
        tmp_class_creation_55__bases = tmp_assign_source_451;
    }
    {
        PyObject *tmp_assign_source_452;
        tmp_assign_source_452 = PyDict_New();
        assert(tmp_class_creation_55__class_decl_dict == NULL);
        tmp_class_creation_55__class_decl_dict = tmp_assign_source_452;
    }
    {
        PyObject *tmp_assign_source_453;
        PyObject *tmp_metaclass_value_55;
        bool tmp_condition_result_325;
        PyObject *tmp_key_value_163;
        PyObject *tmp_dict_arg_value_163;
        PyObject *tmp_dict_arg_value_164;
        PyObject *tmp_key_value_164;
        nuitka_bool tmp_condition_result_326;
        int tmp_truth_name_55;
        PyObject *tmp_type_arg_109;
        PyObject *tmp_expression_value_288;
        PyObject *tmp_subscript_value_72;
        PyObject *tmp_bases_value_55;
        tmp_key_value_163 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_55__class_decl_dict);
        tmp_dict_arg_value_163 = tmp_class_creation_55__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_163, tmp_key_value_163);
        assert(!(tmp_res == -1));
        tmp_condition_result_325 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_325 != false) {
            goto condexpr_true_109;
        } else {
            goto condexpr_false_109;
        }
        condexpr_true_109:;
        CHECK_OBJECT(tmp_class_creation_55__class_decl_dict);
        tmp_dict_arg_value_164 = tmp_class_creation_55__class_decl_dict;
        tmp_key_value_164 = mod_consts[57];
        tmp_metaclass_value_55 = DICT_GET_ITEM0(tmp_dict_arg_value_164, tmp_key_value_164);
        if (tmp_metaclass_value_55 == NULL) {
            tmp_metaclass_value_55 = Py_None;
        }
        assert(!(tmp_metaclass_value_55 == NULL));
        Py_INCREF(tmp_metaclass_value_55);
        goto condexpr_end_109;
        condexpr_false_109:;
        CHECK_OBJECT(tmp_class_creation_55__bases);
        tmp_truth_name_55 = CHECK_IF_TRUE(tmp_class_creation_55__bases);
        if (tmp_truth_name_55 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;

            goto try_except_handler_165;
        }
        tmp_condition_result_326 = tmp_truth_name_55 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_326 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_110;
        } else {
            goto condexpr_false_110;
        }
        condexpr_true_110:;
        CHECK_OBJECT(tmp_class_creation_55__bases);
        tmp_expression_value_288 = tmp_class_creation_55__bases;
        tmp_subscript_value_72 = mod_consts[39];
        tmp_type_arg_109 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_288, tmp_subscript_value_72, 0);
        if (tmp_type_arg_109 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;

            goto try_except_handler_165;
        }
        tmp_metaclass_value_55 = BUILTIN_TYPE1(tmp_type_arg_109);
        Py_DECREF(tmp_type_arg_109);
        if (tmp_metaclass_value_55 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;

            goto try_except_handler_165;
        }
        goto condexpr_end_110;
        condexpr_false_110:;
        tmp_metaclass_value_55 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_55);
        condexpr_end_110:;
        condexpr_end_109:;
        CHECK_OBJECT(tmp_class_creation_55__bases);
        tmp_bases_value_55 = tmp_class_creation_55__bases;
        tmp_assign_source_453 = SELECT_METACLASS(tmp_metaclass_value_55, tmp_bases_value_55);
        Py_DECREF(tmp_metaclass_value_55);
        if (tmp_assign_source_453 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;

            goto try_except_handler_165;
        }
        assert(tmp_class_creation_55__metaclass == NULL);
        tmp_class_creation_55__metaclass = tmp_assign_source_453;
    }
    {
        bool tmp_condition_result_327;
        PyObject *tmp_key_value_165;
        PyObject *tmp_dict_arg_value_165;
        tmp_key_value_165 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_55__class_decl_dict);
        tmp_dict_arg_value_165 = tmp_class_creation_55__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_165, tmp_key_value_165);
        assert(!(tmp_res == -1));
        tmp_condition_result_327 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_327 != false) {
            goto branch_yes_217;
        } else {
            goto branch_no_217;
        }
    }
    branch_yes_217:;
    CHECK_OBJECT(tmp_class_creation_55__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_55__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 428;

        goto try_except_handler_165;
    }
    branch_no_217:;
    {
        nuitka_bool tmp_condition_result_328;
        PyObject *tmp_expression_value_289;
        CHECK_OBJECT(tmp_class_creation_55__metaclass);
        tmp_expression_value_289 = tmp_class_creation_55__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_289, mod_consts[58]);
        tmp_condition_result_328 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_328 == NUITKA_BOOL_TRUE) {
            goto branch_yes_218;
        } else {
            goto branch_no_218;
        }
    }
    branch_yes_218:;
    {
        PyObject *tmp_assign_source_454;
        PyObject *tmp_called_value_109;
        PyObject *tmp_expression_value_290;
        PyObject *tmp_args_value_109;
        PyObject *tmp_tuple_element_218;
        PyObject *tmp_kwargs_value_109;
        CHECK_OBJECT(tmp_class_creation_55__metaclass);
        tmp_expression_value_290 = tmp_class_creation_55__metaclass;
        tmp_called_value_109 = LOOKUP_ATTRIBUTE(tmp_expression_value_290, mod_consts[58]);
        if (tmp_called_value_109 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;

            goto try_except_handler_165;
        }
        tmp_tuple_element_218 = mod_consts[189];
        tmp_args_value_109 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_109, 0, tmp_tuple_element_218);
        CHECK_OBJECT(tmp_class_creation_55__bases);
        tmp_tuple_element_218 = tmp_class_creation_55__bases;
        PyTuple_SET_ITEM0(tmp_args_value_109, 1, tmp_tuple_element_218);
        CHECK_OBJECT(tmp_class_creation_55__class_decl_dict);
        tmp_kwargs_value_109 = tmp_class_creation_55__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 428;
        tmp_assign_source_454 = CALL_FUNCTION(tmp_called_value_109, tmp_args_value_109, tmp_kwargs_value_109);
        Py_DECREF(tmp_called_value_109);
        Py_DECREF(tmp_args_value_109);
        if (tmp_assign_source_454 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;

            goto try_except_handler_165;
        }
        assert(tmp_class_creation_55__prepared == NULL);
        tmp_class_creation_55__prepared = tmp_assign_source_454;
    }
    {
        bool tmp_condition_result_329;
        PyObject *tmp_operand_value_55;
        PyObject *tmp_expression_value_291;
        CHECK_OBJECT(tmp_class_creation_55__prepared);
        tmp_expression_value_291 = tmp_class_creation_55__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_291, mod_consts[60]);
        tmp_operand_value_55 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_55);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;

            goto try_except_handler_165;
        }
        tmp_condition_result_329 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_329 != false) {
            goto branch_yes_219;
        } else {
            goto branch_no_219;
        }
    }
    branch_yes_219:;
    {
        PyObject *tmp_raise_type_55;
        PyObject *tmp_raise_value_55;
        PyObject *tmp_left_value_55;
        PyObject *tmp_right_value_55;
        PyObject *tmp_tuple_element_219;
        PyObject *tmp_getattr_target_55;
        PyObject *tmp_getattr_attr_55;
        PyObject *tmp_getattr_default_55;
        tmp_raise_type_55 = PyExc_TypeError;
        tmp_left_value_55 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_55__metaclass);
        tmp_getattr_target_55 = tmp_class_creation_55__metaclass;
        tmp_getattr_attr_55 = mod_consts[62];
        tmp_getattr_default_55 = mod_consts[63];
        tmp_tuple_element_219 = BUILTIN_GETATTR(tmp_getattr_target_55, tmp_getattr_attr_55, tmp_getattr_default_55);
        if (tmp_tuple_element_219 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;

            goto try_except_handler_165;
        }
        tmp_right_value_55 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_292;
            PyObject *tmp_type_arg_110;
            PyTuple_SET_ITEM(tmp_right_value_55, 0, tmp_tuple_element_219);
            CHECK_OBJECT(tmp_class_creation_55__prepared);
            tmp_type_arg_110 = tmp_class_creation_55__prepared;
            tmp_expression_value_292 = BUILTIN_TYPE1(tmp_type_arg_110);
            assert(!(tmp_expression_value_292 == NULL));
            tmp_tuple_element_219 = LOOKUP_ATTRIBUTE(tmp_expression_value_292, mod_consts[62]);
            Py_DECREF(tmp_expression_value_292);
            if (tmp_tuple_element_219 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 428;

                goto tuple_build_exception_55;
            }
            PyTuple_SET_ITEM(tmp_right_value_55, 1, tmp_tuple_element_219);
        }
        goto tuple_build_noexception_55;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_55:;
        Py_DECREF(tmp_right_value_55);
        goto try_except_handler_165;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_55:;
        tmp_raise_value_55 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_55, tmp_right_value_55);
        Py_DECREF(tmp_right_value_55);
        if (tmp_raise_value_55 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;

            goto try_except_handler_165;
        }
        exception_type = tmp_raise_type_55;
        Py_INCREF(tmp_raise_type_55);
        exception_value = tmp_raise_value_55;
        exception_lineno = 428;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_165;
    }
    branch_no_219:;
    goto branch_end_218;
    branch_no_218:;
    {
        PyObject *tmp_assign_source_455;
        tmp_assign_source_455 = PyDict_New();
        assert(tmp_class_creation_55__prepared == NULL);
        tmp_class_creation_55__prepared = tmp_assign_source_455;
    }
    branch_end_218:;
    {
        PyObject *tmp_assign_source_456;
        {
            PyObject *tmp_set_locals_55;
            CHECK_OBJECT(tmp_class_creation_55__prepared);
            tmp_set_locals_55 = tmp_class_creation_55__prepared;
            locals_aiohttp$web_exceptions$$$class__55_HTTPVariantAlsoNegotiates_428 = tmp_set_locals_55;
            Py_INCREF(tmp_set_locals_55);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__55_HTTPVariantAlsoNegotiates_428, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;

            goto try_except_handler_167;
        }
        tmp_dictset_value = mod_consts[189];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__55_HTTPVariantAlsoNegotiates_428, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;

            goto try_except_handler_167;
        }
        if (isFrameUnusable(cache_frame_7feecd1d433f004b2b75d7760af86b01_51)) {
            Py_XDECREF(cache_frame_7feecd1d433f004b2b75d7760af86b01_51);

#if _DEBUG_REFCOUNTS
            if (cache_frame_7feecd1d433f004b2b75d7760af86b01_51 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_7feecd1d433f004b2b75d7760af86b01_51 = MAKE_FUNCTION_FRAME(codeobj_7feecd1d433f004b2b75d7760af86b01, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_7feecd1d433f004b2b75d7760af86b01_51->m_type_description == NULL);
        frame_7feecd1d433f004b2b75d7760af86b01_51 = cache_frame_7feecd1d433f004b2b75d7760af86b01_51;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_7feecd1d433f004b2b75d7760af86b01_51);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_7feecd1d433f004b2b75d7760af86b01_51) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[190];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__55_HTTPVariantAlsoNegotiates_428, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 429;
            type_description_2 = "o";
            goto frame_exception_exit_51;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_7feecd1d433f004b2b75d7760af86b01_51);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_50;

        frame_exception_exit_51:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_7feecd1d433f004b2b75d7760af86b01_51);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_7feecd1d433f004b2b75d7760af86b01_51, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_7feecd1d433f004b2b75d7760af86b01_51->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_7feecd1d433f004b2b75d7760af86b01_51, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_7feecd1d433f004b2b75d7760af86b01_51,
            type_description_2,
            outline_54_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_7feecd1d433f004b2b75d7760af86b01_51 == cache_frame_7feecd1d433f004b2b75d7760af86b01_51) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_7feecd1d433f004b2b75d7760af86b01_51);
            cache_frame_7feecd1d433f004b2b75d7760af86b01_51 = NULL;
        }

        assertFrameObject(frame_7feecd1d433f004b2b75d7760af86b01_51);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_50;

        frame_no_exception_50:;
        goto skip_nested_handling_50;
        nested_frame_exit_50:;

        goto try_except_handler_167;
        skip_nested_handling_50:;
        {
            nuitka_bool tmp_condition_result_330;
            PyObject *tmp_cmp_expr_left_55;
            PyObject *tmp_cmp_expr_right_55;
            CHECK_OBJECT(tmp_class_creation_55__bases);
            tmp_cmp_expr_left_55 = tmp_class_creation_55__bases;
            CHECK_OBJECT(tmp_class_creation_55__bases_orig);
            tmp_cmp_expr_right_55 = tmp_class_creation_55__bases_orig;
            tmp_condition_result_330 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_55, tmp_cmp_expr_right_55);
            if (tmp_condition_result_330 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 428;

                goto try_except_handler_167;
            }
            if (tmp_condition_result_330 == NUITKA_BOOL_TRUE) {
                goto branch_yes_220;
            } else {
                goto branch_no_220;
            }
            assert(tmp_condition_result_330 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_220:;
        CHECK_OBJECT(tmp_class_creation_55__bases_orig);
        tmp_dictset_value = tmp_class_creation_55__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__55_HTTPVariantAlsoNegotiates_428, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;

            goto try_except_handler_167;
        }
        branch_no_220:;
        {
            PyObject *tmp_assign_source_457;
            PyObject *tmp_called_value_110;
            PyObject *tmp_args_value_110;
            PyObject *tmp_tuple_element_220;
            PyObject *tmp_kwargs_value_110;
            CHECK_OBJECT(tmp_class_creation_55__metaclass);
            tmp_called_value_110 = tmp_class_creation_55__metaclass;
            tmp_tuple_element_220 = mod_consts[189];
            tmp_args_value_110 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_110, 0, tmp_tuple_element_220);
            CHECK_OBJECT(tmp_class_creation_55__bases);
            tmp_tuple_element_220 = tmp_class_creation_55__bases;
            PyTuple_SET_ITEM0(tmp_args_value_110, 1, tmp_tuple_element_220);
            tmp_tuple_element_220 = locals_aiohttp$web_exceptions$$$class__55_HTTPVariantAlsoNegotiates_428;
            PyTuple_SET_ITEM0(tmp_args_value_110, 2, tmp_tuple_element_220);
            CHECK_OBJECT(tmp_class_creation_55__class_decl_dict);
            tmp_kwargs_value_110 = tmp_class_creation_55__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 428;
            tmp_assign_source_457 = CALL_FUNCTION(tmp_called_value_110, tmp_args_value_110, tmp_kwargs_value_110);
            Py_DECREF(tmp_args_value_110);
            if (tmp_assign_source_457 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 428;

                goto try_except_handler_167;
            }
            assert(outline_54_var___class__ == NULL);
            outline_54_var___class__ = tmp_assign_source_457;
        }
        CHECK_OBJECT(outline_54_var___class__);
        tmp_assign_source_456 = outline_54_var___class__;
        Py_INCREF(tmp_assign_source_456);
        goto try_return_handler_167;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_167:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__55_HTTPVariantAlsoNegotiates_428);
        locals_aiohttp$web_exceptions$$$class__55_HTTPVariantAlsoNegotiates_428 = NULL;
        goto try_return_handler_166;
        // Exception handler code:
        try_except_handler_167:;
        exception_keeper_type_165 = exception_type;
        exception_keeper_value_165 = exception_value;
        exception_keeper_tb_165 = exception_tb;
        exception_keeper_lineno_165 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__55_HTTPVariantAlsoNegotiates_428);
        locals_aiohttp$web_exceptions$$$class__55_HTTPVariantAlsoNegotiates_428 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_165;
        exception_value = exception_keeper_value_165;
        exception_tb = exception_keeper_tb_165;
        exception_lineno = exception_keeper_lineno_165;

        goto try_except_handler_166;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_166:;
        CHECK_OBJECT(outline_54_var___class__);
        Py_DECREF(outline_54_var___class__);
        outline_54_var___class__ = NULL;
        goto outline_result_55;
        // Exception handler code:
        try_except_handler_166:;
        exception_keeper_type_166 = exception_type;
        exception_keeper_value_166 = exception_value;
        exception_keeper_tb_166 = exception_tb;
        exception_keeper_lineno_166 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_166;
        exception_value = exception_keeper_value_166;
        exception_tb = exception_keeper_tb_166;
        exception_lineno = exception_keeper_lineno_166;

        goto outline_exception_55;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_55:;
        exception_lineno = 428;
        goto try_except_handler_165;
        outline_result_55:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[189], tmp_assign_source_456);
    }
    goto try_end_57;
    // Exception handler code:
    try_except_handler_165:;
    exception_keeper_type_167 = exception_type;
    exception_keeper_value_167 = exception_value;
    exception_keeper_tb_167 = exception_tb;
    exception_keeper_lineno_167 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_55__bases_orig);
    tmp_class_creation_55__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_55__bases);
    tmp_class_creation_55__bases = NULL;
    Py_XDECREF(tmp_class_creation_55__class_decl_dict);
    tmp_class_creation_55__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_55__metaclass);
    tmp_class_creation_55__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_55__prepared);
    tmp_class_creation_55__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_167;
    exception_value = exception_keeper_value_167;
    exception_tb = exception_keeper_tb_167;
    exception_lineno = exception_keeper_lineno_167;

    goto frame_exception_exit_1;
    // End of try:
    try_end_57:;
    CHECK_OBJECT(tmp_class_creation_55__bases_orig);
    Py_DECREF(tmp_class_creation_55__bases_orig);
    tmp_class_creation_55__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_55__bases);
    Py_DECREF(tmp_class_creation_55__bases);
    tmp_class_creation_55__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_55__class_decl_dict);
    Py_DECREF(tmp_class_creation_55__class_decl_dict);
    tmp_class_creation_55__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_55__metaclass);
    Py_DECREF(tmp_class_creation_55__metaclass);
    tmp_class_creation_55__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_55__prepared);
    Py_DECREF(tmp_class_creation_55__prepared);
    tmp_class_creation_55__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_458;
        PyObject *tmp_tuple_element_221;
        tmp_tuple_element_221 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[176]);

        if (unlikely(tmp_tuple_element_221 == NULL)) {
            tmp_tuple_element_221 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[176]);
        }

        if (tmp_tuple_element_221 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 432;

            goto try_except_handler_168;
        }
        tmp_assign_source_458 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_458, 0, tmp_tuple_element_221);
        assert(tmp_class_creation_56__bases_orig == NULL);
        tmp_class_creation_56__bases_orig = tmp_assign_source_458;
    }
    {
        PyObject *tmp_assign_source_459;
        PyObject *tmp_dircall_arg1_56;
        CHECK_OBJECT(tmp_class_creation_56__bases_orig);
        tmp_dircall_arg1_56 = tmp_class_creation_56__bases_orig;
        Py_INCREF(tmp_dircall_arg1_56);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_56};
            tmp_assign_source_459 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_459 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 432;

            goto try_except_handler_168;
        }
        assert(tmp_class_creation_56__bases == NULL);
        tmp_class_creation_56__bases = tmp_assign_source_459;
    }
    {
        PyObject *tmp_assign_source_460;
        tmp_assign_source_460 = PyDict_New();
        assert(tmp_class_creation_56__class_decl_dict == NULL);
        tmp_class_creation_56__class_decl_dict = tmp_assign_source_460;
    }
    {
        PyObject *tmp_assign_source_461;
        PyObject *tmp_metaclass_value_56;
        bool tmp_condition_result_331;
        PyObject *tmp_key_value_166;
        PyObject *tmp_dict_arg_value_166;
        PyObject *tmp_dict_arg_value_167;
        PyObject *tmp_key_value_167;
        nuitka_bool tmp_condition_result_332;
        int tmp_truth_name_56;
        PyObject *tmp_type_arg_111;
        PyObject *tmp_expression_value_293;
        PyObject *tmp_subscript_value_73;
        PyObject *tmp_bases_value_56;
        tmp_key_value_166 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_56__class_decl_dict);
        tmp_dict_arg_value_166 = tmp_class_creation_56__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_166, tmp_key_value_166);
        assert(!(tmp_res == -1));
        tmp_condition_result_331 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_331 != false) {
            goto condexpr_true_111;
        } else {
            goto condexpr_false_111;
        }
        condexpr_true_111:;
        CHECK_OBJECT(tmp_class_creation_56__class_decl_dict);
        tmp_dict_arg_value_167 = tmp_class_creation_56__class_decl_dict;
        tmp_key_value_167 = mod_consts[57];
        tmp_metaclass_value_56 = DICT_GET_ITEM0(tmp_dict_arg_value_167, tmp_key_value_167);
        if (tmp_metaclass_value_56 == NULL) {
            tmp_metaclass_value_56 = Py_None;
        }
        assert(!(tmp_metaclass_value_56 == NULL));
        Py_INCREF(tmp_metaclass_value_56);
        goto condexpr_end_111;
        condexpr_false_111:;
        CHECK_OBJECT(tmp_class_creation_56__bases);
        tmp_truth_name_56 = CHECK_IF_TRUE(tmp_class_creation_56__bases);
        if (tmp_truth_name_56 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 432;

            goto try_except_handler_168;
        }
        tmp_condition_result_332 = tmp_truth_name_56 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_332 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_112;
        } else {
            goto condexpr_false_112;
        }
        condexpr_true_112:;
        CHECK_OBJECT(tmp_class_creation_56__bases);
        tmp_expression_value_293 = tmp_class_creation_56__bases;
        tmp_subscript_value_73 = mod_consts[39];
        tmp_type_arg_111 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_293, tmp_subscript_value_73, 0);
        if (tmp_type_arg_111 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 432;

            goto try_except_handler_168;
        }
        tmp_metaclass_value_56 = BUILTIN_TYPE1(tmp_type_arg_111);
        Py_DECREF(tmp_type_arg_111);
        if (tmp_metaclass_value_56 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 432;

            goto try_except_handler_168;
        }
        goto condexpr_end_112;
        condexpr_false_112:;
        tmp_metaclass_value_56 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_56);
        condexpr_end_112:;
        condexpr_end_111:;
        CHECK_OBJECT(tmp_class_creation_56__bases);
        tmp_bases_value_56 = tmp_class_creation_56__bases;
        tmp_assign_source_461 = SELECT_METACLASS(tmp_metaclass_value_56, tmp_bases_value_56);
        Py_DECREF(tmp_metaclass_value_56);
        if (tmp_assign_source_461 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 432;

            goto try_except_handler_168;
        }
        assert(tmp_class_creation_56__metaclass == NULL);
        tmp_class_creation_56__metaclass = tmp_assign_source_461;
    }
    {
        bool tmp_condition_result_333;
        PyObject *tmp_key_value_168;
        PyObject *tmp_dict_arg_value_168;
        tmp_key_value_168 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_56__class_decl_dict);
        tmp_dict_arg_value_168 = tmp_class_creation_56__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_168, tmp_key_value_168);
        assert(!(tmp_res == -1));
        tmp_condition_result_333 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_333 != false) {
            goto branch_yes_221;
        } else {
            goto branch_no_221;
        }
    }
    branch_yes_221:;
    CHECK_OBJECT(tmp_class_creation_56__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_56__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 432;

        goto try_except_handler_168;
    }
    branch_no_221:;
    {
        nuitka_bool tmp_condition_result_334;
        PyObject *tmp_expression_value_294;
        CHECK_OBJECT(tmp_class_creation_56__metaclass);
        tmp_expression_value_294 = tmp_class_creation_56__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_294, mod_consts[58]);
        tmp_condition_result_334 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_334 == NUITKA_BOOL_TRUE) {
            goto branch_yes_222;
        } else {
            goto branch_no_222;
        }
    }
    branch_yes_222:;
    {
        PyObject *tmp_assign_source_462;
        PyObject *tmp_called_value_111;
        PyObject *tmp_expression_value_295;
        PyObject *tmp_args_value_111;
        PyObject *tmp_tuple_element_222;
        PyObject *tmp_kwargs_value_111;
        CHECK_OBJECT(tmp_class_creation_56__metaclass);
        tmp_expression_value_295 = tmp_class_creation_56__metaclass;
        tmp_called_value_111 = LOOKUP_ATTRIBUTE(tmp_expression_value_295, mod_consts[58]);
        if (tmp_called_value_111 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 432;

            goto try_except_handler_168;
        }
        tmp_tuple_element_222 = mod_consts[191];
        tmp_args_value_111 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_111, 0, tmp_tuple_element_222);
        CHECK_OBJECT(tmp_class_creation_56__bases);
        tmp_tuple_element_222 = tmp_class_creation_56__bases;
        PyTuple_SET_ITEM0(tmp_args_value_111, 1, tmp_tuple_element_222);
        CHECK_OBJECT(tmp_class_creation_56__class_decl_dict);
        tmp_kwargs_value_111 = tmp_class_creation_56__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 432;
        tmp_assign_source_462 = CALL_FUNCTION(tmp_called_value_111, tmp_args_value_111, tmp_kwargs_value_111);
        Py_DECREF(tmp_called_value_111);
        Py_DECREF(tmp_args_value_111);
        if (tmp_assign_source_462 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 432;

            goto try_except_handler_168;
        }
        assert(tmp_class_creation_56__prepared == NULL);
        tmp_class_creation_56__prepared = tmp_assign_source_462;
    }
    {
        bool tmp_condition_result_335;
        PyObject *tmp_operand_value_56;
        PyObject *tmp_expression_value_296;
        CHECK_OBJECT(tmp_class_creation_56__prepared);
        tmp_expression_value_296 = tmp_class_creation_56__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_296, mod_consts[60]);
        tmp_operand_value_56 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_56);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 432;

            goto try_except_handler_168;
        }
        tmp_condition_result_335 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_335 != false) {
            goto branch_yes_223;
        } else {
            goto branch_no_223;
        }
    }
    branch_yes_223:;
    {
        PyObject *tmp_raise_type_56;
        PyObject *tmp_raise_value_56;
        PyObject *tmp_left_value_56;
        PyObject *tmp_right_value_56;
        PyObject *tmp_tuple_element_223;
        PyObject *tmp_getattr_target_56;
        PyObject *tmp_getattr_attr_56;
        PyObject *tmp_getattr_default_56;
        tmp_raise_type_56 = PyExc_TypeError;
        tmp_left_value_56 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_56__metaclass);
        tmp_getattr_target_56 = tmp_class_creation_56__metaclass;
        tmp_getattr_attr_56 = mod_consts[62];
        tmp_getattr_default_56 = mod_consts[63];
        tmp_tuple_element_223 = BUILTIN_GETATTR(tmp_getattr_target_56, tmp_getattr_attr_56, tmp_getattr_default_56);
        if (tmp_tuple_element_223 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 432;

            goto try_except_handler_168;
        }
        tmp_right_value_56 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_297;
            PyObject *tmp_type_arg_112;
            PyTuple_SET_ITEM(tmp_right_value_56, 0, tmp_tuple_element_223);
            CHECK_OBJECT(tmp_class_creation_56__prepared);
            tmp_type_arg_112 = tmp_class_creation_56__prepared;
            tmp_expression_value_297 = BUILTIN_TYPE1(tmp_type_arg_112);
            assert(!(tmp_expression_value_297 == NULL));
            tmp_tuple_element_223 = LOOKUP_ATTRIBUTE(tmp_expression_value_297, mod_consts[62]);
            Py_DECREF(tmp_expression_value_297);
            if (tmp_tuple_element_223 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 432;

                goto tuple_build_exception_56;
            }
            PyTuple_SET_ITEM(tmp_right_value_56, 1, tmp_tuple_element_223);
        }
        goto tuple_build_noexception_56;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_56:;
        Py_DECREF(tmp_right_value_56);
        goto try_except_handler_168;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_56:;
        tmp_raise_value_56 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_56, tmp_right_value_56);
        Py_DECREF(tmp_right_value_56);
        if (tmp_raise_value_56 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 432;

            goto try_except_handler_168;
        }
        exception_type = tmp_raise_type_56;
        Py_INCREF(tmp_raise_type_56);
        exception_value = tmp_raise_value_56;
        exception_lineno = 432;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_168;
    }
    branch_no_223:;
    goto branch_end_222;
    branch_no_222:;
    {
        PyObject *tmp_assign_source_463;
        tmp_assign_source_463 = PyDict_New();
        assert(tmp_class_creation_56__prepared == NULL);
        tmp_class_creation_56__prepared = tmp_assign_source_463;
    }
    branch_end_222:;
    {
        PyObject *tmp_assign_source_464;
        {
            PyObject *tmp_set_locals_56;
            CHECK_OBJECT(tmp_class_creation_56__prepared);
            tmp_set_locals_56 = tmp_class_creation_56__prepared;
            locals_aiohttp$web_exceptions$$$class__56_HTTPInsufficientStorage_432 = tmp_set_locals_56;
            Py_INCREF(tmp_set_locals_56);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__56_HTTPInsufficientStorage_432, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 432;

            goto try_except_handler_170;
        }
        tmp_dictset_value = mod_consts[191];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__56_HTTPInsufficientStorage_432, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 432;

            goto try_except_handler_170;
        }
        if (isFrameUnusable(cache_frame_3d7b12a82ae59edea9bc637972ca445a_52)) {
            Py_XDECREF(cache_frame_3d7b12a82ae59edea9bc637972ca445a_52);

#if _DEBUG_REFCOUNTS
            if (cache_frame_3d7b12a82ae59edea9bc637972ca445a_52 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_3d7b12a82ae59edea9bc637972ca445a_52 = MAKE_FUNCTION_FRAME(codeobj_3d7b12a82ae59edea9bc637972ca445a, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_3d7b12a82ae59edea9bc637972ca445a_52->m_type_description == NULL);
        frame_3d7b12a82ae59edea9bc637972ca445a_52 = cache_frame_3d7b12a82ae59edea9bc637972ca445a_52;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_3d7b12a82ae59edea9bc637972ca445a_52);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_3d7b12a82ae59edea9bc637972ca445a_52) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[192];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__56_HTTPInsufficientStorage_432, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 433;
            type_description_2 = "o";
            goto frame_exception_exit_52;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_3d7b12a82ae59edea9bc637972ca445a_52);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_51;

        frame_exception_exit_52:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_3d7b12a82ae59edea9bc637972ca445a_52);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_3d7b12a82ae59edea9bc637972ca445a_52, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_3d7b12a82ae59edea9bc637972ca445a_52->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_3d7b12a82ae59edea9bc637972ca445a_52, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_3d7b12a82ae59edea9bc637972ca445a_52,
            type_description_2,
            outline_55_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_3d7b12a82ae59edea9bc637972ca445a_52 == cache_frame_3d7b12a82ae59edea9bc637972ca445a_52) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_3d7b12a82ae59edea9bc637972ca445a_52);
            cache_frame_3d7b12a82ae59edea9bc637972ca445a_52 = NULL;
        }

        assertFrameObject(frame_3d7b12a82ae59edea9bc637972ca445a_52);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_51;

        frame_no_exception_51:;
        goto skip_nested_handling_51;
        nested_frame_exit_51:;

        goto try_except_handler_170;
        skip_nested_handling_51:;
        {
            nuitka_bool tmp_condition_result_336;
            PyObject *tmp_cmp_expr_left_56;
            PyObject *tmp_cmp_expr_right_56;
            CHECK_OBJECT(tmp_class_creation_56__bases);
            tmp_cmp_expr_left_56 = tmp_class_creation_56__bases;
            CHECK_OBJECT(tmp_class_creation_56__bases_orig);
            tmp_cmp_expr_right_56 = tmp_class_creation_56__bases_orig;
            tmp_condition_result_336 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_56, tmp_cmp_expr_right_56);
            if (tmp_condition_result_336 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 432;

                goto try_except_handler_170;
            }
            if (tmp_condition_result_336 == NUITKA_BOOL_TRUE) {
                goto branch_yes_224;
            } else {
                goto branch_no_224;
            }
            assert(tmp_condition_result_336 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_224:;
        CHECK_OBJECT(tmp_class_creation_56__bases_orig);
        tmp_dictset_value = tmp_class_creation_56__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__56_HTTPInsufficientStorage_432, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 432;

            goto try_except_handler_170;
        }
        branch_no_224:;
        {
            PyObject *tmp_assign_source_465;
            PyObject *tmp_called_value_112;
            PyObject *tmp_args_value_112;
            PyObject *tmp_tuple_element_224;
            PyObject *tmp_kwargs_value_112;
            CHECK_OBJECT(tmp_class_creation_56__metaclass);
            tmp_called_value_112 = tmp_class_creation_56__metaclass;
            tmp_tuple_element_224 = mod_consts[191];
            tmp_args_value_112 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_112, 0, tmp_tuple_element_224);
            CHECK_OBJECT(tmp_class_creation_56__bases);
            tmp_tuple_element_224 = tmp_class_creation_56__bases;
            PyTuple_SET_ITEM0(tmp_args_value_112, 1, tmp_tuple_element_224);
            tmp_tuple_element_224 = locals_aiohttp$web_exceptions$$$class__56_HTTPInsufficientStorage_432;
            PyTuple_SET_ITEM0(tmp_args_value_112, 2, tmp_tuple_element_224);
            CHECK_OBJECT(tmp_class_creation_56__class_decl_dict);
            tmp_kwargs_value_112 = tmp_class_creation_56__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 432;
            tmp_assign_source_465 = CALL_FUNCTION(tmp_called_value_112, tmp_args_value_112, tmp_kwargs_value_112);
            Py_DECREF(tmp_args_value_112);
            if (tmp_assign_source_465 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 432;

                goto try_except_handler_170;
            }
            assert(outline_55_var___class__ == NULL);
            outline_55_var___class__ = tmp_assign_source_465;
        }
        CHECK_OBJECT(outline_55_var___class__);
        tmp_assign_source_464 = outline_55_var___class__;
        Py_INCREF(tmp_assign_source_464);
        goto try_return_handler_170;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_170:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__56_HTTPInsufficientStorage_432);
        locals_aiohttp$web_exceptions$$$class__56_HTTPInsufficientStorage_432 = NULL;
        goto try_return_handler_169;
        // Exception handler code:
        try_except_handler_170:;
        exception_keeper_type_168 = exception_type;
        exception_keeper_value_168 = exception_value;
        exception_keeper_tb_168 = exception_tb;
        exception_keeper_lineno_168 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__56_HTTPInsufficientStorage_432);
        locals_aiohttp$web_exceptions$$$class__56_HTTPInsufficientStorage_432 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_168;
        exception_value = exception_keeper_value_168;
        exception_tb = exception_keeper_tb_168;
        exception_lineno = exception_keeper_lineno_168;

        goto try_except_handler_169;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_169:;
        CHECK_OBJECT(outline_55_var___class__);
        Py_DECREF(outline_55_var___class__);
        outline_55_var___class__ = NULL;
        goto outline_result_56;
        // Exception handler code:
        try_except_handler_169:;
        exception_keeper_type_169 = exception_type;
        exception_keeper_value_169 = exception_value;
        exception_keeper_tb_169 = exception_tb;
        exception_keeper_lineno_169 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_169;
        exception_value = exception_keeper_value_169;
        exception_tb = exception_keeper_tb_169;
        exception_lineno = exception_keeper_lineno_169;

        goto outline_exception_56;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_56:;
        exception_lineno = 432;
        goto try_except_handler_168;
        outline_result_56:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[191], tmp_assign_source_464);
    }
    goto try_end_58;
    // Exception handler code:
    try_except_handler_168:;
    exception_keeper_type_170 = exception_type;
    exception_keeper_value_170 = exception_value;
    exception_keeper_tb_170 = exception_tb;
    exception_keeper_lineno_170 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_56__bases_orig);
    tmp_class_creation_56__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_56__bases);
    tmp_class_creation_56__bases = NULL;
    Py_XDECREF(tmp_class_creation_56__class_decl_dict);
    tmp_class_creation_56__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_56__metaclass);
    tmp_class_creation_56__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_56__prepared);
    tmp_class_creation_56__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_170;
    exception_value = exception_keeper_value_170;
    exception_tb = exception_keeper_tb_170;
    exception_lineno = exception_keeper_lineno_170;

    goto frame_exception_exit_1;
    // End of try:
    try_end_58:;
    CHECK_OBJECT(tmp_class_creation_56__bases_orig);
    Py_DECREF(tmp_class_creation_56__bases_orig);
    tmp_class_creation_56__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_56__bases);
    Py_DECREF(tmp_class_creation_56__bases);
    tmp_class_creation_56__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_56__class_decl_dict);
    Py_DECREF(tmp_class_creation_56__class_decl_dict);
    tmp_class_creation_56__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_56__metaclass);
    Py_DECREF(tmp_class_creation_56__metaclass);
    tmp_class_creation_56__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_56__prepared);
    Py_DECREF(tmp_class_creation_56__prepared);
    tmp_class_creation_56__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_466;
        PyObject *tmp_tuple_element_225;
        tmp_tuple_element_225 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[176]);

        if (unlikely(tmp_tuple_element_225 == NULL)) {
            tmp_tuple_element_225 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[176]);
        }

        if (tmp_tuple_element_225 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 436;

            goto try_except_handler_171;
        }
        tmp_assign_source_466 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_466, 0, tmp_tuple_element_225);
        assert(tmp_class_creation_57__bases_orig == NULL);
        tmp_class_creation_57__bases_orig = tmp_assign_source_466;
    }
    {
        PyObject *tmp_assign_source_467;
        PyObject *tmp_dircall_arg1_57;
        CHECK_OBJECT(tmp_class_creation_57__bases_orig);
        tmp_dircall_arg1_57 = tmp_class_creation_57__bases_orig;
        Py_INCREF(tmp_dircall_arg1_57);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_57};
            tmp_assign_source_467 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_467 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 436;

            goto try_except_handler_171;
        }
        assert(tmp_class_creation_57__bases == NULL);
        tmp_class_creation_57__bases = tmp_assign_source_467;
    }
    {
        PyObject *tmp_assign_source_468;
        tmp_assign_source_468 = PyDict_New();
        assert(tmp_class_creation_57__class_decl_dict == NULL);
        tmp_class_creation_57__class_decl_dict = tmp_assign_source_468;
    }
    {
        PyObject *tmp_assign_source_469;
        PyObject *tmp_metaclass_value_57;
        bool tmp_condition_result_337;
        PyObject *tmp_key_value_169;
        PyObject *tmp_dict_arg_value_169;
        PyObject *tmp_dict_arg_value_170;
        PyObject *tmp_key_value_170;
        nuitka_bool tmp_condition_result_338;
        int tmp_truth_name_57;
        PyObject *tmp_type_arg_113;
        PyObject *tmp_expression_value_298;
        PyObject *tmp_subscript_value_74;
        PyObject *tmp_bases_value_57;
        tmp_key_value_169 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_57__class_decl_dict);
        tmp_dict_arg_value_169 = tmp_class_creation_57__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_169, tmp_key_value_169);
        assert(!(tmp_res == -1));
        tmp_condition_result_337 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_337 != false) {
            goto condexpr_true_113;
        } else {
            goto condexpr_false_113;
        }
        condexpr_true_113:;
        CHECK_OBJECT(tmp_class_creation_57__class_decl_dict);
        tmp_dict_arg_value_170 = tmp_class_creation_57__class_decl_dict;
        tmp_key_value_170 = mod_consts[57];
        tmp_metaclass_value_57 = DICT_GET_ITEM0(tmp_dict_arg_value_170, tmp_key_value_170);
        if (tmp_metaclass_value_57 == NULL) {
            tmp_metaclass_value_57 = Py_None;
        }
        assert(!(tmp_metaclass_value_57 == NULL));
        Py_INCREF(tmp_metaclass_value_57);
        goto condexpr_end_113;
        condexpr_false_113:;
        CHECK_OBJECT(tmp_class_creation_57__bases);
        tmp_truth_name_57 = CHECK_IF_TRUE(tmp_class_creation_57__bases);
        if (tmp_truth_name_57 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 436;

            goto try_except_handler_171;
        }
        tmp_condition_result_338 = tmp_truth_name_57 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_338 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_114;
        } else {
            goto condexpr_false_114;
        }
        condexpr_true_114:;
        CHECK_OBJECT(tmp_class_creation_57__bases);
        tmp_expression_value_298 = tmp_class_creation_57__bases;
        tmp_subscript_value_74 = mod_consts[39];
        tmp_type_arg_113 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_298, tmp_subscript_value_74, 0);
        if (tmp_type_arg_113 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 436;

            goto try_except_handler_171;
        }
        tmp_metaclass_value_57 = BUILTIN_TYPE1(tmp_type_arg_113);
        Py_DECREF(tmp_type_arg_113);
        if (tmp_metaclass_value_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 436;

            goto try_except_handler_171;
        }
        goto condexpr_end_114;
        condexpr_false_114:;
        tmp_metaclass_value_57 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_57);
        condexpr_end_114:;
        condexpr_end_113:;
        CHECK_OBJECT(tmp_class_creation_57__bases);
        tmp_bases_value_57 = tmp_class_creation_57__bases;
        tmp_assign_source_469 = SELECT_METACLASS(tmp_metaclass_value_57, tmp_bases_value_57);
        Py_DECREF(tmp_metaclass_value_57);
        if (tmp_assign_source_469 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 436;

            goto try_except_handler_171;
        }
        assert(tmp_class_creation_57__metaclass == NULL);
        tmp_class_creation_57__metaclass = tmp_assign_source_469;
    }
    {
        bool tmp_condition_result_339;
        PyObject *tmp_key_value_171;
        PyObject *tmp_dict_arg_value_171;
        tmp_key_value_171 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_57__class_decl_dict);
        tmp_dict_arg_value_171 = tmp_class_creation_57__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_171, tmp_key_value_171);
        assert(!(tmp_res == -1));
        tmp_condition_result_339 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_339 != false) {
            goto branch_yes_225;
        } else {
            goto branch_no_225;
        }
    }
    branch_yes_225:;
    CHECK_OBJECT(tmp_class_creation_57__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_57__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 436;

        goto try_except_handler_171;
    }
    branch_no_225:;
    {
        nuitka_bool tmp_condition_result_340;
        PyObject *tmp_expression_value_299;
        CHECK_OBJECT(tmp_class_creation_57__metaclass);
        tmp_expression_value_299 = tmp_class_creation_57__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_299, mod_consts[58]);
        tmp_condition_result_340 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_340 == NUITKA_BOOL_TRUE) {
            goto branch_yes_226;
        } else {
            goto branch_no_226;
        }
    }
    branch_yes_226:;
    {
        PyObject *tmp_assign_source_470;
        PyObject *tmp_called_value_113;
        PyObject *tmp_expression_value_300;
        PyObject *tmp_args_value_113;
        PyObject *tmp_tuple_element_226;
        PyObject *tmp_kwargs_value_113;
        CHECK_OBJECT(tmp_class_creation_57__metaclass);
        tmp_expression_value_300 = tmp_class_creation_57__metaclass;
        tmp_called_value_113 = LOOKUP_ATTRIBUTE(tmp_expression_value_300, mod_consts[58]);
        if (tmp_called_value_113 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 436;

            goto try_except_handler_171;
        }
        tmp_tuple_element_226 = mod_consts[193];
        tmp_args_value_113 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_113, 0, tmp_tuple_element_226);
        CHECK_OBJECT(tmp_class_creation_57__bases);
        tmp_tuple_element_226 = tmp_class_creation_57__bases;
        PyTuple_SET_ITEM0(tmp_args_value_113, 1, tmp_tuple_element_226);
        CHECK_OBJECT(tmp_class_creation_57__class_decl_dict);
        tmp_kwargs_value_113 = tmp_class_creation_57__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 436;
        tmp_assign_source_470 = CALL_FUNCTION(tmp_called_value_113, tmp_args_value_113, tmp_kwargs_value_113);
        Py_DECREF(tmp_called_value_113);
        Py_DECREF(tmp_args_value_113);
        if (tmp_assign_source_470 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 436;

            goto try_except_handler_171;
        }
        assert(tmp_class_creation_57__prepared == NULL);
        tmp_class_creation_57__prepared = tmp_assign_source_470;
    }
    {
        bool tmp_condition_result_341;
        PyObject *tmp_operand_value_57;
        PyObject *tmp_expression_value_301;
        CHECK_OBJECT(tmp_class_creation_57__prepared);
        tmp_expression_value_301 = tmp_class_creation_57__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_301, mod_consts[60]);
        tmp_operand_value_57 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_57);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 436;

            goto try_except_handler_171;
        }
        tmp_condition_result_341 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_341 != false) {
            goto branch_yes_227;
        } else {
            goto branch_no_227;
        }
    }
    branch_yes_227:;
    {
        PyObject *tmp_raise_type_57;
        PyObject *tmp_raise_value_57;
        PyObject *tmp_left_value_57;
        PyObject *tmp_right_value_57;
        PyObject *tmp_tuple_element_227;
        PyObject *tmp_getattr_target_57;
        PyObject *tmp_getattr_attr_57;
        PyObject *tmp_getattr_default_57;
        tmp_raise_type_57 = PyExc_TypeError;
        tmp_left_value_57 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_57__metaclass);
        tmp_getattr_target_57 = tmp_class_creation_57__metaclass;
        tmp_getattr_attr_57 = mod_consts[62];
        tmp_getattr_default_57 = mod_consts[63];
        tmp_tuple_element_227 = BUILTIN_GETATTR(tmp_getattr_target_57, tmp_getattr_attr_57, tmp_getattr_default_57);
        if (tmp_tuple_element_227 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 436;

            goto try_except_handler_171;
        }
        tmp_right_value_57 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_302;
            PyObject *tmp_type_arg_114;
            PyTuple_SET_ITEM(tmp_right_value_57, 0, tmp_tuple_element_227);
            CHECK_OBJECT(tmp_class_creation_57__prepared);
            tmp_type_arg_114 = tmp_class_creation_57__prepared;
            tmp_expression_value_302 = BUILTIN_TYPE1(tmp_type_arg_114);
            assert(!(tmp_expression_value_302 == NULL));
            tmp_tuple_element_227 = LOOKUP_ATTRIBUTE(tmp_expression_value_302, mod_consts[62]);
            Py_DECREF(tmp_expression_value_302);
            if (tmp_tuple_element_227 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 436;

                goto tuple_build_exception_57;
            }
            PyTuple_SET_ITEM(tmp_right_value_57, 1, tmp_tuple_element_227);
        }
        goto tuple_build_noexception_57;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_57:;
        Py_DECREF(tmp_right_value_57);
        goto try_except_handler_171;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_57:;
        tmp_raise_value_57 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_57, tmp_right_value_57);
        Py_DECREF(tmp_right_value_57);
        if (tmp_raise_value_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 436;

            goto try_except_handler_171;
        }
        exception_type = tmp_raise_type_57;
        Py_INCREF(tmp_raise_type_57);
        exception_value = tmp_raise_value_57;
        exception_lineno = 436;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_171;
    }
    branch_no_227:;
    goto branch_end_226;
    branch_no_226:;
    {
        PyObject *tmp_assign_source_471;
        tmp_assign_source_471 = PyDict_New();
        assert(tmp_class_creation_57__prepared == NULL);
        tmp_class_creation_57__prepared = tmp_assign_source_471;
    }
    branch_end_226:;
    {
        PyObject *tmp_assign_source_472;
        {
            PyObject *tmp_set_locals_57;
            CHECK_OBJECT(tmp_class_creation_57__prepared);
            tmp_set_locals_57 = tmp_class_creation_57__prepared;
            locals_aiohttp$web_exceptions$$$class__57_HTTPNotExtended_436 = tmp_set_locals_57;
            Py_INCREF(tmp_set_locals_57);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__57_HTTPNotExtended_436, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 436;

            goto try_except_handler_173;
        }
        tmp_dictset_value = mod_consts[193];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__57_HTTPNotExtended_436, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 436;

            goto try_except_handler_173;
        }
        if (isFrameUnusable(cache_frame_9aa37884b5c621e87e0f0ba3fd314cbc_53)) {
            Py_XDECREF(cache_frame_9aa37884b5c621e87e0f0ba3fd314cbc_53);

#if _DEBUG_REFCOUNTS
            if (cache_frame_9aa37884b5c621e87e0f0ba3fd314cbc_53 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_9aa37884b5c621e87e0f0ba3fd314cbc_53 = MAKE_FUNCTION_FRAME(codeobj_9aa37884b5c621e87e0f0ba3fd314cbc, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_9aa37884b5c621e87e0f0ba3fd314cbc_53->m_type_description == NULL);
        frame_9aa37884b5c621e87e0f0ba3fd314cbc_53 = cache_frame_9aa37884b5c621e87e0f0ba3fd314cbc_53;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_9aa37884b5c621e87e0f0ba3fd314cbc_53);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_9aa37884b5c621e87e0f0ba3fd314cbc_53) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[194];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__57_HTTPNotExtended_436, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 437;
            type_description_2 = "o";
            goto frame_exception_exit_53;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_9aa37884b5c621e87e0f0ba3fd314cbc_53);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_52;

        frame_exception_exit_53:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_9aa37884b5c621e87e0f0ba3fd314cbc_53);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_9aa37884b5c621e87e0f0ba3fd314cbc_53, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_9aa37884b5c621e87e0f0ba3fd314cbc_53->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_9aa37884b5c621e87e0f0ba3fd314cbc_53, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_9aa37884b5c621e87e0f0ba3fd314cbc_53,
            type_description_2,
            outline_56_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_9aa37884b5c621e87e0f0ba3fd314cbc_53 == cache_frame_9aa37884b5c621e87e0f0ba3fd314cbc_53) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_9aa37884b5c621e87e0f0ba3fd314cbc_53);
            cache_frame_9aa37884b5c621e87e0f0ba3fd314cbc_53 = NULL;
        }

        assertFrameObject(frame_9aa37884b5c621e87e0f0ba3fd314cbc_53);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_52;

        frame_no_exception_52:;
        goto skip_nested_handling_52;
        nested_frame_exit_52:;

        goto try_except_handler_173;
        skip_nested_handling_52:;
        {
            nuitka_bool tmp_condition_result_342;
            PyObject *tmp_cmp_expr_left_57;
            PyObject *tmp_cmp_expr_right_57;
            CHECK_OBJECT(tmp_class_creation_57__bases);
            tmp_cmp_expr_left_57 = tmp_class_creation_57__bases;
            CHECK_OBJECT(tmp_class_creation_57__bases_orig);
            tmp_cmp_expr_right_57 = tmp_class_creation_57__bases_orig;
            tmp_condition_result_342 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_57, tmp_cmp_expr_right_57);
            if (tmp_condition_result_342 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 436;

                goto try_except_handler_173;
            }
            if (tmp_condition_result_342 == NUITKA_BOOL_TRUE) {
                goto branch_yes_228;
            } else {
                goto branch_no_228;
            }
            assert(tmp_condition_result_342 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_228:;
        CHECK_OBJECT(tmp_class_creation_57__bases_orig);
        tmp_dictset_value = tmp_class_creation_57__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__57_HTTPNotExtended_436, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 436;

            goto try_except_handler_173;
        }
        branch_no_228:;
        {
            PyObject *tmp_assign_source_473;
            PyObject *tmp_called_value_114;
            PyObject *tmp_args_value_114;
            PyObject *tmp_tuple_element_228;
            PyObject *tmp_kwargs_value_114;
            CHECK_OBJECT(tmp_class_creation_57__metaclass);
            tmp_called_value_114 = tmp_class_creation_57__metaclass;
            tmp_tuple_element_228 = mod_consts[193];
            tmp_args_value_114 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_114, 0, tmp_tuple_element_228);
            CHECK_OBJECT(tmp_class_creation_57__bases);
            tmp_tuple_element_228 = tmp_class_creation_57__bases;
            PyTuple_SET_ITEM0(tmp_args_value_114, 1, tmp_tuple_element_228);
            tmp_tuple_element_228 = locals_aiohttp$web_exceptions$$$class__57_HTTPNotExtended_436;
            PyTuple_SET_ITEM0(tmp_args_value_114, 2, tmp_tuple_element_228);
            CHECK_OBJECT(tmp_class_creation_57__class_decl_dict);
            tmp_kwargs_value_114 = tmp_class_creation_57__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 436;
            tmp_assign_source_473 = CALL_FUNCTION(tmp_called_value_114, tmp_args_value_114, tmp_kwargs_value_114);
            Py_DECREF(tmp_args_value_114);
            if (tmp_assign_source_473 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 436;

                goto try_except_handler_173;
            }
            assert(outline_56_var___class__ == NULL);
            outline_56_var___class__ = tmp_assign_source_473;
        }
        CHECK_OBJECT(outline_56_var___class__);
        tmp_assign_source_472 = outline_56_var___class__;
        Py_INCREF(tmp_assign_source_472);
        goto try_return_handler_173;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_173:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__57_HTTPNotExtended_436);
        locals_aiohttp$web_exceptions$$$class__57_HTTPNotExtended_436 = NULL;
        goto try_return_handler_172;
        // Exception handler code:
        try_except_handler_173:;
        exception_keeper_type_171 = exception_type;
        exception_keeper_value_171 = exception_value;
        exception_keeper_tb_171 = exception_tb;
        exception_keeper_lineno_171 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__57_HTTPNotExtended_436);
        locals_aiohttp$web_exceptions$$$class__57_HTTPNotExtended_436 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_171;
        exception_value = exception_keeper_value_171;
        exception_tb = exception_keeper_tb_171;
        exception_lineno = exception_keeper_lineno_171;

        goto try_except_handler_172;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_172:;
        CHECK_OBJECT(outline_56_var___class__);
        Py_DECREF(outline_56_var___class__);
        outline_56_var___class__ = NULL;
        goto outline_result_57;
        // Exception handler code:
        try_except_handler_172:;
        exception_keeper_type_172 = exception_type;
        exception_keeper_value_172 = exception_value;
        exception_keeper_tb_172 = exception_tb;
        exception_keeper_lineno_172 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_172;
        exception_value = exception_keeper_value_172;
        exception_tb = exception_keeper_tb_172;
        exception_lineno = exception_keeper_lineno_172;

        goto outline_exception_57;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_57:;
        exception_lineno = 436;
        goto try_except_handler_171;
        outline_result_57:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[193], tmp_assign_source_472);
    }
    goto try_end_59;
    // Exception handler code:
    try_except_handler_171:;
    exception_keeper_type_173 = exception_type;
    exception_keeper_value_173 = exception_value;
    exception_keeper_tb_173 = exception_tb;
    exception_keeper_lineno_173 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_57__bases_orig);
    tmp_class_creation_57__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_57__bases);
    tmp_class_creation_57__bases = NULL;
    Py_XDECREF(tmp_class_creation_57__class_decl_dict);
    tmp_class_creation_57__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_57__metaclass);
    tmp_class_creation_57__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_57__prepared);
    tmp_class_creation_57__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_173;
    exception_value = exception_keeper_value_173;
    exception_tb = exception_keeper_tb_173;
    exception_lineno = exception_keeper_lineno_173;

    goto frame_exception_exit_1;
    // End of try:
    try_end_59:;
    CHECK_OBJECT(tmp_class_creation_57__bases_orig);
    Py_DECREF(tmp_class_creation_57__bases_orig);
    tmp_class_creation_57__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_57__bases);
    Py_DECREF(tmp_class_creation_57__bases);
    tmp_class_creation_57__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_57__class_decl_dict);
    Py_DECREF(tmp_class_creation_57__class_decl_dict);
    tmp_class_creation_57__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_57__metaclass);
    Py_DECREF(tmp_class_creation_57__metaclass);
    tmp_class_creation_57__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_57__prepared);
    Py_DECREF(tmp_class_creation_57__prepared);
    tmp_class_creation_57__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_474;
        PyObject *tmp_tuple_element_229;
        tmp_tuple_element_229 = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[176]);

        if (unlikely(tmp_tuple_element_229 == NULL)) {
            tmp_tuple_element_229 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[176]);
        }

        if (tmp_tuple_element_229 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;

            goto try_except_handler_174;
        }
        tmp_assign_source_474 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_474, 0, tmp_tuple_element_229);
        assert(tmp_class_creation_58__bases_orig == NULL);
        tmp_class_creation_58__bases_orig = tmp_assign_source_474;
    }
    {
        PyObject *tmp_assign_source_475;
        PyObject *tmp_dircall_arg1_58;
        CHECK_OBJECT(tmp_class_creation_58__bases_orig);
        tmp_dircall_arg1_58 = tmp_class_creation_58__bases_orig;
        Py_INCREF(tmp_dircall_arg1_58);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_58};
            tmp_assign_source_475 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_475 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;

            goto try_except_handler_174;
        }
        assert(tmp_class_creation_58__bases == NULL);
        tmp_class_creation_58__bases = tmp_assign_source_475;
    }
    {
        PyObject *tmp_assign_source_476;
        tmp_assign_source_476 = PyDict_New();
        assert(tmp_class_creation_58__class_decl_dict == NULL);
        tmp_class_creation_58__class_decl_dict = tmp_assign_source_476;
    }
    {
        PyObject *tmp_assign_source_477;
        PyObject *tmp_metaclass_value_58;
        bool tmp_condition_result_343;
        PyObject *tmp_key_value_172;
        PyObject *tmp_dict_arg_value_172;
        PyObject *tmp_dict_arg_value_173;
        PyObject *tmp_key_value_173;
        nuitka_bool tmp_condition_result_344;
        int tmp_truth_name_58;
        PyObject *tmp_type_arg_115;
        PyObject *tmp_expression_value_303;
        PyObject *tmp_subscript_value_75;
        PyObject *tmp_bases_value_58;
        tmp_key_value_172 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_58__class_decl_dict);
        tmp_dict_arg_value_172 = tmp_class_creation_58__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_172, tmp_key_value_172);
        assert(!(tmp_res == -1));
        tmp_condition_result_343 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_343 != false) {
            goto condexpr_true_115;
        } else {
            goto condexpr_false_115;
        }
        condexpr_true_115:;
        CHECK_OBJECT(tmp_class_creation_58__class_decl_dict);
        tmp_dict_arg_value_173 = tmp_class_creation_58__class_decl_dict;
        tmp_key_value_173 = mod_consts[57];
        tmp_metaclass_value_58 = DICT_GET_ITEM0(tmp_dict_arg_value_173, tmp_key_value_173);
        if (tmp_metaclass_value_58 == NULL) {
            tmp_metaclass_value_58 = Py_None;
        }
        assert(!(tmp_metaclass_value_58 == NULL));
        Py_INCREF(tmp_metaclass_value_58);
        goto condexpr_end_115;
        condexpr_false_115:;
        CHECK_OBJECT(tmp_class_creation_58__bases);
        tmp_truth_name_58 = CHECK_IF_TRUE(tmp_class_creation_58__bases);
        if (tmp_truth_name_58 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;

            goto try_except_handler_174;
        }
        tmp_condition_result_344 = tmp_truth_name_58 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_344 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_116;
        } else {
            goto condexpr_false_116;
        }
        condexpr_true_116:;
        CHECK_OBJECT(tmp_class_creation_58__bases);
        tmp_expression_value_303 = tmp_class_creation_58__bases;
        tmp_subscript_value_75 = mod_consts[39];
        tmp_type_arg_115 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_303, tmp_subscript_value_75, 0);
        if (tmp_type_arg_115 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;

            goto try_except_handler_174;
        }
        tmp_metaclass_value_58 = BUILTIN_TYPE1(tmp_type_arg_115);
        Py_DECREF(tmp_type_arg_115);
        if (tmp_metaclass_value_58 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;

            goto try_except_handler_174;
        }
        goto condexpr_end_116;
        condexpr_false_116:;
        tmp_metaclass_value_58 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_58);
        condexpr_end_116:;
        condexpr_end_115:;
        CHECK_OBJECT(tmp_class_creation_58__bases);
        tmp_bases_value_58 = tmp_class_creation_58__bases;
        tmp_assign_source_477 = SELECT_METACLASS(tmp_metaclass_value_58, tmp_bases_value_58);
        Py_DECREF(tmp_metaclass_value_58);
        if (tmp_assign_source_477 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;

            goto try_except_handler_174;
        }
        assert(tmp_class_creation_58__metaclass == NULL);
        tmp_class_creation_58__metaclass = tmp_assign_source_477;
    }
    {
        bool tmp_condition_result_345;
        PyObject *tmp_key_value_174;
        PyObject *tmp_dict_arg_value_174;
        tmp_key_value_174 = mod_consts[57];
        CHECK_OBJECT(tmp_class_creation_58__class_decl_dict);
        tmp_dict_arg_value_174 = tmp_class_creation_58__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_174, tmp_key_value_174);
        assert(!(tmp_res == -1));
        tmp_condition_result_345 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_345 != false) {
            goto branch_yes_229;
        } else {
            goto branch_no_229;
        }
    }
    branch_yes_229:;
    CHECK_OBJECT(tmp_class_creation_58__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_58__class_decl_dict;
    tmp_dictdel_key = mod_consts[57];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 440;

        goto try_except_handler_174;
    }
    branch_no_229:;
    {
        nuitka_bool tmp_condition_result_346;
        PyObject *tmp_expression_value_304;
        CHECK_OBJECT(tmp_class_creation_58__metaclass);
        tmp_expression_value_304 = tmp_class_creation_58__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_304, mod_consts[58]);
        tmp_condition_result_346 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_346 == NUITKA_BOOL_TRUE) {
            goto branch_yes_230;
        } else {
            goto branch_no_230;
        }
    }
    branch_yes_230:;
    {
        PyObject *tmp_assign_source_478;
        PyObject *tmp_called_value_115;
        PyObject *tmp_expression_value_305;
        PyObject *tmp_args_value_115;
        PyObject *tmp_tuple_element_230;
        PyObject *tmp_kwargs_value_115;
        CHECK_OBJECT(tmp_class_creation_58__metaclass);
        tmp_expression_value_305 = tmp_class_creation_58__metaclass;
        tmp_called_value_115 = LOOKUP_ATTRIBUTE(tmp_expression_value_305, mod_consts[58]);
        if (tmp_called_value_115 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;

            goto try_except_handler_174;
        }
        tmp_tuple_element_230 = mod_consts[195];
        tmp_args_value_115 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_115, 0, tmp_tuple_element_230);
        CHECK_OBJECT(tmp_class_creation_58__bases);
        tmp_tuple_element_230 = tmp_class_creation_58__bases;
        PyTuple_SET_ITEM0(tmp_args_value_115, 1, tmp_tuple_element_230);
        CHECK_OBJECT(tmp_class_creation_58__class_decl_dict);
        tmp_kwargs_value_115 = tmp_class_creation_58__class_decl_dict;
        frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 440;
        tmp_assign_source_478 = CALL_FUNCTION(tmp_called_value_115, tmp_args_value_115, tmp_kwargs_value_115);
        Py_DECREF(tmp_called_value_115);
        Py_DECREF(tmp_args_value_115);
        if (tmp_assign_source_478 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;

            goto try_except_handler_174;
        }
        assert(tmp_class_creation_58__prepared == NULL);
        tmp_class_creation_58__prepared = tmp_assign_source_478;
    }
    {
        bool tmp_condition_result_347;
        PyObject *tmp_operand_value_58;
        PyObject *tmp_expression_value_306;
        CHECK_OBJECT(tmp_class_creation_58__prepared);
        tmp_expression_value_306 = tmp_class_creation_58__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_306, mod_consts[60]);
        tmp_operand_value_58 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_58);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;

            goto try_except_handler_174;
        }
        tmp_condition_result_347 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_347 != false) {
            goto branch_yes_231;
        } else {
            goto branch_no_231;
        }
    }
    branch_yes_231:;
    {
        PyObject *tmp_raise_type_58;
        PyObject *tmp_raise_value_58;
        PyObject *tmp_left_value_58;
        PyObject *tmp_right_value_58;
        PyObject *tmp_tuple_element_231;
        PyObject *tmp_getattr_target_58;
        PyObject *tmp_getattr_attr_58;
        PyObject *tmp_getattr_default_58;
        tmp_raise_type_58 = PyExc_TypeError;
        tmp_left_value_58 = mod_consts[61];
        CHECK_OBJECT(tmp_class_creation_58__metaclass);
        tmp_getattr_target_58 = tmp_class_creation_58__metaclass;
        tmp_getattr_attr_58 = mod_consts[62];
        tmp_getattr_default_58 = mod_consts[63];
        tmp_tuple_element_231 = BUILTIN_GETATTR(tmp_getattr_target_58, tmp_getattr_attr_58, tmp_getattr_default_58);
        if (tmp_tuple_element_231 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;

            goto try_except_handler_174;
        }
        tmp_right_value_58 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_307;
            PyObject *tmp_type_arg_116;
            PyTuple_SET_ITEM(tmp_right_value_58, 0, tmp_tuple_element_231);
            CHECK_OBJECT(tmp_class_creation_58__prepared);
            tmp_type_arg_116 = tmp_class_creation_58__prepared;
            tmp_expression_value_307 = BUILTIN_TYPE1(tmp_type_arg_116);
            assert(!(tmp_expression_value_307 == NULL));
            tmp_tuple_element_231 = LOOKUP_ATTRIBUTE(tmp_expression_value_307, mod_consts[62]);
            Py_DECREF(tmp_expression_value_307);
            if (tmp_tuple_element_231 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 440;

                goto tuple_build_exception_58;
            }
            PyTuple_SET_ITEM(tmp_right_value_58, 1, tmp_tuple_element_231);
        }
        goto tuple_build_noexception_58;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_58:;
        Py_DECREF(tmp_right_value_58);
        goto try_except_handler_174;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_58:;
        tmp_raise_value_58 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_58, tmp_right_value_58);
        Py_DECREF(tmp_right_value_58);
        if (tmp_raise_value_58 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;

            goto try_except_handler_174;
        }
        exception_type = tmp_raise_type_58;
        Py_INCREF(tmp_raise_type_58);
        exception_value = tmp_raise_value_58;
        exception_lineno = 440;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_174;
    }
    branch_no_231:;
    goto branch_end_230;
    branch_no_230:;
    {
        PyObject *tmp_assign_source_479;
        tmp_assign_source_479 = PyDict_New();
        assert(tmp_class_creation_58__prepared == NULL);
        tmp_class_creation_58__prepared = tmp_assign_source_479;
    }
    branch_end_230:;
    {
        PyObject *tmp_assign_source_480;
        {
            PyObject *tmp_set_locals_58;
            CHECK_OBJECT(tmp_class_creation_58__prepared);
            tmp_set_locals_58 = tmp_class_creation_58__prepared;
            locals_aiohttp$web_exceptions$$$class__58_HTTPNetworkAuthenticationRequired_440 = tmp_set_locals_58;
            Py_INCREF(tmp_set_locals_58);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__58_HTTPNetworkAuthenticationRequired_440, mod_consts[65], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;

            goto try_except_handler_176;
        }
        tmp_dictset_value = mod_consts[195];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__58_HTTPNetworkAuthenticationRequired_440, mod_consts[66], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;

            goto try_except_handler_176;
        }
        if (isFrameUnusable(cache_frame_40a2aafd85dbb744639560e9d429f0b3_54)) {
            Py_XDECREF(cache_frame_40a2aafd85dbb744639560e9d429f0b3_54);

#if _DEBUG_REFCOUNTS
            if (cache_frame_40a2aafd85dbb744639560e9d429f0b3_54 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_40a2aafd85dbb744639560e9d429f0b3_54 = MAKE_FUNCTION_FRAME(codeobj_40a2aafd85dbb744639560e9d429f0b3, module_aiohttp$web_exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_40a2aafd85dbb744639560e9d429f0b3_54->m_type_description == NULL);
        frame_40a2aafd85dbb744639560e9d429f0b3_54 = cache_frame_40a2aafd85dbb744639560e9d429f0b3_54;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_40a2aafd85dbb744639560e9d429f0b3_54);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_40a2aafd85dbb744639560e9d429f0b3_54) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[196];
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__58_HTTPNetworkAuthenticationRequired_440, mod_consts[6], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 441;
            type_description_2 = "o";
            goto frame_exception_exit_54;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_40a2aafd85dbb744639560e9d429f0b3_54);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_53;

        frame_exception_exit_54:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_40a2aafd85dbb744639560e9d429f0b3_54);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_40a2aafd85dbb744639560e9d429f0b3_54, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_40a2aafd85dbb744639560e9d429f0b3_54->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_40a2aafd85dbb744639560e9d429f0b3_54, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_40a2aafd85dbb744639560e9d429f0b3_54,
            type_description_2,
            outline_57_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_40a2aafd85dbb744639560e9d429f0b3_54 == cache_frame_40a2aafd85dbb744639560e9d429f0b3_54) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_40a2aafd85dbb744639560e9d429f0b3_54);
            cache_frame_40a2aafd85dbb744639560e9d429f0b3_54 = NULL;
        }

        assertFrameObject(frame_40a2aafd85dbb744639560e9d429f0b3_54);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_53;

        frame_no_exception_53:;
        goto skip_nested_handling_53;
        nested_frame_exit_53:;

        goto try_except_handler_176;
        skip_nested_handling_53:;
        {
            nuitka_bool tmp_condition_result_348;
            PyObject *tmp_cmp_expr_left_58;
            PyObject *tmp_cmp_expr_right_58;
            CHECK_OBJECT(tmp_class_creation_58__bases);
            tmp_cmp_expr_left_58 = tmp_class_creation_58__bases;
            CHECK_OBJECT(tmp_class_creation_58__bases_orig);
            tmp_cmp_expr_right_58 = tmp_class_creation_58__bases_orig;
            tmp_condition_result_348 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_58, tmp_cmp_expr_right_58);
            if (tmp_condition_result_348 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 440;

                goto try_except_handler_176;
            }
            if (tmp_condition_result_348 == NUITKA_BOOL_TRUE) {
                goto branch_yes_232;
            } else {
                goto branch_no_232;
            }
            assert(tmp_condition_result_348 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_232:;
        CHECK_OBJECT(tmp_class_creation_58__bases_orig);
        tmp_dictset_value = tmp_class_creation_58__bases_orig;
        tmp_res = PyObject_SetItem(locals_aiohttp$web_exceptions$$$class__58_HTTPNetworkAuthenticationRequired_440, mod_consts[77], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;

            goto try_except_handler_176;
        }
        branch_no_232:;
        {
            PyObject *tmp_assign_source_481;
            PyObject *tmp_called_value_116;
            PyObject *tmp_args_value_116;
            PyObject *tmp_tuple_element_232;
            PyObject *tmp_kwargs_value_116;
            CHECK_OBJECT(tmp_class_creation_58__metaclass);
            tmp_called_value_116 = tmp_class_creation_58__metaclass;
            tmp_tuple_element_232 = mod_consts[195];
            tmp_args_value_116 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_116, 0, tmp_tuple_element_232);
            CHECK_OBJECT(tmp_class_creation_58__bases);
            tmp_tuple_element_232 = tmp_class_creation_58__bases;
            PyTuple_SET_ITEM0(tmp_args_value_116, 1, tmp_tuple_element_232);
            tmp_tuple_element_232 = locals_aiohttp$web_exceptions$$$class__58_HTTPNetworkAuthenticationRequired_440;
            PyTuple_SET_ITEM0(tmp_args_value_116, 2, tmp_tuple_element_232);
            CHECK_OBJECT(tmp_class_creation_58__class_decl_dict);
            tmp_kwargs_value_116 = tmp_class_creation_58__class_decl_dict;
            frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame.f_lineno = 440;
            tmp_assign_source_481 = CALL_FUNCTION(tmp_called_value_116, tmp_args_value_116, tmp_kwargs_value_116);
            Py_DECREF(tmp_args_value_116);
            if (tmp_assign_source_481 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 440;

                goto try_except_handler_176;
            }
            assert(outline_57_var___class__ == NULL);
            outline_57_var___class__ = tmp_assign_source_481;
        }
        CHECK_OBJECT(outline_57_var___class__);
        tmp_assign_source_480 = outline_57_var___class__;
        Py_INCREF(tmp_assign_source_480);
        goto try_return_handler_176;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_176:;
        Py_DECREF(locals_aiohttp$web_exceptions$$$class__58_HTTPNetworkAuthenticationRequired_440);
        locals_aiohttp$web_exceptions$$$class__58_HTTPNetworkAuthenticationRequired_440 = NULL;
        goto try_return_handler_175;
        // Exception handler code:
        try_except_handler_176:;
        exception_keeper_type_174 = exception_type;
        exception_keeper_value_174 = exception_value;
        exception_keeper_tb_174 = exception_tb;
        exception_keeper_lineno_174 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_aiohttp$web_exceptions$$$class__58_HTTPNetworkAuthenticationRequired_440);
        locals_aiohttp$web_exceptions$$$class__58_HTTPNetworkAuthenticationRequired_440 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_174;
        exception_value = exception_keeper_value_174;
        exception_tb = exception_keeper_tb_174;
        exception_lineno = exception_keeper_lineno_174;

        goto try_except_handler_175;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_175:;
        CHECK_OBJECT(outline_57_var___class__);
        Py_DECREF(outline_57_var___class__);
        outline_57_var___class__ = NULL;
        goto outline_result_58;
        // Exception handler code:
        try_except_handler_175:;
        exception_keeper_type_175 = exception_type;
        exception_keeper_value_175 = exception_value;
        exception_keeper_tb_175 = exception_tb;
        exception_keeper_lineno_175 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_175;
        exception_value = exception_keeper_value_175;
        exception_tb = exception_keeper_tb_175;
        exception_lineno = exception_keeper_lineno_175;

        goto outline_exception_58;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_58:;
        exception_lineno = 440;
        goto try_except_handler_174;
        outline_result_58:;
        UPDATE_STRING_DICT1(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)mod_consts[195], tmp_assign_source_480);
    }
    goto try_end_60;
    // Exception handler code:
    try_except_handler_174:;
    exception_keeper_type_176 = exception_type;
    exception_keeper_value_176 = exception_value;
    exception_keeper_tb_176 = exception_tb;
    exception_keeper_lineno_176 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_58__bases_orig);
    tmp_class_creation_58__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_58__bases);
    tmp_class_creation_58__bases = NULL;
    Py_XDECREF(tmp_class_creation_58__class_decl_dict);
    tmp_class_creation_58__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_58__metaclass);
    tmp_class_creation_58__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_58__prepared);
    tmp_class_creation_58__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_176;
    exception_value = exception_keeper_value_176;
    exception_tb = exception_keeper_tb_176;
    exception_lineno = exception_keeper_lineno_176;

    goto frame_exception_exit_1;
    // End of try:
    try_end_60:;

    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION(frame_4cc4ce6283075c7e22e7df36f495c03e);
#endif
    popFrameStack();

    assertFrameObject(frame_4cc4ce6283075c7e22e7df36f495c03e);

    goto frame_no_exception_54;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_4cc4ce6283075c7e22e7df36f495c03e);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_4cc4ce6283075c7e22e7df36f495c03e, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_4cc4ce6283075c7e22e7df36f495c03e->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_4cc4ce6283075c7e22e7df36f495c03e, exception_lineno);
    }

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto module_exception_exit;

    frame_no_exception_54:;
    CHECK_OBJECT(tmp_class_creation_58__bases_orig);
    Py_DECREF(tmp_class_creation_58__bases_orig);
    tmp_class_creation_58__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_58__bases);
    Py_DECREF(tmp_class_creation_58__bases);
    tmp_class_creation_58__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_58__class_decl_dict);
    Py_DECREF(tmp_class_creation_58__class_decl_dict);
    tmp_class_creation_58__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_58__metaclass);
    Py_DECREF(tmp_class_creation_58__metaclass);
    tmp_class_creation_58__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_58__prepared);
    Py_DECREF(tmp_class_creation_58__prepared);
    tmp_class_creation_58__prepared = NULL;

    // Report to PGO about leaving the module without error.
    PGO_onModuleExit("aiohttp.web_exceptions", false);

    return module_aiohttp$web_exceptions;
    module_exception_exit:

#if defined(_NUITKA_MODULE) && 0
    {
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_aiohttp$web_exceptions, (Nuitka_StringObject *)const_str_plain___name__);

        if (module_name != NULL) {
            Nuitka_DelModule(module_name);
        }
    }
#endif
    PGO_onModuleExit("aiohttp$web_exceptions", false);

    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);
    return NULL;
}
